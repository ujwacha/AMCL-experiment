(undo-tree-save-format-version . 1)
"73337c5f2b6317b3e4504f3650fce5160ccc1ca5"
[nil nil nil nil (26144 419 515144 415000) 0 nil]
([nil nil ((#("world" 0 5 (fontified t face font-lock-string-face)) . 34) (undo-tree-id56 . -5) (undo-tree-id57 . -4) (t 26144 336 656179 364000)) nil (26144 419 515139 389000) 0 nil])
([nil nil ((47 . 50) (#("t" 0 1 (fontified t face font-lock-string-face)) . -47) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 48 (34 . 48)) nil (26144 426 879866 449000) 0 nil])
([nil nil ((1 . 6) (t 26144 419 527715 242000)) nil (26144 747 853161 603000) 0 nil] [nil nil ((1 . 4) (t 26144 419 527715 242000)) ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1) (undo-tree-id58 . 3)) (26144 426 878399 885000) 0 nil])
([nil nil ((17 . 21) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 17) (17 . 21) (16 . 18) (2 . 17)) nil (26144 747 853159 150000) 0 nil])
nil
([nil nil ((28 . 33) (27 . 28) (#(";" 0 1 (fontified t)) . -27) (undo-tree-id297 . -1) 28 (#("
" 0 1 (fontified t)) . -28) (undo-tree-id298 . -1) (#(" " 0 1 (fontified t)) . -29) (undo-tree-id299 . -1) (#(" " 0 1 (fontified t)) . -30) (undo-tree-id300 . -1) (#(" " 0 1 (fontified t)) . -31) (undo-tree-id301 . -1) (#(" " 0 1 (fontified t)) . -32) (undo-tree-id302 . -1) 33 (28 . 33) (27 . 28) (24 . 27) (#("f" 0 1 (fontified nil)) . 24) (24 . 25) (#("f64" 0 3 (fontified nil)) . -24) (24 . 27) (#("f" 0 1 (fontified t)) . -24) (undo-tree-id303 . -1) (undo-tree-id304 . -1) 25 (21 . 25)) nil (26144 747 853151 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32 . 33) (#("
" 0 1 (fontified nil)) . -40) (28 . 41) 20) nil (26144 747 853130 694000) 0 nil])
([nil nil ((33 . 34) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . 33)) nil (26144 747 853127 619000) 0 nil])
([nil nil ((48 . 51) (#("f" 0 1 (fontified nil)) . 48) (48 . 49) (#("f64" 0 3 (fontified nil)) . -48) (48 . 51) (#("f" 0 1 (fontified t)) . -48) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 49 (45 . 49)) nil (26144 747 853124 90000) 0 nil])
([nil nil ((51 . 52)) nil (26144 747 853116 699000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -29) (undo-tree-id293 . -1) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -30) (undo-tree-id294 . -1) 31 (28 . 31)) nil (26144 747 853113 929000) 0 nil])
([nil nil ((67 . 74) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -67) (undo-tree-id292 . -1) 68 (53 . 68)) nil (26144 747 853107 553000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 73)) nil (26144 747 853102 590000) 0 nil])
([nil nil ((76 . 77) (75 . 76)) nil (26144 747 853100 691000) 0 nil])
([nil nil ((90 . 94) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 90) (90 . 94) (89 . 91) (87 . 90) (82 . 87) (#("Rob" 0 3 (fontified nil)) . 82) (82 . 85) (#("Robot" 0 5 (fontified nil)) . -82) (82 . 87) (#("Rob" 0 3 (fontified t face font-lock-type-face)) . -82) (undo-tree-id270 . -3) (undo-tree-id271 . -3) 85 (83 . 85) (#("u" 0 1 (fontified t face font-lock-type-face)) . -83) (undo-tree-id272 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -84) (undo-tree-id273 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -85) (undo-tree-id274 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -86) (undo-tree-id275 . -1) (#("D" 0 1 (fontified t face font-lock-type-face)) . -87) (undo-tree-id276 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -88) (undo-tree-id277 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -89) (undo-tree-id278 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -90) (undo-tree-id279 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -91) (undo-tree-id280 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -92) (undo-tree-id281 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -93) (undo-tree-id282 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -94) (undo-tree-id283 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -95) (undo-tree-id284 . -1) 96 (82 . 96) (#("Ro" 0 2 (fontified nil)) . 82) (82 . 84) (#("RustcDecodable" 0 14 (fontified nil)) . -82) (82 . 96) (#("Ro" 0 2 (fontified t face font-lock-type-face)) . -82) (undo-tree-id285 . -1) (undo-tree-id286 . -2) (undo-tree-id287 . -2) 84 (82 . 84) (#("s" 0 1 (fontified t)) . -82) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("t" 0 1 (fontified t)) . -83) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 84 (82 . 84) (78 . 82) (77 . 78)) nil (26144 747 853088 972000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1)) nil (26144 747 853029 494000) 0 nil])
([nil nil ((91 . 95) (#("    " 0 4 (fontified nil)) . 90) (undo-tree-id268 . -4) (90 . 95) (#("    " 0 4 (fontified nil)) . 89) (undo-tree-id269 . -4) (93 . 94)) nil (26144 747 853026 621000) 0 nil])
([nil nil ((90 . 94) (#("    " 0 4 (fontified nil)) . 89) (undo-tree-id267 . -4) (93 . 94) (89 . 93)) nil (26144 747 853019 873000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 89)) nil (26144 747 853014 52000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 89) (undo-tree-id265 . 1) (undo-tree-id266 . -4)) nil (26144 747 853011 637000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -93) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -94) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t)) . -95) (undo-tree-id233 . -1) (#("g" 0 1 (fontified t face font-lock-function-name-face)) . -96) (undo-tree-id234 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -97) (undo-tree-id235 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -98) (undo-tree-id236 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -99) (undo-tree-id237 . -1) 100 (99 . 100) (#(" " 0 1 (fontified t)) . -99) (undo-tree-id238 . -1) (#("_" 0 1 (fontified t)) . -100) (undo-tree-id239 . -1) 101 (93 . 101) (#("i" 0 1 (fontified t)) . -93) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("m" 0 1 (fontified t)) . -94) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("p" 0 1 (fontified t)) . -95) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . -96) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t)) . -97) (undo-tree-id250 . -1) 98 (94 . 98) (93 . 94) (#("g" 0 1 (fontified t)) . -93) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("e" 0 1 (fontified t)) . -94) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("t" 0 1 (fontified t)) . -95) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 96 (93 . 96) (#("i" 0 1 (fontified t)) . -93) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("m" 0 1 (fontified t)) . -94) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 95 (94 . 95) (93 . 94) (89 . 93)) nil (26144 747 852996 669000) 0 nil])
([nil nil ((75 . 77)) nil (26144 747 852929 917000) 0 nil])
([nil nil ((95 . 99) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 95) (95 . 99) (94 . 96) (92 . 95) (#("
" 0 1 (fontified t)) . -92) (undo-tree-id214 . -1) (#(" " 0 1 (fontified t)) . -93) (undo-tree-id215 . -1) (#(" " 0 1 (fontified t)) . -94) (undo-tree-id216 . -1) (#(" " 0 1 (fontified t)) . -95) (undo-tree-id217 . -1) (#(" " 0 1 (fontified t)) . -96) (undo-tree-id218 . -1) 97 (93 . 97) (#(" " 0 1 (fontified nil)) . 92) (undo-tree-id219 . -1) (93 . 94) (82 . 93) (#("f" 0 1 (fontified t)) . -82) (undo-tree-id220 . -1) (#("i" 0 1 (fontified t)) . -83) (undo-tree-id221 . -1) (#("l" 0 1 (fontified t)) . -84) (undo-tree-id222 . -1) 85 (79 . 85) (#("i" 0 1 (fontified t)) . -79) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("n" 0 1 (fontified t)) . -80) (undo-tree-id226 . -1) (#("t" 0 1 (fontified t)) . -81) (undo-tree-id227 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id228 . -1) 83 (76 . 83)) nil (26144 747 852922 548000) 0 nil])
([nil nil ((131 . 133) (128 . 131) (115 . 129) (107 . 115) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -107) (undo-tree-id202 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -108) (undo-tree-id203 . -1) 109 (106 . 109) (#("x" 0 1 (fontified t face font-lock-function-name-face)) . -106) (undo-tree-id204 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -107) (undo-tree-id205 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -108) (undo-tree-id206 . -1) 109 (105 . 109) (#("-" 0 1 (fontified t)) . -105) (undo-tree-id207 . -1) 106 (105 . 106) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -105) (undo-tree-id208 . -1) 106 (105 . 106) (#(")" 0 1 (fontified nil face font-lock-function-name-face)) . -105) (105 . 106) (#(" " 0 1 (fontified t)) . -105) (undo-tree-id209 . -1) 106 (101 . 106) (#(" " 0 1 (fontified t)) . -101) (undo-tree-id210 . -1) 102 (#("x" 0 1 (fontified t face font-lock-function-name-face)) . -102) (undo-tree-id211 . -1) 103 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -103) (undo-tree-id212 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 104) (103 . 105) (#(" " 0 1 (fontified t)) . -103) (undo-tree-id213 . -1) 104 (99 . 104)) nil (26144 747 852882 324000) 0 nil])
([nil nil ((137 . 138) (138 . 142) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 137) (137 . 138) (136 . 138) (134 . 137)) nil (26144 747 852841 75000) 0 nil])
([nil nil ((74 . 77)) nil (26144 747 852837 581000) 0 nil])
([nil nil ((84 . 96) (83 . 84) (78 . 83) (76 . 78)) nil (26144 747 852835 465000) 0 nil])
([nil nil ((#("lidar" 0 5 (fontified t face font-lock-type-face)) . 83) (undo-tree-id201 . -4)) nil (26144 747 852832 250000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-type-face)) . 83)) nil (26144 747 852829 98000) 0 nil])
([nil nil ((#("measure" 0 7 (fontified t face font-lock-type-face)) . 83) (undo-tree-id200 . -6)) nil (26144 747 852827 67000) 0 nil])
([nil nil ((103 . 107) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 103) (103 . 107) (102 . 104) (100 . 103) (#(" " 0 1 (fontified t)) . -100) (undo-tree-id194 . -1) 101 (97 . 101) (#("r" 0 1 (fontified t face font-lock-type-face)) . -97) (undo-tree-id195 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -98) (undo-tree-id196 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -99) (undo-tree-id197 . -1) (#(" " 0 1 (fontified t)) . -100) (undo-tree-id198 . -1) 101 (98 . 101) (#("t" 0 1 (fontified t face font-lock-type-face)) . -98) (undo-tree-id199 . -1) 99 (92 . 99) (82 . 92)) nil (26144 747 852820 43000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-type-face)) . 88)) nil (26144 747 852802 945000) 0 nil])
([nil nil ((130 . 133) (#("f" 0 1 (fontified nil)) . 130) (130 . 131) (#("f64" 0 3 (fontified nil)) . -130) (130 . 133) (#("f" 0 1 (fontified t)) . -130) (undo-tree-id183 . -1) (undo-tree-id184 . -1) 131 (130 . 131) (128 . 130) (125 . 128) (#("f" 0 1 (fontified nil)) . 125) (125 . 126) (#("f64" 0 3 (fontified nil)) . -125) (125 . 128) (#("f" 0 1 (fontified t)) . -125) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 126 (125 . 126) (124 . 126) (apply yas--snippet-revive 120 125 #s(yas--snippet nil nil #s(yas--exit 124 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 124 nil) 0 nil nil nil nil)) (120 . 125) (#("Vec<$0>" 0 7 (fontified nil)) . 120) (120 . 127) (#("Ve" 0 2 (fontified nil)) . 120) (120 . 122) (#("Vec<…>" 0 6 (fontified nil)) . -120) (120 . 126) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -120) (undo-tree-id187 . -2) (undo-tree-id188 . -2) 122 (118 . 122) (#(" " 0 1 (fontified t)) . -118) (undo-tree-id189 . -1) 119 (113 . 119) (#("s" 0 1 (fontified t)) . -113) (undo-tree-id190 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id191 . -1) 115 (113 . 115) (#("n" 0 1 (fontified t)) . -113) (undo-tree-id192 . -1) (#("t" 0 1 (fontified t)) . -114) (undo-tree-id193 . -1) 115 (113 . 115) (106 . 113)) nil (26144 747 852792 310000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-comment-face)) . -166) (undo-tree-id139 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -167) (undo-tree-id140 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -168) (undo-tree-id141 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -169) (undo-tree-id142 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -170) (undo-tree-id143 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -171) (undo-tree-id144 . -1) 172 (166 . 172) (166 . 167) (163 . 166) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -163) (undo-tree-id145 . -1) 164 (149 . 164) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -149) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 150 (139 . 150) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -140) (undo-tree-id150 . -1) 141 (138 . 141) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -138) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id153 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -140) (undo-tree-id154 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -141) (undo-tree-id155 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -142) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -143) (undo-tree-id157 . -1) 144 (138 . 144) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -138) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -140) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -141) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -142) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -143) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -144) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -145) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -146) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -147) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -148) (undo-tree-id180 . -1) 149 (139 . 149) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id181 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -140) (undo-tree-id182 . -1) 141 (135 . 141)) nil (26144 747 852686 181000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . 166) (undo-tree-id137 . 1) (undo-tree-id138 . -1)) nil (26144 747 852272 365000) 0 nil])
([nil nil ((1 . 3)) nil (26144 747 852267 920000) 0 nil])
([nil nil ((13 . 18) (8 . 13) (5 . 8) (#("t" 0 1 (fontified t)) . -5) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 6 (2 . 6) (1 . 2)) nil (26144 747 852265 137000) 0 nil])
([nil nil ((8 . 9) (#("c" 0 1 (fontified t face font-lock-type-face)) . 8)) nil (26144 747 852258 281000) 0 nil])
([nil nil ((21 . 25) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 21) (21 . 25) (20 . 22) (18 . 21)) nil (26144 747 852255 507000) 0 nil])
([nil nil ((28 . 31) (#("f" 0 1 (fontified nil)) . 28) (28 . 29) (#("f64" 0 3 (fontified nil)) . -28) (28 . 31) (#("f" 0 1 (fontified t)) . -28) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 29 (26 . 29) (#(";" 0 1 (fontified t)) . -26) (undo-tree-id134 . -1) 27 (25 . 27)) nil (26144 747 852250 67000) 0 nil])
([nil nil ((31 . 32)) nil (26144 747 852240 652000) 0 nil])
([nil nil ((31 . 32) (#(";" 0 1 (fontified t)) . -31) (undo-tree-id131 . -1) 32) nil (26144 747 852237 995000) 0 nil])
([nil nil ((43 . 44) (40 . 43) (#("f" 0 1 (fontified nil)) . 40) (40 . 41) (#("f64" 0 3 (fontified nil)) . -40) (40 . 43) (#("f" 0 1 (fontified t)) . -40) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 41 (37 . 41) (32 . 37)) nil (26144 747 852232 205000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 43)) nil (26144 747 852223 527000) 0 nil])
([nil nil ((43 . 44)) nil (26144 747 852221 877000) 0 nil])
([nil nil ((#(", 
    y: f64," 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t) 6 7 (rear-nonsticky t fontified t) 7 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 13 (fontified t face font-lock-type-face) 13 14 (fontified t)) . 73) (undo-tree-id125 . -13) (undo-tree-id126 . -13) (undo-tree-id127 . -13) (undo-tree-id128 . -13)) nil (26144 747 852219 630000) 0 nil])
([nil nil ((#("    x: f64
" 0 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face) 5 7 (fontified t) 7 10 (fontified t face font-lock-type-face) 10 11 (fontified t)) . 63) (undo-tree-id118 . -10) (undo-tree-id119 . -9) (undo-tree-id120 . -10) (undo-tree-id121 . -10) (undo-tree-id122 . 1) (undo-tree-id123 . -10) (undo-tree-id124 . -10) 72) nil (26144 747 852210 678000) 0 nil])
([nil nil ((87 . 88) (77 . 87) (#("C" 0 1 (fontified nil)) . 77) (77 . 78) (#("Coordinate" 0 10 (fontified nil)) . -77) (77 . 87) (#("C" 0 1 (fontified t face font-lock-type-face)) . -77) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 78 (67 . 78) (#("l" 0 1 (fontified t)) . -67) (undo-tree-id114 . -1) (#("o" 0 1 (fontified t)) . -68) (undo-tree-id115 . -1) (#("c" 0 1 (fontified t)) . -69) (undo-tree-id116 . -1) (#("a" 0 1 (fontified t)) . -70) (undo-tree-id117 . -1) 71 (67 . 71) (62 . 67)) nil (26144 747 852191 629000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-variable-name-face)) . 93)) nil (26144 747 852175 256000) 0 nil])
([nil nil ((93 . 104)) nil (26144 747 852173 549000) 0 nil])
([nil nil ((326 . 328)) nil (26144 747 852171 904000) 0 nil])
([nil nil ((301 . 303)) nil (26144 747 852170 177000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-2-face)) 5 6 (fontified t)) . 293) (undo-tree-id74 . -5) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6)) nil (26144 747 852163 432000) 0 nil])
([nil nil ((308 . 309) (#(";" 0 1 (fontified t)) . -308) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 309 (308 . 309) (292 . 308) (#("Li" 0 2 (fontified nil)) . 292) (292 . 294) (#("LidarMeasurement" 0 16 (fontified nil)) . -292) (292 . 308) (#("Li" 0 2 (fontified t face font-lock-type-face)) . -292) (undo-tree-id71 . -2) (undo-tree-id72 . -2) 294 (293 . 294) (289 . 293) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -289) (undo-tree-id73 . -1) 290) nil (26144 747 852093 713000) 0 nil])
([nil nil ((#("	
" 0 2 (fontified t)) . 310) (undo-tree-id466 . -1) (t 26144 747 870938 277000)) nil (26144 837 520168 280000) 0 nil])
([nil nil ((1 . 3)) nil (26144 837 520164 900000) 0 nil])
([nil nil ((8 . 12) (3 . 8) (1 . 3)) nil (26144 837 520162 882000) 0 nil])
([nil nil ((#("f64" 0 3 (fontified t face font-lock-type-face)) . 196) (undo-tree-id464 . -2) (undo-tree-id465 . -3)) nil (26144 837 520159 174000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 195) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1)) nil (26144 837 520150 693000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 195) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1)) nil (26144 837 519867 741000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 195) (undo-tree-id425 . -1) (undo-tree-id426 . -1)) nil (26144 837 519860 539000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-type-face)) . 195) (undo-tree-id423 . -1) (undo-tree-id424 . -1)) nil (26144 837 519855 682000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . 195) (undo-tree-id421 . -1) (undo-tree-id422 . -1)) nil (26144 837 519850 552000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . 195) (undo-tree-id419 . -1) (undo-tree-id420 . -1)) nil (26144 837 519844 903000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 195) (undo-tree-id417 . -1) (undo-tree-id418 . -1)) nil (26144 837 519837 66000) 0 nil])
([nil nil ((195 . 205) (#("Coo" 0 3 (fontified nil)) . 195) (195 . 198) (#("Coordinate" 0 10 (fontified nil)) . -195) (195 . 205) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -195) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) 198 (195 . 198)) nil (26144 837 519812 91000) 0 nil])
([nil nil ((165 . 166) (#(";" 0 1 (fontified t)) . -165) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) 166 (165 . 166) (162 . 165) (#("f" 0 1 (fontified nil)) . 162) (162 . 163) (#("f64" 0 3 (fontified nil)) . -162) (162 . 165) (#("f" 0 1 (fontified t)) . -162) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) 163 (158 . 163) (#("o" 0 1 (fontified t)) . -158) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 159 (148 . 159) (#("L" 0 1 (fontified t face font-lock-type-face)) . -148) (undo-tree-id575 . -1) 149 (148 . 149) (#("r" 0 1 (fontified t)) . -148) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("a" 0 1 (fontified t)) . -149) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("d" 0 1 (fontified t)) . -150) (undo-tree-id580 . -1) (#("i" 0 1 (fontified t)) . -151) (undo-tree-id581 . -1) 152 (148 . 152) (#("l" 0 1 (fontified t)) . -148) (undo-tree-id582 . -1) (#("i" 0 1 (fontified t)) . -149) (undo-tree-id583 . -1) (#("d" 0 1 (fontified t)) . -150) (undo-tree-id584 . -1) (#("a" 0 1 (fontified t)) . -151) (undo-tree-id585 . -1) (#("r" 0 1 (fontified t)) . -152) (undo-tree-id586 . -1) (#(" " 0 1 (fontified t)) . -153) (undo-tree-id587 . -1) 154 (148 . 154) (143 . 148) (t 26144 837 560132 472000)) nil (26144 867 945820 500000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -370) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) 371 (366 . 371) (356 . 366) (#("Fil" 0 3 (fontified nil)) . 356) (356 . 359) (#("Filterable" 0 10 (fontified nil)) . -356) (356 . 366) (#("Fil" 0 3 (fontified t face font-lock-type-face)) . -356) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) 359 (356 . 359) (#("f" 0 1 (fontified t)) . -356) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#("i" 0 1 (fontified t)) . -357) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("l" 0 1 (fontified t)) . -358) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("t" 0 1 (fontified t)) . -359) (undo-tree-id976 . -1) (#("e" 0 1 (fontified t)) . -360) (undo-tree-id977 . -1) 361 (355 . 361) (t 26144 867 989680 751000)) nil (26144 979 260205 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 383 448 #s(yas--snippet nil nil #s(yas--exit 442 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 442 nil) 1 nil nil nil nil)) (383 . 448) (#("fn get_simulated_measurement(&self) -> LidarMeasurement {
	$0
    }" 0 37 (fontified nil) 37 38 (fontified nil syntax-table (1)) 38 67 (fontified nil)) . 383) (445 . 449) (441 . 442) (#("    " 0 4 (fontified nil)) . 441) (383 . 449) (#("fn" 0 2 (fontified nil)) . 383) (383 . 385) (#("fn get_simulated_measurement(..)" 0 32 (fontified nil)) . -383) (383 . 415) (#("fn" 0 2 (fontified t face font-lock-keyword-face)) . -383) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (undo-tree-id871 . -2) (undo-tree-id872 . -2) (undo-tree-id873 . -2) (undo-tree-id874 . -2) (undo-tree-id875 . -2) 385 (384 . 385) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -384) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#(" " 0 1 (fontified t)) . -385) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) 386 (385 . 386) (#(" " 0 1 (fontified t)) . -385) (undo-tree-id924 . -1) 386 (383 . 386)) nil (26144 979 260079 925000) 0 nil])
([nil nil ((#("    
" 0 5 (fontified t)) . 449) (undo-tree-id729 . -4) (undo-tree-id730 . -5)) nil (26144 979 258843 61000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 449 #s(yas--snippet nil nil #s(yas--exit 448 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 448 nil) 2 nil nil nil nil)) (442 . 449) (#("todo!($0)" 0 9 (fontified nil)) . 442) (442 . 451) (#("to" 0 2 (fontified nil)) . 442) (442 . 444) (#("todo!(…)" 0 8 (fontified nil)) . -442) (442 . 450) (#("to" 0 2 (fontified t)) . -442) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -2) (undo-tree-id625 . -2) (undo-tree-id626 . -2) (undo-tree-id627 . -2) (undo-tree-id628 . -2) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -2) (undo-tree-id632 . -2) (undo-tree-id633 . -2) (undo-tree-id634 . -2) (undo-tree-id635 . -2) (undo-tree-id636 . -2) (undo-tree-id637 . -2) (undo-tree-id638 . -2) (undo-tree-id639 . -2) (undo-tree-id640 . -2) (undo-tree-id641 . -2) (undo-tree-id642 . -2) (undo-tree-id643 . -2) (undo-tree-id644 . -2) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -2) (undo-tree-id648 . -2) (undo-tree-id649 . -2) (undo-tree-id650 . -2) (undo-tree-id651 . -2) (undo-tree-id652 . -2) (undo-tree-id653 . -2) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -2) (undo-tree-id661 . -2) (undo-tree-id662 . -2) (undo-tree-id663 . -2) (undo-tree-id664 . -2) (undo-tree-id665 . -2) (undo-tree-id666 . -2) (undo-tree-id667 . -2) (undo-tree-id668 . -2) (undo-tree-id669 . -2) (undo-tree-id670 . -2) (undo-tree-id671 . -2) (undo-tree-id672 . -2) (undo-tree-id673 . -2) (undo-tree-id674 . -2) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -2) (undo-tree-id678 . -2) (undo-tree-id679 . -2) (undo-tree-id680 . -2) (undo-tree-id681 . -2) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -2) (undo-tree-id685 . -2) (undo-tree-id686 . -2) (undo-tree-id687 . -2) (undo-tree-id688 . -2) (undo-tree-id689 . -2) (undo-tree-id690 . -2) (undo-tree-id691 . -2) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) 444 (442 . 444) (#("r" 0 1 (fontified t)) . -442) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("t" 0 1 (fontified t)) . -443) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 444 (443 . 444) (#("o" 0 1 (fontified t)) . -443) (undo-tree-id727 . -1) (undo-tree-id728 . -1) 444 (442 . 444)) nil (26144 979 258814 796000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -167) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -4) (undo-tree-id1074 . -4) (undo-tree-id1075 . -4) (undo-tree-id1076 . -4) (undo-tree-id1077 . -4) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -4) (undo-tree-id1084 . -4) (undo-tree-id1085 . -4) (undo-tree-id1086 . -4) (undo-tree-id1087 . -4) (undo-tree-id1088 . -4) (undo-tree-id1089 . -4) (undo-tree-id1090 . -4) (undo-tree-id1091 . -4) 171 (166 . 171) (t 26144 979 299448 874000)) nil (26144 1056 711296 582000) 0 nil])
([nil nil ((188 . 189) (185 . 188) (#("M" 0 1 (fontified nil)) . 185) (185 . 186) (#("Map" 0 3 (fontified nil)) . -185) (185 . 188) (#("M" 0 1 (fontified t face font-lock-type-face)) . -185) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) 186 (184 . 186) (171 . 184) (#("E" 0 1 (fontified t face font-lock-type-face)) . -171) (undo-tree-id1061 . -1) 172 (171 . 172) (#("e" 0 1 (fontified t)) . -171) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 172 (171 . 172) (#("e" 0 1 (fontified t)) . -171) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("n" 0 1 (fontified t)) . -172) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) 173 (171 . 173) (167 . 171)) nil (26144 1056 711218 650000) 0 nil])
([nil nil ((74 . 76) (73 . 75) (t 26144 1056 728853 980000)) nil (26144 1079 367053 756000) 0 nil])
([nil nil ((189 . 191)) nil (26144 1079 367041 524000) 0 nil])
([nil nil ((191 . 192) (t 26144 1079 409063 937000)) nil (26144 1082 516372 350000) 0 nil])
([nil nil ((407 . 410) (406 . 408) (t 26144 1082 559981 681000)) nil (26144 1102 658549 837000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 406) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (t 26144 1102 701063 758000)) nil (26144 1112 15746 493000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 406) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1)) nil (26144 1112 15738 714000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . 406) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1)) nil (26144 1112 15725 480000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-type-face)) . 406) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1)) nil (26144 1112 15578 116000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t syntax-table (1))) . 406) (undo-tree-id1092 . 1) (undo-tree-id1093 . 1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1)) nil (26144 1112 15562 622000) 0 nil])
([nil nil ((443 . 445) (t 26144 1112 33858 197000)) nil (26144 1119 867996 731000) 0 nil])
([nil nil ((445 . 446)) nil (26144 1119 867984 296000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . 443) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (t 26144 1119 887160 804000)) nil (26144 1123 552447 666000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 443) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1)) nil (26144 1123 552426 259000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 443) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1)) nil (26144 1123 552226 914000) 0 nil])
([nil nil ((408 . 409) (407 . 408) (406 . 408) (t 26144 1123 569895 884000)) nil (26144 1148 89851 677000) 0 nil])
([nil nil ((408 . 409) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -408) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) 409 (t 26144 1148 133458 973000)) nil (26144 1157 417279 477000) 0 nil])
([nil nil ((529 . 534) (#("&se" 0 1 (fontified nil face rust-ampersand-face) 1 3 (fontified nil)) . 529) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (530 . 532) (#("&self" 0 5 (fontified nil)) . -530) (530 . 535) (#("se" 0 2 (fontified t)) . -530) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) 532 (529 . 532) (516 . 530) (#("r" 0 1 (fontified t)) . -516) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#("n" 0 1 (fontified t)) . -517) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#(" " 0 1 (fontified t)) . -518) (undo-tree-id1877 . -1) 519 (516 . 519) (512 . 516) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 512) (512 . 516) (511 . 513) (509 . 512) (499 . 509) (#("Coor" 0 4 (fontified nil)) . 499) (499 . 503) (#("Coordinate" 0 10 (fontified nil)) . -499) (499 . 509) (#("Coor" 0 4 (fontified t face font-lock-type-face)) . -499) (undo-tree-id1878 . -4) (undo-tree-id1879 . -4) 503 (494 . 503) (493 . 494) (#("
" 0 1 (fontified t)) . -493) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (#("c" 0 1 (fontified t)) . -494) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (#("o" 0 1 (fontified t)) . -495) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("o" 0 1 (fontified t)) . -496) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) 497 (#("r" 0 1 (fontified t)) . -497) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) 498 (494 . 498) (491 . 494) (t 26144 1157 462254 784000)) nil (26144 1405 13738 995000) 0 nil])
([nil nil ((535 . 538)) nil (26144 1405 13692 655000) 0 nil])
([nil nil ((542 . 552) (#("Coo" 0 3 (fontified nil)) . 542) (542 . 545) (#("Coordinate" 0 10 (fontified nil)) . -542) (542 . 552) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -542) (undo-tree-id1867 . -3) (undo-tree-id1868 . -3) 545 (536 . 545) (534 . 536)) nil (26144 1405 13689 181000) 0 nil])
([nil nil ((#("coor" 0 4 (fontified t face font-lock-variable-name-face)) . 536) (undo-tree-id1865 . -2) (undo-tree-id1866 . -3)) nil (26144 1405 13680 128000) 0 nil])
([nil nil ((536 . 542)) nil (26144 1405 13675 458000) 0 nil])
([nil nil ((566 . 567) (567 . 571) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 566) (566 . 567) (565 . 567) (563 . 566) (559 . 563) (#("Sel" 0 3 (fontified nil)) . 559) (559 . 562) (#("Self" 0 4 (fontified nil)) . -559) (559 . 563) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -559) (undo-tree-id1863 . -3) (undo-tree-id1864 . -3) 562 (559 . 562) (558 . 559)) nil (26144 1405 13670 854000) 0 nil])
([nil nil ((598 . 600) (592 . 598) (#("ve" 0 2 (fontified nil)) . 592) (592 . 594) (#("vector" 0 6 (fontified nil)) . -592) (592 . 598) (#("ve" 0 2 (fontified t)) . -592) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) 594 (587 . 594) (583 . 587) (#("se" 0 2 (fontified nil)) . 583) (583 . 585) (#("self" 0 4 (fontified nil)) . -583) (583 . 587) (#("sel" 0 3 (fontified t)) . -583) (undo-tree-id1859 . -3) (undo-tree-id1860 . -3) 586 (584 . 586) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 584) (583 . 584) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 583 600 nil nil nil t #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil))) #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil))) #s(yas--exit 624 nil) 3 nil #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil)) nil nil)) (567 . 594) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 567) (567 . 606) (#("Coo" 0 3 (fontified nil)) . 567) (567 . 570) (#("Coordinate {…}" 0 14 (fontified nil)) . -567) (567 . 581) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -567) (undo-tree-id1861 . -3) (undo-tree-id1862 . -3) 570 (567 . 570)) nil (26144 1405 13652 473000) 0 nil])
([nil nil ((621 . 622) (#("y" 0 1 (fontified nil)) . 621) (621 . 622) (#("y" 0 1 (fontified t)) . -621) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) 622 (620 . 622) (614 . 620) (#("vec" 0 3 (fontified nil)) . 614) (614 . 617) (#("vector" 0 6 (fontified nil)) . -614) (614 . 620) (#("vec" 0 3 (fontified t)) . -614) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) 617 (609 . 617) (605 . 609) (#("sel" 0 3 (fontified nil)) . 605) (605 . 608) (#("self" 0 4 (fontified nil)) . -605) (605 . 609) (#("sel" 0 3 (fontified t)) . -605) (undo-tree-id1855 . -3) (undo-tree-id1856 . -3) 608 (606 . 608) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 606) (605 . 606)) nil (26144 1405 12708 35000) 0 nil])
([nil nil ((apply yas--snippet-revive 567 624 #s(yas--snippet nil (#s(yas--field 1 583 600 nil nil nil t #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil))) #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil))) #s(yas--exit 624 nil) 3 nil #s(yas--field 2 605 622 nil nil nil t #s(yas--exit 624 nil)) nil nil))) nil (26144 1405 12672 705000) 0 nil])
([nil nil ((602 . 609) (#(" " 0 1 (fontified nil)) . 602) (601 . 602)) nil (26144 1405 12670 504000) 0 nil])
([nil nil ((580 . 585) (#(" " 0 1 (fontified nil)) . 579) (undo-tree-id1849 . -1) (580 . 581)) nil (26144 1405 12667 369000) 0 nil])
([nil nil ((#("	     " 0 6 (fontified nil)) . -612) (612 . 613) (#("	" 0 1 (fontified nil)) . 612) (undo-tree-id1848 . -1) (608 . 612) 609) nil (26144 1405 12662 613000) 0 nil])
([nil nil ((633 . 634) (#(" " 0 1 (fontified nil)) . 633) (632 . 633)) nil (26144 1405 12656 898000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -679) (undo-tree-id1840 . -1) 680 (678 . 680) (#("s" 0 1 (fontified t)) . -678) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#(" " 0 1 (fontified t)) . -679) (undo-tree-id1843 . -1) 680 (670 . 680) (#(" " 0 1 (fontified t)) . -670) (undo-tree-id1844 . -1) 671 (670 . 671) (#(" " 0 1 (fontified t)) . -670) (undo-tree-id1845 . -1) 671 (665 . 671) (661 . 666) (656 . 661) (#(" " 0 1 (fontified t)) . -656) (undo-tree-id1846 . -1) 657 (647 . 657) (643 . 647) (#("    " 0 4 (fontified nil)) . 642) (undo-tree-id1847 . -4) (641 . 647)) nil (26144 1405 12650 442000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-function-name-face)) . 656)) nil (26144 1405 12621 275000) 0 nil])
([nil nil ((#("complex" 0 7 (fontified t face font-lock-function-name-face)) . 656) (undo-tree-id1839 . -6)) nil (26144 1405 12617 852000) 0 nil])
([nil nil ((673 . 683) (#("Coo" 0 3 (fontified nil)) . 673) (673 . 676) (#("Coordinate" 0 10 (fontified nil)) . -673) (673 . 683) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -673) (undo-tree-id1837 . -3) (undo-tree-id1838 . -3) 676 (671 . 676)) nil (26144 1405 12608 249000) 0 nil])
([nil nil ((#("complex" 0 7 (fontified t face font-lock-variable-name-face)) . 664) (undo-tree-id1825 . -6) (undo-tree-id1826 . -7) (undo-tree-id1827 . -7) (undo-tree-id1828 . -7) (undo-tree-id1829 . -7) (undo-tree-id1830 . -7) (undo-tree-id1831 . -7) (undo-tree-id1832 . -7) (undo-tree-id1833 . -7) (undo-tree-id1834 . -7) (undo-tree-id1835 . -7) (undo-tree-id1836 . -7)) nil (26144 1405 12594 381000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 664) (undo-tree-id1822 . -1) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2)) nil (26144 1405 12490 784000) 0 nil])
([nil nil ((#("Coordinate" 0 10 (fontified t face font-lock-type-face)) . 664) (undo-tree-id1797 . -9) (undo-tree-id1798 . -9) (undo-tree-id1799 . -9) (undo-tree-id1800 . -9) (undo-tree-id1801 . -9) (undo-tree-id1802 . -9) (undo-tree-id1803 . -9) (undo-tree-id1804 . -9) (undo-tree-id1805 . -9) (undo-tree-id1806 . -9) (undo-tree-id1807 . -9) (undo-tree-id1808 . -9) (undo-tree-id1809 . -9) (undo-tree-id1810 . -9) (undo-tree-id1811 . -9) (undo-tree-id1812 . -9) (undo-tree-id1813 . -9) (undo-tree-id1814 . -9) (undo-tree-id1815 . -9) (undo-tree-id1816 . -9) (undo-tree-id1817 . -9) (undo-tree-id1818 . -9) (undo-tree-id1819 . -9) (undo-tree-id1820 . -9) (undo-tree-id1821 . -10)) nil (26144 1405 12475 5000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -664) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#("n" 0 1 (fontified t)) . -665) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 666 (664 . 666) (#("a" 0 1 (fontified t)) . -664) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("n" 0 1 (fontified t)) . -665) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#("g" 0 1 (fontified t)) . -666) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("l" 0 1 (fontified t)) . -667) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("e" 0 1 (fontified t)) . -668) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) 669 (664 . 669)) nil (26144 1405 12403 400000) 0 nil])
([nil nil ((673 . 674) (669 . 673) (#("Se" 0 2 (fontified nil)) . 669) (669 . 671) (#("Self" 0 4 (fontified nil)) . -669) (669 . 673) (#("Se" 0 2 (fontified t face font-lock-type-face)) . -669) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2) (undo-tree-id1593 . -2) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . -2) (undo-tree-id1603 . -2) (undo-tree-id1604 . -2) (undo-tree-id1605 . -2) (undo-tree-id1606 . -2) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -2) (undo-tree-id1611 . -2) (undo-tree-id1612 . -2) (undo-tree-id1613 . -2) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) 671 (665 . 671)) nil (26144 1405 11718 371000) 0 nil])
([nil nil ((692 . 695) (#("f" 0 1 (fontified nil)) . 692) (692 . 693) (#("f64" 0 3 (fontified nil)) . -692) (692 . 695) (#("f" 0 1 (fontified t)) . -692) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) 693 (687 . 693) (685 . 687) (#("a" 0 1 (fontified t)) . -685) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (#("n" 0 1 (fontified t)) . -686) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("g" 0 1 (fontified t)) . -687) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (#("l" 0 1 (fontified t)) . -688) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (#("e" 0 1 (fontified t)) . -689) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) 690 (683 . 690) (673 . 683) (#("Co" 0 2 (fontified nil)) . 673) (673 . 675) (#("Coordinate" 0 10 (fontified nil)) . -673) (673 . 683) (#("Co" 0 2 (fontified t face font-lock-type-face)) . -673) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) 675 (671 . 675) (#(" " 0 1 (fontified t)) . -671) (undo-tree-id1536 . -1) 672 (668 . 672) (663 . 668)) nil (26144 1405 11482 692000) 0 nil])
([nil nil ((708 . 709) (709 . 713) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 708) (708 . 709) (707 . 709) (705 . 708) (#(";" 0 1 (fontified t)) . -705) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 706) nil (26144 1405 11167 331000) 0 nil])
([nil nil ((apply yas--snippet-revive 709 716 #s(yas--snippet nil nil #s(yas--exit 715 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 715 nil) 4 nil nil nil nil)) (709 . 716) (#("todo!($0)" 0 9 (fontified nil)) . 709) (709 . 718) (#("to" 0 2 (fontified nil)) . 709) (709 . 711) (#("todo!(…)" 0 8 (fontified nil)) . -709) (709 . 717) (#("to" 0 2 (fontified t)) . -709) (undo-tree-id1292 . -2) (undo-tree-id1293 . -2) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -2) (undo-tree-id1305 . -2) (undo-tree-id1306 . -2) (undo-tree-id1307 . -2) (undo-tree-id1308 . -2) (undo-tree-id1309 . -2) (undo-tree-id1310 . -2) (undo-tree-id1311 . -2) (undo-tree-id1312 . -2) (undo-tree-id1313 . -2) (undo-tree-id1314 . -2) (undo-tree-id1315 . -2) (undo-tree-id1316 . -2) (undo-tree-id1317 . -2) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -2) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -2) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (undo-tree-id1388 . -2) (undo-tree-id1389 . -2) (undo-tree-id1390 . -2) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) 711 (709 . 711)) nil (26144 1405 11053 822000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -724) (undo-tree-id2066 . -4) 728 (724 . 728) (#("    " 0 4 (fontified nil)) . 723) (undo-tree-id2067 . -4) (722 . 728) (t 26144 1405 57212 620000)) nil (26144 1980 100673 802000) 0 nil])
([nil nil ((757 . 767) (#("Coordina" 0 8 (fontified nil)) . 757) (757 . 765) (#("Coordinate" 0 10 (fontified nil)) . -757) (757 . 767) (#("Coordina" 0 8 (fontified t face font-lock-type-face)) . -757) (undo-tree-id2063 . -8) (undo-tree-id2064 . -8) 765 (755 . 765) (#(" " 0 1 (fontified t)) . -755) (undo-tree-id2065 . -1) 756 (741 . 756) (728 . 742) (724 . 728)) nil (26144 1980 100664 584000) 0 nil])
([nil nil ((779 . 780) (780 . 784) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 779) (779 . 780) (778 . 780) (776 . 779) (772 . 776) (#("Sel" 0 3 (fontified nil)) . 772) (772 . 775) (#("Self" 0 4 (fontified nil)) . -772) (772 . 776) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -772) (undo-tree-id2061 . -3) (undo-tree-id2062 . -3) 775 (772 . 775) (768 . 772)) nil (26144 1980 100651 903000) 0 nil])
([nil nil ((671 . 681) (#("ang" 0 3 (fontified nil)) . 671) (671 . 674) (#("angle: f64" 0 10 (fontified nil)) . -671) (671 . 681) (#("ang" 0 3 (fontified t)) . -671) (undo-tree-id2052 . -3) (undo-tree-id2053 . -3) 674 (673 . 674) (#("c" 0 1 (fontified t)) . -673) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#("l" 0 1 (fontified t)) . -674) (undo-tree-id2056 . -1) (#("e" 0 1 (fontified t)) . -675) (undo-tree-id2057 . -1) 676 (673 . 676) (669 . 673) (#(" " 0 1 (fontified t)) . -669) (undo-tree-id2058 . -1) 670 (669 . 670) (#(" " 0 1 (fontified t)) . -669) (undo-tree-id2059 . -1) 670 (668 . 670) (664 . 668) (647 . 665) (643 . 647) (#("    " 0 4 (fontified nil)) . 642) (undo-tree-id2060 . -4) (641 . 647)) nil (26144 1980 100636 542000) 0 nil])
([nil nil ((693 . 694) (694 . 698) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 693) (693 . 694) (692 . 694) (682 . 693)) nil (26144 1980 100612 916000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -694) (undo-tree-id2050 . -1) (#("j" 0 1 (fontified t)) . -695) (undo-tree-id2051 . -1) 696 (694 . 696)) nil (26144 1980 100608 182000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -694) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (#("o" 0 1 (fontified t)) . -695) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) 696 (694 . 696) (#("t" 0 1 (fontified t)) . -694) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (#("o" 0 1 (fontified t)) . -695) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) 696 (694 . 696)) nil (26144 1980 100599 410000) 0 nil])
([nil nil ((801 . 807) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -801) (undo-tree-id2039 . -1) 802 (801 . 802) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -801) (undo-tree-id2040 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -802) (undo-tree-id2041 . -1) 803 (799 . 803)) nil (26144 1980 100580 118000) 0 nil])
([nil nil ((apply yas--snippet-revive 847 948 #s(yas--snippet nil (#s(yas--field 1 863 902 nil nil nil t #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil))) #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil))) #s(yas--exit 948 nil) 5 nil #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil)) nil nil)) (945 . 946) (#("x" 0 1 (fontified nil)) . 945) (945 . 946) (#("x" 0 1 (fontified t)) . -945) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) 946 (944 . 946) (937 . 944) (#("com" 0 3 (fontified nil)) . 937) (937 . 940) (#("complex" 0 7 (fontified nil)) . -937) (937 . 944) (#("com" 0 3 (fontified t)) . -937) (undo-tree-id2006 . -3) (undo-tree-id2007 . -3) 940 (932 . 940) (928 . 932) (#("sel" 0 3 (fontified nil)) . 928) (928 . 931) (#("self" 0 4 (fontified nil)) . -928) (928 . 932) (#("sel" 0 3 (fontified t)) . -928) (undo-tree-id2008 . -3) (undo-tree-id2009 . -3) 931 (929 . 931) (923 . 929) (916 . 923) (#("com" 0 3 (fontified nil)) . 916) (916 . 919) (#("complex" 0 7 (fontified nil)) . -916) (916 . 923) (#("com" 0 3 (fontified t)) . -916) (undo-tree-id2010 . -3) (undo-tree-id2011 . -3) 919 (911 . 919) (907 . 911) (#("sel" 0 3 (fontified nil)) . 907) (907 . 910) (#("self" 0 4 (fontified nil)) . -907) (907 . 911) (#("sel" 0 3 (fontified t)) . -907) (undo-tree-id2012 . -3) (undo-tree-id2013 . -3) 910 (908 . 910) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 908) (907 . 908) (901 . 902) (#("y" 0 1 (fontified nil)) . 901) (901 . 902) (#("y" 0 1 (fontified t)) . -901) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) 902 (901 . 902) (900 . 901) (893 . 900) (#("com" 0 3 (fontified nil)) . 893) (893 . 896) (#("complex" 0 7 (fontified nil)) . -893) (893 . 900) (#("com" 0 3 (fontified t)) . -893) (undo-tree-id2017 . -3) (undo-tree-id2018 . -3) 896 (890 . 896) (#(" " 0 1 (fontified t)) . -890) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) 891 (888 . 891) (884 . 888) (#("sel" 0 3 (fontified nil)) . 884) (884 . 887) (#("self" 0 4 (fontified nil)) . -884) (884 . 888) (#("sel" 0 3 (fontified t)) . -884) (undo-tree-id2021 . -3) (undo-tree-id2022 . -3) 887 (884 . 887) (879 . 884) (872 . 879) (#("com" 0 3 (fontified nil)) . 872) (872 . 875) (#("complex" 0 7 (fontified nil)) . -872) (872 . 879) (#("com" 0 3 (fontified t)) . -872) (undo-tree-id2023 . -3) (undo-tree-id2024 . -3) 875 (872 . 875) (#("C" 0 1 (fontified t face font-lock-type-face)) . -872) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -873) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("m" 0 1 (fontified t face font-lock-type-face)) . -874) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) 875 (872 . 875) (#("s" 0 1 (fontified t)) . -872) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) 873 (869 . 873) (867 . 869) (863 . 867) (#("sel" 0 3 (fontified nil)) . 863) (863 . 866) (#("self" 0 4 (fontified nil)) . -863) (863 . 867) (#("sel" 0 3 (fontified t)) . -863) (undo-tree-id2034 . -3) (undo-tree-id2035 . -3) 866 (864 . 866) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 864) (863 . 864) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 902 nil nil nil t #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil))) #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil))) #s(yas--exit 948 nil) 5 nil #s(yas--field 2 907 946 nil nil nil t #s(yas--exit 948 nil)) nil nil)) (847 . 874) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 847) (847 . 886) (#("Coo" 0 3 (fontified nil)) . 847) (847 . 850) (#("Coordinate {…}" 0 14 (fontified nil)) . -847) (847 . 861) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -847) (undo-tree-id2036 . -1) (undo-tree-id2037 . -3) (undo-tree-id2038 . -3) 850 (847 . 850)) nil (26144 1980 100546 573000) 0 nil])
([nil nil ((904 . 911) (#(" " 0 1 (fontified nil)) . 904) (903 . 904)) nil (26144 1980 100448 788000) 0 nil])
([nil nil ((860 . 865) (#(" " 0 1 (fontified nil)) . 859) (undo-tree-id2002 . -1) (860 . 861)) nil (26144 1980 100445 760000) 0 nil])
([nil nil ((#("	     " 0 6 (fontified nil)) . -914) (914 . 915) (#("	" 0 1 (fontified nil)) . 914) (undo-tree-id2001 . -1) (910 . 914) 911) nil (26144 1980 100440 941000) 0 nil])
([nil nil ((957 . 958) (#(" " 0 1 (fontified nil)) . 956) (undo-tree-id2000 . -1) (957 . 958)) nil (26144 1980 100435 301000) 0 nil])
([nil nil ((868 . 870)) nil (26144 1980 100431 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 869) (undo-tree-id1999 . 1)) nil (26144 1980 100429 254000) 0 nil])
([nil nil ((887 . 888) (#(")" 0 1 (fontified nil)) . -887) (887 . 888)) nil (26144 1980 100425 454000) 0 nil])
([nil nil ((891 . 893)) nil (26144 1980 100423 43000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -912) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) 913 (912 . 913)) nil (26144 1980 100420 704000) 0 nil])
([nil nil ((911 . 912) (#(")" 0 1 (fontified nil)) . -911) (911 . 912)) nil (26144 1980 100414 807000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 892) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1)) nil (26144 1980 100410 406000) 0 nil])
([nil nil ((960 . 961) (#(")" 0 1 (fontified nil)) . -960) (960 . 961)) nil (26144 1980 100328 180000) 0 nil])
([nil nil ((942 . 943)) nil (26144 1980 100322 33000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -940) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) 941 (939 . 941) (#(")" 0 1 (fontified nil)) . -939) (939 . 940)) nil (26144 1980 100308 960000) 0 nil])
([nil nil ((921 . 922)) nil (26144 1980 100066 53000) 0 nil])
([nil nil ((#("t" 0 1 (fontified nil face font-lock-type-face)) . -720) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (#("e" 0 1 (fontified nil face font-lock-type-face)) . -721) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (#(" " 0 1 (fontified nil)) . -722) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -723) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (#(" " 0 1 (fontified t)) . -724) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (#("x" 0 1 (fontified t)) . -725) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (#(":" 0 1 (fontified t)) . -726) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (#(" " 0 1 (fontified t)) . -727) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) 728 (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 728) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 720 720 nil nil nil t #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) #s(yas--exit 729 nil) 6 nil #s(yas--field 1 720 720 nil nil nil t #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) nil nil)) (712 . 739) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 712) (712 . 751) (#("Coor" 0 4 (fontified nil)) . 712) (712 . 716) (#("Coordinate {…}" 0 14 (fontified nil)) . -712) (712 . 726) (#("Coor" 0 4 (fontified t face font-lock-type-face)) . -712) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) 716 (710 . 716) (#(":" 0 1 (fontified t)) . -710) (undo-tree-id2131 . -1) (#(" " 0 1 (fontified t)) . -711) (undo-tree-id2132 . -1) 712 (700 . 712) (694 . 700) (#("c" 0 1 (fontified t)) . -694) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (#("o" 0 1 (fontified t)) . -695) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (#("o" 0 1 (fontified t)) . -696) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (#("r" 0 1 (fontified t)) . -697) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (#("d" 0 1 (fontified t)) . -698) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (#(" " 0 1 (fontified t)) . -699) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (#("=" 0 1 (fontified t)) . -700) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (#(" " 0 1 (fontified t)) . -701) (undo-tree-id2152 . -1) 702 (694 . 702) (#("C" 0 1 (fontified t face font-lock-type-face)) . -694) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -695) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -696) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) 697 (694 . 697) (t 26144 1980 119694 338000)) nil (26144 2083 18468 14000) 0 nil])
([nil nil ((apply yas--snippet-revive 712 729 #s(yas--snippet nil (#s(yas--field 1 720 720 nil nil nil t #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) #s(yas--exit 729 nil) 6 nil #s(yas--field 1 720 720 nil nil nil t #s(yas--field 2 725 727 nil nil nil nil #s(yas--exit 729 nil))) nil nil))) nil (26144 2083 18379 570000) 0 nil])
([nil nil ((#(" Coordina, y: () }" 0 1 (fontified t) 1 9 (fontified t face font-lock-type-face) 9 11 (fontified t) 11 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-3-face)) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face))) . 711) (undo-tree-id2110 . 9) (undo-tree-id2111 . -9) (undo-tree-id2112 . -9)) nil (26144 2083 18377 121000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -740) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (#("o" 0 1 (fontified t)) . -741) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (#("s" 0 1 (fontified t)) . -742) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) 743 (740 . 743) (#("s" 0 1 (fontified t)) . -740) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (#("i" 0 1 (fontified t)) . -741) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (#("n" 0 1 (fontified t)) . -742) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) 743 (740 . 743) (#("c" 0 1 (fontified t)) . -740) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (#("o" 0 1 (fontified t)) . -741) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (#("s" 0 1 (fontified t)) . -742) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (#("i" 0 1 (fontified t)) . -743) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("n" 0 1 (fontified t)) . -744) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (#("e" 0 1 (fontified t)) . -745) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) 746 (740 . 746) (#("c" 0 1 (fontified t)) . -740) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (#("o" 0 1 (fontified t)) . -741) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (#("s" 0 1 (fontified t)) . -742) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) 743 (741 . 743) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 741) (740 . 741) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 740 740 nil nil nil t #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) #s(yas--exit 749 nil) 7 nil #s(yas--field 1 740 740 nil nil nil t #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) nil nil)) (724 . 751) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 724) (724 . 763) (#("Coo" 0 3 (fontified nil)) . 724) (724 . 727) (#("Coordinate {…}" 0 14 (fontified nil)) . -724) (724 . 738) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -724) (undo-tree-id2105 . -1) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) 727 (721 . 727) (711 . 721) (#("Coo" 0 3 (fontified nil)) . 711) (711 . 714) (#("Coordinate" 0 10 (fontified nil)) . -711) (711 . 721) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -711) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) 714 (711 . 714)) nil (26144 2083 18348 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 724 749 #s(yas--snippet nil (#s(yas--field 1 740 740 nil nil nil t #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) #s(yas--exit 749 nil) 7 nil #s(yas--field 1 740 740 nil nil nil t #s(yas--field 2 745 747 nil nil nil nil #s(yas--exit 749 nil))) nil nil))) nil (26144 2083 18193 182000) 0 nil])
([nil nil ((749 . 750)) nil (26144 2083 18191 606000) 0 nil])
([nil nil ((722 . 725)) nil (26144 2083 18189 909000) 0 nil])
([nil nil ((753 . 754)) nil (26144 2083 18188 110000) 0 nil])
([nil nil ((723 . 724)) nil (26144 2083 18186 224000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 709)) nil (26144 2083 18181 817000) 0 nil])
([nil nil ((709 . 710)) nil (26144 2083 18170 892000) 0 nil])
([nil nil ((693 . 695) (t 26144 2083 64335 652000)) nil (26144 2109 646034 973000) 0 nil])
([nil nil ((769 . 770) (766 . 769) (#("f" 0 1 (fontified nil)) . 766) (766 . 767) (#("f32" 0 3 (fontified nil)) . -766) (766 . 769) (#("f" 0 1 (fontified t)) . -766) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) 767 (764 . 767) (#(" " 0 1 (fontified t)) . -764) (undo-tree-id2233 . -1) 765 (764 . 765) (759 . 764) (758 . 759) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 757) (undo-tree-id2234 . -1) (693 . 694) (757 . 758)) nil (26144 2109 645955 636000) 0 nil])
([nil nil ((769 . 773) (t 26144 2109 695188 667000)) nil (26144 2112 745994 943000) 0 nil])
([nil nil ((#("	thing: f32 = 5;
" 0 1 (fontified t) 1 6 (fontified t face font-lock-variable-name-face) 6 8 (fontified t) 8 11 (fontified t face font-lock-type-face) 11 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 758) (undo-tree-id2237 . 2) (undo-tree-id2238 . -16) (undo-tree-id2239 . 2) (undo-tree-id2240 . -14) (undo-tree-id2241 . -12) (undo-tree-id2242 . -14) (undo-tree-id2243 . -14) (undo-tree-id2244 . -14) (undo-tree-id2245 . -14) (undo-tree-id2246 . -14) (undo-tree-id2247 . -14) (undo-tree-id2248 . -14) (undo-tree-id2249 . -14) (undo-tree-id2250 . -14) (undo-tree-id2251 . -14) (undo-tree-id2252 . -14) (undo-tree-id2253 . -14) (undo-tree-id2254 . -14) (undo-tree-id2255 . -14) (undo-tree-id2256 . -14) (undo-tree-id2257 . -14) (undo-tree-id2258 . -14) (undo-tree-id2259 . -14) (undo-tree-id2260 . -14) (undo-tree-id2261 . -14) (undo-tree-id2262 . -14) (undo-tree-id2263 . -14) (undo-tree-id2264 . -14) (undo-tree-id2265 . -14) (undo-tree-id2266 . -14) (undo-tree-id2267 . -14) (undo-tree-id2268 . -14) (undo-tree-id2269 . -14) (undo-tree-id2270 . -14) (undo-tree-id2271 . -14) (undo-tree-id2272 . -14) (undo-tree-id2273 . -14) (undo-tree-id2274 . -14) (undo-tree-id2275 . -6) (undo-tree-id2276 . -7) (undo-tree-id2277 . -6) (undo-tree-id2278 . -7) (undo-tree-id2279 . -6) (undo-tree-id2280 . -7) (undo-tree-id2281 . -1) (undo-tree-id2282 . -2) (undo-tree-id2283 . -14) (undo-tree-id2284 . -14) (undo-tree-id2285 . -14) (undo-tree-id2286 . -14) (undo-tree-id2287 . -14) (undo-tree-id2288 . -14) (undo-tree-id2289 . -14) (undo-tree-id2290 . -14) (undo-tree-id2291 . -14) (undo-tree-id2292 . -14) (undo-tree-id2293 . -14) (undo-tree-id2294 . -14) (undo-tree-id2295 . -14) (undo-tree-id2296 . -14) (undo-tree-id2297 . -14) (undo-tree-id2298 . -14) (undo-tree-id2299 . -14) (undo-tree-id2300 . -14) (undo-tree-id2301 . -12) (undo-tree-id2302 . -12) (undo-tree-id2303 . -12) (undo-tree-id2304 . -12) (undo-tree-id2305 . -12) (undo-tree-id2306 . -12) (undo-tree-id2307 . -12) (undo-tree-id2308 . -12) (undo-tree-id2309 . -12) (undo-tree-id2310 . -12) (undo-tree-id2311 . -12) (undo-tree-id2312 . -12) (undo-tree-id2313 . -12) (undo-tree-id2314 . -12) (undo-tree-id2315 . -12) (undo-tree-id2316 . -12) (undo-tree-id2317 . -12) (undo-tree-id2318 . -12) (undo-tree-id2319 . -12) (undo-tree-id2320 . -12) (undo-tree-id2321 . -12) (undo-tree-id2322 . -12) (undo-tree-id2323 . -12) (undo-tree-id2324 . -12) (undo-tree-id2325 . -12) (undo-tree-id2326 . -12) (undo-tree-id2327 . -12) (undo-tree-id2328 . -12) (undo-tree-id2329 . -12) (undo-tree-id2330 . -12) (undo-tree-id2331 . -12) (undo-tree-id2332 . -12) (undo-tree-id2333 . -12) (undo-tree-id2334 . -12) (undo-tree-id2335 . -12) (undo-tree-id2336 . -17) 770 (t 26144 2112 794124 270000)) nil (26144 2120 16453 206000) 0 nil])
([nil nil ((#("//	" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face)) . 694) (undo-tree-id2235 . -2) (undo-tree-id2236 . -3)) nil (26144 2120 15788 604000) 0 nil])
([nil nil ((694 . 698)) nil (26144 2120 15763 856000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 726) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (t 26144 2120 39635 632000)) nil (26144 2154 673682 868000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 725) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1)) nil (26144 2154 673676 363000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -758) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) 759 (758 . 759) (#("	" 0 1 (fontified nil)) . 757) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (756 . 759)) nil (26144 2154 673651 419000) 0 nil])
([nil nil ((757 . 758)) nil (26144 2154 673570 799000) 0 nil])
([nil nil ((761 . 766) (756 . 762)) nil (26144 2154 673568 845000) 0 nil])
([nil nil ((774 . 779) (770 . 775) (767 . 770)) nil (26144 2154 673565 464000) 0 nil])
([nil nil ((806 . 821) (#("tran" 0 4 (fontified nil)) . 806) (undo-tree-id2337 . -4) (806 . 810) (#("transform_coord" 0 15 (fontified nil)) . -806) (undo-tree-id2338 . -15) (806 . 821) (#("tran" 0 4 (fontified t)) . -806) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -2) (undo-tree-id2343 . -2) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (undo-tree-id2346 . -2) (undo-tree-id2347 . -3) (undo-tree-id2348 . -3) (undo-tree-id2349 . -3) (undo-tree-id2350 . -3) (undo-tree-id2351 . -3) (undo-tree-id2352 . -3) (undo-tree-id2353 . -3) (undo-tree-id2354 . -3) (undo-tree-id2355 . -3) (undo-tree-id2356 . -3) (undo-tree-id2357 . -3) (undo-tree-id2358 . -3) (undo-tree-id2359 . -3) (undo-tree-id2360 . -3) (undo-tree-id2361 . -3) (undo-tree-id2362 . -3) (undo-tree-id2363 . -3) (undo-tree-id2364 . -3) (undo-tree-id2365 . -3) (undo-tree-id2366 . -3) (undo-tree-id2367 . -3) (undo-tree-id2368 . -3) (undo-tree-id2369 . -3) (undo-tree-id2370 . -3) (undo-tree-id2371 . -3) (undo-tree-id2372 . -3) (undo-tree-id2373 . -3) (undo-tree-id2374 . -3) (undo-tree-id2375 . -3) (undo-tree-id2376 . -4) (undo-tree-id2377 . -4) (undo-tree-id2378 . -4) (undo-tree-id2379 . -4) (undo-tree-id2380 . -4) (undo-tree-id2381 . -4) (undo-tree-id2382 . -4) (undo-tree-id2383 . -4) (undo-tree-id2384 . -4) (undo-tree-id2385 . -4) (undo-tree-id2386 . -4) (undo-tree-id2387 . -4) (undo-tree-id2388 . -4) (undo-tree-id2389 . -4) (undo-tree-id2390 . -4) (undo-tree-id2391 . -4) (undo-tree-id2392 . -4) (undo-tree-id2393 . -4) (undo-tree-id2394 . -4) (undo-tree-id2395 . -4) (undo-tree-id2396 . -4) (undo-tree-id2397 . -4) (undo-tree-id2398 . -4) (undo-tree-id2399 . -4) (undo-tree-id2400 . -4) (undo-tree-id2401 . -4) (undo-tree-id2402 . -4) (undo-tree-id2403 . -4) (undo-tree-id2404 . -4) (undo-tree-id2405 . -4) (undo-tree-id2406 . -4) (undo-tree-id2407 . -4) (undo-tree-id2408 . -4) (undo-tree-id2409 . -4) (undo-tree-id2410 . -4) (undo-tree-id2411 . -4) (undo-tree-id2412 . -4) (undo-tree-id2413 . -4) (undo-tree-id2414 . -4) (undo-tree-id2415 . -4) 810 (809 . 810) (807 . 809) (#("complex" 0 7 (fontified nil)) . 807) (undo-tree-id2416 . -7) (806 . 807) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 806 821 nil nil nil t #s(yas--exit 822 nil))) #s(yas--exit 822 nil) 8 nil #s(yas--field 1 806 821 nil nil nil t #s(yas--exit 822 nil)) nil nil)) (788 . 814) (#("transform_complex(${1:complex})$0" 0 33 (fontified nil)) . 788) (788 . 821) (#("trans" 0 5 (fontified nil)) . 788) (788 . 793) (#("transform_complex(…)" 0 20 (fontified nil)) . -788) (788 . 808) (#("trans" 0 5 (fontified t)) . -788) (undo-tree-id2417 . -2) (undo-tree-id2418 . -5) (undo-tree-id2419 . -5) 793 (789 . 793) (788 . 789) (783 . 788) (#("t" 0 1 (fontified t)) . -783) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (#("r" 0 1 (fontified t)) . -784) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (#("a" 0 1 (fontified t)) . -785) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) 786 (785 . 786) (783 . 785) (782 . 783) (#("	" 0 1 (fontified nil)) . 781) (undo-tree-id2426 . -1) (782 . 783)) nil (26144 2154 673539 558000) 0 nil])
([nil nil ((822 . 823) (apply yas--snippet-revive 788 822 #s(yas--snippet nil (#s(yas--field 1 806 821 nil nil nil t #s(yas--exit 822 nil))) #s(yas--exit 822 nil) 8 nil #s(yas--field 1 806 821 nil nil nil t #s(yas--exit 822 nil)) nil nil))) nil (26144 2154 672918 19000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -822) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) 823 (t 26144 2154 719723 962000)) nil (26144 2158 820968 454000) 0 nil])
([nil nil ((apply yas--snippet-revive 728 735 #s(yas--snippet nil nil #s(yas--exit 734 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 734 nil) 9 nil nil nil nil)) (728 . 735) (#("todo!($0)" 0 9 (fontified nil)) . 728) (728 . 737) (#("todo" 0 4 (fontified nil)) . 728) (728 . 732) (#("todo!(…)" 0 8 (fontified nil)) . -728) (728 . 736) (#("todo" 0 4 (fontified t)) . -728) (undo-tree-id2503 . -4) (undo-tree-id2504 . -4) (undo-tree-id2505 . -4) (undo-tree-id2506 . -4) (undo-tree-id2507 . -4) (undo-tree-id2508 . -4) (undo-tree-id2509 . -4) (undo-tree-id2510 . -4) (undo-tree-id2511 . -4) (undo-tree-id2512 . -4) (undo-tree-id2513 . -4) (undo-tree-id2514 . -4) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -4) (undo-tree-id2521 . -4) (undo-tree-id2522 . -4) (undo-tree-id2523 . -4) (undo-tree-id2524 . -4) (undo-tree-id2525 . -4) (undo-tree-id2526 . -4) (undo-tree-id2527 . -4) (undo-tree-id2528 . -4) (undo-tree-id2529 . -4) (undo-tree-id2530 . -4) (undo-tree-id2531 . -4) (undo-tree-id2532 . -4) (undo-tree-id2533 . -4) (undo-tree-id2534 . -4) (undo-tree-id2535 . -4) (undo-tree-id2536 . -4) (undo-tree-id2537 . -4) (undo-tree-id2538 . -4) (undo-tree-id2539 . -4) (undo-tree-id2540 . -4) (undo-tree-id2541 . -4) (undo-tree-id2542 . -4) (undo-tree-id2543 . -4) (undo-tree-id2544 . -4) (undo-tree-id2545 . -4) (undo-tree-id2546 . -4) (undo-tree-id2547 . -4) (undo-tree-id2548 . -4) (undo-tree-id2549 . -4) (undo-tree-id2550 . -4) (undo-tree-id2551 . -4) (undo-tree-id2552 . -4) (undo-tree-id2553 . -4) (undo-tree-id2554 . -4) (undo-tree-id2555 . -4) (undo-tree-id2556 . -4) (undo-tree-id2557 . -4) (undo-tree-id2558 . -4) (undo-tree-id2559 . -4) (undo-tree-id2560 . -4) (undo-tree-id2561 . -4) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) (undo-tree-id2564 . -4) (undo-tree-id2565 . -4) (undo-tree-id2566 . -4) (undo-tree-id2567 . -4) (undo-tree-id2568 . -4) (undo-tree-id2569 . -4) (undo-tree-id2570 . -4) (undo-tree-id2571 . -4) (undo-tree-id2572 . -4) (undo-tree-id2573 . -4) (undo-tree-id2574 . -4) (undo-tree-id2575 . -4) (undo-tree-id2576 . -4) 732 (730 . 732) (#("t" 0 1 (fontified t)) . -730) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) 731 (730 . 731) (725 . 730) (t 26144 2158 870298 357000)) nil (26144 2171 710250 30000) 0 nil])
([nil nil ((#("	todo!()
" 0 1 (fontified t) 1 6 (fontified t face font-lock-preprocessor-face) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t)) . 906) (undo-tree-id2644 . -8) (undo-tree-id2645 . -7) 913 (t 26144 2171 733880 68000)) nil (26144 2307 624352 408000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -906) (undo-tree-id2643 . -1) 907 (905 . 907)) nil (26144 2307 624346 771000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 922 928 nil nil nil nil #s(yas--exit 929 nil))) #s(yas--exit 929 nil) 10 nil #s(yas--field 1 922 928 nil nil nil nil #s(yas--exit 929 nil)) nil nil)) (912 . 929) (#("translate(${1:vector})$0" 0 24 (fontified nil)) . 912) (912 . 936) (#("tran" 0 4 (fontified nil)) . 912) (912 . 916) (#("translate(…)" 0 12 (fontified nil)) . -912) (912 . 924) (#("tran" 0 4 (fontified t)) . -912) (undo-tree-id2638 . -2) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) 916 (911 . 916) (907 . 911) (#("sel" 0 3 (fontified nil)) . 907) (907 . 910) (#("self" 0 4 (fontified nil)) . -907) (907 . 911) (#("sel" 0 3 (fontified t)) . -907) (undo-tree-id2641 . -3) (undo-tree-id2642 . -3) 910 (907 . 910) (906 . 907)) nil (26144 2307 624338 418000) 0 nil])
([nil nil ((apply yas--snippet-revive 912 929 #s(yas--snippet nil (#s(yas--field 1 922 928 nil nil nil nil #s(yas--exit 929 nil))) #s(yas--exit 929 nil) 10 nil #s(yas--field 1 922 928 nil nil nil nil #s(yas--exit 929 nil)) nil nil))) nil (26144 2307 624323 208000) 0 nil])
([nil nil ((#("	self.translate(vector)
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t)) . 906) (undo-tree-id2633 . 8) (undo-tree-id2634 . -15) (undo-tree-id2635 . -23) (undo-tree-id2636 . -16) (undo-tree-id2637 . -15) 921) nil (26144 2307 624320 735000) 0 nil])
([nil nil ((1119 . 1124) (1109 . 1120) (1105 . 1109) (#("    " 0 4 (fontified nil)) . 1104) (undo-tree-id2632 . -4) (1103 . 1109)) nil (26144 2307 624307 510000) 0 nil])
([nil nil ((1136 . 1137) (1137 . 1141) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1136) (1136 . 1137) (1135 . 1137) (1134 . 1136) (1125 . 1134)) nil (26144 2307 624302 97000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1172) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) 1173 (1170 . 1173) (1166 . 1170) (#("sel" 0 3 (fontified nil)) . 1166) (1166 . 1169) (#("self" 0 4 (fontified nil)) . -1166) (1166 . 1170) (#("sel" 0 3 (fontified t)) . -1166) (undo-tree-id2623 . -3) (undo-tree-id2624 . -3) 1169 (1166 . 1169) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1166) (1165 . 1166) (1159 . 1160) (#("x" 0 1 (fontified nil)) . 1159) (1159 . 1160) (#("x" 0 1 (fontified t)) . -1159) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) 1160 (1158 . 1160) (1154 . 1158) (#("sel" 0 3 (fontified nil)) . 1154) (1154 . 1157) (#("self" 0 4 (fontified nil)) . -1154) (1154 . 1158) (#("sel" 0 3 (fontified t)) . -1154) (undo-tree-id2628 . -3) (undo-tree-id2629 . -3) 1157 (1154 . 1157) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1154) (1153 . 1154) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1153 1160 nil nil nil t #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil))) #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil))) #s(yas--exit 1174 nil) 11 nil #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil)) nil nil)) (1137 . 1164) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 1137) (1137 . 1176) (#("Coo" 0 3 (fontified nil)) . 1137) (1137 . 1140) (#("Coordinate {…}" 0 14 (fontified nil)) . -1137) (1137 . 1151) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -1137) (undo-tree-id2630 . -3) (undo-tree-id2631 . -3) 1140 (1137 . 1140)) nil (26144 2307 624289 849000) 0 nil])
([nil nil ((apply yas--snippet-revive 1137 1174 #s(yas--snippet nil (#s(yas--field 1 1153 1160 nil nil nil t #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil))) #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil))) #s(yas--exit 1174 nil) 11 nil #s(yas--field 2 1165 1172 nil nil nil t #s(yas--exit 1174 nil)) nil nil))) nil (26144 2307 624199 303000) 0 nil])
([nil nil ((1174 . 1175)) nil (26144 2307 624197 711000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 1174)) nil (26144 2307 624195 745000) 0 nil])
([nil nil ((#("through" 0 7 (fontified t)) . 947) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 947 947 nil nil nil t #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) #s(yas--exit 955 nil) 14 nil #s(yas--field 1 947 947 nil nil nil t #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) nil nil)) (940 . 962) (#("rotate(${1:through}, ${2:angle})$0" 0 34 (fontified nil)) . 940) (940 . 974) (#("ro" 0 2 (fontified nil)) . 940) (940 . 942) (#("rotate(…)" 0 9 (fontified nil)) . -940) (940 . 949) (#("ro" 0 2 (fontified t)) . -940) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) 942 (939 . 942) (apply yas--snippet-revive 912 939 #s(yas--snippet nil (#s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil))) #s(yas--exit 939 nil) 12 nil #s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil)) nil nil)) (apply yas--snippet-revive 930 938 #s(yas--snippet nil nil #s(yas--exit 938 nil) 13 nil nil #s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 938 nil) 13 nil nil #s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil)) nil)) (930 . 938) (#("negate()$0" 0 10 (fontified nil)) . 930) (930 . 940) (#("ne" 0 2 (fontified nil)) . 930) (930 . 932) (#("negate()" 0 8 (fontified nil)) . -930) (930 . 938) (#("ne" 0 2 (fontified t)) . -930) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) 932 (929 . 932) (922 . 929) (#("thr" 0 3 (fontified nil)) . 922) (922 . 925) (#("through" 0 7 (fontified nil)) . -922) (922 . 929) (#("thr" 0 3 (fontified t)) . -922) (undo-tree-id2610 . -3) (undo-tree-id2611 . -3) 925 (922 . 925) (#("C" 0 1 (fontified t face font-lock-type-face)) . -922) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) 923 (#("vector" 0 6 (fontified nil)) . 923) (922 . 923) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil))) #s(yas--exit 939 nil) 12 nil #s(yas--field 1 922 938 nil nil nil t #s(yas--exit 939 nil)) nil nil)) (912 . 929) (#("translate(${1:vector})$0" 0 24 (fontified nil)) . 912) (912 . 936) (#("tra" 0 3 (fontified nil)) . 912) (912 . 915) (#("translate(…)" 0 12 (fontified nil)) . -912) (912 . 924) (#("tra" 0 3 (fontified t)) . -912) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) 915 (911 . 915) (907 . 911) (#("self" 0 4 (fontified nil)) . 907) (907 . 911) (#("self" 0 4 (fontified t face font-lock-keyword-face)) . -907) (undo-tree-id2617 . -4) (undo-tree-id2618 . -4) (undo-tree-id2619 . -4) 911 (907 . 911) (905 . 907)) nil (26144 2307 624181 910000) 0 nil])
([nil nil ((apply yas--snippet-revive 940 955 #s(yas--snippet nil (#s(yas--field 1 947 947 nil nil nil t #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) #s(yas--exit 955 nil) 14 nil #s(yas--field 1 947 947 nil nil nil t #s(yas--field 2 949 954 nil nil nil nil #s(yas--exit 955 nil))) nil nil))) nil (26144 2307 624136 586000) 0 nil])
([nil nil ((#("(, angle)" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face))) . 946) (undo-tree-id2602 . 8) (undo-tree-id2603 . -1)) nil (26144 2307 624134 308000) 0 nil])
([nil nil ((979 . 980) (apply yas--snippet-revive 961 979 #s(yas--snippet nil (#s(yas--field 1 971 978 nil nil nil t #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 16 nil #s(yas--field 1 971 978 nil nil nil t #s(yas--exit 979 nil)) nil nil)) (971 . 978) (#("th" 0 2 (fontified nil)) . 971) (971 . 973) (#("through" 0 7 (fontified nil)) . -971) (971 . 978) (#("th" 0 2 (fontified t)) . -971) (undo-tree-id2592 . -2) (undo-tree-id2593 . -2) 973 (972 . 973) (#("vector" 0 6 (fontified nil)) . 972) (971 . 972) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 971 978 nil nil nil t #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 16 nil #s(yas--field 1 971 978 nil nil nil t #s(yas--exit 979 nil)) nil nil)) (961 . 978) (#("translate(${1:vector})$0" 0 24 (fontified nil)) . 961) (961 . 985) (#("tra" 0 3 (fontified nil)) . 961) (961 . 964) (#("translate(…)" 0 12 (fontified nil)) . -961) (961 . 973) (#("tra" 0 3 (fontified t)) . -961) (undo-tree-id2594 . -2) (undo-tree-id2595 . -3) (undo-tree-id2596 . -3) 964 (960 . 964) (apply yas--snippet-revive 940 960 #s(yas--snippet nil (#s(yas--field 1 954 959 nil nil nil t #s(yas--exit 960 nil))) #s(yas--exit 960 nil) 15 nil #s(yas--field 1 954 959 nil nil nil t #s(yas--exit 960 nil)) nil nil)) (954 . 959) (#("an" 0 2 (fontified nil)) . 954) (954 . 956) (#("angle" 0 5 (fontified nil)) . -954) (954 . 959) (#("an" 0 2 (fontified t)) . -954) (undo-tree-id2597 . -2) (undo-tree-id2598 . -2) 956 (955 . 956) (#("angle" 0 5 (fontified nil)) . 955) (954 . 955) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 954 959 nil nil nil t #s(yas--exit 960 nil))) #s(yas--exit 960 nil) 15 nil #s(yas--field 1 954 959 nil nil nil t #s(yas--exit 960 nil)) nil nil)) (940 . 960) (#("rotate_origin(${1:angle})$0" 0 27 (fontified nil)) . 940) (940 . 967) (#("rotate_or" 0 9 (fontified nil)) . 940) (940 . 949) (#("rotate_origin(…)" 0 16 (fontified nil)) . -940) (940 . 956) (#("rotate_or" 0 9 (fontified t)) . -940) (undo-tree-id2599 . -6) (undo-tree-id2600 . -9) (undo-tree-id2601 . -9) 949 (946 . 949)) nil (26144 2307 624119 988000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -979) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) 980) nil (26144 2307 624082 736000) 0 nil])
([nil nil ((939 . 945)) nil (26144 2307 623975 503000) 0 nil])
([nil nil ((966 . 972)) nil (26144 2307 623964 172000) 0 nil])
([nil nil ((#("todo" 0 4 (fontified t face font-lock-preprocessor-face)) . 728) (undo-tree-id2650 . -3) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (t 26144 2307 675187 922000)) nil (26144 42209 807292 465000) 0 nil])
([nil nil ((#("!();//= " 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t face (rainbow-delimiters-depth-3-face)) 3 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 8 (fontified t face font-lock-comment-face)) . 728) (undo-tree-id2648 . -7) (undo-tree-id2649 . -8)) nil (26144 42209 808434 917000) 0 nil])
([nil nil ((#("cos(angle) , sin(angle)" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-3-face)) 4 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-3-face))) . 755)) nil (26144 42243 727848 846000) 0 nil] [nil nil ((#("Coordinate " 0 10 (fontified t face font-lock-type-face) 10 11 (fontified t)) . 728) (undo-tree-id2646 . -10) (undo-tree-id2647 . -11)) ((728 . 739)) (26144 42209 807269 398000) 0 nil])
([nil nil ((apply yas--snippet-revive 750 755 #s(yas--snippet nil nil #s(yas--exit 755 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 755 nil) 17 nil nil nil nil)) (750 . 755) (#("cos()$0" 0 7 (fontified nil)) . 750) (750 . 757) (#("cos" 0 3 (fontified nil)) . 750) (750 . 753) (#("cos()" 0 5 (fontified nil)) . -750) (750 . 755) (#("cos" 0 3 (fontified t)) . -750) (undo-tree-id2657 . -2) (undo-tree-id2658 . -3) (undo-tree-id2659 . -3) 753 (752 . 753) (750 . 752) (749 . 750) (748 . 749) (#("x" 0 1 (fontified nil)) . 748) (748 . 749) (#("x" 0 1 (fontified t)) . -748) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) 749 (748 . 749) (#("s" 0 1 (fontified t)) . -748) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (#("i" 0 1 (fontified t)) . -749) (undo-tree-id2665 . -1) (#("n" 0 1 (fontified t)) . -750) (undo-tree-id2666 . -1) 751 (749 . 751) (#("u" 0 1 (fontified t)) . -749) (undo-tree-id2667 . -1) 750 (747 . 750) (743 . 747) (#("sel" 0 3 (fontified nil)) . 743) (743 . 746) (#("self" 0 4 (fontified nil)) . -743) (743 . 747) (#("sel" 0 3 (fontified t)) . -743) (undo-tree-id2668 . -3) (undo-tree-id2669 . -3) 746 (743 . 746)) nil (26144 42243 727837 397000) 0 nil])
nil
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 761)) nil (26144 42243 727800 816000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 761)) nil (26144 42243 727796 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 768 773 #s(yas--snippet nil nil #s(yas--exit 773 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 773 nil) 18 nil nil nil nil)) (768 . 773) (#("sin()$0" 0 7 (fontified nil)) . 768) (768 . 775) (#("si" 0 2 (fontified nil)) . 768) (768 . 770) (#("sin()" 0 5 (fontified nil)) . -768) (768 . 773) (#("si" 0 2 (fontified t)) . -768) (undo-tree-id2653 . -2) (undo-tree-id2654 . -2) 770 (766 . 770) (765 . 766) (761 . 765) (#("sel" 0 3 (fontified nil)) . 761) (761 . 764) (#("self" 0 4 (fontified nil)) . -761) (761 . 765) (#("sel" 0 3 (fontified t)) . -761) (undo-tree-id2655 . -3) (undo-tree-id2656 . -3) 764 (761 . 764)) nil (26144 42243 727782 504000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -513) (undo-tree-id2891 . -4) 517 (513 . 517) (#("    " 0 4 (fontified nil)) . 512) (undo-tree-id2892 . -4) (511 . 517) (t 26144 42243 751798 810000)) nil (26144 42945 707130 58000) 0 nil])
([nil nil ((517 . 525) (513 . 517) (#("    " 0 4 (fontified nil)) . 512) (undo-tree-id2890 . -4) (516 . 517) (512 . 516)) nil (26144 42945 707120 656000) 0 nil])
([nil nil ((#("new" 0 3 (fontified t face font-lock-function-name-face)) . 520) (undo-tree-id2887 . 3) (undo-tree-id2888 . -2) (undo-tree-id2889 . -3)) nil (26144 42945 707115 244000) 0 nil])
([nil nil ((520 . 524)) nil (26144 42945 707109 172000) 0 nil])
([nil nil ((523 . 524) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -523) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) 524) nil (26144 42945 707103 891000) 0 nil])
([nil nil ((535 . 538) (#("f" 0 1 (fontified nil)) . 535) (535 . 536) (#("f64" 0 3 (fontified nil)) . -535) (535 . 538) (#("f" 0 1 (fontified t)) . -535) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) 536 (531 . 536) (528 . 531) (#("f" 0 1 (fontified nil)) . 528) (528 . 529) (#("f64" 0 3 (fontified nil)) . -528) (528 . 531) (#("f" 0 1 (fontified t)) . -528) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) 529 (525 . 529)) nil (26144 42945 706634 456000) 0 nil])
([nil nil ((550 . 551) (551 . 555) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 550) (550 . 551) (549 . 551) (547 . 550) (543 . 547) (#("Sel" 0 3 (fontified nil)) . 543) (543 . 546) (#("Self" 0 4 (fontified nil)) . -543) (543 . 547) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -543) (undo-tree-id2677 . -1) (undo-tree-id2678 . -3) (undo-tree-id2679 . -3) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) (undo-tree-id2693 . -2) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) (undo-tree-id2704 . -2) (undo-tree-id2705 . -2) (undo-tree-id2706 . -2) (undo-tree-id2707 . -2) (undo-tree-id2708 . -2) (undo-tree-id2709 . -2) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) (undo-tree-id2714 . -3) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) (undo-tree-id2717 . -3) (undo-tree-id2718 . -3) (undo-tree-id2719 . -3) (undo-tree-id2720 . -3) (undo-tree-id2721 . -3) (undo-tree-id2722 . -3) (undo-tree-id2723 . -3) (undo-tree-id2724 . -3) (undo-tree-id2725 . -3) (undo-tree-id2726 . -3) (undo-tree-id2727 . -3) (undo-tree-id2728 . -3) (undo-tree-id2729 . -3) (undo-tree-id2730 . -3) (undo-tree-id2731 . -3) (undo-tree-id2732 . -3) (undo-tree-id2733 . -3) (undo-tree-id2734 . -3) (undo-tree-id2735 . -3) (undo-tree-id2736 . -3) (undo-tree-id2737 . -3) (undo-tree-id2738 . -3) (undo-tree-id2739 . -3) (undo-tree-id2740 . -3) (undo-tree-id2741 . -3) (undo-tree-id2742 . -3) (undo-tree-id2743 . -3) (undo-tree-id2744 . -3) (undo-tree-id2745 . -3) (undo-tree-id2746 . -3) (undo-tree-id2747 . -3) (undo-tree-id2748 . -3) (undo-tree-id2749 . -3) (undo-tree-id2750 . -3) (undo-tree-id2751 . -3) (undo-tree-id2752 . -3) (undo-tree-id2753 . -3) 546 (542 . 546) (#(">" 0 1 (fontified t syntax-table (1))) . -542) (undo-tree-id2754 . -1) (#(" " 0 1 (fontified t)) . -543) (undo-tree-id2755 . -1) 544 (539 . 544)) nil (26144 42945 706407 910000) 0 nil])
([nil nil ((574 . 575) (apply yas--snippet-revive 551 574 #s(yas--snippet nil (#s(yas--field 1 567 567 nil nil nil t #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil))) #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil))) #s(yas--exit 574 nil) 19 nil #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil)) nil nil)) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 572) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 567) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 567 567 nil nil nil t #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil))) #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil))) #s(yas--exit 574 nil) 19 nil #s(yas--field 2 572 572 nil nil nil t #s(yas--exit 574 nil)) nil nil)) (551 . 578) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 551) (551 . 590) (#("Coo" 0 3 (fontified nil)) . 551) (551 . 554) (#("Coordinate {…}" 0 14 (fontified nil)) . -551) (551 . 565) (#("Coo" 0 3 (fontified t face font-lock-type-face)) . -551) (undo-tree-id2675 . -3) (undo-tree-id2676 . -3) 554 (551 . 554)) nil (26144 42945 706206 746000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 570) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1)) nil (26144 42945 706194 44000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 565) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1)) nil (26144 42945 706178 118000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -572) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) 573 (t 26144 42945 726689 522000)) nil (26144 42951 644744 146000) 0 nil])
([nil nil ((517 . 525) (513 . 517) (#("    " 0 4 (fontified nil)) . 512) (undo-tree-id2911 . -4) (511 . 517) (t 26144 42951 668648 621000)) nil (26144 42990 96088 792000) 0 nil])
([nil nil ((536 . 537) (537 . 541) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 536) (536 . 537) (535 . 537) (525 . 536)) nil (26144 42990 96079 285000) 0 nil])
([nil nil ((apply yas--snippet-revive 537 562 #s(yas--snippet nil (#s(yas--field 1 553 554 nil nil nil t #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil))) #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil))) #s(yas--exit 562 nil) 20 nil #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil)) nil nil)) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 560) (undo-tree-id2907 . -2) (559 . 560) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 554) (undo-tree-id2908 . -2) (553 . 554) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 553 554 nil nil nil t #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil))) #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil))) #s(yas--exit 562 nil) 20 nil #s(yas--field 2 559 560 nil nil nil t #s(yas--exit 562 nil)) nil nil)) (537 . 564) (#("Coordinate { x: ${1:()}, y: ${2:()} }$0" 0 39 (fontified nil)) . 537) (537 . 576) (#("Co" 0 2 (fontified nil)) . 537) (537 . 539) (#("Coordinate {…}" 0 14 (fontified nil)) . -537) (537 . 551) (#("Co" 0 2 (fontified t face font-lock-type-face)) . -537) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) 539 (537 . 539)) nil (26144 42990 96063 422000) 0 nil])
([nil nil ((554 . 558) (t 26144 42990 167425 350000)) nil (26144 42998 760904 730000) 0 nil])
([nil nil ((564 . 568)) nil (26144 42998 760891 477000) 0 nil])
([nil nil ((#("000" 0 3 (fontified t)) . 555) (undo-tree-id3404 . -2) (undo-tree-id3405 . -3) (t 26144 42998 812456 17000)) nil (26144 43007 45861 395000) 0 nil])
([nil nil ((555 . 556) (#("p" 0 1 (fontified t)) . -555) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (#("a" 0 1 (fontified t)) . -556) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (#("r" 0 1 (fontified t)) . -557) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (#("s" 0 1 (fontified t)) . -558) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (#("e" 0 1 (fontified t)) . -559) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) 560 (555 . 560)) nil (26144 43007 45741 624000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 564) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (t 26144 43007 69619 914000)) nil (26144 43009 801104 42000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 564) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1)) nil (26144 43152 976261 292000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 1383) (1382 . 1387)) ((#("
    " 1 5 (fontified nil)) . 1382) (undo-tree-id3423 . -1) (1383 . 1387)) (26144 43155 103209 149000) 0 nil])
([nil nil ((1 . 4)) ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1) (undo-tree-id3411 . -1) (undo-tree-id3412 . 3) (undo-tree-id3413 . 3) (undo-tree-id3414 . 3) (undo-tree-id3415 . 3) (undo-tree-id3416 . 3) (undo-tree-id3417 . 3) (undo-tree-id3418 . -3) (undo-tree-id3419 . -3) (undo-tree-id3420 . -3) (undo-tree-id3421 . -3) (undo-tree-id3422 . -3) (t 26144 43147 9554 344000)) (26144 43156 484245 151000) 0 nil])
([nil nil ((23 . 24) (12 . 23) (#("AnymapImage" 0 11 (fontified nil)) . -12) (12 . 23) (10 . 12) (5 . 10) (#("d" 0 1 (fontified nil)) . 5) (5 . 6) (#("ductr" 0 5 (fontified nil)) . -5) (5 . 10) (#("d" 0 1 (fontified t face font-lock-constant-face)) . -5) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) 6 (4 . 6) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) 5 (1 . 5) (t 26144 43147 9554 344000)) nil (26144 43168 629574 656000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1473) (undo-tree-id3484 . -4) 1477 (1473 . 1477) (#("    " 0 4 (fontified nil)) . 1472) (undo-tree-id3485 . -4) (1472 . 1477) (#("    " 0 4 (fontified nil)) . 1471) (undo-tree-id3486 . -4) (1470 . 1476) (t 26144 43168 650121 410000)) nil (26144 43391 739747 37000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1520 1524 nil nil nil nil #s(yas--exit 1525 nil))) #s(yas--exit 1525 nil) 21 nil #s(yas--field 1 1520 1524 nil nil nil nil #s(yas--exit 1525 nil)) nil nil)) (1503 . 1525) (#("read_from_binary(${1:path})$0" 0 29 (fontified nil)) . 1503) (1503 . 1532) (#("read" 0 4 (fontified nil)) . 1503) (1503 . 1507) (#("read_from_binary(…)" 0 19 (fontified nil)) . -1503) (1503 . 1522) (#("read" 0 4 (fontified t)) . -1503) (undo-tree-id3478 . -2) (undo-tree-id3479 . -4) (undo-tree-id3480 . -4) 1507 (1503 . 1507) (1501 . 1503) (1490 . 1501) (#("A" 0 1 (fontified nil)) . 1490) (1490 . 1491) (#("AnymapImage" 0 11 (fontified nil)) . -1490) (1490 . 1501) (#("A" 0 1 (fontified t face font-lock-type-face)) . -1490) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) 1491 (1490 . 1491) (1485 . 1490) (1482 . 1485) (1476 . 1482) (1472 . 1476)) nil (26144 43391 739734 175000) 0 nil])
([nil nil ((apply yas--snippet-revive 1503 1525 #s(yas--snippet nil (#s(yas--field 1 1520 1524 nil nil nil nil #s(yas--exit 1525 nil))) #s(yas--exit 1525 nil) 21 nil #s(yas--field 1 1520 1524 nil nil nil nil #s(yas--exit 1525 nil)) nil nil))) nil (26144 43391 739715 354000) 0 nil])
([nil nil ((#("path" 0 4 (fontified t)) . 1520) (undo-tree-id3476 . 4) (undo-tree-id3477 . -3)) nil (26144 43391 739713 360000) 0 nil])
([nil nil ((1520 . 1522) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1520) (1520 . 1521)) nil (26144 43391 739708 252000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1524 . 1525) (nil fontified nil 1521 . 1525) (1521 . 1525) 1520) nil (26144 43391 739705 543000) 0 nil])
([nil nil ((#("path" 0 3 (fontified t face font-lock-string-face) 3 4 (fontified t rear-nonsticky t face font-lock-string-face)) . 1521) (undo-tree-id3474 . -3) (undo-tree-id3475 . -3)) nil (26144 43391 739702 166000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -1521) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1522) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) 1523 (1521 . 1523)) nil (26144 43391 739696 558000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1533 . 1534) (nil fontified nil 1521 . 1534) (1521 . 1534) 1520) nil (26144 43391 739686 762000) 0 nil])
([nil nil ((1564 . 1574) (#("u" 0 1 (fontified t face font-lock-string-face)) . -1564) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) 1565 (1563 . 1565) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1563) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) 1564 (1545 . 1564) (1544 . 1546) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1544) (#("msg" 0 3 (fontified nil)) . 1545) (1544 . 1545) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1544 1575 nil nil nil t #s(yas--exit 1576 nil))) #s(yas--exit 1576 nil) 22 nil #s(yas--field 1 1544 1575 nil nil nil t #s(yas--exit 1576 nil)) nil nil)) (1537 . 1548) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 1537) (1537 . 1555) (#("ex" 0 2 (fontified nil)) . 1537) (1537 . 1539) (#("expect(…)" 0 9 (fontified nil)) . -1537) (1537 . 1546) (#("ex" 0 2 (fontified t)) . -1537) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) 1539 (1537 . 1539) (1536 . 1537)) nil (26144 43391 739678 616000) 0 nil])
([nil nil ((1576 . 1577) (apply yas--snippet-revive 1537 1576 #s(yas--snippet nil (#s(yas--field 1 1544 1575 nil nil nil t #s(yas--exit 1576 nil))) #s(yas--exit 1576 nil) 22 nil #s(yas--field 1 1544 1575 nil nil nil t #s(yas--exit 1576 nil)) nil nil))) nil (26144 43391 739658 5000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1579) (undo-tree-id3459 . -4) (undo-tree-id3460 . -4) 1583 (1579 . 1583) (#("    " 0 4 (fontified nil)) . 1578) (undo-tree-id3461 . -4) (undo-tree-id3462 . -4) (1577 . 1583)) nil (26144 43391 739654 536000) 0 nil])
([nil nil ((1583 . 1587) (1579 . 1583)) nil (26144 43391 739645 647000) 0 nil])
([nil nil ((#("    let 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t)) . 1579) (undo-tree-id3455 . 1) (undo-tree-id3456 . -8) (undo-tree-id3457 . -7) (undo-tree-id3458 . -7) 1586) nil (26144 43391 739642 764000) 0 nil])
([nil nil ((1579 . 1583)) nil (26144 43391 739633 953000) 0 nil])
([nil nil ((1610 . 1611) (apply yas--snippet-revive 1602 1610 #s(yas--snippet nil nil #s(yas--exit 1610 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1610 nil) 23 nil nil nil nil)) (1602 . 1610) (#("invert()$0" 0 10 (fontified nil)) . 1602) (1602 . 1612) (#("in" 0 2 (fontified nil)) . 1602) (1602 . 1604) (#("invert()" 0 8 (fontified nil)) . -1602) (1602 . 1610) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -1602) (undo-tree-id3442 . -1) (undo-tree-id3443 . -2) (undo-tree-id3444 . -2) 1604 (1602 . 1604) (1583 . 1602) (#("c" 0 1 (fontified t)) . -1583) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (#("a" 0 1 (fontified t)) . -1584) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (#("t" 0 1 (fontified t)) . -1585) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (#(" " 0 1 (fontified t)) . -1586) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) 1587 (1583 . 1587) (1579 . 1583) (#("    " 0 4 (fontified nil)) . 1578) (undo-tree-id3453 . -4) (undo-tree-id3454 . -4) (1582 . 1583) (1578 . 1582)) nil (26144 43391 739626 233000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1614) (undo-tree-id3436 . -4) (undo-tree-id3437 . -4) 1618 (1614 . 1618) (#("    " 0 4 (fontified nil)) . 1613) (undo-tree-id3438 . -4) (undo-tree-id3439 . -4) (1613 . 1618) (#("    " 0 4 (fontified nil)) . 1612) (undo-tree-id3440 . -4) (undo-tree-id3441 . -4) (1611 . 1617)) nil (26144 43391 739594 222000) 0 nil])
([nil nil ((1638 . 1650) (1637 . 1639) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1637) (#("path" 0 4 (fontified nil)) . 1638) (1637 . 1638) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1637 1651 nil nil nil t #s(yas--exit 1652 nil))) #s(yas--exit 1652 nil) 24 nil #s(yas--field 1 1637 1651 nil nil nil t #s(yas--exit 1652 nil)) nil nil)) (1621 . 1642) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 1621) (1621 . 1649) (#("wr" 0 2 (fontified nil)) . 1621) (1621 . 1623) (#("write_as_binary(…)" 0 18 (fontified nil)) . -1621) (1621 . 1639) (#("wr" 0 2 (fontified t)) . -1621) (undo-tree-id3433 . -1) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) 1623 (1617 . 1623) (1613 . 1617)) nil (26144 43391 739551 597000) 0 nil])
([nil nil ((1681 . 1685) (1661 . 1681) (1660 . 1662) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1660) (undo-tree-id3428 . -1) (#("msg" 0 3 (fontified nil)) . 1661) (undo-tree-id3429 . -3) (1660 . 1661) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1660 1686 nil nil nil t #s(yas--exit 1687 nil))) #s(yas--exit 1687 nil) 25 nil #s(yas--field 1 1660 1686 nil nil nil t #s(yas--exit 1687 nil)) nil nil)) (1653 . 1664) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 1653) (1653 . 1671) (#("ex" 0 2 (fontified nil)) . 1653) (1653 . 1655) (#("expect(…)" 0 9 (fontified nil)) . -1653) (1653 . 1662) (#("ex" 0 2 (fontified t)) . -1653) (undo-tree-id3430 . -2) (undo-tree-id3431 . -2) (undo-tree-id3432 . -2) 1655 (1652 . 1655) (apply yas--snippet-revive 1621 1652 #s(yas--snippet nil (#s(yas--field 1 1637 1651 nil nil nil t #s(yas--exit 1652 nil))) #s(yas--exit 1652 nil) 24 nil #s(yas--field 1 1637 1651 nil nil nil t #s(yas--exit 1652 nil)) nil nil))) nil (26144 43391 739500 338000) 0 nil])
([nil nil ((1687 . 1688) (apply yas--snippet-revive 1653 1687 #s(yas--snippet nil (#s(yas--field 1 1660 1686 nil nil nil t #s(yas--exit 1687 nil))) #s(yas--exit 1687 nil) 25 nil #s(yas--field 1 1660 1686 nil nil nil t #s(yas--exit 1687 nil)) nil nil))) nil (26144 43391 739462 2000) 0 nil])
([nil nil ((1646 . 1647) (apply yas--snippet-revive 1634 1646 #s(yas--snippet nil nil #s(yas--exit 1646 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1646 nil) 0 nil nil nil nil)) (1634 . 1646) (#("get_buffer()$0" 0 14 (fontified nil)) . 1634) (1634 . 1648) (#("get" 0 3 (fontified nil)) . 1634) (1634 . 1637) (#("get_buffer()" 0 12 (fontified nil)) . -1634) (1634 . 1646) (#("get" 0 3 (fontified t)) . -1634) (undo-tree-id0 . -1) (undo-tree-id1 . -3) (undo-tree-id2 . -3) 1637 (1634 . 1637) (#("b" 0 1 (fontified t)) . -1634) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("u" 0 1 (fontified t)) . -1635) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 1636 (1634 . 1636) (1630 . 1634) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1630) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 1631 (1617 . 1631) (1613 . 1617) (#("    " 0 4 (fontified nil)) . 1612) (undo-tree-id11 . -4) (1611 . 1617) (t 26144 43391 793477 718000)) nil (26144 53481 303283 304000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1653) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("a" 0 1 (fontified t)) . -1654) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("t" 0 1 (fontified t)) . -1655) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("." 0 1 (fontified t)) . -1656) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 1657 (1653 . 1657) (#("c" 0 1 (fontified t)) . -1653) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("a" 0 1 (fontified t)) . -1654) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("t" 0 1 (fontified t)) . -1655) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("." 0 1 (fontified t)) . -1656) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("h" 0 1 (fontified t)) . -1657) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("e" 0 1 (fontified t)) . -1658) (undo-tree-id683 . -1) 1659 (1657 . 1659) (#("g" 0 1 (fontified t)) . -1657) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("e" 0 1 (fontified t)) . -1658) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("t" 0 1 (fontified t)) . -1659) (undo-tree-id689 . -1) (undo-tree-id690 . -1) 1660 (1653 . 1660) (1649 . 1653) (#("    " 0 4 (fontified nil)) . 1648) (undo-tree-id691 . -4) (1647 . 1653) (#("s" 0 1 (fontified t)) . -1647) (undo-tree-id692 . -1) (undo-tree-id693 . -1) 1648 (1647 . 1648) (t 26144 53481 324202 58000)) nil (26144 53585 820091 112000) 0 nil])
([nil nil ((1579 . 1583) (#("    " 0 4 (fontified nil)) . 1578) (undo-tree-id100 . -4) (1577 . 1583)) nil (26144 53585 819695 567000) 0 nil])
([nil nil ((1590 . 1596) (1589 . 1590) (1587 . 1589) (1583 . 1587)) nil (26144 53585 819693 992000) 0 nil])
([nil nil ((1598 . 1600)) nil (26144 53585 819692 603000) 0 nil])
([nil nil ((1677 . 1680)) nil (26144 53585 819691 959000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1587) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1588) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -1589) (undo-tree-id93 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1590) (undo-tree-id94 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1591) (undo-tree-id95 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1592) (undo-tree-id96 . -1) 1593 (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1593) (undo-tree-id97 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -1594) (undo-tree-id98 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1595) (undo-tree-id99 . -1) 1596) nil (26144 53585 819689 661000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1601) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 1602 (1594 . 1602) (#(" " 0 1 (fontified t)) . -1594) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 1595 (1588 . 1595) (1587 . 1589)) nil (26144 53585 819453 211000) 0 nil])
([nil nil ((1621 . 1622) (apply yas--snippet-revive 1609 1621 #s(yas--snippet nil nil #s(yas--exit 1621 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1621 nil) 1 nil nil nil nil)) (1609 . 1621) (#("dimensions()$0" 0 14 (fontified nil)) . 1609) (1609 . 1623) (#("di" 0 2 (fontified nil)) . 1609) (1609 . 1611) (#("dimensions()" 0 12 (fontified nil)) . -1609) (1609 . 1621) (#("di" 0 2 (fontified t)) . -1609) (undo-tree-id12 . -1) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) 1611 (1605 . 1611) (1603 . 1605) (#("v" 0 1 (fontified t)) . -1603) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("=" 0 1 (fontified t)) . -1604) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#(" " 0 1 (fontified t)) . -1605) (undo-tree-id61 . -1) 1606 (1602 . 1606)) nil (26144 53585 819426 671000) 0 nil])
([nil nil ((1634 . 1640) (#("he" 0 2 (fontified nil)) . 1634) (1634 . 1636) (#("height" 0 6 (fontified nil)) . -1634) (1634 . 1640) (#("he" 0 2 (fontified t)) . -1634) (undo-tree-id751 . -2) (undo-tree-id752 . -2) 1636 (1634 . 1636) (apply yas--snippet-revive 1629 1635 #s(yas--snippet nil nil #s(yas--exit 1634 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1634 nil) 2 nil nil nil nil)) (1629 . 1635) (#("dbg!($0)" 0 8 (fontified nil)) . 1629) (1629 . 1637) (#("db" 0 2 (fontified nil)) . 1629) (1629 . 1631) (#("dbg!(…)" 0 7 (fontified nil)) . -1629) (1629 . 1636) (#("db" 0 2 (fontified t)) . -1629) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) 1631 (1630 . 1631) (#("g" 0 1 (fontified t)) . -1630) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) 1631 (1629 . 1631) (1625 . 1629) (#("    " 0 4 (fontified nil)) . 1624) (undo-tree-id759 . -4) (1624 . 1629) (#("    " 0 4 (fontified nil)) . 1623) (undo-tree-id760 . -4) (1622 . 1628) (t 26144 53585 859337 886000)) nil (26144 53604 903009 41000) 0 nil])
([nil nil ((1641 . 1642)) nil (26144 53604 902996 830000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1633 . 1634) (#("
" 0 1 (fontified nil)) . -1647) (1625 . 1648) (1625 . 1626) 1641) nil (26144 53604 902995 411000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 1639) (undo-tree-id748 . -5) (undo-tree-id749 . -6) (undo-tree-id750 . -6)) nil (26144 53604 902993 253000) 0 nil])
([nil nil ((1639 . 1644) (#("wid" 0 3 (fontified nil)) . 1639) (1639 . 1642) (#("width" 0 5 (fontified nil)) . -1639) (1639 . 1644) (#("wid" 0 3 (fontified t)) . -1639) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) (undo-tree-id746 . -3) (undo-tree-id747 . -3) 1642 (1639 . 1642)) nil (26144 53604 902967 809000) 0 nil])
([nil nil ((#("    dbg!(height);
" 0 4 (fontified t) 4 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 1647) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -17) (undo-tree-id764 . -4) (undo-tree-id765 . -13) (undo-tree-id766 . -13) (undo-tree-id767 . -13) (undo-tree-id768 . -13) (undo-tree-id769 . -13) (undo-tree-id770 . -13) (undo-tree-id771 . -13) (undo-tree-id772 . -13) (undo-tree-id773 . -13) (undo-tree-id774 . -13) (undo-tree-id775 . -13) (undo-tree-id776 . -13) (undo-tree-id777 . -13) (undo-tree-id778 . -13) (undo-tree-id779 . -13) (undo-tree-id780 . -13) (undo-tree-id781 . -13) (undo-tree-id782 . -13) (undo-tree-id783 . -13) (undo-tree-id784 . -13) (undo-tree-id785 . -13) (undo-tree-id786 . -13) (undo-tree-id787 . -18) 1660 (t 26144 53604 942273 661000)) nil (26144 53607 549615 105000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1633 . 1634) (#("
" 0 1 (fontified nil)) . -1647) (1629 . 1648) 1625) nil (26144 53607 549586 799000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-doc-face fontified t)) . 1746) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (t 26144 53607 562125 558000)) nil (26144 53614 12245 409000) 0 nil])
([nil nil ((40 . 44) (#("    " 0 4 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 40) (40 . 44) (39 . 41) (37 . 40) (#("
" 0 1 (fontified t)) . -37) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#(" " 0 1 (fontified t)) . -38) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#(" " 0 1 (fontified t)) . -39) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 42 (37 . 42) (t 26144 53614 25758 411000)) nil (26144 54309 568419 641000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 46) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1)) nil (26144 54309 568407 591000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -52) (undo-tree-id827 . -1) (undo-tree-id828 . -1) 53 (47 . 53) (#("g" 0 1 (fontified t)) . -47) (undo-tree-id829 . -1) 48 (44 . 48) (t 26144 54309 582923 929000)) nil (26144 54351 807546 871000) 0 nil])
([nil nil ((57 . 58) (#(";" 0 1 (fontified t)) . -57) (undo-tree-id823 . -1) 58 (57 . 58) (52 . 57) (#("si" 0 2 (fontified nil)) . 52) (52 . 54) (#("usize" 0 5 (fontified nil)) . -52) (52 . 57) (#("si" 0 2 (fontified t)) . -52) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) 54 (52 . 54)) nil (26144 54351 807542 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 62 . 63) (#("
" 0 1 (fontified nil)) . -77) (58 . 78) 57) nil (26144 54351 807538 137000) 0 nil])
([nil nil ((#("height" 0 6 (face font-lock-variable-name-face fontified t)) . 63) (undo-tree-id822 . -5)) nil (26144 54351 807537 57000) 0 nil])
([nil nil ((66 . 68) (65 . 66) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -65) (undo-tree-id818 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -66) (undo-tree-id819 . -1) 67 (63 . 67) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -63) (undo-tree-id820 . -1) (undo-tree-id821 . -1) 64 (63 . 64)) nil (26144 54351 807534 888000) 0 nil])
([nil nil ((93 . 96) (#("f" 0 1 (fontified nil)) . 93) (93 . 94) (#("f64" 0 3 (fontified nil)) . -93) (93 . 96) (#("f" 0 1 (fontified t)) . -93) (undo-tree-id804 . -1) (undo-tree-id805 . -1) 94 (93 . 94) (apply yas--snippet-revive 89 94 #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (89 . 94) (#("Vec<$0>" 0 7 (fontified nil)) . 89) (89 . 96) (#("Vec" 0 3 (fontified nil)) . 89) (89 . 92) (#("Vec<…>" 0 6 (fontified nil)) . -89) (89 . 95) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -89) (undo-tree-id806 . -3) (undo-tree-id807 . -3) 92 (89 . 92) (#("v" 0 1 (fontified t)) . -89) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("e" 0 1 (fontified t)) . -90) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#("c" 0 1 (fontified t)) . -91) (undo-tree-id812 . -1) (undo-tree-id813 . -1) 92 (87 . 92) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -87) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("\"" 0 1 (face font-lock-string-face syntax-table (15) fontified t)) . 88) (#(":" 0 1 (face font-lock-string-face fontified t)) . -88) (undo-tree-id816 . -1) (undo-tree-id817 . -1) 89 (88 . 89) (87 . 89) (#("\"" 0 1 (fontified nil)) . -87) (81 . 88) (76 . 81)) nil (26144 54351 807525 827000) 0 nil])
([nil nil ((97 . 98)) nil (26144 54351 807501 999000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-type-face fontified t)) . 93) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (t 26144 54351 851001 639000)) nil (26144 54390 733275 725000) 0 nil])
([nil nil ((#("64" 0 2 (fontified t)) . 93) (undo-tree-id832 . -1) (undo-tree-id833 . 2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2)) nil (26144 54390 733272 736000) 0 nil])
([nil nil ((93 . 95) (#("u" 0 1 (fontified nil)) . 93) (93 . 94) (#("u8" 0 2 (fontified nil)) . -93) (93 . 95) (#("u" 0 1 (fontified t)) . -93) (undo-tree-id830 . -1) (undo-tree-id831 . -1) 94 (93 . 94)) nil (26144 54390 733259 397000) 0 nil])
([nil nil ((464 . 468) (#("    " 0 4 (fontified nil)) . 463) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (462 . 468) (578 . 582) (#("    " 0 4 (fontified nil)) . 577) (undo-tree-id871 . -4) (576 . 582) (t 26144 54390 774881 894000)) nil (26144 54429 560845 789000) 0 nil])
([nil nil ((488 . 493) (486 . 489) (470 . 486) (#("g" 0 1 (fontified t)) . -470) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("e" 0 1 (fontified t)) . -471) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (#("t" 0 1 (fontified t)) . -472) (undo-tree-id903 . -1) 473 (470 . 473) (#(" " 0 1 (fontified t)) . -470) (undo-tree-id904 . -1) 471 (468 . 471)) nil (26144 54466 863278 660000) 0 nil] [nil nil ((468 . 474)) ((#("fn get" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 6 (face font-lock-function-name-face fontified t)) . 468) (undo-tree-id872 . -2) (undo-tree-id873 . -2) (undo-tree-id874 . -6) (undo-tree-id875 . -6)) (26144 54429 560493 262000) 0 nil])
([nil nil ((493 . 494)) nil (26144 54466 863273 744000) 0 nil])
nil
([nil nil ((463 . 467) (#("    " 0 4 (fontified nil)) . 463) (undo-tree-id897 . 4) (#("
" 0 1 (fontified t)) . -463) (undo-tree-id898 . 1)) nil (26144 54466 863272 506000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 492)) nil (26144 54466 863268 451000) 0 nil])
([nil nil ((503 . 504) (504 . 508) (#("	" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 503) (503 . 504) (502 . 504) (501 . 503) (500 . 501) (497 . 500) (#("M" 0 1 (fontified nil)) . 497) (497 . 498) (#("Map" 0 3 (fontified nil)) . -497) (497 . 500) (#("M" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id876 . -1) (undo-tree-id877 . -1) 498 (497 . 498) (#("L" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id878 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -498) (undo-tree-id879 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -499) (undo-tree-id880 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -500) (undo-tree-id881 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -501) (undo-tree-id882 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -502) (undo-tree-id883 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -503) (undo-tree-id884 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -504) (undo-tree-id885 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -505) (undo-tree-id886 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -506) (undo-tree-id887 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -507) (undo-tree-id888 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -508) (undo-tree-id889 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -509) (undo-tree-id890 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -510) (undo-tree-id891 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -511) (undo-tree-id892 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -512) (undo-tree-id893 . -1) (#(" " 0 1 (fontified t)) . -513) (undo-tree-id894 . -1) 514 (513 . 514) (497 . 513) (#("L" 0 1 (fontified nil)) . 497) (497 . 498) (#("LidarMeasurement" 0 16 (fontified nil)) . -497) (497 . 513) (#("L" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id895 . -1) (undo-tree-id896 . -1) 498 (493 . 498)) nil (26144 54466 863259 345000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (fontified t)) . 505) (undo-tree-id952 . -5) (undo-tree-id953 . -5) (undo-tree-id954 . -6) (t 26144 54466 902214 933000)) nil (26144 54474 445844 157000) 0 nil])
([nil nil ((500 . 501) (#(" " 0 1 (fontified t)) . -500) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -501) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) 502) nil (26144 54474 445837 25000) 0 nil])
([nil nil ((nil rear-nonsticky nil 627 . 628) (#("
" 0 1 (fontified nil)) . -662) (623 . 663) 619 (t 26144 54474 486121 794000)) nil (26144 54488 340472 407000) 0 nil])
([nil nil ((apply yas--snippet-revive 665 672 #s(yas--snippet nil nil #s(yas--exit 671 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 671 nil) 4 nil nil nil nil)) (665 . 672) (#("todo!($0)" 0 9 (fontified nil)) . 665) (665 . 674) (#("to" 0 2 (fontified nil)) . 665) (665 . 667) (#("todo!(…)" 0 8 (fontified nil)) . -665) (665 . 673) (#("to" 0 2 (fontified t)) . -665) (undo-tree-id955 . -2) (undo-tree-id956 . -2) (undo-tree-id957 . -2) (undo-tree-id958 . -2) (undo-tree-id959 . -2) (undo-tree-id960 . -2) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) 667 (665 . 667) (664 . 665) (665 . 669) (#("	" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 664) (664 . 665) (663 . 665) (661 . 664) (#(";" 0 1 (fontified t)) . -661) (undo-tree-id979 . -1) (undo-tree-id980 . -1) 662) nil (26144 54488 340466 424000) 0 nil])
([nil nil ((1901 . 1916) (#("    

 //   cat" 0 7 (fontified t) 7 12 (fontified t face font-lock-comment-delimiter-face) 12 15 (fontified t face font-lock-comment-face)) . 1901) (t 26144 54488 381940 128000)) nil (26155 56483 102878 673000) 0 nil])
([nil nil ((1577 . 1580)) nil (26155 56483 102874 943000) 0 nil])
([nil nil ((1577 . 1579) (#("
" 0 1 (fontified t)) . -1577) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("
" 0 1 (fontified t)) . -1578) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 1579) nil (26155 56483 102864 748000) 0 nil])
([nil nil ((1790 . 1794)) nil (26155 56483 102732 378000) 0 nil])
([nil nil ((1828 . 1829) (apply yas--snippet-revive 1816 1828 #s(yas--snippet nil nil #s(yas--exit 1828 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1828 nil) 29 nil nil nil nil)) (1816 . 1828) (#("get_buffer()$0" 0 14 (fontified nil)) . 1816) (1816 . 1830) (#("get_buffer()" 0 12 (fontified nil)) . -1816) (1816 . 1828) (#("n" 0 1 (fontified t)) . -1816) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1817 (1816 . 1817) (1798 . 1816) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -1798) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -1799) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -1800) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -1801) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 1802 (1794 . 1802)) nil (26155 56483 102718 770000) 0 nil])
([nil nil ((1589 . 1593) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1589) (1589 . 1593) (1588 . 1590) (1586 . 1589) (1583 . 1586) (#("M" 0 1 (fontified nil)) . 1583) (1583 . 1584) (#("Map" 0 3 (fontified nil)) . -1583) (1583 . 1586) (#("M" 0 1 (fontified t face font-lock-type-face)) . -1583) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 1584 (1578 . 1584) (t 26155 56483 157412 397000)) nil (26155 56585 136932 102000) 0 nil])
([nil nil ((1613 . 1615) (#("u" 0 1 (fontified nil)) . 1613) (1613 . 1614) (#("u8" 0 2 (fontified nil)) . -1613) (1613 . 1615) (#("u" 0 1 (fontified t)) . -1613) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 1614 (1613 . 1614) (apply yas--snippet-revive 1609 1614 #s(yas--snippet nil nil #s(yas--exit 1613 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1613 nil) 30 nil nil nil nil)) (1609 . 1614) (#("Vec<$0>" 0 7 (fontified nil)) . 1609) (1609 . 1616) (#("Ve" 0 2 (fontified nil)) . 1609) (1609 . 1611) (#("Vec<…>" 0 6 (fontified nil)) . -1609) (1609 . 1615) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -1609) (undo-tree-id143 . -2) (undo-tree-id144 . -2) 1611 (1609 . 1611) (#("v" 0 1 (fontified t)) . -1609) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 1610 (#("e" 0 1 (fontified t)) . -1610) (undo-tree-id147 . -1) (undo-tree-id148 . -1) 1611 (1603 . 1611) (1600 . 1603) (#("v" 0 1 (fontified t)) . -1600) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("e" 0 1 (fontified t)) . -1601) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 1602 (#("c" 0 1 (fontified t)) . -1602) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 1603 (1600 . 1603) (1599 . 1601) (1593 . 1599) (#("n" 0 1 (fontified t)) . -1593) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("e" 0 1 (fontified t)) . -1594) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("w" 0 1 (fontified t)) . -1595) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 1596 (1593 . 1596) (#("n" 0 1 (fontified t)) . -1593) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("e" 0 1 (fontified t)) . -1594) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 1595 (1593 . 1595)) nil (26155 56585 136910 803000) 0 nil])
([nil nil ((1640 . 1645) (#("us" 0 2 (fontified nil)) . 1640) (1640 . 1642) (#("usize" 0 5 (fontified nil)) . -1640) (1640 . 1645) (#("us" 0 2 (fontified t)) . -1640) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) 1642 (1638 . 1642) (1634 . 1638) (#("e" 0 1 (fontified t)) . -1634) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("i" 0 1 (fontified t)) . -1635) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("t" 0 1 (fontified t)) . -1636) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("h" 0 1 (fontified t)) . -1637) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 1638 (1631 . 1638) (1626 . 1631) (#("us" 0 2 (fontified nil)) . 1626) (1626 . 1628) (#("usize" 0 5 (fontified nil)) . -1626) (1626 . 1631) (#("us" 0 2 (fontified t)) . -1626) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) 1628 (1627 . 1628) (1626 . 1627) (#("u" 0 1 (fontified t)) . -1626) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 1627 (1618 . 1627) (1616 . 1618)) nil (26155 56585 136264 72000) 0 nil])
([nil nil ((1657 . 1662) (#("}" 0 1 (fontified nil)) . -1656) (1656 . 1657) (#("}" 0 1 (fontified nil)) . -1656) (1656 . 1657) (1654 . 1657) (1650 . 1654) (#("Se" 0 2 (fontified nil)) . 1650) (1650 . 1652) (#("Self" 0 4 (fontified nil)) . -1650) (1650 . 1654) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -1650) (undo-tree-id123 . -3) (undo-tree-id124 . -3) 1653 (1646 . 1653)) nil (26155 56585 136226 215000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1659) (undo-tree-id120 . -1) 1660 (1659 . 1660) (#("	" 0 1 (fontified nil)) . 1658) (undo-tree-id121 . -1) (1658 . 1660) (#("	" 0 1 (fontified nil)) . 1657) (undo-tree-id122 . -1) (1657 . 1659) (1658 . 1662) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1657) (1657 . 1658) (1656 . 1658)) nil (26155 56585 136214 190000) 0 nil])
([nil nil ((1703 . 1710) (#("ma" 0 2 (fontified nil)) . 1703) (1703 . 1705) (#("mapdata" 0 7 (fontified nil)) . -1703) (1703 . 1710) (#("ma" 0 2 (fontified t)) . -1703) (undo-tree-id111 . -2) (undo-tree-id112 . -2) 1705 (1704 . 1705) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1704) (1703 . 1704) (1688 . 1693) (#("w" 0 1 (fontified nil)) . 1688) (1688 . 1689) (#("width" 0 5 (fontified nil)) . -1688) (1688 . 1693) (#("w" 0 1 (fontified t)) . -1688) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 1689 (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1689) (1688 . 1689) (1673 . 1679) (#("h" 0 1 (fontified nil)) . 1673) (1673 . 1674) (#("height" 0 6 (fontified nil)) . -1673) (1673 . 1679) (#("h" 0 1 (fontified t)) . -1673) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 1674 (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1674) (1673 . 1674) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1673 1679 nil nil nil t #s(yas--field 2 1688 1693 nil nil nil t #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil)))) #s(yas--field 2 1688 1693 nil nil nil t #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil))) #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil))) #s(yas--exit 1712 nil) 31 nil #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil)) nil nil)) (1659 . 1700) (#("Map { height: ${1:()}, width: ${2:()}, buffer: ${3:()} }$0" 0 58 (fontified nil)) . 1659) (1659 . 1717) (#("M" 0 1 (fontified nil)) . 1659) (1659 . 1660) (#("Map {…}" 0 7 (fontified nil)) . -1659) (1659 . 1666) (#("M" 0 1 (fontified t face font-lock-type-face)) . -1659) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 1660 (1659 . 1660) (1658 . 1659)) nil (26155 56585 136194 391000) 0 nil])
([nil nil ((1712 . 1713) (apply yas--snippet-revive 1659 1712 #s(yas--snippet nil (#s(yas--field 1 1673 1679 nil nil nil t #s(yas--field 2 1688 1693 nil nil nil t #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil)))) #s(yas--field 2 1688 1693 nil nil nil t #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil))) #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil))) #s(yas--exit 1712 nil) 31 nil #s(yas--field 3 1703 1710 nil nil nil t #s(yas--exit 1712 nil)) nil nil))) nil (26155 56585 136165 278000) 0 nil])
([nil nil ((#("mapdata" 0 7 (fontified t face font-lock-variable-name-face)) . 1600) (undo-tree-id110 . -6)) nil (26155 56585 136162 831000) 0 nil])
([nil nil ((1600 . 1606)) nil (26155 56585 136159 434000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 1670) (undo-tree-id108 . -1) (undo-tree-id109 . -2)) nil (26155 56585 136156 473000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 1670) (undo-tree-id107 . -5)) nil (26155 56585 136151 213000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 1677) (undo-tree-id106 . -1)) nil (26155 56585 136147 850000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 1677) (undo-tree-id103 . -4) (undo-tree-id104 . -5) (undo-tree-id105 . -5)) nil (26155 56585 136143 825000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 1685) (undo-tree-id101 . -1) (undo-tree-id102 . -2)) nil (26155 56585 136136 442000) 0 nil])
([nil nil ((#("mapdata " 0 7 (fontified t) 7 8 (fontified t)) . 1685) (undo-tree-id99 . -7) (undo-tree-id100 . -8)) nil (26155 56585 136129 765000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1686) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 1687) nil (26155 56585 136116 269000) 0 nil])
([nil nil ((1664 . 1669) (#(" " 0 1 (fontified nil)) . 1664) (1663 . 1664) (t 26155 56585 186958 612000)) nil (26155 56709 323944 166000) 0 nil])
([nil nil ((1690 . 1692)) nil (26155 56709 323940 844000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1704) (undo-tree-id275 . -4) 1708 (1704 . 1708) (#("    " 0 4 (fontified nil)) . 1703) (undo-tree-id276 . -4) (1703 . 1708) (#("    " 0 4 (fontified nil)) . 1702) (undo-tree-id277 . -4) (1702 . 1707) (#("    " 0 4 (fontified nil)) . 1701) (undo-tree-id278 . -4) (1705 . 1706)) nil (26155 56709 323936 690000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1707) (undo-tree-id272 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -1708) (undo-tree-id273 . -1) (#(" " 0 1 (fontified t)) . -1709) (undo-tree-id274 . -1) 1710 (1707 . 1710) (1703 . 1707)) nil (26155 56709 323922 145000) 0 nil])
([nil nil ((2004 . 2009) (#("wi" 0 2 (fontified nil)) . 2004) (undo-tree-id171 . -2) (2004 . 2006) (#("width" 0 5 (fontified nil)) . -2004) (undo-tree-id172 . -5) (2004 . 2009) (#("wi" 0 2 (fontified t)) . -2004) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) 2006 (2001 . 2006) (1995 . 2001) (#("he" 0 2 (fontified nil)) . 1995) (undo-tree-id247 . -2) (1995 . 1997) (#("height" 0 6 (fontified nil)) . -1995) (undo-tree-id248 . -6) (1995 . 2001) (#("he" 0 2 (fontified t)) . -1995) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) 1997 (1996 . 1997) (#("index" 0 5 (fontified nil)) . 1996) (undo-tree-id253 . -5) (1995 . 1996) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1995 2009 nil nil nil t #s(yas--exit 2010 nil))) #s(yas--exit 2010 nil) 32 nil #s(yas--field 1 1995 2009 nil nil nil t #s(yas--exit 2010 nil)) nil nil)) (1991 . 2001) (#("get(${1:index})$0" 0 17 (fontified nil)) . 1991) (1991 . 2008) (#("g" 0 1 (fontified nil)) . 1991) (1991 . 1992) (#("get(…)" 0 6 (fontified nil)) . -1991) (1991 . 1997) (#("g" 0 1 (fontified t)) . -1991) (undo-tree-id254 . -1) (undo-tree-id255 . -1) 1992 (1990 . 1992) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1990) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1991) (1990 . 1992) (#("." 0 1 (fontified t)) . -1990) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 1991 (1990 . 1991) (1979 . 1990) (#("ve" 0 2 (fontified nil)) . 1979) (1979 . 1981) (#("vector_data" 0 11 (fontified nil)) . -1979) (1979 . 1990) (#("ve" 0 2 (fontified t)) . -1979) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) 1981 (1979 . 1981) (#("g" 0 1 (fontified t)) . -1979) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("a" 0 1 (fontified t)) . -1980) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("t" 0 1 (fontified t)) . -1981) (undo-tree-id269 . -1) (undo-tree-id270 . -1) 1982 (1967 . 1982) (1963 . 1967) (#("    " 0 4 (fontified nil)) . 1962) (undo-tree-id271 . -4) (1961 . 1967)) nil (26155 56709 323885 361000) 0 nil])
([nil nil ((2010 . 2011) (apply yas--snippet-revive 1991 2010 #s(yas--snippet nil (#s(yas--field 1 1995 2009 nil nil nil t #s(yas--exit 2010 nil))) #s(yas--exit 2010 nil) 32 nil #s(yas--field 1 1995 2009 nil nil nil t #s(yas--exit 2010 nil)) nil nil))) nil (26155 56709 322593 390000) 0 nil])
([nil nil ((2062 . 2067) (#("th" 0 2 (fontified nil)) . 2062) (2062 . 2064) (#("thing" 0 5 (fontified nil)) . -2062) (2062 . 2067) (#("th" 0 2 (fontified t)) . -2062) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) 2064 (2062 . 2064) (apply yas--snippet-revive 2057 2063 #s(yas--snippet nil nil #s(yas--exit 2062 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2062 nil) 33 nil nil nil nil)) (2057 . 2063) (#("dbg!($0)" 0 8 (fontified nil)) . 2057) (2057 . 2065) (#("d" 0 1 (fontified nil)) . 2057) (2057 . 2058) (#("dbg!(…)" 0 7 (fontified nil)) . -2057) (2057 . 2064) (#("d" 0 1 (fontified t)) . -2057) (undo-tree-id282 . -1) (undo-tree-id283 . -1) 2058 (2057 . 2058) (2053 . 2057) (#("    " 0 4 (fontified nil)) . 2052) (undo-tree-id284 . -4) (2051 . 2057) (t 26155 56709 374081 130000)) nil (26155 56719 287637 635000) 0 nil])
([nil nil ((2068 . 2069)) nil (26155 56719 287592 394000) 0 nil])
([nil nil ((1995 . 1997) (t 26155 56719 337013 551000)) nil (26155 56744 869249 687000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1996) (undo-tree-id288 . 1)) nil (26155 56744 869247 618000) 0 nil])
([nil nil ((2002 . 2003) (#(")" 0 1 (fontified nil)) . -2002) (2002 . 2003)) nil (26155 56744 869243 813000) 0 nil])
([nil nil ((2002 . 2006)) nil (26155 56744 869241 112000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 2010) (undo-tree-id287 . -4)) nil (26155 56744 869238 544000) 0 nil])
([nil nil ((2016 . 2020) (2011 . 2016) (#("wi" 0 2 (fontified nil)) . 2011) (2011 . 2013) (#("width" 0 5 (fontified nil)) . -2011) (2011 . 2016) (#("wi" 0 2 (fontified t)) . -2011) (undo-tree-id285 . -2) (undo-tree-id286 . -2) 2013 (2011 . 2013) (2010 . 2012)) nil (26155 56744 869227 936000) 0 nil])
([nil nil ((#("- " 0 2 (fontified t)) . 2003) (undo-tree-id299 . -1) (t 26155 56744 889092 854000)) nil (26155 56775 669311 849000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2003)) nil (26155 56775 669307 333000) 0 nil])
([nil nil ((2003 . 2006)) nil (26155 56775 669305 512000) 0 nil])
([nil nil ((#("- " 0 2 (fontified t)) . 2017) (undo-tree-id291 . -2) (undo-tree-id292 . -1) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2)) nil (26155 56775 669301 766000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2017) (undo-tree-id289 . 1) (undo-tree-id290 . -1)) nil (26155 56775 669282 42000) 0 nil])
([nil nil ((2017 . 2020)) nil (26155 56775 669251 977000) 0 nil])
([nil nil ((apply -3 1962 2031 undo--wrap-and-run-primitive-undo 1962 2031 ((1967 . 1970) 1962)) (t 26155 56775 693735 121000)) nil (26155 57011 795598 68000) 0 nil])
([nil nil ((#("    dbg!(thing);
" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t) 16 17 (fontified t)) . 2068) (undo-tree-id650 . -16) (undo-tree-id651 . -17) (undo-tree-id652 . -17)) nil (26155 57011 795595 81000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2069) (undo-tree-id648 . -4) 2073 (2069 . 2073) (#("    " 0 4 (fontified nil)) . 2068) (undo-tree-id649 . -4) (2068 . 2073) (#("    " 0 4 (fontified nil)) . 2067) (2067 . 2071) (2067 . 2068)) nil (26155 57011 795586 93000) 0 nil])
([nil nil ((2084 . 2090) (#("h" 0 1 (fontified nil)) . 2084) (2084 . 2085) (#("height" 0 6 (fontified nil)) . -2084) (2084 . 2090) (#("h" 0 1 (fontified t)) . -2084) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 2085 (2081 . 2085) (#("r" 0 1 (fontified t)) . -2081) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("a" 0 1 (fontified t)) . -2082) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("n" 0 1 (fontified t)) . -2083) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#("g" 0 1 (fontified t)) . -2084) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("e" 0 1 (fontified t)) . -2085) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) 2086 (2081 . 2086) (2076 . 2081) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2076) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 2077) (2072 . 2078) (2068 . 2072)) nil (26155 57011 795571 883000) 0 nil])
([nil nil ((#("    for i in 0..height
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t) 10 12 (fontified t face font-lock-keyword-face) 12 16 (fontified t) 16 22 (fontified t) 22 23 (fontified t)) . 2068) (undo-tree-id624 . -22) (undo-tree-id625 . -13) (undo-tree-id626 . 1) (undo-tree-id627 . -22) (undo-tree-id628 . -21) 2089) nil (26155 57011 795529 305000) 0 nil])
([nil nil ((1726 . 1731) (#("us" 0 2 (fontified nil)) . 1726) (1726 . 1728) (#("usize" 0 5 (fontified nil)) . -1726) (1726 . 1731) (#("us" 0 2 (fontified t)) . -1726) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) 1728 (1724 . 1728) (1721 . 1724) (1716 . 1721) (#("us" 0 2 (fontified nil)) . 1716) (1716 . 1718) (#("usize" 0 5 (fontified nil)) . -1716) (1716 . 1721) (#("us" 0 2 (fontified t)) . -1716) (undo-tree-id622 . -2) (undo-tree-id623 . -2) 1718 (1713 . 1718) (1712 . 1714) (1706 . 1712) (1702 . 1706)) nil (26155 57011 795512 406000) 0 nil])
([nil nil ((1735 . 1736) (1736 . 1740) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1735) (1735 . 1736) (1734 . 1736) (1732 . 1735)) nil (26155 57011 795494 507000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1808) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("u" 0 1 (fontified t)) . -1809) (undo-tree-id617 . -1) (undo-tree-id618 . -1) 1810 (1808 . 1810)) nil (26155 57011 795488 462000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1736) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) 1737 (#("u" 0 1 (fontified t)) . -1737) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("f" 0 1 (fontified t)) . -1738) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#("f" 0 1 (fontified t)) . -1739) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("e" 0 1 (fontified t)) . -1740) (undo-tree-id613 . -1) (undo-tree-id614 . -1) 1741 (1739 . 1741) (1738 . 1739) (1736 . 1738)) nil (26155 57011 795475 510000) 0 nil])
([nil nil ((1718 . 1720) (#(" " 0 1 (fontified t)) . -1718) (undo-tree-id601 . -1) (undo-tree-id602 . -1) 1719 (1713 . 1719)) nil (26155 57011 795449 527000) 0 nil])
([nil nil ((1745 . 1746) (1743 . 1745) (#("u" 0 1 (fontified nil)) . 1743) (1743 . 1744) (#("u8" 0 2 (fontified nil)) . -1743) (1743 . 1745) (#("u" 0 1 (fontified t)) . -1743) (undo-tree-id599 . -1) (undo-tree-id600 . -1) 1744 (1740 . 1744)) nil (26155 57011 795441 827000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1765 1770 nil nil nil nil #s(yas--exit 1771 nil))) #s(yas--exit 1771 nil) 34 nil #s(yas--field 1 1765 1770 nil nil nil nil #s(yas--exit 1771 nil)) nil nil)) (1761 . 1771) (#("get(${1:index})$0" 0 17 (fontified nil)) . 1761) (1761 . 1778) (#("ge" 0 2 (fontified nil)) . 1761) (1761 . 1763) (#("get(…)" 0 6 (fontified nil)) . -1761) (1761 . 1767) (#("ge" 0 2 (fontified t)) . -1761) (undo-tree-id594 . -2) (undo-tree-id595 . -2) 1763 (1761 . 1763) (1760 . 1761) (1749 . 1760) (#("bu" 0 2 (fontified nil)) . 1749) (1749 . 1751) (#("self.buffer" 0 11 (fontified nil)) . -1749) (1749 . 1760) (#("bu" 0 2 (fontified t)) . -1749) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) 1751 (1749 . 1751)) nil (26155 57011 795430 45000) 0 nil])
([nil nil ((apply yas--snippet-revive 1761 1771 #s(yas--snippet nil (#s(yas--field 1 1765 1770 nil nil nil nil #s(yas--exit 1771 nil))) #s(yas--exit 1771 nil) 34 nil #s(yas--field 1 1765 1770 nil nil nil nil #s(yas--exit 1771 nil)) nil nil))) nil (26155 57011 795413 457000) 0 nil])
([nil nil ((#("u8 " 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t)) . 1743) (undo-tree-id593 . -2)) nil (26155 57011 795411 106000) 0 nil])
([nil nil ((1750 . 1752) (#("u" 0 1 (fontified nil)) . 1750) (1750 . 1751) (#("u8" 0 2 (fontified nil)) . -1750) (1750 . 1752) (#("u" 0 1 (fontified t)) . -1750) (undo-tree-id588 . -1) (undo-tree-id589 . -1) 1751 (1750 . 1751) (apply yas--snippet-revive 1743 1751 #s(yas--snippet nil nil #s(yas--exit 1750 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1750 nil) 35 nil nil nil nil)) (1743 . 1751) (#("Option<$0>" 0 10 (fontified nil)) . 1743) (1743 . 1753) (#("Op" 0 2 (fontified nil)) . 1743) (1743 . 1745) (#("Option<…>" 0 9 (fontified nil)) . -1743) (1743 . 1752) (#("Op" 0 2 (fontified t face font-lock-type-face)) . -1743) (undo-tree-id590 . -1) (undo-tree-id591 . -2) (undo-tree-id592 . -2) 1745 (1743 . 1745)) nil (26155 57011 795403 343000) 0 nil])
([nil nil ((1753 . 1754)) nil (26155 57011 795384 951000) 0 nil])
([nil nil ((1785 . 1786) (1780 . 1785) (#("w" 0 1 (fontified nil)) . 1780) (1780 . 1781) (#("width" 0 5 (fontified nil)) . -1780) (1780 . 1785) (#("w" 0 1 (fontified t)) . -1780) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) 1781 (1780 . 1781) (#("h" 0 1 (fontified t)) . -1780) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) 1781 (1780 . 1781) (1779 . 1780) (1775 . 1779) (#("s" 0 1 (fontified nil)) . 1775) (1775 . 1776) (#("self" 0 4 (fontified nil)) . -1775) (1775 . 1779) (#("se" 0 2 (fontified t)) . -1775) (undo-tree-id579 . -2) (undo-tree-id580 . -2) 1777 (1773 . 1777) (#("2" 0 1 (fontified t)) . -1773) (undo-tree-id581 . -1) (undo-tree-id582 . -1) 1774 (1773 . 1774) (#("i" 0 1 (fontified t)) . -1773) (undo-tree-id583 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -1774) (undo-tree-id584 . -1) (#("d" 0 1 (fontified t)) . -1775) (undo-tree-id585 . -1) (#("e" 0 1 (fontified t)) . -1776) (undo-tree-id586 . -1) (#("x" 0 1 (fontified t)) . -1777) (undo-tree-id587 . -1) 1778) nil (26155 57011 795374 802000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 1773) (undo-tree-id571 . -1) (undo-tree-id572 . -1)) nil (26155 57011 795333 686000) 0 nil])
([nil nil ((1773 . 1774)) nil (26155 57011 795328 918000) 0 nil])
([nil nil ((1786 . 1789)) nil (26155 57011 795327 223000) 0 nil])
([nil nil ((1790 . 1791)) nil (26155 57011 795325 554000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1757) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 1758 (1757 . 1758) (#("	" 0 1 (fontified nil)) . 1756) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (1755 . 1758)) nil (26155 57011 795320 203000) 0 nil])
([nil nil ((1788 . 1794) (#("h" 0 1 (fontified nil)) . 1788) (1788 . 1789) (#("height" 0 6 (fontified nil)) . -1788) (1788 . 1794) (#("h" 0 1 (fontified t)) . -1788) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 1789 (1788 . 1789) (1787 . 1788) (1783 . 1787) (#("s" 0 1 (fontified nil)) . 1783) (1783 . 1784) (#("self" 0 4 (fontified nil)) . -1783) (1783 . 1787) (#("se" 0 2 (fontified t)) . -1783) (undo-tree-id537 . -2) (undo-tree-id538 . -2) 1785 (1781 . 1785) (1775 . 1781) (1770 . 1775) (#("wi" 0 2 (fontified nil)) . 1770) (1770 . 1772) (#("width" 0 5 (fontified nil)) . -1770) (1770 . 1775) (#("wi" 0 2 (fontified t)) . -1770) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) 1772 (1771 . 1772) (1770 . 1771) (1769 . 1770) (1765 . 1769) (#("se" 0 2 (fontified nil)) . 1765) (1765 . 1767) (#("self" 0 4 (fontified nil)) . -1765) (1765 . 1769) (#("se" 0 2 (fontified t)) . -1765) (undo-tree-id542 . -2) (undo-tree-id543 . -2) 1767 (1758 . 1767) (1757 . 1758) (#("	" 0 1 (fontified nil)) . 1756) (undo-tree-id544 . -1) (1757 . 1758) (1756 . 1757)) nil (26155 57011 795260 790000) 0 nil])
([nil nil ((1764 . 1765)) nil (26155 57011 795114 442000) 0 nil])
([nil nil ((1783 . 1784)) nil (26155 57011 795112 641000) 0 nil])
([nil nil ((apply yas--snippet-revive 1804 1808 #s(yas--snippet nil nil #s(yas--exit 1808 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1808 nil) 36 nil nil nil nil)) (1804 . 1808) (#("None$0" 0 6 (fontified nil)) . 1804) (1804 . 1810) (#("N" 0 1 (fontified nil)) . 1804) (1804 . 1805) (#("None" 0 4 (fontified nil)) . -1804) (1804 . 1808) (#("N" 0 1 (fontified t face font-lock-type-face)) . -1804) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) 1805 (1804 . 1805) (1799 . 1804) (1800 . 1801) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1799) (1799 . 1804) (1798 . 1800) (1796 . 1799)) nil (26155 57011 795099 944000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1847) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) 1848) nil (26155 57011 794944 494000) 0 nil])
([nil nil ((1819 . 1824) (1820 . 1821) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1819) (1819 . 1824) (1818 . 1820) (1817 . 1819) (1811 . 1817)) nil (26155 57011 794111 851000) 0 nil])
([nil nil ((#("	self.buffer.get(y*self.width + x)
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 13 (fontified t) 13 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 18 (fontified t) 18 19 (fontified t) 19 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t)) . 1829) (undo-tree-id303 . -34) (undo-tree-id304 . -4) (undo-tree-id305 . -34) (undo-tree-id306 . -34) (undo-tree-id307 . -34) (undo-tree-id308 . -34) (undo-tree-id309 . -34) (undo-tree-id310 . -34) (undo-tree-id311 . -34) (undo-tree-id312 . -34) (undo-tree-id313 . -34) (undo-tree-id314 . -34) (undo-tree-id315 . -34) (undo-tree-id316 . -34) (undo-tree-id317 . -34) (undo-tree-id318 . -34) (undo-tree-id319 . -34) (undo-tree-id320 . -34) (undo-tree-id321 . -34) (undo-tree-id322 . -34) (undo-tree-id323 . -34) (undo-tree-id324 . -34) (undo-tree-id325 . -34) (undo-tree-id326 . -34) (undo-tree-id327 . -34) (undo-tree-id328 . -34) (undo-tree-id329 . -34) (undo-tree-id330 . -34) (undo-tree-id331 . -34) (undo-tree-id332 . -34) (undo-tree-id333 . -34) (undo-tree-id334 . -34) (undo-tree-id335 . -34) (undo-tree-id336 . -34) (undo-tree-id337 . -34) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -35) 1833) nil (26155 57011 794102 125000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1825 . 1826) (#("
" 0 1 (fontified nil)) . -1859) (1824 . 1860) 1820) nil (26155 57011 794003 434000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1875) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1)) nil (26155 57011 793992 77000) 0 nil])
([nil nil ((apply yas--snippet-revive 1860 1868 #s(yas--snippet nil nil #s(yas--exit 1868 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1868 nil) 37 nil nil nil nil)) (1860 . 1868) (#("copied()$0" 0 10 (fontified nil)) . 1860) (1860 . 1870) (#("co" 0 2 (fontified nil)) . 1860) (1860 . 1862) (#("copied()" 0 8 (fontified nil)) . -1860) (1860 . 1868) (#("co" 0 2 (fontified t)) . -1860) (undo-tree-id653 . -2) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -2) (undo-tree-id661 . -2) (undo-tree-id662 . -2) (undo-tree-id663 . -2) (undo-tree-id664 . -2) (undo-tree-id665 . -2) (undo-tree-id666 . -2) (undo-tree-id667 . -2) (undo-tree-id668 . -2) (undo-tree-id669 . -2) (undo-tree-id670 . -2) (undo-tree-id671 . -2) (undo-tree-id672 . -2) (undo-tree-id673 . -2) (undo-tree-id674 . -2) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -2) (undo-tree-id678 . -2) (undo-tree-id679 . -2) (undo-tree-id680 . -2) (undo-tree-id681 . -2) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -2) (undo-tree-id685 . -2) (undo-tree-id686 . -2) (undo-tree-id687 . -2) (undo-tree-id688 . -2) (undo-tree-id689 . -2) (undo-tree-id690 . -2) (undo-tree-id691 . -2) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) 1862 (1860 . 1862) (1859 . 1860) (t 26155 57011 846319 956000)) nil (26155 57024 607890 377000) 0 nil])
([nil nil ((1826 . 1830) (t 26155 57024 661223 40000)) nil (26155 57041 802276 501000) 0 nil])
([nil nil ((1841 . 1842) (1883 . 1884) (1830 . 1841)) nil (26155 57041 802273 384000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1875) (undo-tree-id711 . -1)) nil (26155 57041 802269 469000) 0 nil])
([nil nil ((#("copied" 0 6 (fontified t)) . 1875) (undo-tree-id710 . -5)) nil (26155 57041 802263 654000) 0 nil])
([nil nil ((#("();" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face)) 2 3 (fontified t)) . 1875) (undo-tree-id709 . -2)) nil (26155 57041 802255 233000) 0 nil])
([nil nil ((1875 . 1876)) nil (26155 57041 802229 257000) 0 nil])
([nil nil ((apply yas--snippet-revive 1876 1883 #s(yas--snippet nil nil #s(yas--exit 1883 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1883 nil) 38 nil nil nil nil)) (1876 . 1883) (#("clone()$0" 0 9 (fontified nil)) . 1876) (1876 . 1885) (#("cl" 0 2 (fontified nil)) . 1876) (1876 . 1878) (#("clone() (as Clone)" 0 18 (fontified nil)) . -1876) (1876 . 1894) (#("cl" 0 2 (fontified t)) . -1876) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . -2) (undo-tree-id718 . -2) (undo-tree-id719 . -2) (undo-tree-id720 . -2) (undo-tree-id721 . -2) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) 1878 (1876 . 1878) (1875 . 1876) (t 26155 57041 853026 899000)) nil (26155 57049 829267 205000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 1876) (undo-tree-id1088 . -4) (undo-tree-id1089 . -5) (undo-tree-id1090 . -5) (t 26155 57049 858766 97000)) nil (26155 57059 443365 754000) 0 nil])
([nil nil ((1876 . 1882) (#("cop" 0 3 (fontified nil)) . 1876) (1876 . 1879) (#("copied" 0 6 (fontified nil)) . -1876) (1876 . 1882) (#("cop" 0 3 (fontified t)) . -1876) (undo-tree-id791 . -2) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -2) (undo-tree-id908 . -2) (undo-tree-id909 . -2) (undo-tree-id910 . -2) (undo-tree-id911 . -2) (undo-tree-id912 . -2) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -2) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -2) (undo-tree-id930 . -2) (undo-tree-id931 . -2) (undo-tree-id932 . -2) (undo-tree-id933 . -2) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . -3) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -3) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -3) (undo-tree-id952 . -3) (undo-tree-id953 . -3) (undo-tree-id954 . -3) (undo-tree-id955 . -3) (undo-tree-id956 . -3) (undo-tree-id957 . -3) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -3) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) 1879 (1877 . 1879) (#("p" 0 1 (fontified t)) . -1877) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (#("=" 0 1 (fontified t)) . -1878) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) 1879 (1878 . 1879) (1876 . 1878)) nil (26155 57059 443322 493000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1884) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) 1885 (t 26155 57059 492834 311000)) nil (26155 57076 316356 715000) 0 nil])
([nil nil ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 1830) (undo-tree-id1095 . -4) (undo-tree-id1096 . -3) (undo-tree-id1097 . -4)) nil (26155 57076 316327 919000) 0 nil])
([nil nil ((#("thing " 0 5 (fontified t) 5 6 (fontified t)) . 1830) (undo-tree-id1093 . -5) (undo-tree-id1094 . -6)) nil (26155 57076 316319 166000) 0 nil])
([nil nil ((#("= " 0 2 (fontified t)) . 1830) (undo-tree-id1091 . -1) (undo-tree-id1092 . -2)) nil (26155 57076 316306 357000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 1819) (undo-tree-id1162 . -5) (undo-tree-id1163 . -4) 1823 (t 26155 57076 372398 535000)) nil (26155 57125 444627 417000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2244) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("f" 0 1 (fontified t)) . -2245) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("o" 0 1 (fontified t)) . -2246) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -2247) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#(" " 0 1 (fontified t)) . -2248) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2249) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#(" " 0 1 (fontified t)) . -2250) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("i" 0 1 (fontified t)) . -2251) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -2252) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#(" " 0 1 (fontified t)) . -2253) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("i" 0 1 (fontified t)) . -2254) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("." 0 1 (fontified t)) . -2255) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("." 0 1 (fontified t)) . -2256) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 2257 (2245 . 2257) (2241 . 2245)) nil (26155 57125 444612 370000) 0 nil])
([nil nil ((#("cat.get_buffer();" 0 4 (fontified t) 4 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t)) . 2117) (undo-tree-id1133 . -16) (undo-tree-id1134 . -16) (undo-tree-id1135 . -16)) nil (26155 57125 444564 32000) 0 nil])
([nil nil ((2152 . 2157) (#("wi" 0 2 (fontified nil)) . 2152) (undo-tree-id1112 . -2) (2152 . 2154) (#("width" 0 5 (fontified nil)) . -2152) (undo-tree-id1113 . -5) (2152 . 2157) (#("wi" 0 2 (fontified t)) . -2152) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) 2154 (2153 . 2154) (#("width" 0 5 (fontified nil)) . 2153) (undo-tree-id1117 . -5) (2152 . 2153) (2144 . 2150) (#("he" 0 2 (fontified nil)) . 2144) (undo-tree-id1118 . -2) (2144 . 2146) (#("height" 0 6 (fontified nil)) . -2144) (undo-tree-id1119 . -6) (2144 . 2150) (#("he" 0 2 (fontified t)) . -2144) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) 2146 (2145 . 2146) (#("height" 0 6 (fontified nil)) . 2145) (undo-tree-id1124 . -6) (2144 . 2145) (apply yas--snippet-revive 2130 2142 #s(yas--snippet nil nil #s(yas--exit 2142 nil) 40 nil nil #s(yas--field 1 2126 2142 nil nil nil t #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2142 nil) 40 nil nil #s(yas--field 1 2126 2142 nil nil nil t #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)))) nil)) (2130 . 2142) (#("get_buffer()$0" 0 14 (fontified nil)) . 2130) (undo-tree-id1125 . -14) (2130 . 2144) (#("get_buffer()" 0 12 (fontified nil)) . -2130) (undo-tree-id1126 . -12) (2130 . 2142) (2127 . 2130) (#("buffer" 0 6 (fontified nil)) . 2127) (undo-tree-id1127 . -6) (2126 . 2127) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2126 2142 nil nil nil t #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)))) #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil))) #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil))) #s(yas--exit 2158 nil) 39 nil #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)) nil nil)) (2122 . 2148) (#("new(${1:buffer}, ${2:height}, ${3:width})$0" 0 43 (fontified nil)) . 2122) (2122 . 2165) (#("ne" 0 2 (fontified nil)) . 2122) (2122 . 2124) (#("new(…)" 0 6 (fontified nil)) . -2122) (2122 . 2128) (#("ne" 0 2 (fontified t)) . -2122) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) 2124 (2120 . 2124) (2117 . 2120) (#("M" 0 1 (fontified nil)) . 2117) (2117 . 2118) (#("Map" 0 3 (fontified nil)) . -2117) (2117 . 2120) (#("M" 0 1 (fontified t face font-lock-type-face)) . -2117) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) 2118 (2117 . 2118)) nil (26155 57125 444540 856000) 0 nil])
([nil nil ((2158 . 2159) (apply yas--snippet-revive 2122 2158 #s(yas--snippet nil (#s(yas--field 1 2126 2142 nil nil nil t #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)))) #s(yas--field 2 2144 2150 nil nil nil t #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil))) #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil))) #s(yas--exit 2158 nil) 39 nil #s(yas--field 3 2152 2157 nil nil nil t #s(yas--exit 2158 nil)) nil nil))) nil (26155 57125 444452 764000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified t face font-lock-variable-name-face)) . 2103) (undo-tree-id1180 . -5) (undo-tree-id1181 . -6) (t 26155 57125 466190 129000)) nil (26155 57138 233638 962000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 2103) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1)) nil (26155 57138 233631 517000) 0 nil])
([nil nil ((#("data " 0 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t)) . 2103) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -5)) nil (26155 57138 233621 495000) 0 nil])
([nil nil ((2106 . 2112) (#("d" 0 1 (fontified t)) . -2106) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("a" 0 1 (fontified t)) . -2107) (undo-tree-id1166 . -1) 2108 (2106 . 2108) (2103 . 2106) (#("M" 0 1 (fontified t)) . -2103) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("a" 0 1 (fontified t)) . -2104) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("p" 0 1 (fontified t)) . -2105) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) 2106 (2104 . 2106) (2103 . 2104)) nil (26155 57138 233599 328000) 0 nil])
([nil nil ((apply yas--snippet-revive 2281 2290 #s(yas--snippet nil (#s(yas--field 1 2285 2286 nil nil nil t #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil))) #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil))) #s(yas--exit 2290 nil) 42 nil #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil)) nil nil)) (#("y" 0 1 (fontified nil)) . 2289) (undo-tree-id1182 . -1) (2288 . 2289) (#("x" 0 1 (fontified nil)) . 2286) (undo-tree-id1183 . -1) (2285 . 2286) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2285 2286 nil nil nil t #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil))) #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil))) #s(yas--exit 2290 nil) 42 nil #s(yas--field 2 2288 2289 nil nil nil t #s(yas--exit 2290 nil)) nil nil)) (2281 . 2290) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2281) (2281 . 2302) (#("ge" 0 2 (fontified nil)) . 2281) (2281 . 2283) (#("get(…)" 0 6 (fontified nil)) . -2281) (2281 . 2287) (#("ge" 0 2 (fontified t)) . -2281) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) 2283 (2281 . 2283) (#("e" 0 1 (fontified t)) . -2281) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) 2282 (2280 . 2282) (2272 . 2280) (#("map" 0 3 (fontified nil)) . 2272) (2272 . 2275) (#("map_data" 0 8 (fontified nil)) . -2272) (2272 . 2280) (#("map" 0 3 (fontified t)) . -2272) (undo-tree-id1190 . -2) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) 2275 (2272 . 2275) (apply yas--snippet-revive 2267 2273 #s(yas--snippet nil nil #s(yas--exit 2272 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2272 nil) 41 nil nil nil nil)) (2267 . 2273) (#("dbg!($0)" 0 8 (fontified nil)) . 2267) (2267 . 2275) (#("d" 0 1 (fontified nil)) . 2267) (2267 . 2268) (#("dbg!(…)" 0 7 (fontified nil)) . -2267) (2267 . 2274) (#("d" 0 1 (fontified t)) . -2267) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) 2268 (2267 . 2268) (#("m" 0 1 (fontified t)) . -2267) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (#("a" 0 1 (fontified t)) . -2268) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (#("p" 0 1 (fontified t)) . -2269) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("_" 0 1 (fontified t)) . -2270) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (#("d" 0 1 (fontified t)) . -2271) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("a" 0 1 (fontified t)) . -2272) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("t" 0 1 (fontified t)) . -2273) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#("a" 0 1 (fontified t)) . -2274) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("." 0 1 (fontified t)) . -2275) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) 2276 (2275 . 2276) (2267 . 2275) (#("map" 0 3 (fontified nil)) . 2267) (2267 . 2270) (#("map_data" 0 8 (fontified nil)) . -2267) (2267 . 2275) (#("map" 0 3 (fontified t)) . -2267) (undo-tree-id1213 . -2) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) 2270 (2269 . 2270) (#("p" 0 1 (fontified t)) . -2269) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("." 0 1 (fontified t)) . -2270) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("g" 0 1 (fontified t)) . -2271) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("e" 0 1 (fontified t)) . -2272) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) 2273 (2267 . 2273) (2266 . 2267) 2265 (t 26155 57138 287648 598000)) nil (26155 57220 924946 542000) 0 nil])
([nil nil ((2291 . 2292)) nil (26155 57220 924830 623000) 0 nil])
([nil nil ((#("    dbg!(map_data.get(0, 0));
" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 18 (fontified t) 18 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t) 29 30 (fontified t)) . 2263) (undo-tree-id1419 . -28) (undo-tree-id1420 . -29) (undo-tree-id1421 . -28) (undo-tree-id1422 . 1) (undo-tree-id1423 . -30) (undo-tree-id1424 . -30) (undo-tree-id1425 . -28) (undo-tree-id1426 . -28) (undo-tree-id1427 . -28) (undo-tree-id1428 . -28) (undo-tree-id1429 . -28) 2291 (t 26155 57220 956173 666000)) nil (26155 57335 557782 547000) 0 nil])
([nil nil ((2265 . 2269) (#("    " 0 4 (fontified nil)) . 2264) (undo-tree-id1417 . -4) (2264 . 2269) (#("    " 0 4 (fontified nil)) . 2263) (undo-tree-id1418 . -4) (2267 . 2268) (2263 . 2267)) nil (26155 57335 557546 160000) 0 nil])
([nil nil ((2289 . 2298) (2288 . 2289) (2289 . 2293) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2288) (2288 . 2289) (2287 . 2289) (2285 . 2288) (2280 . 2285) (#("wi" 0 2 (fontified nil)) . 2280) (2280 . 2282) (#("width" 0 5 (fontified nil)) . -2280) (2280 . 2285) (#("wi" 0 2 (fontified t)) . -2280) (undo-tree-id1414 . -1) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) 2282 (2280 . 2282) (2268 . 2280) (2264 . 2268)) nil (26155 57335 557535 732000) 0 nil])
([nil nil ((2277 . 2278) (#("i" 0 1 (fontified t)) . 2277) (undo-tree-id1413 . -1)) nil (26155 57335 557522 565000) 0 nil])
([nil nil ((2298 . 2299)) nil (26155 57335 557518 772000) 0 nil])
([nil nil ((2277 . 2278) (#("1" 0 1 (fontified t)) . 2277) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1)) nil (26155 57335 557512 784000) 0 nil])
([nil nil ((2310 . 2315) (2311 . 2312) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2310) (2310 . 2315) (2309 . 2311) (2307 . 2310) (2301 . 2307) (#("he" 0 2 (fontified nil)) . 2301) (2301 . 2303) (#("height" 0 6 (fontified nil)) . -2301) (2301 . 2307) (#("he" 0 2 (fontified t)) . -2301) (undo-tree-id1258 . -2) (undo-tree-id1259 . -2) (undo-tree-id1260 . -2) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -2) (undo-tree-id1314 . -2) (undo-tree-id1315 . -2) (undo-tree-id1316 . -2) (undo-tree-id1317 . -2) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -2) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) 2303 (2302 . 2303) (2298 . 2302) (#("1" 0 1 (fontified t)) . -2298) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) 2299) nil (26155 57335 557442 986000) 0 nil])
([nil nil ((2327 . 2331) (#("t" 0 1 (fontified t)) . -2327) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (#("h" 0 1 (fontified t)) . -2328) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) 2329 (2327 . 2329) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2327 2331 nil nil nil t #s(yas--exit 2332 nil))) #s(yas--exit 2332 nil) 43 nil #s(yas--field 1 2327 2331 nil nil nil t #s(yas--exit 2332 nil)) nil nil)) (2322 . 2328) (#("Some($1)$0" 0 10 (fontified nil)) . 2322) (2322 . 2332) (#("So" 0 2 (fontified nil)) . 2322) (2322 . 2324) (#("Some(…)" 0 7 (fontified nil)) . -2322) (2322 . 2329) (#("So" 0 2 (fontified t face font-lock-type-face)) . -2322) (undo-tree-id1247 . -1) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) 2324 (2322 . 2324) (2320 . 2322) (2318 . 2320) (2316 . 2318) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2316) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (#(" " 0 1 (fontified t)) . -2317) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) 2318 (#("m" 0 1 (fontified t)) . -2318) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("a" 0 1 (fontified t)) . -2319) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) 2320 (2315 . 2320)) nil (26155 57335 556986 628000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2392) (2392 . 2393) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2392) (2392 . 2393) (2391 . 2393) (2390 . 2392) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -2390) (2390 . 2391) (apply yas--snippet-revive 2381 2391 #s(yas--snippet nil nil #s(yas--exit 2390 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2390 nil) 45 nil nil nil nil)) (2381 . 2391) (#("println!($0)" 0 12 (fontified nil)) . 2381) (2381 . 2393) (#("pr" 0 2 (fontified nil)) . 2381) (2381 . 2383) (#("println!(…)" 0 11 (fontified nil)) . -2381) (2381 . 2392) (#("pr" 0 2 (fontified t)) . -2381) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -2) 2383 (2381 . 2383) (2375 . 2381) (2376 . 2378) (#("		    " 0 6 (fontified nil face (rainbow-delimiters-depth-5-face))) . 2375) (2375 . 2381) (2374 . 2376) (2365 . 2375) (2361 . 2365) (#("da" 0 2 (fontified nil)) . 2361) (2361 . 2363) (#("data" 0 4 (fontified nil)) . -2361) (2361 . 2365) (#("da" 0 2 (fontified t)) . -2361) (undo-tree-id1230 . -2) (undo-tree-id1231 . -2) 2363 (2358 . 2363) (2356 . 2358) (2357 . 2362) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2356) (2356 . 2358) (2355 . 2357) (2353 . 2356) (apply yas--snippet-revive 2344 2353 #s(yas--snippet nil (#s(yas--field 1 2348 2349 nil nil nil t #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil))) #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil))) #s(yas--exit 2353 nil) 44 nil #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil)) nil nil)) (#("y" 0 1 (fontified nil)) . 2352) (2351 . 2352) (#("x" 0 1 (fontified nil)) . 2349) (2348 . 2349) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2348 2349 nil nil nil t #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil))) #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil))) #s(yas--exit 2353 nil) 44 nil #s(yas--field 2 2351 2352 nil nil nil t #s(yas--exit 2353 nil)) nil nil)) (2344 . 2353) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2344) (2344 . 2365) (#("ge" 0 2 (fontified nil)) . 2344) (2344 . 2346) (#("get(…)" 0 6 (fontified nil)) . -2344) (2344 . 2350) (#("ge" 0 2 (fontified t)) . -2344) (undo-tree-id1232 . -1) (undo-tree-id1233 . -2) (undo-tree-id1234 . -2) 2346 (2343 . 2346) (2335 . 2343) (#("map_dat" 0 7 (fontified nil)) . 2335) (2335 . 2342) (#("map_data" 0 8 (fontified nil)) . -2335) (2335 . 2343) (#("map_dat" 0 7 (fontified t)) . -2335) (undo-tree-id1235 . -7) (undo-tree-id1236 . -7) 2342 (#("a" 0 1 (fontified t)) . -2342) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) 2343 (2335 . 2343) (#("ma" 0 2 (fontified nil)) . 2335) (2335 . 2337) (#("map_data" 0 8 (fontified nil)) . -2335) (2335 . 2343) (#("ma" 0 2 (fontified t)) . -2335) (undo-tree-id1239 . -2) (undo-tree-id1240 . -2) 2337 (2336 . 2337) (2332 . 2336) (apply yas--snippet-revive 2322 2332 #s(yas--snippet nil (#s(yas--field 1 2327 2331 nil nil nil t #s(yas--exit 2332 nil))) #s(yas--exit 2332 nil) 43 nil #s(yas--field 1 2327 2331 nil nil nil t #s(yas--exit 2332 nil)) nil nil))) nil (26155 57335 556934 661000) 0 nil])
([nil nil ((2392 . 2396)) nil (26155 57335 556866 137000) 0 nil])
([nil nil ((2399 . 2400)) nil (26155 57335 556854 32000) 0 nil])
([nil nil ((#("    let buffer = cat.get_buffer();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 35 (fontified t)) . 2462) (undo-tree-id1430 . -34) (t 26155 57335 615274 838000)) nil (26155 57344 263897 847000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t face rust-string-interpolation)) . 2392) (undo-tree-id1613 . -3) (undo-tree-id1614 . -4) (t 26155 57344 318976 944000)) nil (26155 57365 660497 98000) 0 nil])
([nil nil ((#("205 " 0 4 (fontified t)) . 2369) (undo-tree-id1569 . -3) (undo-tree-id1570 . -4) (undo-tree-id1571 . -4) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -4) (undo-tree-id1576 . -4) (undo-tree-id1577 . -4) (undo-tree-id1578 . -4) (undo-tree-id1579 . -4) (undo-tree-id1580 . -4) (undo-tree-id1581 . -3) (undo-tree-id1582 . -3) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3) (undo-tree-id1585 . -3) (undo-tree-id1586 . -3) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -4)) nil (26155 57365 660486 300000) 0 nil])
([nil nil ((2366 . 2372) (#("!" 0 1 (fontified t)) . -2366) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (#("=" 0 1 (fontified t)) . -2367) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (#(" " 0 1 (fontified t)) . -2368) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) 2369) nil (26155 57365 660389 736000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2394) (2394 . 2395) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2394) (2394 . 2395) (2393 . 2395) (2392 . 2393) (t 26155 57365 690518 189000)) nil (26155 57379 26742 37000) 0 nil])
([nil nil ((2396 . 2402)) nil (26155 57379 26728 177000) 0 nil])
([nil nil ((#("    dbg!(height);
    dbg!(width);

" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 18 (fontified t) 18 22 (fontified t) 22 26 (fontified t face font-lock-preprocessor-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 35 (fontified t) 35 36 (fontified t)) . 2227) (undo-tree-id1615 . -35) (undo-tree-id1616 . -35) (undo-tree-id1617 . -36) (undo-tree-id1618 . -36) (undo-tree-id1619 . -35) (undo-tree-id1620 . -36) (undo-tree-id1621 . -36) (undo-tree-id1622 . -36) (undo-tree-id1623 . -36) (undo-tree-id1624 . -36) (undo-tree-id1625 . -36) (undo-tree-id1626 . -36) (undo-tree-id1627 . -36) (undo-tree-id1628 . -36) (undo-tree-id1629 . -36) (undo-tree-id1630 . -36) (undo-tree-id1631 . -36) (undo-tree-id1632 . -36) (undo-tree-id1633 . -35) (undo-tree-id1634 . -35) (undo-tree-id1635 . -35) (undo-tree-id1636 . -35) (undo-tree-id1637 . -35) (undo-tree-id1638 . -35) (undo-tree-id1639 . -35) (undo-tree-id1640 . -35) (undo-tree-id1641 . -35) (undo-tree-id1642 . -36) (undo-tree-id1643 . -35) (undo-tree-id1644 . -35) (undo-tree-id1645 . -35) (undo-tree-id1646 . -35) (undo-tree-id1647 . -35) (undo-tree-id1648 . -35) (undo-tree-id1649 . -35) (undo-tree-id1650 . -35) (undo-tree-id1651 . -35) (undo-tree-id1652 . -35) (undo-tree-id1653 . -35) (undo-tree-id1654 . -35) (undo-tree-id1655 . -18) (undo-tree-id1656 . -18) (undo-tree-id1657 . -18) (undo-tree-id1658 . -18) (undo-tree-id1659 . -18) (undo-tree-id1660 . -18) (undo-tree-id1661 . -18) (undo-tree-id1662 . -18) (undo-tree-id1663 . -18) (undo-tree-id1664 . -36) (t 26155 57379 82407 25000)) nil (26155 57464 398268 329000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2465 . 2466) (nil fontified nil 2430 . 2466) (2430 . 2466)) nil (26155 57464 398162 726000) 0 nil])
([nil nil ((2466 . 2470)) nil (26155 57464 398151 148000) 0 nil])
([nil nil ((apply yas--snippet-revive 2483 2496 #s(yas--snippet nil (#s(yas--field 1 2487 2490 nil nil nil t #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil))) #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil))) #s(yas--exit 2496 nil) 47 nil #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil)) nil nil)) (2493 . 2495) (#("y" 0 1 (fontified nil)) . 2493) (undo-tree-id1665 . -1) (2492 . 2493) (#("," 0 1 (fontified t)) . -2490) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#(" " 0 1 (fontified t)) . -2491) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) 2492 (2490 . 2492) (2488 . 2490) (#("x" 0 1 (fontified nil)) . 2488) (undo-tree-id1670 . -1) (2487 . 2488) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2487 2490 nil nil nil t #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil))) #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil))) #s(yas--exit 2496 nil) 47 nil #s(yas--field 2 2492 2495 nil nil nil t #s(yas--exit 2496 nil)) nil nil)) (2483 . 2492) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2483) (2483 . 2504) (#("ge" 0 2 (fontified nil)) . 2483) (2483 . 2485) (#("get(…)" 0 6 (fontified nil)) . -2483) (2483 . 2489) (#("ge" 0 2 (fontified t)) . -2483) (undo-tree-id1671 . -1) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) 2485 (2482 . 2485) (2474 . 2482) (#("ma" 0 2 (fontified nil)) . 2474) (2474 . 2476) (#("map_data" 0 8 (fontified nil)) . -2474) (2474 . 2482) (#("ma" 0 2 (fontified t)) . -2474) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) 2476 (2474 . 2476) (apply yas--snippet-revive 2469 2475 #s(yas--snippet nil nil #s(yas--exit 2474 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2474 nil) 46 nil nil nil nil)) (2469 . 2475) (#("dbg!($0)" 0 8 (fontified nil)) . 2469) (2469 . 2477) (#("d" 0 1 (fontified nil)) . 2469) (2469 . 2470) (#("dbg!(…)" 0 7 (fontified nil)) . -2469) (2469 . 2476) (#("d" 0 1 (fontified t)) . -2469) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) 2470 (2469 . 2470) (2465 . 2469) (t 26155 57464 456061 506000)) nil (26155 57554 966760 154000) 0 nil])
([nil nil ((2497 . 2498)) nil (26155 57554 966695 493000) 0 nil])
([nil nil ((2246 . 2248) (apply yas--snippet-revive 2242 2247 #s(yas--snippet nil nil #s(yas--exit 2246 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2246 nil) 48 nil nil nil nil)) (2242 . 2247) (#("Vec<$0>" 0 7 (fontified nil)) . 2242) (2242 . 2249) (#("Ve" 0 2 (fontified nil)) . 2242) (2242 . 2244) (#("Vec<…>" 0 6 (fontified nil)) . -2242) (2242 . 2248) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -2242) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) 2244 (2240 . 2244) (#(" " 0 1 (fontified t)) . -2240) (undo-tree-id1762 . -1) 2241 (2226 . 2241) (t 26155 57555 24607 750000)) nil (26155 57634 949909 940000) 0 nil])
([nil nil ((2249 . 2250)) nil (26155 57634 949900 332000) 0 nil])
([nil nil ((apply yas--snippet-revive 2257 2262 #s(yas--snippet nil nil #s(yas--exit 2262 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2262 nil) 49 nil nil nil nil)) (2257 . 2262) (#("new()$0" 0 7 (fontified nil)) . 2257) (2257 . 2264) (#("new" 0 3 (fontified nil)) . 2257) (2257 . 2260) (#("new()" 0 5 (fontified nil)) . -2257) (2257 . 2262) (#("new" 0 3 (fontified t)) . -2257) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) 2260 (2255 . 2260) (2252 . 2255) (#("Ve" 0 2 (fontified nil)) . 2252) (2252 . 2254) (#("Vec" 0 3 (fontified nil)) . -2252) (2252 . 2255) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -2252) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) 2254 (2249 . 2254) (#(" " 0 1 (fontified t)) . -2249) (undo-tree-id1759 . -1) 2250 (2249 . 2250)) nil (26155 57634 949890 368000) 0 nil])
([nil nil ((2278 . 2279) (#("0" 0 1 (fontified t)) . -2278) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) 2279) nil (26155 57634 949789 558000) 0 nil])
([nil nil ((2286 . 2288)) nil (26155 57634 949755 694000) 0 nil])
([nil nil ((2310 . 2312)) nil (26155 57634 949747 336000) 0 nil])
([nil nil ((#("	    if let Some(data) = map_data.get(i, j) {
		if data < 100 {
		    println!(\"{},{}\", i, j);
		}" 0 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-type-face) 16 17 (fontified t face (rainbow-delimiters-depth-4-face)) 17 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-4-face)) 22 25 (fontified t) 25 34 (fontified t) 34 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-4-face)) 38 39 (fontified t) 39 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-4-face)) 43 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-4-face)) 45 46 (fontified t) 46 48 (fontified t) 48 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 56 (fontified t) 56 57 (syntax-table (1) fontified t) 57 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-5-face)) 63 64 (fontified t) 64 70 (fontified t) 70 78 (fontified t face rust-builtin-formatting-macro) 78 79 (fontified t face (rainbow-delimiters-depth-6-face)) 79 80 (fontified t face font-lock-string-face) 80 81 (fontified t face rust-string-interpolation) 81 82 (fontified t face rust-string-interpolation) 82 83 (fontified t face font-lock-string-face) 83 84 (fontified t face rust-string-interpolation) 84 85 (fontified t face rust-string-interpolation) 85 86 (fontified t face font-lock-string-face) 86 92 (fontified t) 92 93 (fontified t face (rainbow-delimiters-depth-6-face)) 93 94 (fontified t) 94 95 (fontified t) 95 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-5-face))) . 2315) (undo-tree-id1764 . -97) (undo-tree-id1765 . -97) (undo-tree-id1766 . -97) (undo-tree-id1767 . -9) (undo-tree-id1768 . -97) (t 26155 57634 967470 518000)) nil (26155 57643 475941 385000) 0 nil])
([nil nil ((#("	    }
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t)) . 2316) (undo-tree-id1763 . -6)) nil (26155 57643 475924 723000) 0 nil])
([nil nil ((2317 . 2322) (#("	    " 0 5 (fontified nil)) . 2316) (undo-tree-id1789 . -5) (undo-tree-id1790 . -5) (undo-tree-id1791 . -5) (undo-tree-id1792 . -5) (undo-tree-id1793 . -5) (undo-tree-id1794 . -5) (undo-tree-id1795 . -5) (undo-tree-id1796 . -5) (undo-tree-id1797 . -5) (undo-tree-id1798 . -5) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (2316 . 2322) (#("	    " 0 5 (fontified nil)) . 2315) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -5) (undo-tree-id1810 . -5) (undo-tree-id1811 . -5) (undo-tree-id1812 . -5) (undo-tree-id1813 . -5) (2320 . 2321) (2315 . 2320) (t 26155 57643 495358 392000)) nil (26155 57658 129980 208000) 0 nil])
([nil nil ((apply yas--snippet-revive 2346 2355 #s(yas--snippet nil (#s(yas--field 1 2350 2351 nil nil nil t #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil))) #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil))) #s(yas--exit 2355 nil) 51 nil #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil)) #s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil)) nil)) (#("y" 0 1 (fontified nil)) . 2354) (undo-tree-id1769 . -1) (2353 . 2354) (#("x" 0 1 (fontified nil)) . 2351) (undo-tree-id1770 . -1) (2350 . 2351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2350 2351 nil nil nil t #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil))) #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil))) #s(yas--exit 2355 nil) 51 nil #s(yas--field 2 2353 2354 nil nil nil t #s(yas--exit 2355 nil)) #s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil)) nil)) (2346 . 2355) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2346) (undo-tree-id1771 . -21) (2346 . 2367) (#("ge" 0 2 (fontified nil)) . 2346) (undo-tree-id1772 . -2) (2346 . 2348) (#("get(…)" 0 6 (fontified nil)) . -2346) (undo-tree-id1773 . -6) (2346 . 2352) (#("ge" 0 2 (fontified t)) . -2346) (undo-tree-id1774 . -1) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) 2348 (2345 . 2348) (2337 . 2345) (#("ma" 0 2 (fontified nil)) . 2337) (undo-tree-id1778 . -2) (2337 . 2339) (#("map_data" 0 8 (fontified nil)) . -2337) (undo-tree-id1779 . -8) (2337 . 2345) (#("ma" 0 2 (fontified t)) . -2337) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) 2339 (2338 . 2339) (#("value" 0 5 (fontified nil)) . 2338) (undo-tree-id1784 . -5) (2337 . 2338) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil))) #s(yas--exit 2356 nil) 50 nil #s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil)) nil nil)) (2332 . 2343) (#("push(${1:value})$0" 0 18 (fontified nil)) . 2332) (2332 . 2350) (#("pu" 0 2 (fontified nil)) . 2332) (2332 . 2334) (#("push(…)" 0 7 (fontified nil)) . -2332) (2332 . 2339) (#("pu" 0 2 (fontified t)) . -2332) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) 2334 (2332 . 2334) (2331 . 2332) (2321 . 2331) (#("ve" 0 2 (fontified nil)) . 2321) (2321 . 2323) (#("vectordata" 0 10 (fontified nil)) . -2321) (2321 . 2331) (#("ve" 0 2 (fontified t)) . -2321) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) 2323 (2321 . 2323) (2316 . 2321)) nil (26155 57658 129931 102000) 0 nil])
([nil nil ((2356 . 2357) (apply yas--snippet-revive 2332 2356 #s(yas--snippet nil (#s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil))) #s(yas--exit 2356 nil) 50 nil #s(yas--field 1 2337 2355 nil nil nil t #s(yas--exit 2356 nil)) nil nil))) nil (26155 57658 129871 11000) 0 nil])
([nil nil ((apply yas--snippet-revive 2356 2364 #s(yas--snippet nil nil #s(yas--exit 2364 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2364 nil) 52 nil nil nil nil)) (2356 . 2364) (#("unwrap()$0" 0 10 (fontified nil)) . 2356) (2356 . 2366) (#("un" 0 2 (fontified nil)) . 2356) (2356 . 2358) (#("unwrap()" 0 8 (fontified nil)) . -2356) (2356 . 2364) (#("un" 0 2 (fontified t)) . -2356) (undo-tree-id1814 . -1) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2) (undo-tree-id1869 . -2) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) (undo-tree-id1874 . -2) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) 2358 (2356 . 2358) (2355 . 2356) (t 26155 57677 159134 882000)) nil (26155 57691 740408 778000) 0 nil])
([nil nil ((2231 . 2234) (2230 . 2231) (t 26155 57691 799139 71000)) nil (26155 57700 180032 843000) 0 nil])
([nil nil ((2391 . 2395) (#("l" 0 1 (fontified t)) . -2391) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (#("e" 0 1 (fontified t)) . -2392) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -2393) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (#(" " 0 1 (fontified t)) . -2394) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) 2395 (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -2395) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -2396) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2397) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -2398) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -2399) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (#(" " 0 1 (fontified t)) . -2400) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (#("=" 0 1 (fontified t)) . -2401) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (#(" " 0 1 (fontified t)) . -2402) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (#("A" 0 1 (fontified t face font-lock-type-face)) . -2403) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -2404) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (#("y" 0 1 (fontified nil face font-lock-type-face)) . -2405) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#("m" 0 1 (fontified nil face font-lock-type-face)) . -2406) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (#("a" 0 1 (fontified nil face font-lock-type-face)) . -2407) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (#("p" 0 1 (fontified nil face font-lock-type-face)) . -2408) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -2409) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (#("m" 0 1 (fontified t face font-lock-type-face)) . -2410) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -2411) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -2412) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -2413) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (#(":" 0 1 (fontified t)) . -2414) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (#(":" 0 1 (fontified t)) . -2415) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 2416 (#("n" 0 1 (fontified t)) . -2416) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (#("e" 0 1 (fontified t)) . -2417) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (#("w" 0 1 (fontified t)) . -2418) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) 2419 (2416 . 2419) (#("n" 0 1 (fontified t)) . -2416) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (#("e" 0 1 (fontified t)) . -2417) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) 2418 (2416 . 2418) (#("e" 0 1 (fontified t)) . -2416) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) 2417 (2414 . 2417) (#(";" 0 1 (fontified t)) . -2414) (undo-tree-id2289 . -1) 2415 (#(";" 0 1 (fontified t)) . -2415) (undo-tree-id2290 . -1) 2416 (2414 . 2416) (2403 . 2414) (#("A" 0 1 (fontified nil)) . 2403) (2403 . 2404) (#("AnymapImage" 0 11 (fontified nil)) . -2403) (2403 . 2414) (#("A" 0 1 (fontified t face font-lock-type-face)) . -2403) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) 2404 (2391 . 2404) (2387 . 2391) (#("    " 0 4 (fontified nil)) . 2386) (undo-tree-id2294 . -4) (2385 . 2391) (t 26155 57700 239167 404000)) nil (26155 57857 952675 202000) 0 nil])
([nil nil ((#("    cat.
" 0 8 (fontified t) 8 9 (fontified t)) . 2387) (undo-tree-id2196 . -8) (undo-tree-id2197 . -4) (undo-tree-id2198 . 1) (undo-tree-id2199 . -7) (undo-tree-id2200 . -7) 2394) nil (26155 57857 952485 309000) 0 nil])
([nil nil ((2388 . 2392) (#("    " 0 4 (fontified nil)) . 2387) (undo-tree-id2194 . 4) (undo-tree-id2195 . -4) (2391 . 2392)) nil (26155 57857 952474 428000) 0 nil])
([nil nil ((2417 . 2420) (2406 . 2417) (#("A" 0 1 (fontified nil)) . 2406) (2406 . 2407) (#("AnymapImage" 0 11 (fontified nil)) . -2406) (2406 . 2417) (#("A" 0 1 (fontified t face font-lock-type-face)) . -2406) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) 2407 (2391 . 2407) (2387 . 2391)) nil (26155 57857 952465 497000) 0 nil])
([nil nil ((2423 . 2433) (#("ve" 0 2 (fontified nil)) . 2423) (undo-tree-id2089 . -2) (2423 . 2425) (#("vectordata" 0 10 (fontified nil)) . -2423) (undo-tree-id2090 . -10) (2423 . 2433) (#("ve" 0 2 (fontified t)) . -2423) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (undo-tree-id2094 . -2) (undo-tree-id2095 . -2) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) (undo-tree-id2114 . -2) (undo-tree-id2115 . -2) (undo-tree-id2116 . -2) (undo-tree-id2117 . -2) (undo-tree-id2118 . -2) (undo-tree-id2119 . -2) (undo-tree-id2120 . -2) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) (undo-tree-id2125 . -2) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -2) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -2) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -2) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -2) (undo-tree-id2146 . -2) (undo-tree-id2147 . -2) (undo-tree-id2148 . -2) (undo-tree-id2149 . -2) (undo-tree-id2150 . -2) (undo-tree-id2151 . -2) (undo-tree-id2152 . -2) (undo-tree-id2153 . -2) (undo-tree-id2154 . -2) (undo-tree-id2155 . -2) (undo-tree-id2156 . -2) (undo-tree-id2157 . -2) (undo-tree-id2158 . -2) (undo-tree-id2159 . -2) (undo-tree-id2160 . -2) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) (undo-tree-id2165 . -2) (undo-tree-id2166 . -2) (undo-tree-id2167 . -2) (undo-tree-id2168 . -2) (undo-tree-id2169 . -2) (undo-tree-id2170 . -2) (undo-tree-id2171 . -2) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) 2425 (2424 . 2425) (#("buffer" 0 6 (fontified nil)) . 2424) (undo-tree-id2187 . -6) (2423 . 2424) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2423 2433 nil nil nil t #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))))) #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil)))) #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))) #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))) #s(yas--exit 2461 nil) 53 nil #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil)))) nil nil)) (2419 . 2457) (#("pgm(${1:buffer}, ${2:saturation}, ${3:height}, ${4:width})$0" 0 60 (fontified nil)) . 2419) (2419 . 2479) (#("pg" 0 2 (fontified nil)) . 2419) (2419 . 2421) (#("pgm(…)" 0 6 (fontified nil)) . -2419) (2419 . 2425) (#("pg" 0 2 (fontified t)) . -2419) (undo-tree-id2188 . -1) (undo-tree-id2189 . -2) (undo-tree-id2190 . -2) 2421 (2420 . 2421)) nil (26155 57857 952440 497000) 0 nil])
([nil nil ((apply yas--snippet-revive 2419 2461 #s(yas--snippet nil (#s(yas--field 1 2423 2433 nil nil nil t #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))))) #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil)))) #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))) #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil))) #s(yas--exit 2461 nil) 53 nil #s(yas--field 2 2435 2445 nil nil nil nil #s(yas--field 3 2447 2453 nil nil nil nil #s(yas--field 4 2455 2460 nil nil nil nil #s(yas--exit 2461 nil)))) nil nil))) nil (26155 57857 952231 717000) 0 nil])
([nil nil ((#(":pgm(vectordata, saturation, height, width)" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-2-face)) 5 15 (fontified t) 15 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face))) . 2418) (undo-tree-id1903 . -5) (undo-tree-id1904 . 26) (undo-tree-id1905 . -17) (undo-tree-id1906 . -5) (undo-tree-id1907 . -5) (undo-tree-id1908 . -5) (undo-tree-id1909 . -5) (undo-tree-id1910 . -5) (undo-tree-id1911 . -5) (undo-tree-id1912 . -5) (undo-tree-id1913 . -5) (undo-tree-id1914 . -5) (undo-tree-id1915 . -5) (undo-tree-id1916 . -5) (undo-tree-id1917 . -5) (undo-tree-id1918 . -5) (undo-tree-id1919 . -5) (undo-tree-id1920 . -5) (undo-tree-id1921 . -5) (undo-tree-id1922 . -5) (undo-tree-id1923 . -5) (undo-tree-id1924 . -5) (undo-tree-id1925 . -5) (undo-tree-id1926 . -5) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) (undo-tree-id1929 . -5) (undo-tree-id1930 . -5) (undo-tree-id1931 . -5) (undo-tree-id1932 . -5) (undo-tree-id1933 . -5) (undo-tree-id1934 . -5) (undo-tree-id1935 . -5) (undo-tree-id1936 . -5) (undo-tree-id1937 . -5) (undo-tree-id1938 . -5) (undo-tree-id1939 . -5) (undo-tree-id1940 . -5) (undo-tree-id1941 . -5) (undo-tree-id1942 . -5) (undo-tree-id1943 . -5) (undo-tree-id1944 . -5) (undo-tree-id1945 . -5) (undo-tree-id1946 . -5) (undo-tree-id1947 . -5) (undo-tree-id1948 . -5) (undo-tree-id1949 . -5) (undo-tree-id1950 . -5) (undo-tree-id1951 . -5) (undo-tree-id1952 . -5) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -5) (undo-tree-id1970 . -5) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) (undo-tree-id1975 . -5) (undo-tree-id1976 . -5) (undo-tree-id1977 . -5) (undo-tree-id1978 . -5) (undo-tree-id1979 . -5) (undo-tree-id1980 . -5) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -5) (undo-tree-id1984 . -5) (undo-tree-id1985 . -5) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -5) (undo-tree-id1991 . -5) (undo-tree-id1992 . -5) (undo-tree-id1993 . -5) (undo-tree-id1994 . -5) (undo-tree-id1995 . -5) (undo-tree-id1996 . -5) (undo-tree-id1997 . -5) (undo-tree-id1998 . -5) (undo-tree-id1999 . -15) (undo-tree-id2000 . -15) (undo-tree-id2001 . -15) (undo-tree-id2002 . -15) (undo-tree-id2003 . -15) (undo-tree-id2004 . -15) (undo-tree-id2005 . -15) (undo-tree-id2006 . -15) (undo-tree-id2007 . -15) (undo-tree-id2008 . -15) (undo-tree-id2009 . -15) (undo-tree-id2010 . -43) (undo-tree-id2011 . -15) (undo-tree-id2012 . -15) (undo-tree-id2013 . -15) (undo-tree-id2014 . -15) (undo-tree-id2015 . -15) (undo-tree-id2016 . -15) (undo-tree-id2017 . -15) (undo-tree-id2018 . -15) (undo-tree-id2019 . -15) (undo-tree-id2020 . -15) (undo-tree-id2021 . -15) (undo-tree-id2022 . -15) (undo-tree-id2023 . -15) (undo-tree-id2024 . -15) (undo-tree-id2025 . -15) (undo-tree-id2026 . -15) (undo-tree-id2027 . -15) (undo-tree-id2028 . -15) (undo-tree-id2029 . -15) (undo-tree-id2030 . -15) (undo-tree-id2031 . -15) (undo-tree-id2032 . -15) (undo-tree-id2033 . -15) (undo-tree-id2034 . -15) (undo-tree-id2035 . -15) (undo-tree-id2036 . -15) (undo-tree-id2037 . -15) (undo-tree-id2038 . -15) (undo-tree-id2039 . -15) (undo-tree-id2040 . -15) (undo-tree-id2041 . -15) (undo-tree-id2042 . -15) (undo-tree-id2043 . -15) (undo-tree-id2044 . -15) (undo-tree-id2045 . -17) (undo-tree-id2046 . -17) (undo-tree-id2047 . -17) (undo-tree-id2048 . -17) (undo-tree-id2049 . -17) (undo-tree-id2050 . -17) (undo-tree-id2051 . -17) (undo-tree-id2052 . -17) (undo-tree-id2053 . -17) (undo-tree-id2054 . -17) (undo-tree-id2055 . -17) (undo-tree-id2056 . -17) (undo-tree-id2057 . -17) (undo-tree-id2058 . -17) (undo-tree-id2059 . -17) (undo-tree-id2060 . -17) (undo-tree-id2061 . -17) (undo-tree-id2062 . -17) (undo-tree-id2063 . -17) (undo-tree-id2064 . -17) (undo-tree-id2065 . -17) (undo-tree-id2066 . -17) (undo-tree-id2067 . -17) (undo-tree-id2068 . -17) (undo-tree-id2069 . -17) (undo-tree-id2070 . -17) (undo-tree-id2071 . -17) (undo-tree-id2072 . -17) (undo-tree-id2073 . -17) (undo-tree-id2074 . -17) (undo-tree-id2075 . -17) (undo-tree-id2076 . -17) (undo-tree-id2077 . -16) (undo-tree-id2078 . -16) (undo-tree-id2079 . -16) (undo-tree-id2080 . -16) (undo-tree-id2081 . -16) (undo-tree-id2082 . -16) (undo-tree-id2083 . -16) (undo-tree-id2084 . -16) (undo-tree-id2085 . -16) (undo-tree-id2086 . -16) (undo-tree-id2087 . -16) (undo-tree-id2088 . -43)) nil (26155 57857 952211 148000) 0 nil])
([nil nil ((2454 . 2460) (2448 . 2454) (#("h" 0 1 (fontified nil)) . 2448) (undo-tree-id1878 . -1) (2448 . 2449) (#("height" 0 6 (fontified nil)) . -2448) (undo-tree-id1879 . -6) (2448 . 2454) (#("h" 0 1 (fontified t)) . -2448) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) 2449 (2448 . 2449) (#("w" 0 1 (fontified t)) . -2448) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 2449 (#("width" 0 5 (fontified nil)) . 2449) (undo-tree-id1887 . -5) (2448 . 2449) (2440 . 2446) (2435 . 2440) (#("wid" 0 3 (fontified nil)) . 2435) (undo-tree-id1888 . -3) (2435 . 2438) (#("width" 0 5 (fontified nil)) . -2435) (undo-tree-id1889 . -5) (2435 . 2440) (#("wid" 0 3 (fontified t)) . -2435) (undo-tree-id1890 . -3) (undo-tree-id1891 . -3) (undo-tree-id1892 . -3) 2438 (2436 . 2438) (#("height" 0 6 (fontified nil)) . 2436) (undo-tree-id1893 . -6) (2435 . 2436) (2423 . 2433) (#("ve" 0 2 (fontified nil)) . 2423) (undo-tree-id1894 . -2) (2423 . 2425) (#("vectordata" 0 10 (fontified nil)) . -2423) (undo-tree-id1895 . -10) (2423 . 2433) (#("ve" 0 2 (fontified t)) . -2423) (undo-tree-id1896 . -2) (undo-tree-id1897 . -2) (undo-tree-id1898 . -2) 2425 (2424 . 2425) (#("buffer" 0 6 (fontified nil)) . 2424) (undo-tree-id1899 . -6) (2423 . 2424) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2423 2433 nil nil nil t #s(yas--field 2 2435 2446 nil nil nil t #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil)))) #s(yas--field 2 2435 2446 nil nil nil t #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil))) #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil))) #s(yas--exit 2461 nil) 54 nil #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil)) nil nil)) (2419 . 2445) (#("pbm(${1:buffer}, ${2:height}, ${3:width})$0" 0 43 (fontified nil)) . 2419) (2419 . 2462) (#("pb" 0 2 (fontified nil)) . 2419) (2419 . 2421) (#("pbm(…)" 0 6 (fontified nil)) . -2419) (2419 . 2425) (#("pb" 0 2 (fontified t)) . -2419) (undo-tree-id1900 . -1) (undo-tree-id1901 . -2) (undo-tree-id1902 . -2) 2421 (2418 . 2421)) nil (26155 57857 951385 391000) 0 nil])
([nil nil ((2461 . 2462) (apply yas--snippet-revive 2419 2461 #s(yas--snippet nil (#s(yas--field 1 2423 2433 nil nil nil t #s(yas--field 2 2435 2446 nil nil nil t #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil)))) #s(yas--field 2 2435 2446 nil nil nil t #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil))) #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil))) #s(yas--exit 2461 nil) 54 nil #s(yas--field 3 2448 2460 nil nil nil t #s(yas--exit 2461 nil)) nil nil))) nil (26155 57857 951304 607000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2477) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (#("r" 0 1 (fontified t)) . -2478) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) 2479 (2476 . 2479) (2468 . 2476) (#("new" 0 3 (fontified nil)) . 2468) (2468 . 2471) (#("newimage" 0 8 (fontified nil)) . -2468) (2468 . 2476) (#("new" 0 3 (fontified t)) . -2468) (undo-tree-id2320 . -3) (undo-tree-id2321 . -3) (undo-tree-id2322 . -3) 2471 (2470 . 2471) (2468 . 2470) (2464 . 2468) (#("    " 0 4 (fontified nil)) . 2463) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (2462 . 2468) (t 26155 57858 10482 229000)) nil (26155 57901 954557 607000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2478) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (#("i" 0 1 (fontified t)) . -2479) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) 2480 (2477 . 2480)) nil (26155 57901 954529 699000) 0 nil])
([nil nil ((#("    newimage.w
" 0 4 (fontified t) 4 14 (fontified t) 14 15 (fontified t)) . 2464) (undo-tree-id2306 . -14) (undo-tree-id2307 . -14) (undo-tree-id2308 . 1) (undo-tree-id2309 . -14) (undo-tree-id2310 . -13) 2477) nil (26155 57901 954519 454000) 0 nil])
([nil nil ((apply yas--snippet-revive 2462 2470 #s(yas--snippet nil nil #s(yas--exit 2470 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2470 nil) 55 nil nil nil nil)) (2462 . 2470) (#("unwrap()$0" 0 10 (fontified nil)) . 2462) (2462 . 2472) (#("un" 0 2 (fontified nil)) . 2462) (2462 . 2464) (#("unwrap()" 0 8 (fontified nil)) . -2462) (2462 . 2470) (#("un" 0 2 (fontified t)) . -2462) (undo-tree-id2303 . -2) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) 2464 (2461 . 2464)) nil (26155 57901 954504 412000) 0 nil])
([nil nil ((2503 . 2511) (2502 . 2504) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2502) (undo-tree-id2295 . -1) (#("path" 0 4 (fontified nil)) . 2503) (undo-tree-id2296 . -4) (2502 . 2503) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2502 2512 nil nil nil t #s(yas--exit 2513 nil))) #s(yas--exit 2513 nil) 56 nil #s(yas--field 1 2502 2512 nil nil nil t #s(yas--exit 2513 nil)) nil nil)) (2486 . 2507) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 2486) (2486 . 2514) (#("wr" 0 2 (fontified nil)) . 2486) (2486 . 2488) (#("write_as_binary(…)" 0 18 (fontified nil)) . -2486) (2486 . 2504) (#("wr" 0 2 (fontified t)) . -2486) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) 2488 (2485 . 2488) (2477 . 2485) (#("ne" 0 2 (fontified nil)) . 2477) (2477 . 2479) (#("newimage" 0 8 (fontified nil)) . -2477) (2477 . 2485) (#("ne" 0 2 (fontified t)) . -2477) (undo-tree-id2300 . -2) (undo-tree-id2301 . -2) 2479 (2477 . 2479) (2473 . 2477) (#("    " 0 4 (fontified nil)) . 2472) (undo-tree-id2302 . -4) (2471 . 2477)) nil (26155 57901 954479 852000) 0 nil])
([nil nil ((2513 . 2514) (t 26155 57902 12126 275000) (apply yas--snippet-revive 2486 2513 #s(yas--snippet nil (#s(yas--field 1 2502 2512 nil nil nil t #s(yas--exit 2513 nil))) #s(yas--exit 2513 nil) 56 nil #s(yas--field 1 2502 2512 nil nil nil t #s(yas--exit 2513 nil)) nil nil))) nil (26155 57903 430908 962000) 0 nil])
([nil nil ((apply yas--snippet-revive 2514 2522 #s(yas--snippet nil nil #s(yas--exit 2522 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2522 nil) 57 nil nil nil nil)) (2514 . 2522) (#("unwrap()$0" 0 10 (fontified nil)) . 2514) (2514 . 2524) (#("un" 0 2 (fontified nil)) . 2514) (2514 . 2516) (#("unwrap()" 0 8 (fontified nil)) . -2514) (2514 . 2522) (#("un" 0 2 (fontified t)) . -2514) (undo-tree-id2325 . -2) (undo-tree-id2326 . -2) (undo-tree-id2327 . -2) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -2) (undo-tree-id2388 . -2) (undo-tree-id2389 . -2) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (undo-tree-id2392 . -2) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) (undo-tree-id2399 . -2) (undo-tree-id2400 . -2) (undo-tree-id2401 . -2) (undo-tree-id2402 . -2) (undo-tree-id2403 . -2) (undo-tree-id2404 . -2) (undo-tree-id2405 . -2) (undo-tree-id2406 . -2) (undo-tree-id2407 . -2) (undo-tree-id2408 . -2) (undo-tree-id2409 . -2) (undo-tree-id2410 . -2) (undo-tree-id2411 . -2) (undo-tree-id2412 . -2) (undo-tree-id2413 . -2) (undo-tree-id2414 . -2) (undo-tree-id2415 . -2) (undo-tree-id2416 . -2) (undo-tree-id2417 . -2) 2516 (2513 . 2516) (t 26155 57903 464184 590000)) nil (26155 57912 444578 888000) 0 nil])
([nil nil ((#("unwrap" 0 6 (fontified t)) . 2514) (undo-tree-id2662 . -5) (undo-tree-id2663 . -6) (t 26155 57912 504552 977000)) nil (26155 57925 848010 103000) 0 nil])
([nil nil ((2514 . 2520) (#("ex" 0 2 (fontified nil)) . 2514) (2514 . 2516) (#("expect" 0 6 (fontified nil)) . -2514) (2514 . 2520) (#("ex" 0 2 (fontified t)) . -2514) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -2) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -2) (undo-tree-id2621 . -2) (undo-tree-id2622 . -2) (undo-tree-id2623 . -2) (undo-tree-id2624 . -2) (undo-tree-id2625 . -2) (undo-tree-id2626 . -2) (undo-tree-id2627 . -2) (undo-tree-id2628 . -2) (undo-tree-id2629 . -2) (undo-tree-id2630 . -2) (undo-tree-id2631 . -2) (undo-tree-id2632 . -2) (undo-tree-id2633 . -2) (undo-tree-id2634 . -2) (undo-tree-id2635 . -2) (undo-tree-id2636 . -2) (undo-tree-id2637 . -2) (undo-tree-id2638 . -2) (undo-tree-id2639 . -2) (undo-tree-id2640 . -2) (undo-tree-id2641 . -2) (undo-tree-id2642 . -2) (undo-tree-id2643 . -2) (undo-tree-id2644 . -2) (undo-tree-id2645 . -2) (undo-tree-id2646 . -2) (undo-tree-id2647 . -2) (undo-tree-id2648 . -2) (undo-tree-id2649 . -2) (undo-tree-id2650 . -2) (undo-tree-id2651 . -2) (undo-tree-id2652 . -2) (undo-tree-id2653 . -2) (undo-tree-id2654 . -2) (undo-tree-id2655 . -2) (undo-tree-id2656 . -2) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) (undo-tree-id2659 . -2) (undo-tree-id2660 . -2) (undo-tree-id2661 . -2) 2516 (2514 . 2516)) nil (26155 57925 847992 777000) 0 nil])
([nil nil ((2538 . 2542) (#("u" 0 1 (fontified t face font-lock-string-face)) . -2538) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -2539) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) 2540 (2527 . 2540) (2522 . 2527) (#("v" 0 1 (fontified t face font-lock-string-face)) . -2522) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2523) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -2524) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) 2525 (2522 . 2525) (2521 . 2523) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2521) (2521 . 2522)) nil (26155 57925 847666 152000) 0 nil])
([nil nil ((#("+ " 0 2 (fontified t)) . 2443) (undo-tree-id2686 . -1) (undo-tree-id2687 . -2) (t 26155 57925 905115 668000)) nil (26155 57960 728074 165000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2443) (undo-tree-id2685 . -1)) nil (26155 57960 728067 955000) 0 nil])
([nil nil ((#("+ " 0 2 (fontified t)) . 2454) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -2)) nil (26155 57960 728060 612000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2454) (undo-tree-id2664 . -1)) nil (26155 57960 728013 686000) 0 nil])
([nil nil ((2420 . 2421) (#("b" 0 1 (fontified t)) . 2420) (undo-tree-id2694 . -1) (t 26155 57960 758665 560000)) nil (26155 57991 55529 559000) 0 nil])
([nil nil ((2435 . 2436)) nil (26155 57991 55524 538000) 0 nil])
([nil nil ((2435 . 2436) (#("." 0 1 (fontified t)) . -2435) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) 2436) nil (26155 57991 55519 301000) 0 nil])
([nil nil ((2435 . 2438)) nil (26155 57991 55482 530000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2668) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (#("a" 0 1 (fontified t)) . -2669) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) 2670 (2668 . 2670) (#("g" 0 1 (fontified t)) . -2668) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) 2669 (#("e" 0 1 (fontified t)) . -2669) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) 2670 (#("t" 0 1 (fontified t)) . -2670) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) 2671 (2668 . 2671) (#("s" 0 1 (fontified t)) . -2668) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (#("a" 0 1 (fontified t)) . -2669) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) 2670 (2669 . 2670) (2668 . 2669) (2667 . 2668) (2664 . 2667) (#("c" 0 1 (fontified nil)) . 2664) (2664 . 2665) (#("cat" 0 3 (fontified nil)) . -2664) (2664 . 2667) (#("c" 0 1 (fontified t)) . -2664) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) 2665 (2664 . 2665) (apply yas--snippet-revive 2659 2665 #s(yas--snippet nil nil #s(yas--exit 2664 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2664 nil) 58 nil nil nil nil)) (2659 . 2665) (#("dbg!($0)" 0 8 (fontified nil)) . 2659) (2659 . 2667) (#("d" 0 1 (fontified nil)) . 2659) (2659 . 2660) (#("dbg!(…)" 0 7 (fontified nil)) . -2659) (2659 . 2666) (#("d" 0 1 (fontified t)) . -2659) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) 2660 (2659 . 2660) (2654 . 2659) (t 26155 57991 80105 569000)) nil (26155 58239 961128 250000) 0 nil])
([nil nil ((#("    dbg!(cat.)
" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 15 (rear-nonsticky t fontified t)) . 2655) (undo-tree-id2881 . -12) (undo-tree-id2882 . -12) (undo-tree-id2883 . -12) (undo-tree-id2884 . -12) (undo-tree-id2885 . -12) (undo-tree-id2886 . -12) (undo-tree-id2887 . -12) (undo-tree-id2888 . -12) (undo-tree-id2889 . -12) (undo-tree-id2890 . -12) (undo-tree-id2891 . -12) (undo-tree-id2892 . -12) (undo-tree-id2893 . -12) (undo-tree-id2894 . -12) (undo-tree-id2895 . -12) (undo-tree-id2896 . -12) (undo-tree-id2897 . -12) (undo-tree-id2898 . -12) (undo-tree-id2899 . -12) (undo-tree-id2900 . -12) (undo-tree-id2901 . -12) (undo-tree-id2902 . -12) (undo-tree-id2903 . -12) (undo-tree-id2904 . -12) (undo-tree-id2905 . -12) (undo-tree-id2906 . -12) (undo-tree-id2907 . -12) (undo-tree-id2908 . -12) (undo-tree-id2909 . -12) (undo-tree-id2910 . -12) (undo-tree-id2911 . -12) (undo-tree-id2912 . -12) (undo-tree-id2913 . -12) (undo-tree-id2914 . -12) (undo-tree-id2915 . -12) (undo-tree-id2916 . -12) (undo-tree-id2917 . -12) (undo-tree-id2918 . -9) (undo-tree-id2919 . -12) (undo-tree-id2920 . -12) (undo-tree-id2921 . -12) (undo-tree-id2922 . -12) (undo-tree-id2923 . -12) (undo-tree-id2924 . -12) (undo-tree-id2925 . -12) (undo-tree-id2926 . -12) (undo-tree-id2927 . -12) (undo-tree-id2928 . -12) (undo-tree-id2929 . -12) (undo-tree-id2930 . -12) (undo-tree-id2931 . -12)) ((2655 . 2670)) (26155 58241 433242 668000) 0 nil])
([nil nil ((2354 . 2355) (#("i" 0 1 (fontified t)) . 2354)) ((2354 . 2355) (#("j" 0 1 (fontified t)) . 2354)) (26155 58241 804605 608000) 0 nil])
([nil nil ((2357 . 2358) (#("j" 0 1 (fontified t)) . 2357)) ((2357 . 2358) (#("i" 0 1 (fontified t)) . 2357)) (26155 58242 176266 488000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 2285)) ((2285 . 2290)) (26155 58242 601547 81000) 0 nil])
([nil nil ((2285 . 2291) (#("he" 0 2 (fontified nil)) . 2285) (2285 . 2287) (#("height" 0 6 (fontified nil)) . 2285) (2285 . 2291) (#("he" 0 2 (fontified nil)) . 2285) (2285 . 2287)) ((#("he" 0 2 (fontified nil)) . 2285) (2285 . 2287) (#("height" 0 6 (fontified nil)) . 2285) (2285 . 2291) (#("he" 0 2 (fontified nil)) . 2285) (2285 . 2287) (#("height" 0 6 (fontified t)) . 2285)) (26155 58243 46043 925000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 2309)) ((2309 . 2315)) (26155 58243 504465 35000) 0 nil])
([nil nil ((2309 . 2314) (#("wi" 0 2 (fontified nil)) . 2309) (2309 . 2311) (#("width" 0 5 (fontified nil)) . 2309) (2309 . 2314) (#("wi" 0 2 (fontified nil)) . 2309) (2309 . 2311)) ((#("wi" 0 2 (fontified nil)) . 2309) (2309 . 2311) (#("width" 0 5 (fontified nil)) . 2309) (2309 . 2314) (#("wi" 0 2 (fontified nil)) . 2309) (2309 . 2311) (#("width" 0 5 (fontified t)) . 2309) (undo-tree-id2877 . -4) (undo-tree-id2878 . -4) (undo-tree-id2879 . -4)) (26155 58243 967866 154000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 2285) (undo-tree-id3033 . -5) (undo-tree-id3034 . -6) (undo-tree-id3035 . -6) (t 26155 58245 794484 897000)) nil (26155 58311 26919 736000) 0 nil] [nil nil ((2354 . 2355) (#("j" 0 1 (fontified t)) . 2354)) ((2354 . 2355) (#("i" 0 1 (fontified t)) . 2354)) (26155 58232 659177 89000) 0 nil])
([nil nil ((2285 . 2290) (#("wi" 0 2 (fontified nil)) . 2285) (2285 . 2287) (#("width" 0 5 (fontified nil)) . -2285) (2285 . 2290) (#("wi" 0 2 (fontified t)) . -2285) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) (undo-tree-id3022 . -2) (undo-tree-id3023 . -2) (undo-tree-id3024 . -2) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) 2287 (2285 . 2287)) nil (26155 58311 26910 218000) 0 nil])
([nil nil ((2357 . 2358) (#("i" 0 1 (fontified t)) . 2357) (undo-tree-id2875 . -1)) ((2357 . 2358) (#("j" 0 1 (fontified t)) . 2357) (undo-tree-id2876 . -1) (t 26155 58214 356552 299000)) (26155 58214 297354 472000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 2308) (undo-tree-id3015 . -4) (undo-tree-id3016 . -4) (undo-tree-id3017 . -4) (undo-tree-id3018 . -4) (undo-tree-id3019 . -5)) nil (26155 58311 26882 476000) 0 nil])
nil
([nil nil ((2308 . 2314) (#("he" 0 2 (fontified nil)) . 2308) (2308 . 2310) (#("height" 0 6 (fontified nil)) . -2308) (2308 . 2314) (#("he" 0 2 (fontified t)) . -2308) (undo-tree-id2932 . -2) (undo-tree-id2933 . -2) (undo-tree-id2934 . -2) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -2) (undo-tree-id2984 . -2) (undo-tree-id2985 . -2) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . -2) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (undo-tree-id2997 . -2) (undo-tree-id2998 . -2) (undo-tree-id2999 . -2) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -2) (undo-tree-id3008 . -2) (undo-tree-id3009 . -2) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2) (undo-tree-id3014 . -2) 2310 (2308 . 2310)) nil (26155 58311 26856 120000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2290) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (#("2" 0 1 (fontified t)) . -2291) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) 2292 (t 26155 58311 86590 88000)) nil (26155 58389 811173 255000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2312) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (#("2" 0 1 (fontified t)) . -2313) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) 2314) nil (26155 58389 811050 783000) 0 nil])
([nil nil ((#("    dbg!(height);
    dbg!(width);
    dbg!(map_data.get(379, 523));
    
 " 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 22 (fontified t) 22 26 (fontified t face font-lock-preprocessor-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 35 (fontified t) 35 39 (fontified t) 39 43 (fontified t face font-lock-preprocessor-face) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 53 (fontified t) 53 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-3-face)) 57 60 (fontified t) 60 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-3-face)) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 69 (fontified t) 69 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t)) . 2582) (undo-tree-id3170 . -74) (undo-tree-id3171 . -74) (undo-tree-id3172 . -74) (undo-tree-id3173 . -74) (undo-tree-id3174 . -72) (undo-tree-id3175 . -72) (undo-tree-id3176 . -72) (undo-tree-id3177 . -72) (undo-tree-id3178 . -67) (undo-tree-id3179 . -67) (undo-tree-id3180 . -75) (undo-tree-id3181 . -74) (undo-tree-id3182 . -35) (undo-tree-id3183 . -35) (undo-tree-id3184 . -35) (undo-tree-id3185 . -35) (undo-tree-id3186 . -35) (undo-tree-id3187 . -35) (undo-tree-id3188 . -35) (undo-tree-id3189 . -35) (undo-tree-id3190 . -35) (undo-tree-id3191 . -18) (undo-tree-id3192 . -18) (undo-tree-id3193 . -18) (undo-tree-id3194 . -18) (undo-tree-id3195 . -18) (undo-tree-id3196 . -18) (undo-tree-id3197 . -18) (undo-tree-id3198 . -18) (undo-tree-id3199 . -18) (undo-tree-id3200 . -75) (t 26155 58389 871674 860000)) nil (26155 58440 898883 556000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2342 . 2343) (nil fontified nil 2268 . 2343) (2268 . 2343)) nil (26155 58440 898825 482000) 0 nil])
([nil nil ((2270 . 2274) (#("    " 0 4 (fontified nil)) . 2269) (undo-tree-id3132 . -4) (undo-tree-id3133 . -4) (undo-tree-id3134 . -4) (undo-tree-id3135 . -4) (undo-tree-id3136 . -4) (undo-tree-id3137 . -4) (undo-tree-id3138 . -4) (undo-tree-id3139 . -4) (undo-tree-id3140 . -4) (undo-tree-id3141 . -4) (undo-tree-id3142 . -4) (undo-tree-id3143 . -4) (undo-tree-id3144 . -4) (2272 . 2274) (#("    " 0 4 (fontified nil)) . 2268) (undo-tree-id3145 . 4) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (2269 . 2272) (2269 . 2270)) nil (26155 58440 898810 76000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2409) (2409 . 2410) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2409) (2409 . 2410) (2408 . 2410) (2407 . 2409) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2407) (2407 . 2408) (apply yas--snippet-revive 2398 2408 #s(yas--snippet nil nil #s(yas--exit 2407 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2407 nil) 59 nil nil nil nil)) (2398 . 2408) (#("println!($0)" 0 12 (fontified nil)) . 2398) (2398 . 2410) (#("pr" 0 2 (fontified nil)) . 2398) (2398 . 2400) (#("println!(…)" 0 11 (fontified nil)) . -2398) (2398 . 2409) (#("pr" 0 2 (fontified t)) . -2398) (undo-tree-id3201 . -2) (undo-tree-id3202 . -2) (undo-tree-id3203 . -2) (undo-tree-id3204 . -2) (undo-tree-id3205 . -2) (undo-tree-id3206 . -2) (undo-tree-id3207 . -2) (undo-tree-id3208 . -2) (undo-tree-id3209 . -2) (undo-tree-id3210 . -2) (undo-tree-id3211 . -2) (undo-tree-id3212 . -2) (undo-tree-id3213 . -2) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2) (undo-tree-id3216 . -2) (undo-tree-id3217 . -2) (undo-tree-id3218 . -2) (undo-tree-id3219 . -2) (undo-tree-id3220 . -2) (undo-tree-id3221 . -2) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -2) (undo-tree-id3225 . -2) (undo-tree-id3226 . -2) (undo-tree-id3227 . -2) (undo-tree-id3228 . -2) (undo-tree-id3229 . -2) (undo-tree-id3230 . -2) (undo-tree-id3231 . -2) (undo-tree-id3232 . -2) (undo-tree-id3233 . -2) (undo-tree-id3234 . -2) (undo-tree-id3235 . -2) (undo-tree-id3236 . -2) (undo-tree-id3237 . -2) (undo-tree-id3238 . -2) (undo-tree-id3239 . -2) (undo-tree-id3240 . -2) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -2) (undo-tree-id3244 . -2) (undo-tree-id3245 . -2) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) (undo-tree-id3250 . -2) (undo-tree-id3251 . -2) (undo-tree-id3252 . -2) (undo-tree-id3253 . -2) (undo-tree-id3254 . -2) (undo-tree-id3255 . -2) (undo-tree-id3256 . -2) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) (undo-tree-id3261 . -2) (undo-tree-id3262 . -2) (undo-tree-id3263 . -2) (undo-tree-id3264 . -2) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -2) (undo-tree-id3268 . -2) 2400 (2398 . 2400) (#("i" 0 1 (fontified t)) . -2398) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) 2399 (2398 . 2399) (2392 . 2398) (t 26155 58440 959031 415000) 2392) nil (26155 58467 405043 334000) 0 nil])
([nil nil ((2409 . 2410)) nil (26155 58467 404884 700000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2414) (2414 . 2415) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2414) (2414 . 2415) (2413 . 2415) (2411 . 2413)) nil (26155 58467 404880 110000) 0 nil])
([nil nil ((2414 . 2415)) nil (26155 58467 404874 346000) 0 nil])
([nil nil ((2418 . 2419)) nil (26155 58467 404863 415000) 0 nil])
([nil nil ((2393 . 2395) (t 26155 58467 436786 9000)) nil (26155 58498 960937 201000) 0 nil])
([nil nil ((2367 . 2370) (t 26155 58498 994888 799000)) nil (26155 58521 106819 874000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . 2369) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1)) nil (26155 58521 106814 696000) 0 nil])
([nil nil ((2391 . 2393) (#(" " 0 1 (fontified t)) . -2391) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (#("-" 0 1 (fontified t)) . -2392) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) 2393 (2391 . 2393)) nil (26155 58521 106776 647000) 0 nil])
([nil nil ((#("//	    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-delimiter-face)) . 2397) (undo-tree-id3394 . -6) (undo-tree-id3395 . -7) (t 26155 58521 168373 34000)) nil (26155 58548 639276 29000) 0 nil])
([nil nil ((2397 . 2402)) nil (26155 58548 639244 822000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 2367) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (t 26155 58548 710223 601000)) nil (26155 58568 486483 640000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2367) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1)) nil (26155 58568 486476 199000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 2389) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1)) nil (26155 58568 486467 685000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2389) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1)) nil (26155 58568 486451 331000) 0 nil])
([nil nil ((2420 . 2422) (t 26155 58568 519558 985000)) nil (26155 58582 822490 15000) 0 nil])
([nil nil ((apply -6 2490 2653 undo--wrap-and-run-primitive-undo 2490 2653 ((" " . 2490) (2581 . 2584) (2494 . 2497) (2490 . 2491) 2647)) (t 26155 58582 856527 562000)) nil (26155 58587 271436 122000) 0 nil])
([nil nil ((#("width " 0 5 (fontified t) 5 6 (fontified t)) . 2362) (undo-tree-id3519 . -5) (undo-tree-id3520 . -6) (t 26155 58587 328830 50000)) nil (26155 58637 861071 759000) 0 nil])
([nil nil ((2362 . 2368) (#("he" 0 2 (fontified nil)) . 2362) (2362 . 2364) (#("height" 0 6 (fontified nil)) . -2362) (2362 . 2368) (#("he" 0 2 (fontified t)) . -2362) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) (undo-tree-id3472 . -2) (undo-tree-id3473 . -2) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2) (undo-tree-id3477 . -2) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) (undo-tree-id3480 . -2) (undo-tree-id3481 . -2) (undo-tree-id3482 . -2) (undo-tree-id3483 . -2) (undo-tree-id3484 . -2) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) (undo-tree-id3489 . -2) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) (undo-tree-id3492 . -2) (undo-tree-id3493 . -2) (undo-tree-id3494 . -2) (undo-tree-id3495 . -2) (undo-tree-id3496 . -2) (undo-tree-id3497 . -2) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) (undo-tree-id3505 . -2) (undo-tree-id3506 . -2) (undo-tree-id3507 . -2) (undo-tree-id3508 . -2) (undo-tree-id3509 . -2) (undo-tree-id3510 . -2) (undo-tree-id3511 . -2) (undo-tree-id3512 . -2) (undo-tree-id3513 . -2) (undo-tree-id3514 . -2) (undo-tree-id3515 . -2) (undo-tree-id3516 . -2) (undo-tree-id3517 . -2) (undo-tree-id3518 . -2) 2364 (2362 . 2364)) nil (26155 58637 861057 44000) 0 nil])
([nil nil ((#("height " 0 6 (fontified t) 6 7 (fontified t)) . 2383) (undo-tree-id3413 . -6) (undo-tree-id3414 . -6) (undo-tree-id3415 . -5) (undo-tree-id3416 . -5) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -7)) nil (26155 58637 860844 961000) 0 nil])
([nil nil ((2383 . 2388) (#("wi" 0 2 (fontified nil)) . 2383) (2383 . 2385) (#("width" 0 5 (fontified nil)) . -2383) (2383 . 2388) (#("wi" 0 2 (fontified t)) . -2383) (undo-tree-id3404 . -2) (undo-tree-id3405 . -2) (undo-tree-id3406 . -2) (undo-tree-id3407 . -2) (undo-tree-id3408 . -2) (undo-tree-id3409 . -2) (undo-tree-id3410 . -2) (undo-tree-id3411 . -2) (undo-tree-id3412 . -2) 2385 (2383 . 2385)) nil (26155 58637 860717 918000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 1840) (t 26155 58637 922676 79000)) nil (26155 58681 353248 983000) 0 nil])
([nil nil ((1840 . 1841)) nil (26155 58681 353245 224000) 0 nil])
([nil nil ((1855 . 1856) (#("x" 0 1 (fontified t)) . -1855) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) 1856) nil (26155 58681 353234 821000) 0 nil])
([nil nil ((#("//	    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-delimiter-face)) . 2418) (undo-tree-id3534 . -6) (undo-tree-id3535 . -7) (t 26155 58681 414937 733000)) nil (26155 58693 893749 282000) 0 nil])
([nil nil ((2418 . 2423)) nil (26155 58693 893721 224000) 0 nil])
([nil nil ((2452 . 2453) (#("j" 0 1 (fontified t)) . -2452) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) 2453 (t 26155 58693 924996 886000)) nil (26155 58720 861541 966000) 0 nil])
([nil nil ((2455 . 2456) (#("i" 0 1 (fontified t)) . -2455) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) 2456) nil (26155 58720 861510 387000) 0 nil])
([nil nil ((2418 . 2420) (t 26155 58720 921197 993000)) nil (26155 58954 398547 657000) 0 nil])
([nil nil ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 1951) (undo-tree-id3659 . -3) (undo-tree-id3660 . -4) (undo-tree-id3661 . -4) (undo-tree-id3662 . -4) (t 26155 58958 168163 875000)) nil (26155 59099 616759 400000) 0 nil] [nil nil ((#("=" 0 1 (fontified t)) . 1764) (undo-tree-id3565 . -1) (t 26155 58741 90680 988000)) ((1764 . 1765)) (26155 58953 953056 552000) 0 nil])
([nil nil ((apply -6 2388 2475 undo--wrap-and-run-primitive-undo 2388 2475 (("        " . 2390) (2425 . 2428) (2388 . 2391) (2388 . 2396))) (t 26155 59099 678418 383000)) nil (26155 59169 694484 163000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 1782) (undo-tree-id3563 . -1)) ((1782 . 1783)) (26155 58953 569347 902000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2475) (undo-tree-id3706 . -5) 2480 (2475 . 2480) (#("	    " 0 5 (fontified nil)) . 2474) (undo-tree-id3707 . -5) (2474 . 2480) (#("	    " 0 5 (fontified nil)) . 2473) (undo-tree-id3708 . -1) (undo-tree-id3709 . 3) (undo-tree-id3710 . -1) (undo-tree-id3711 . -5) (2478 . 2479)) nil (26155 59169 694479 842000) 0 nil])
([nil nil ((1821 . 1825) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1821) (undo-tree-id3566 . -1) 1822 (1813 . 1822) (1812 . 1813) (1811 . 1813) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1811) (1811 . 1812) (apply yas--snippet-revive 1802 1812 #s(yas--snippet nil nil #s(yas--exit #<marker at 1628 in main.rs> nil) 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1628 in main.rs> nil) 60 nil nil nil nil)) (1802 . 1812) (#("println!($0)" 0 12 (fontified nil)) . 1802) (1802 . 1814) (#("pr" 0 2 (fontified nil)) . 1802) (1802 . 1804) (#("println!(…)" 0 11 (fontified nil)) . -1802) (1802 . 1813) (#("pr" 0 2 (fontified t)) . -1802) (undo-tree-id3567 . -2) (undo-tree-id3568 . -2) (undo-tree-id3569 . -2) 1804 (1802 . 1804) (#("o" 0 1 (fontified t)) . -1802) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (#("r" 0 1 (fontified t)) . -1803) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) 1804 (1802 . 1804) (1796 . 1802) (t 26155 58780 422478 861000)) ((#("
	    " 0 1 (fontified t) 1 6 (fontified nil)) . 1796) (undo-tree-id3609 . -6) (undo-tree-id3610 . -6) (undo-tree-id3611 . -6) (undo-tree-id3612 . -1) (undo-tree-id3613 . -6) (undo-tree-id3614 . -1) (undo-tree-id3615 . -6) (undo-tree-id3616 . -6) (undo-tree-id3617 . -6) (undo-tree-id3618 . -6) (undo-tree-id3619 . -6) (undo-tree-id3620 . -6) (undo-tree-id3621 . -6) (undo-tree-id3622 . -6) (undo-tree-id3623 . -6) (undo-tree-id3624 . -6) (undo-tree-id3625 . -6) (undo-tree-id3626 . -6) (#("or" 0 1 (fontified nil) 1 2 (fontified nil)) . 1802) (undo-tree-id3627 . -2) (1802 . 1804) (#("pr" 0 2 (fontified nil)) . 1802) (undo-tree-id3628 . -2) (1802 . 1804) (#("println!(…)" 0 11 (fontified nil)) . 1802) (1802 . 1813) (#("pr" 0 2 (fontified nil)) . 1802) (1802 . 1804) (#("println!($0)" 0 12 (fontified nil)) . 1802) (1802 . 1814) (#("println!()" 0 8 (fontified nil face rust-builtin-formatting-macro) 8 9 (fontified nil face (rainbow-delimiters-depth-4-face)) 9 10 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1802) (undo-tree-id3629 . 1) (undo-tree-id3630 . -10) (undo-tree-id3631 . -10) (undo-tree-id3632 . -9) (undo-tree-id3633 . -10) (undo-tree-id3634 . -9) (undo-tree-id3635 . -9) (undo-tree-id3636 . -9) (undo-tree-id3637 . -9) (undo-tree-id3638 . -9) (undo-tree-id3639 . -9) (undo-tree-id3640 . -9) (undo-tree-id3641 . -9) (undo-tree-id3642 . -9) (undo-tree-id3643 . -9) (undo-tree-id3644 . -9) (undo-tree-id3645 . -9) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1811) (1811 . 1812) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 1811) (undo-tree-id3646 . 1) (undo-tree-id3647 . -2) (undo-tree-id3648 . -2) (undo-tree-id3649 . -2) (undo-tree-id3650 . -2) (undo-tree-id3651 . -2) (undo-tree-id3652 . -2) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -2) (undo-tree-id3658 . -2) (#("o" 0 1 (fontified nil face font-lock-string-face)) . 1812) (#("ut of bon" 0 8 (fontified nil face font-lock-string-face) 8 9 (fontified nil face font-lock-string-face)) . 1813) (1821 . 1822) (#("unds" 0 4 (fontified t face font-lock-string-face)) . 1821)) (26155 58953 144404 129000) 0 nil])
([nil nil ((2487 . 2489) (2486 . 2488) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2486) (2486 . 2487) (apply yas--snippet-revive 2479 2487 #s(yas--snippet nil nil #s(yas--exit 2486 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2486 nil) 61 nil nil nil nil)) (2479 . 2487) (#("print!($0)" 0 10 (fontified nil)) . 2479) (2479 . 2489) (#("pri" 0 3 (fontified nil)) . 2479) (2479 . 2482) (#("print!(…)" 0 9 (fontified nil)) . -2479) (2479 . 2488) (#("pri" 0 3 (fontified t)) . -2479) (undo-tree-id3703 . -2) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) 2482 (2479 . 2482) (2474 . 2479)) nil (26155 59169 694461 856000) 0 nil])
([nil nil ((1827 . 1828)) ((#(";" 0 1 (fontified t)) . 1827)) (26155 58952 829285 734000) 0 nil])
([nil nil ((2522 . 2526) (2517 . 2522) (#("wi" 0 2 (fontified nil)) . 2517) (undo-tree-id3663 . -2) (2517 . 2519) (#("width" 0 5 (fontified nil)) . -2517) (undo-tree-id3664 . -5) (2517 . 2522) (#("wi" 0 2 (fontified t)) . -2517) (undo-tree-id3665 . -2) (undo-tree-id3666 . -2) (undo-tree-id3667 . -2) 2519 (2517 . 2519) (#("c" 0 1 (fontified t)) . -2517) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (#("a" 0 1 (fontified t)) . -2518) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (#("t" 0 1 (fontified t)) . -2519) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (#("." 0 1 (fontified t)) . -2520) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (#("w" 0 1 (fontified t)) . -2521) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (#("i" 0 1 (fontified t)) . -2522) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (#("d" 0 1 (fontified t)) . -2523) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) 2524 (2523 . 2524) (#("i" 0 1 (fontified t)) . -2523) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) 2524 (2519 . 2524) (2514 . 2519) (#("index" 0 5 (fontified nil)) . 2514) (undo-tree-id3697 . -5) (2513 . 2514) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2513 2526 nil nil nil t #s(yas--exit 2527 nil))) #s(yas--exit 2527 nil) 63 nil #s(yas--field 1 2513 2526 nil nil nil t #s(yas--exit 2527 nil)) nil nil)) (2509 . 2519) (#("get(${1:index})$0" 0 17 (fontified nil)) . 2509) (2509 . 2526) (#("ge" 0 2 (fontified nil)) . 2509) (2509 . 2511) (#("get(…)" 0 6 (fontified nil)) . -2509) (2509 . 2515) (#("ge" 0 2 (fontified t)) . -2509) (undo-tree-id3698 . -2) (undo-tree-id3699 . -2) 2511 (2508 . 2511) (apply yas--snippet-revive 2496 2508 #s(yas--snippet nil nil #s(yas--exit 2508 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2508 nil) 62 nil nil nil nil)) (2496 . 2508) (#("get_buffer()$0" 0 14 (fontified nil)) . 2496) (2496 . 2510) (#("ge" 0 2 (fontified nil)) . 2496) (2496 . 2498) (#("get_buffer()" 0 12 (fontified nil)) . -2496) (2496 . 2508) (#("ge" 0 2 (fontified t)) . -2496) (undo-tree-id3700 . -1) (undo-tree-id3701 . -2) (undo-tree-id3702 . -2) 2498 (2490 . 2498)) nil (26155 59169 694426 889000) 0 nil])
([nil nil ((#("//	    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-delimiter-face)) . 2448) (undo-tree-id3574 . -6) (undo-tree-id3575 . -7) (undo-tree-id3576 . -7) (undo-tree-id3577 . -7) (t 26155 58798 180858 103000)) ((2448 . 2455)) (26155 58952 469288 398000) 0 nil])
([nil nil ((apply yas--snippet-revive 2509 2527 #s(yas--snippet nil (#s(yas--field 1 2513 2526 nil nil nil t #s(yas--exit 2527 nil))) #s(yas--exit 2527 nil) 63 nil #s(yas--field 1 2513 2526 nil nil nil t #s(yas--exit 2527 nil)) nil nil))) nil (26155 59169 694262 908000) 0 nil])
([nil nil ((2448 . 2453)) ((#("	    " 0 5 (fontified t)) . 2448)) (26155 58952 135355 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 2534 2544 #s(yas--snippet nil nil #s(yas--exit 2543 nil) 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2543 nil) 64 nil nil nil nil)) (2534 . 2544) (#("println!($0)" 0 12 (fontified nil)) . 2534) (2534 . 2546) (#("pri" 0 3 (fontified nil)) . 2534) (2534 . 2537) (#("println!(…)" 0 11 (fontified nil)) . -2534) (2534 . 2545) (#("pri" 0 3 (fontified t)) . -2534) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -3) (undo-tree-id3725 . -3) (undo-tree-id3726 . -3) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -3) (undo-tree-id3730 . -3) (undo-tree-id3731 . -3) (undo-tree-id3732 . -3) (undo-tree-id3733 . -3) (undo-tree-id3734 . -3) (undo-tree-id3735 . -3) (undo-tree-id3736 . -3) (undo-tree-id3737 . -3) (undo-tree-id3738 . -3) (undo-tree-id3739 . -3) (undo-tree-id3740 . -3) (undo-tree-id3741 . -3) (undo-tree-id3742 . -3) (undo-tree-id3743 . -3) (undo-tree-id3744 . -3) (undo-tree-id3745 . -3) (undo-tree-id3746 . -3) (undo-tree-id3747 . -3) 2537 (2534 . 2537) (2532 . 2534) (t 26155 59169 730808 212000)) nil (26155 59174 686148 774000) 0 nil])
([nil nil ((1761 . 1762) (#("x" 0 1 (fontified t)) . 1761) (undo-tree-id3581 . -1) (undo-tree-id3583 . -1) (undo-tree-id3585 . -1) (undo-tree-id3587 . -1) (undo-tree-id3589 . -1) (undo-tree-id3591 . -1) (undo-tree-id3593 . -1) (undo-tree-id3595 . -1) (undo-tree-id3597 . -1) (undo-tree-id3599 . -1) (undo-tree-id3601 . -1) (undo-tree-id3603 . -1) (undo-tree-id3605 . -1) (undo-tree-id3607 . -1) (t 26155 58810 483827 380000)) ((1761 . 1762) (#("y" 0 1 (fontified t)) . 1761)) (26155 58951 765491 359000) 0 nil])
([nil nil ((2544 . 2545)) nil (26155 59174 686058 553000) 0 nil])
([nil nil ((1779 . 1780) (#("y" 0 1 (fontified t)) . 1779)) ((1779 . 1780) (#("x" 0 1 (fontified t)) . 1779)) (26155 58951 364497 346000) 0 nil])
([nil nil ((apply yas--snippet-revive 2528 2536 #s(yas--snippet nil nil #s(yas--exit 2536 nil) 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2536 nil) 65 nil nil nil nil)) (2528 . 2536) (#("unwrap()$0" 0 10 (fontified nil)) . 2528) (2528 . 2538) (#("un" 0 2 (fontified nil)) . 2528) (2528 . 2530) (#("unwrap()" 0 8 (fontified nil)) . -2528) (2528 . 2536) (#("un" 0 2 (fontified t)) . -2528) (undo-tree-id3748 . -1) (undo-tree-id3749 . -2) (undo-tree-id3750 . -2) 2530 (2527 . 2530) (t 26155 59174 710859 456000)) nil (26155 59179 959611 51000) 0 nil])
([nil nil ((apply 6 2518 2677 undo--wrap-and-run-primitive-undo 2518 2677 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2603) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2519) 2518)) (t 26155 58835 773928 774000)) ((apply -6 2518 2683 undo--wrap-and-run-primitive-undo 2518 2683 ((2519 . 2522) (2603 . 2606) 1756)) (t 26155 58851 404893 582000)) (26155 58851 345577 370000) 0 nil])
([nil nil ((2525 . 2526) (#("y" 0 1 (fontified t)) . -2525) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) 2526 (t 26155 59180 18917 156000)) nil (26155 59185 727890 509000) 0 nil])
nil
([nil nil ((#("	    " 0 5 (fontified t)) . -2479) (undo-tree-id5073 . -5) 2484 (2479 . 2484) (#("	    " 0 5 (fontified nil)) . 2478) (undo-tree-id5074 . -5) (2478 . 2484) (2417 . 2422) (2472 . 2473) (t 26155 59185 762983 132000)) nil (26155 59255 506404 785000) 0 nil])
([nil nil ((#("cat.get_buffer().get(i * width + j).unwrap()" 0 4 (fontified t) 4 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-5-face)) 15 16 (fontified t face (rainbow-delimiters-depth-5-face)) 16 17 (fontified t) 17 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-5-face)) 21 25 (fontified t) 25 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-5-face)) 35 36 (fontified t) 36 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-5-face)) 43 44 (fontified t face (rainbow-delimiters-depth-5-face))) . 2499) (undo-tree-id4640 . -43) (undo-tree-id4641 . -43) (undo-tree-id4642 . -36) (undo-tree-id4643 . -43) (undo-tree-id4644 . -21) (undo-tree-id4645 . 10) (undo-tree-id4646 . -1) (undo-tree-id4647 . -43) (undo-tree-id4648 . -44) (undo-tree-id4649 . -43) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -2) (undo-tree-id4694 . -2) (undo-tree-id4695 . -2) (undo-tree-id4696 . -2) (undo-tree-id4697 . -2) (undo-tree-id4698 . -2) (undo-tree-id4699 . -2) (undo-tree-id4700 . -2) (undo-tree-id4701 . -2) (undo-tree-id4702 . -3) (undo-tree-id4703 . -3) (undo-tree-id4704 . -3) (undo-tree-id4705 . -3) (undo-tree-id4706 . -3) (undo-tree-id4707 . -3) (undo-tree-id4708 . -3) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -4) (undo-tree-id4712 . -4) (undo-tree-id4713 . -4) (undo-tree-id4714 . -4) (undo-tree-id4715 . -4) (undo-tree-id4716 . -4) (undo-tree-id4717 . -4) (undo-tree-id4718 . -4) (undo-tree-id4719 . -4) (undo-tree-id4720 . -5) (undo-tree-id4721 . -5) (undo-tree-id4722 . -5) (undo-tree-id4723 . -5) (undo-tree-id4724 . -5) (undo-tree-id4725 . -5) (undo-tree-id4726 . -5) (undo-tree-id4727 . -5) (undo-tree-id4728 . -5) (undo-tree-id4729 . -6) (undo-tree-id4730 . -6) (undo-tree-id4731 . -6) (undo-tree-id4732 . -6) (undo-tree-id4733 . -6) (undo-tree-id4734 . -6) (undo-tree-id4735 . -6) (undo-tree-id4736 . -6) (undo-tree-id4737 . -6) (undo-tree-id4738 . -7) (undo-tree-id4739 . -7) (undo-tree-id4740 . -7) (undo-tree-id4741 . -7) (undo-tree-id4742 . -7) (undo-tree-id4743 . -7) (undo-tree-id4744 . -7) (undo-tree-id4745 . -7) (undo-tree-id4746 . -7) (undo-tree-id4747 . -8) (undo-tree-id4748 . -8) (undo-tree-id4749 . -8) (undo-tree-id4750 . -8) (undo-tree-id4751 . -8) (undo-tree-id4752 . -8) (undo-tree-id4753 . -8) (undo-tree-id4754 . -8) (undo-tree-id4755 . -8) (undo-tree-id4756 . -9) (undo-tree-id4757 . -9) (undo-tree-id4758 . -9) (undo-tree-id4759 . -9) (undo-tree-id4760 . -9) (undo-tree-id4761 . -9) (undo-tree-id4762 . -9) (undo-tree-id4763 . -9) (undo-tree-id4764 . -9) (undo-tree-id4765 . -10) (undo-tree-id4766 . -10) (undo-tree-id4767 . -10) (undo-tree-id4768 . -10) (undo-tree-id4769 . -10) (undo-tree-id4770 . -10) (undo-tree-id4771 . -10) (undo-tree-id4772 . -10) (undo-tree-id4773 . -10) (undo-tree-id4774 . -11) (undo-tree-id4775 . -11) (undo-tree-id4776 . -11) (undo-tree-id4777 . -11) (undo-tree-id4778 . -11) (undo-tree-id4779 . -11) (undo-tree-id4780 . -11) (undo-tree-id4781 . -11) (undo-tree-id4782 . -11) (undo-tree-id4783 . -12) (undo-tree-id4784 . -12) (undo-tree-id4785 . -12) (undo-tree-id4786 . -12) (undo-tree-id4787 . -12) (undo-tree-id4788 . -12) (undo-tree-id4789 . -12) (undo-tree-id4790 . -12) (undo-tree-id4791 . -12) (undo-tree-id4792 . -13) (undo-tree-id4793 . -13) (undo-tree-id4794 . -13) (undo-tree-id4795 . -13) (undo-tree-id4796 . -13) (undo-tree-id4797 . -13) (undo-tree-id4798 . -13) (undo-tree-id4799 . -13) (undo-tree-id4800 . -13) (undo-tree-id4801 . -14) (undo-tree-id4802 . -14) (undo-tree-id4803 . -14) (undo-tree-id4804 . -14) (undo-tree-id4805 . -14) (undo-tree-id4806 . -14) (undo-tree-id4807 . -14) (undo-tree-id4808 . -14) (undo-tree-id4809 . -14) (undo-tree-id4810 . -15) (undo-tree-id4811 . -15) (undo-tree-id4812 . -15) (undo-tree-id4813 . -15) (undo-tree-id4814 . -15) (undo-tree-id4815 . -15) (undo-tree-id4816 . -15) (undo-tree-id4817 . -15) (undo-tree-id4818 . -15) (undo-tree-id4819 . -16) (undo-tree-id4820 . -16) (undo-tree-id4821 . -16) (undo-tree-id4822 . -16) (undo-tree-id4823 . -16) (undo-tree-id4824 . -16) (undo-tree-id4825 . -16) (undo-tree-id4826 . -16) (undo-tree-id4827 . -16) (undo-tree-id4828 . -17) (undo-tree-id4829 . -17) (undo-tree-id4830 . -17) (undo-tree-id4831 . -17) (undo-tree-id4832 . -17) (undo-tree-id4833 . -17) (undo-tree-id4834 . -17) (undo-tree-id4835 . -17) (undo-tree-id4836 . -17) (undo-tree-id4837 . -18) (undo-tree-id4838 . -18) (undo-tree-id4839 . -18) (undo-tree-id4840 . -18) (undo-tree-id4841 . -18) (undo-tree-id4842 . -18) (undo-tree-id4843 . -18) (undo-tree-id4844 . -18) (undo-tree-id4845 . -18) (undo-tree-id4846 . -19) (undo-tree-id4847 . -19) (undo-tree-id4848 . -19) (undo-tree-id4849 . -19) (undo-tree-id4850 . -19) (undo-tree-id4851 . -19) (undo-tree-id4852 . -19) (undo-tree-id4853 . -19) (undo-tree-id4854 . -19) (undo-tree-id4855 . -20) (undo-tree-id4856 . -20) (undo-tree-id4857 . -20) (undo-tree-id4858 . -20) (undo-tree-id4859 . -20) (undo-tree-id4860 . -20) (undo-tree-id4861 . -20) (undo-tree-id4862 . -20) (undo-tree-id4863 . -20) (undo-tree-id4864 . -21) (undo-tree-id4865 . -21) (undo-tree-id4866 . -21) (undo-tree-id4867 . -21) (undo-tree-id4868 . -21) (undo-tree-id4869 . -21) (undo-tree-id4870 . -21) (undo-tree-id4871 . -21) (undo-tree-id4872 . -21) (undo-tree-id4873 . -22) (undo-tree-id4874 . -22) (undo-tree-id4875 . -22) (undo-tree-id4876 . -22) (undo-tree-id4877 . -22) (undo-tree-id4878 . -22) (undo-tree-id4879 . -22) (undo-tree-id4880 . -22) (undo-tree-id4881 . -22) (undo-tree-id4882 . -23) (undo-tree-id4883 . -23) (undo-tree-id4884 . -23) (undo-tree-id4885 . -23) (undo-tree-id4886 . -23) (undo-tree-id4887 . -23) (undo-tree-id4888 . -23) (undo-tree-id4889 . -23) (undo-tree-id4890 . -23) (undo-tree-id4891 . -24) (undo-tree-id4892 . -24) (undo-tree-id4893 . -24) (undo-tree-id4894 . -24) (undo-tree-id4895 . -24) (undo-tree-id4896 . -24) (undo-tree-id4897 . -24) (undo-tree-id4898 . -24) (undo-tree-id4899 . -24) (undo-tree-id4900 . -25) (undo-tree-id4901 . -25) (undo-tree-id4902 . -25) (undo-tree-id4903 . -25) (undo-tree-id4904 . -25) (undo-tree-id4905 . -25) (undo-tree-id4906 . -25) (undo-tree-id4907 . -25) (undo-tree-id4908 . -25) (undo-tree-id4909 . -26) (undo-tree-id4910 . -26) (undo-tree-id4911 . -26) (undo-tree-id4912 . -26) (undo-tree-id4913 . -26) (undo-tree-id4914 . -26) (undo-tree-id4915 . -26) (undo-tree-id4916 . -26) (undo-tree-id4917 . -26) (undo-tree-id4918 . -27) (undo-tree-id4919 . -27) (undo-tree-id4920 . -27) (undo-tree-id4921 . -27) (undo-tree-id4922 . -27) (undo-tree-id4923 . -27) (undo-tree-id4924 . -27) (undo-tree-id4925 . -27) (undo-tree-id4926 . -27) (undo-tree-id4927 . -28) (undo-tree-id4928 . -28) (undo-tree-id4929 . -28) (undo-tree-id4930 . -28) (undo-tree-id4931 . -28) (undo-tree-id4932 . -28) (undo-tree-id4933 . -28) (undo-tree-id4934 . -28) (undo-tree-id4935 . -28) (undo-tree-id4936 . -29) (undo-tree-id4937 . -29) (undo-tree-id4938 . -29) (undo-tree-id4939 . -29) (undo-tree-id4940 . -29) (undo-tree-id4941 . -29) (undo-tree-id4942 . -29) (undo-tree-id4943 . -29) (undo-tree-id4944 . -29) (undo-tree-id4945 . -30) (undo-tree-id4946 . -30) (undo-tree-id4947 . -30) (undo-tree-id4948 . -30) (undo-tree-id4949 . -30) (undo-tree-id4950 . -30) (undo-tree-id4951 . -30) (undo-tree-id4952 . -30) (undo-tree-id4953 . -30) (undo-tree-id4954 . -31) (undo-tree-id4955 . -31) (undo-tree-id4956 . -31) (undo-tree-id4957 . -31) (undo-tree-id4958 . -31) (undo-tree-id4959 . -31) (undo-tree-id4960 . -31) (undo-tree-id4961 . -31) (undo-tree-id4962 . -31) (undo-tree-id4963 . -32) (undo-tree-id4964 . -32) (undo-tree-id4965 . -32) (undo-tree-id4966 . -32) (undo-tree-id4967 . -32) (undo-tree-id4968 . -32) (undo-tree-id4969 . -32) (undo-tree-id4970 . -32) (undo-tree-id4971 . -32) (undo-tree-id4972 . -33) (undo-tree-id4973 . -33) (undo-tree-id4974 . -33) (undo-tree-id4975 . -33) (undo-tree-id4976 . -33) (undo-tree-id4977 . -33) (undo-tree-id4978 . -33) (undo-tree-id4979 . -33) (undo-tree-id4980 . -33) (undo-tree-id4981 . -34) (undo-tree-id4982 . -34) (undo-tree-id4983 . -34) (undo-tree-id4984 . -34) (undo-tree-id4985 . -34) (undo-tree-id4986 . -34) (undo-tree-id4987 . -34) (undo-tree-id4988 . -34) (undo-tree-id4989 . -34) (undo-tree-id4990 . -35) (undo-tree-id4991 . -35) (undo-tree-id4992 . -35) (undo-tree-id4993 . -35) (undo-tree-id4994 . -35) (undo-tree-id4995 . -35) (undo-tree-id4996 . -35) (undo-tree-id4997 . -35) (undo-tree-id4998 . -35) (undo-tree-id4999 . -36) (undo-tree-id5000 . -36) (undo-tree-id5001 . -36) (undo-tree-id5002 . -36) (undo-tree-id5003 . -36) (undo-tree-id5004 . -36) (undo-tree-id5005 . -36) (undo-tree-id5006 . -36) (undo-tree-id5007 . -36) (undo-tree-id5008 . -37) (undo-tree-id5009 . -37) (undo-tree-id5010 . -37) (undo-tree-id5011 . -37) (undo-tree-id5012 . -37) (undo-tree-id5013 . -37) (undo-tree-id5014 . -37) (undo-tree-id5015 . -37) (undo-tree-id5016 . -37) (undo-tree-id5017 . -38) (undo-tree-id5018 . -38) (undo-tree-id5019 . -38) (undo-tree-id5020 . -38) (undo-tree-id5021 . -38) (undo-tree-id5022 . -38) (undo-tree-id5023 . -38) (undo-tree-id5024 . -38) (undo-tree-id5025 . -38) (undo-tree-id5026 . -39) (undo-tree-id5027 . -39) (undo-tree-id5028 . -39) (undo-tree-id5029 . -39) (undo-tree-id5030 . -39) (undo-tree-id5031 . -39) (undo-tree-id5032 . -39) (undo-tree-id5033 . -39) (undo-tree-id5034 . -39) (undo-tree-id5035 . -40) (undo-tree-id5036 . -40) (undo-tree-id5037 . -40) (undo-tree-id5038 . -40) (undo-tree-id5039 . -40) (undo-tree-id5040 . -40) (undo-tree-id5041 . -40) (undo-tree-id5042 . -40) (undo-tree-id5043 . -40) (undo-tree-id5044 . -41) (undo-tree-id5045 . -41) (undo-tree-id5046 . -41) (undo-tree-id5047 . -41) (undo-tree-id5048 . -41) (undo-tree-id5049 . -41) (undo-tree-id5050 . -41) (undo-tree-id5051 . -41) (undo-tree-id5052 . -41) (undo-tree-id5053 . -42) (undo-tree-id5054 . -42) (undo-tree-id5055 . -42) (undo-tree-id5056 . -42) (undo-tree-id5057 . -42) (undo-tree-id5058 . -42) (undo-tree-id5059 . -42) (undo-tree-id5060 . -42) (undo-tree-id5061 . -42) (undo-tree-id5062 . -43) (undo-tree-id5063 . -43) (undo-tree-id5064 . -43) (undo-tree-id5065 . -43) (undo-tree-id5066 . -43) (undo-tree-id5067 . -43) (undo-tree-id5068 . -43) (undo-tree-id5069 . -43) (undo-tree-id5070 . -43) (undo-tree-id5071 . -43) (undo-tree-id5072 . -44) 2542) nil (26155 59255 506360 196000) 0 nil])
([nil nil ((2484 . 2495) (#("d" 0 1 (fontified t)) . -2484) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (#("a" 0 1 (fontified t)) . -2485) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) 2486 (2484 . 2486) (2479 . 2484)) nil (26155 59255 505692 651000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2538 . 2539) (nil fontified nil 2495 . 2539) (2495 . 2539) 2494) nil (26155 59255 505682 868000) 0 nil])
([nil nil ((2539 . 2540)) nil (26155 59255 505680 187000) 0 nil])
([nil nil ((#("	    print!(\"{}\", )
" 0 5 (fontified t) 5 11 (fontified t face rust-builtin-formatting-macro) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 13 (fontified t face font-lock-string-face) 13 15 (fontified t face rust-string-interpolation) 15 16 (fontified t face font-lock-string-face) 16 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 20 (fontified t)) . 2542) (undo-tree-id4161 . -19) (undo-tree-id4162 . -18) (undo-tree-id4163 . 2) (undo-tree-id4164 . -18) (undo-tree-id4165 . -18) (undo-tree-id4166 . -18) (undo-tree-id4167 . -18) (undo-tree-id4168 . -18) (undo-tree-id4169 . -18) (undo-tree-id4170 . -18) (undo-tree-id4171 . -18) (undo-tree-id4172 . -18) (undo-tree-id4173 . -18) (undo-tree-id4174 . -18) (undo-tree-id4175 . -18) (undo-tree-id4176 . -18) (undo-tree-id4177 . -18) (undo-tree-id4178 . -18) (undo-tree-id4179 . -18) (undo-tree-id4180 . -18) (undo-tree-id4181 . -18) (undo-tree-id4182 . -18) (undo-tree-id4183 . -18) (undo-tree-id4184 . -18) (undo-tree-id4185 . -18) (undo-tree-id4186 . -18) (undo-tree-id4187 . -18) (undo-tree-id4188 . -18) (undo-tree-id4189 . -18) (undo-tree-id4190 . -18) (undo-tree-id4191 . -18) (undo-tree-id4192 . -18) (undo-tree-id4193 . -18) (undo-tree-id4194 . -18) (undo-tree-id4195 . -18) (undo-tree-id4196 . -18) (undo-tree-id4197 . -18) (undo-tree-id4198 . -18) (undo-tree-id4199 . -18) (undo-tree-id4200 . -18) (undo-tree-id4201 . -18) (undo-tree-id4202 . -18) (undo-tree-id4203 . -18) (undo-tree-id4204 . -18) (undo-tree-id4205 . -18) (undo-tree-id4206 . -18) (undo-tree-id4207 . -18) (undo-tree-id4208 . -18) (undo-tree-id4209 . -18) (undo-tree-id4210 . -18) (undo-tree-id4211 . -18) (undo-tree-id4212 . -18) (undo-tree-id4213 . -18) (undo-tree-id4214 . -18) (undo-tree-id4215 . -18) (undo-tree-id4216 . -18) (undo-tree-id4217 . -18) (undo-tree-id4218 . -18) (undo-tree-id4219 . -18) (undo-tree-id4220 . -18) (undo-tree-id4221 . -18) (undo-tree-id4222 . -18) (undo-tree-id4223 . -18) (undo-tree-id4224 . -18) (undo-tree-id4225 . -18) (undo-tree-id4226 . -18) (undo-tree-id4227 . -18) (undo-tree-id4228 . -18) (undo-tree-id4229 . -18) (undo-tree-id4230 . -18) (undo-tree-id4231 . -18) (undo-tree-id4232 . -18) (undo-tree-id4233 . -18) (undo-tree-id4234 . -18) (undo-tree-id4235 . -18) (undo-tree-id4236 . -18) (undo-tree-id4237 . -18) (undo-tree-id4238 . -18) (undo-tree-id4239 . -18) (undo-tree-id4240 . -18) (undo-tree-id4241 . -18) (undo-tree-id4242 . -18) (undo-tree-id4243 . -18) (undo-tree-id4244 . -18) (undo-tree-id4245 . -18) (undo-tree-id4246 . -18) (undo-tree-id4247 . -18) (undo-tree-id4248 . -18) (undo-tree-id4249 . -18) (undo-tree-id4250 . -18) (undo-tree-id4251 . -18) (undo-tree-id4252 . -18) (undo-tree-id4253 . -18) (undo-tree-id4254 . -18) (undo-tree-id4255 . -18) (undo-tree-id4256 . -18) (undo-tree-id4257 . -18) (undo-tree-id4258 . -18) (undo-tree-id4259 . -18) (undo-tree-id4260 . -18) (undo-tree-id4261 . -18) (undo-tree-id4262 . -18) (undo-tree-id4263 . -18) (undo-tree-id4264 . -18) (undo-tree-id4265 . -18) (undo-tree-id4266 . -18) (undo-tree-id4267 . -18) (undo-tree-id4268 . -18) (undo-tree-id4269 . -18) (undo-tree-id4270 . -18) (undo-tree-id4271 . -18) (undo-tree-id4272 . -18) (undo-tree-id4273 . -18) (undo-tree-id4274 . -18) (undo-tree-id4275 . -18) (undo-tree-id4276 . -18) (undo-tree-id4277 . -18) (undo-tree-id4278 . -18) (undo-tree-id4279 . -18) (undo-tree-id4280 . -18) (undo-tree-id4281 . -18) (undo-tree-id4282 . -18) (undo-tree-id4283 . -18) (undo-tree-id4284 . -18) (undo-tree-id4285 . -18) (undo-tree-id4286 . -18) (undo-tree-id4287 . -18) (undo-tree-id4288 . -18) (undo-tree-id4289 . -18) (undo-tree-id4290 . -18) (undo-tree-id4291 . -18) (undo-tree-id4292 . -18) (undo-tree-id4293 . -18) (undo-tree-id4294 . -18) (undo-tree-id4295 . -18) (undo-tree-id4296 . -18) (undo-tree-id4297 . -18) (undo-tree-id4298 . -18) (undo-tree-id4299 . -18) (undo-tree-id4300 . -18) (undo-tree-id4301 . -18) (undo-tree-id4302 . -18) (undo-tree-id4303 . -18) (undo-tree-id4304 . -18) (undo-tree-id4305 . -18) (undo-tree-id4306 . -18) (undo-tree-id4307 . -18) (undo-tree-id4308 . -18) (undo-tree-id4309 . -18) (undo-tree-id4310 . -18) (undo-tree-id4311 . -18) (undo-tree-id4312 . -18) (undo-tree-id4313 . -18) (undo-tree-id4314 . -18) (undo-tree-id4315 . -18) (undo-tree-id4316 . -18) (undo-tree-id4317 . -18) (undo-tree-id4318 . -18) (undo-tree-id4319 . -18) (undo-tree-id4320 . -18) (undo-tree-id4321 . -18) (undo-tree-id4322 . -18) (undo-tree-id4323 . -18) (undo-tree-id4324 . -18) (undo-tree-id4325 . -18) (undo-tree-id4326 . -18) (undo-tree-id4327 . -18) (undo-tree-id4328 . -18) (undo-tree-id4329 . -18) (undo-tree-id4330 . -18) (undo-tree-id4331 . -18) (undo-tree-id4332 . -18) (undo-tree-id4333 . -18) (undo-tree-id4334 . -18) (undo-tree-id4335 . -18) (undo-tree-id4336 . -18) (undo-tree-id4337 . -18) (undo-tree-id4338 . -18) (undo-tree-id4339 . -18) (undo-tree-id4340 . -18) (undo-tree-id4341 . -18) (undo-tree-id4342 . -18) (undo-tree-id4343 . -18) (undo-tree-id4344 . -18) (undo-tree-id4345 . -18) (undo-tree-id4346 . -18) (undo-tree-id4347 . -18) (undo-tree-id4348 . -18) (undo-tree-id4349 . -18) (undo-tree-id4350 . -18) (undo-tree-id4351 . -18) (undo-tree-id4352 . -18) (undo-tree-id4353 . -18) (undo-tree-id4354 . -18) (undo-tree-id4355 . -18) (undo-tree-id4356 . -18) (undo-tree-id4357 . -18) (undo-tree-id4358 . -18) (undo-tree-id4359 . -18) (undo-tree-id4360 . -18) (undo-tree-id4361 . -18) (undo-tree-id4362 . -18) (undo-tree-id4363 . -18) (undo-tree-id4364 . -18) (undo-tree-id4365 . -18) (undo-tree-id4366 . -18) (undo-tree-id4367 . -18) (undo-tree-id4368 . -18) (undo-tree-id4369 . -18) (undo-tree-id4370 . -18) (undo-tree-id4371 . -18) (undo-tree-id4372 . -18) (undo-tree-id4373 . -18) (undo-tree-id4374 . -18) (undo-tree-id4375 . -18) (undo-tree-id4376 . -18) (undo-tree-id4377 . -18) (undo-tree-id4378 . -18) (undo-tree-id4379 . -18) (undo-tree-id4380 . -18) (undo-tree-id4381 . -18) (undo-tree-id4382 . -18) (undo-tree-id4383 . -18) (undo-tree-id4384 . -18) (undo-tree-id4385 . -18) (undo-tree-id4386 . -18) (undo-tree-id4387 . -18) (undo-tree-id4388 . -18) (undo-tree-id4389 . -18) (undo-tree-id4390 . -18) (undo-tree-id4391 . -18) (undo-tree-id4392 . -18) (undo-tree-id4393 . -18) (undo-tree-id4394 . -18) (undo-tree-id4395 . -18) (undo-tree-id4396 . -18) (undo-tree-id4397 . -18) (undo-tree-id4398 . -18) (undo-tree-id4399 . -18) (undo-tree-id4400 . -18) (undo-tree-id4401 . -18) (undo-tree-id4402 . -18) (undo-tree-id4403 . -18) (undo-tree-id4404 . -18) (undo-tree-id4405 . -18) (undo-tree-id4406 . -18) (undo-tree-id4407 . -18) (undo-tree-id4408 . -18) (undo-tree-id4409 . -18) (undo-tree-id4410 . -18) (undo-tree-id4411 . -18) (undo-tree-id4412 . -18) (undo-tree-id4413 . -18) (undo-tree-id4414 . -18) (undo-tree-id4415 . -18) (undo-tree-id4416 . -18) (undo-tree-id4417 . -18) (undo-tree-id4418 . -18) (undo-tree-id4419 . -18) (undo-tree-id4420 . -18) (undo-tree-id4421 . -18) (undo-tree-id4422 . -18) (undo-tree-id4423 . -18) (undo-tree-id4424 . -18) (undo-tree-id4425 . -18) (undo-tree-id4426 . -18) (undo-tree-id4427 . -18) (undo-tree-id4428 . -18) (undo-tree-id4429 . -18) (undo-tree-id4430 . -18) (undo-tree-id4431 . -18) (undo-tree-id4432 . -18) (undo-tree-id4433 . -18) (undo-tree-id4434 . -18) (undo-tree-id4435 . -18) (undo-tree-id4436 . -18) (undo-tree-id4437 . -18) (undo-tree-id4438 . -18) (undo-tree-id4439 . -18) (undo-tree-id4440 . -18) (undo-tree-id4441 . -18) (undo-tree-id4442 . -18) (undo-tree-id4443 . -18) (undo-tree-id4444 . -18) (undo-tree-id4445 . -18) (undo-tree-id4446 . -18) (undo-tree-id4447 . -18) (undo-tree-id4448 . -18) (undo-tree-id4449 . -18) (undo-tree-id4450 . -18) (undo-tree-id4451 . -18) (undo-tree-id4452 . -18) (undo-tree-id4453 . -18) (undo-tree-id4454 . -18) (undo-tree-id4455 . -18) (undo-tree-id4456 . -18) (undo-tree-id4457 . -18) (undo-tree-id4458 . -18) (undo-tree-id4459 . -18) (undo-tree-id4460 . -18) (undo-tree-id4461 . -18) (undo-tree-id4462 . -18) (undo-tree-id4463 . -18) (undo-tree-id4464 . -18) (undo-tree-id4465 . -18) (undo-tree-id4466 . -18) (undo-tree-id4467 . -18) (undo-tree-id4468 . -18) (undo-tree-id4469 . -18) (undo-tree-id4470 . -18) (undo-tree-id4471 . -18) (undo-tree-id4472 . -18) (undo-tree-id4473 . -18) (undo-tree-id4474 . -18) (undo-tree-id4475 . -18) (undo-tree-id4476 . -18) (undo-tree-id4477 . -18) (undo-tree-id4478 . -18) (undo-tree-id4479 . -18) (undo-tree-id4480 . -18) (undo-tree-id4481 . -18) (undo-tree-id4482 . -18) (undo-tree-id4483 . -18) (undo-tree-id4484 . -18) (undo-tree-id4485 . -18) (undo-tree-id4486 . -18) (undo-tree-id4487 . -18) (undo-tree-id4488 . -18) (undo-tree-id4489 . -18) (undo-tree-id4490 . -18) (undo-tree-id4491 . -18) (undo-tree-id4492 . -18) (undo-tree-id4493 . -18) (undo-tree-id4494 . -18) (undo-tree-id4495 . -18) (undo-tree-id4496 . -18) (undo-tree-id4497 . -18) (undo-tree-id4498 . -18) (undo-tree-id4499 . -18) (undo-tree-id4500 . -18) (undo-tree-id4501 . -18) (undo-tree-id4502 . -18) (undo-tree-id4503 . -18) (undo-tree-id4504 . -18) (undo-tree-id4505 . -18) (undo-tree-id4506 . -18) (undo-tree-id4507 . -18) (undo-tree-id4508 . -18) (undo-tree-id4509 . -18) (undo-tree-id4510 . -18) (undo-tree-id4511 . -18) (undo-tree-id4512 . -18) (undo-tree-id4513 . -18) (undo-tree-id4514 . -18) (undo-tree-id4515 . -18) (undo-tree-id4516 . -18) (undo-tree-id4517 . -18) (undo-tree-id4518 . -18) (undo-tree-id4519 . -18) (undo-tree-id4520 . -18) (undo-tree-id4521 . -18) (undo-tree-id4522 . -18) (undo-tree-id4523 . -18) (undo-tree-id4524 . -18) (undo-tree-id4525 . -18) (undo-tree-id4526 . -18) (undo-tree-id4527 . -18) (undo-tree-id4528 . -18) (undo-tree-id4529 . -18) (undo-tree-id4530 . -18) (undo-tree-id4531 . -18) (undo-tree-id4532 . -18) (undo-tree-id4533 . -18) (undo-tree-id4534 . -18) (undo-tree-id4535 . -18) (undo-tree-id4536 . -18) (undo-tree-id4537 . -18) (undo-tree-id4538 . -18) (undo-tree-id4539 . -18) (undo-tree-id4540 . -18) (undo-tree-id4541 . -18) (undo-tree-id4542 . -18) (undo-tree-id4543 . -18) (undo-tree-id4544 . -18) (undo-tree-id4545 . -18) (undo-tree-id4546 . -18) (undo-tree-id4547 . -18) (undo-tree-id4548 . -18) (undo-tree-id4549 . -18) (undo-tree-id4550 . -18) (undo-tree-id4551 . -18) (undo-tree-id4552 . -18) (undo-tree-id4553 . -18) (undo-tree-id4554 . -18) (undo-tree-id4555 . -18) (undo-tree-id4556 . -18) (undo-tree-id4557 . -18) (undo-tree-id4558 . -18) (undo-tree-id4559 . -18) (undo-tree-id4560 . -18) (undo-tree-id4561 . -18) (undo-tree-id4562 . -18) (undo-tree-id4563 . -18) (undo-tree-id4564 . -18) (undo-tree-id4565 . -18) (undo-tree-id4566 . -18) (undo-tree-id4567 . -18) (undo-tree-id4568 . -18) (undo-tree-id4569 . -18) (undo-tree-id4570 . -18) (undo-tree-id4571 . -18) (undo-tree-id4572 . -18) (undo-tree-id4573 . -18) (undo-tree-id4574 . -18) (undo-tree-id4575 . -18) (undo-tree-id4576 . -18) (undo-tree-id4577 . -18) (undo-tree-id4578 . -18) (undo-tree-id4579 . -18) (undo-tree-id4580 . -18) (undo-tree-id4581 . -18) (undo-tree-id4582 . -18) (undo-tree-id4583 . -18) (undo-tree-id4584 . -18) (undo-tree-id4585 . -18) (undo-tree-id4586 . -18) (undo-tree-id4587 . -18) (undo-tree-id4588 . -18) (undo-tree-id4589 . -18) (undo-tree-id4590 . -18) (undo-tree-id4591 . -18) (undo-tree-id4592 . -18) (undo-tree-id4593 . -18) (undo-tree-id4594 . -18) (undo-tree-id4595 . -18) (undo-tree-id4596 . -18) (undo-tree-id4597 . -18) (undo-tree-id4598 . -18) (undo-tree-id4599 . -18) (undo-tree-id4600 . -18) (undo-tree-id4601 . -18) (undo-tree-id4602 . -18) (undo-tree-id4603 . -18) (undo-tree-id4604 . -18) (undo-tree-id4605 . -18) (undo-tree-id4606 . -18) (undo-tree-id4607 . -18) (undo-tree-id4608 . -18) (undo-tree-id4609 . -18) (undo-tree-id4610 . -18) (undo-tree-id4611 . -18) (undo-tree-id4612 . -18) (undo-tree-id4613 . -18) (undo-tree-id4614 . -18) (undo-tree-id4615 . -18) (undo-tree-id4616 . -18) (undo-tree-id4617 . -18) (undo-tree-id4618 . -18) (undo-tree-id4619 . -18) (undo-tree-id4620 . -18) (undo-tree-id4621 . -18) (undo-tree-id4622 . -18) (undo-tree-id4623 . -18) (undo-tree-id4624 . -18) (undo-tree-id4625 . -18) (undo-tree-id4626 . -18) (undo-tree-id4627 . -18) (undo-tree-id4628 . -18) (undo-tree-id4629 . -18) (undo-tree-id4630 . -18) (undo-tree-id4631 . -18) (undo-tree-id4632 . -18) (undo-tree-id4633 . -18) (undo-tree-id4634 . -18) (undo-tree-id4635 . -20) 2560) nil (26155 59255 505637 400000) 0 nil])
([nil nil ((2556 . 2560) (#(">" 0 1 (fontified t syntax-table (1))) . -2556) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) 2557 (2551 . 2557) (2547 . 2552) (2542 . 2547) (#("	    " 0 5 (fontified nil)) . 2541) (undo-tree-id4160 . -5) (2540 . 2547)) nil (26155 59255 504664 445000) 0 nil])
([nil nil ((2574 . 2575) (2573 . 2575) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -2573) (2573 . 2574) (apply yas--snippet-revive 2566 2574 #s(yas--snippet nil nil #s(yas--exit 2573 nil) 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2573 nil) 66 nil nil nil nil)) (2566 . 2574) (#("print!($0)" 0 10 (fontified nil)) . 2566) (2566 . 2576) (#("pr" 0 2 (fontified nil)) . 2566) (2566 . 2568) (#("print!(…)" 0 9 (fontified nil)) . -2566) (2566 . 2575) (#("pr" 0 2 (fontified t)) . -2566) (undo-tree-id4097 . -2) (undo-tree-id4098 . -2) (undo-tree-id4099 . -2) (undo-tree-id4100 . -2) (undo-tree-id4101 . -2) (undo-tree-id4102 . -2) (undo-tree-id4103 . -2) (undo-tree-id4104 . -2) (undo-tree-id4105 . -2) (undo-tree-id4106 . -2) (undo-tree-id4107 . -2) (undo-tree-id4108 . -2) (undo-tree-id4109 . -2) (undo-tree-id4110 . -2) (undo-tree-id4111 . -2) (undo-tree-id4112 . -2) (undo-tree-id4113 . -2) (undo-tree-id4114 . -2) (undo-tree-id4115 . -2) (undo-tree-id4116 . -2) (undo-tree-id4117 . -2) (undo-tree-id4118 . -2) (undo-tree-id4119 . -2) (undo-tree-id4120 . -2) (undo-tree-id4121 . -2) (undo-tree-id4122 . -2) (undo-tree-id4123 . -2) (undo-tree-id4124 . -2) (undo-tree-id4125 . -2) (undo-tree-id4126 . -2) (undo-tree-id4127 . -2) (undo-tree-id4128 . -2) (undo-tree-id4129 . -2) (undo-tree-id4130 . -2) (undo-tree-id4131 . -2) (undo-tree-id4132 . -2) (undo-tree-id4133 . -2) (undo-tree-id4134 . -2) (undo-tree-id4135 . -2) (undo-tree-id4136 . -2) (undo-tree-id4137 . -2) (undo-tree-id4138 . -2) (undo-tree-id4139 . -2) (undo-tree-id4140 . -2) (undo-tree-id4141 . -2) (undo-tree-id4142 . -2) (undo-tree-id4143 . -2) (undo-tree-id4144 . -2) (undo-tree-id4145 . -2) (undo-tree-id4146 . -2) (undo-tree-id4147 . -2) (undo-tree-id4148 . -2) (undo-tree-id4149 . -2) (undo-tree-id4150 . -2) (undo-tree-id4151 . -2) (undo-tree-id4152 . -2) (undo-tree-id4153 . -2) 2568 (2566 . 2568) (#("o" 0 1 (fontified t)) . -2566) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (#("r" 0 1 (fontified t)) . -2567) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) 2568 (2566 . 2568) (2564 . 2566) (2565 . 2570) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2564) (2564 . 2566) (2563 . 2565) (2561 . 2564)) nil (26155 59255 504616 221000) 0 nil])
([nil nil ((2574 . 2575) (#("0" 0 1 (fontified t face font-lock-string-face)) . -2574) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) 2575) nil (26155 59255 504497 372000) 0 nil])
([nil nil ((2578 . 2581) (2577 . 2578)) nil (26155 59255 504311 485000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2579) (undo-tree-id3974 . -2) (undo-tree-id3975 . 1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -2) (undo-tree-id3978 . -2) (undo-tree-id3979 . -2) (undo-tree-id3980 . -2) (undo-tree-id3981 . -2) (undo-tree-id3982 . -2) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -3) 2580) nil (26155 59255 504303 752000) 0 nil])
([nil nil ((2603 . 2604) (2602 . 2604) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -2602) (2602 . 2603) (apply yas--snippet-revive 2595 2603 #s(yas--snippet nil nil #s(yas--exit 2602 nil) 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2602 nil) 67 nil nil nil nil)) (2595 . 2603) (#("print!($0)" 0 10 (fontified nil)) . 2595) (2595 . 2605) (#("pr" 0 2 (fontified nil)) . 2595) (2595 . 2597) (#("print!(…)" 0 9 (fontified nil)) . -2595) (2595 . 2604) (#("pr" 0 2 (fontified t)) . -2595) (undo-tree-id3766 . -2) (undo-tree-id3767 . -2) (undo-tree-id3768 . -2) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -2) (undo-tree-id3818 . -2) (undo-tree-id3819 . -2) (undo-tree-id3820 . -2) (undo-tree-id3821 . -2) (undo-tree-id3822 . -2) (undo-tree-id3823 . -2) (undo-tree-id3824 . -2) (undo-tree-id3825 . -2) (undo-tree-id3826 . -2) (undo-tree-id3827 . -2) (undo-tree-id3828 . -2) (undo-tree-id3829 . -2) (undo-tree-id3830 . -2) (undo-tree-id3831 . -2) (undo-tree-id3832 . -2) (undo-tree-id3833 . -2) (undo-tree-id3834 . -2) (undo-tree-id3835 . -2) (undo-tree-id3836 . -2) (undo-tree-id3837 . -2) (undo-tree-id3838 . -2) (undo-tree-id3839 . -2) (undo-tree-id3840 . -2) (undo-tree-id3841 . -2) (undo-tree-id3842 . -2) (undo-tree-id3843 . -2) (undo-tree-id3844 . -2) (undo-tree-id3845 . -2) (undo-tree-id3846 . -2) (undo-tree-id3847 . -2) (undo-tree-id3848 . -2) (undo-tree-id3849 . -2) (undo-tree-id3850 . -2) (undo-tree-id3851 . -2) (undo-tree-id3852 . -2) (undo-tree-id3853 . -2) (undo-tree-id3854 . -2) (undo-tree-id3855 . -2) (undo-tree-id3856 . -2) (undo-tree-id3857 . -2) (undo-tree-id3858 . -2) (undo-tree-id3859 . -2) (undo-tree-id3860 . -2) (undo-tree-id3861 . -2) (undo-tree-id3862 . -2) (undo-tree-id3863 . -2) (undo-tree-id3864 . -2) (undo-tree-id3865 . -2) (undo-tree-id3866 . -2) (undo-tree-id3867 . -2) (undo-tree-id3868 . -2) (undo-tree-id3869 . -2) (undo-tree-id3870 . -2) (undo-tree-id3871 . -2) (undo-tree-id3872 . -2) (undo-tree-id3873 . -2) (undo-tree-id3874 . -2) (undo-tree-id3875 . -2) (undo-tree-id3876 . -2) (undo-tree-id3877 . -2) (undo-tree-id3878 . -2) (undo-tree-id3879 . -2) (undo-tree-id3880 . -2) (undo-tree-id3881 . -2) (undo-tree-id3882 . -2) (undo-tree-id3883 . -2) (undo-tree-id3884 . -2) (undo-tree-id3885 . -2) (undo-tree-id3886 . -2) (undo-tree-id3887 . -2) (undo-tree-id3888 . -2) (undo-tree-id3889 . -2) (undo-tree-id3890 . -2) (undo-tree-id3891 . -2) (undo-tree-id3892 . -2) (undo-tree-id3893 . -2) (undo-tree-id3894 . -2) (undo-tree-id3895 . -2) (undo-tree-id3896 . -2) (undo-tree-id3897 . -2) (undo-tree-id3898 . -2) (undo-tree-id3899 . -2) (undo-tree-id3900 . -2) (undo-tree-id3901 . -2) (undo-tree-id3902 . -2) (undo-tree-id3903 . -2) (undo-tree-id3904 . -2) (undo-tree-id3905 . -2) (undo-tree-id3906 . -2) (undo-tree-id3907 . -2) (undo-tree-id3908 . -2) (undo-tree-id3909 . -2) (undo-tree-id3910 . -2) (undo-tree-id3911 . -2) (undo-tree-id3912 . -2) (undo-tree-id3913 . -2) (undo-tree-id3914 . -2) (undo-tree-id3915 . -2) (undo-tree-id3916 . -2) (undo-tree-id3917 . -2) (undo-tree-id3918 . -2) (undo-tree-id3919 . -2) (undo-tree-id3920 . -2) (undo-tree-id3921 . -2) (undo-tree-id3922 . -2) (undo-tree-id3923 . -2) (undo-tree-id3924 . -2) (undo-tree-id3925 . -2) (undo-tree-id3926 . -2) (undo-tree-id3927 . -2) (undo-tree-id3928 . -2) (undo-tree-id3929 . -2) (undo-tree-id3930 . -2) (undo-tree-id3931 . -2) (undo-tree-id3932 . -2) (undo-tree-id3933 . -2) (undo-tree-id3934 . -2) (undo-tree-id3935 . -2) (undo-tree-id3936 . -2) (undo-tree-id3937 . -2) (undo-tree-id3938 . -2) (undo-tree-id3939 . -2) (undo-tree-id3940 . -2) (undo-tree-id3941 . -2) (undo-tree-id3942 . -2) (undo-tree-id3943 . -2) (undo-tree-id3944 . -2) (undo-tree-id3945 . -2) (undo-tree-id3946 . -2) (undo-tree-id3947 . -2) 2597 (2595 . 2597) (#("r" 0 1 (fontified t)) . -2595) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (#("o" 0 1 (fontified t)) . -2596) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) 2597 (2595 . 2597) (2593 . 2595) (2594 . 2599) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2593) (2593 . 2595) (2592 . 2594) (2585 . 2593)) nil (26155 59255 504181 373000) 0 nil])
([nil nil ((2606 . 2607)) nil (26155 59255 503303 154000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2550) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (t 26155 59255 568048 356000)) nil (26155 59269 377451 970000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 2559) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1)) nil (26155 59269 377377 214000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2542) (undo-tree-id5123 . -5) (undo-tree-id5124 . -5) (undo-tree-id5125 . -5) (undo-tree-id5126 . -5) (undo-tree-id5127 . -5) (undo-tree-id5128 . -5) (undo-tree-id5129 . -5) (undo-tree-id5130 . -5) (undo-tree-id5131 . -5) (undo-tree-id5132 . -5) (undo-tree-id5133 . -5) (undo-tree-id5134 . -5) (undo-tree-id5135 . -5) (undo-tree-id5136 . -5) (undo-tree-id5137 . -5) (undo-tree-id5138 . -5) (undo-tree-id5139 . -5) (undo-tree-id5140 . -5) (undo-tree-id5141 . -5) (undo-tree-id5142 . -5) (undo-tree-id5143 . -5) (undo-tree-id5144 . -5) (undo-tree-id5145 . -5) (undo-tree-id5146 . -5) (undo-tree-id5147 . -5) (undo-tree-id5148 . -5) (undo-tree-id5149 . -5) (undo-tree-id5150 . -5) (undo-tree-id5151 . -5) (undo-tree-id5152 . -5) (undo-tree-id5153 . -5) (undo-tree-id5154 . -5) (undo-tree-id5155 . -5) (undo-tree-id5156 . -5) (undo-tree-id5157 . -5) (undo-tree-id5158 . -5) (undo-tree-id5159 . -5) (undo-tree-id5160 . -5) (undo-tree-id5161 . -5) (undo-tree-id5162 . -5) (undo-tree-id5163 . -5) (undo-tree-id5164 . -5) (undo-tree-id5165 . -5) (undo-tree-id5166 . -5) (undo-tree-id5167 . -5) (undo-tree-id5168 . -5) 2547 (2542 . 2547) (#("	    " 0 5 (fontified nil)) . 2541) (2541 . 2546) (2541 . 2542) (t 26155 59269 416311 216000)) nil (26155 59301 534696 844000) 0 nil])
([nil nil ((2547 . 2559) (2542 . 2547) (#("	    " 0 5 (fontified nil)) . 2541) (undo-tree-id5122 . -5) (2546 . 2547) (2541 . 2546)) nil (26155 59301 534616 100000) 0 nil])
([nil nil ((2556 . 2560)) nil (26155 59301 534610 189000) 0 nil])
([nil nil ((2563 . 2565)) nil (26155 59301 534608 59000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2583) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1)) nil (26155 59301 534603 3000) 0 nil])
([nil nil ((2583 . 2588)) nil (26155 59301 534574 227000) 0 nil])
([nil nil ((2563 . 2567) (#("0" 0 1 (fontified t)) . -2563) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) 2564 (t 26155 59301 596978 602000)) nil (26155 59308 41745 819000) 0 nil])
([nil nil ((apply yas--snippet-revive 2583 2590 #s(yas--snippet nil nil #s(yas--exit 2590 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2590 nil) 68 nil nil nil nil)) (2583 . 2590) (#("clone()$0" 0 9 (fontified nil)) . 2583) (2583 . 2592) (#("clo" 0 3 (fontified nil)) . 2583) (2583 . 2586) (#("clone() (as Clone)" 0 18 (fontified nil)) . -2583) (2583 . 2601) (#("clo" 0 3 (fontified t)) . -2583) (undo-tree-id5182 . -1) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -3) (undo-tree-id5188 . -3) (undo-tree-id5189 . -3) (undo-tree-id5190 . -3) (undo-tree-id5191 . -3) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -2) (undo-tree-id5198 . -3) (undo-tree-id5199 . -3) (undo-tree-id5200 . -3) (undo-tree-id5201 . -3) (undo-tree-id5202 . -3) (undo-tree-id5203 . -3) (undo-tree-id5204 . -3) (undo-tree-id5205 . -3) (undo-tree-id5206 . -3) (undo-tree-id5207 . -3) (undo-tree-id5208 . -3) (undo-tree-id5209 . -3) (undo-tree-id5210 . -3) (undo-tree-id5211 . -3) (undo-tree-id5212 . -3) (undo-tree-id5213 . -3) (undo-tree-id5214 . -3) (undo-tree-id5215 . -3) (undo-tree-id5216 . -3) (undo-tree-id5217 . -3) (undo-tree-id5218 . -3) (undo-tree-id5219 . -3) (undo-tree-id5220 . -3) (undo-tree-id5221 . -3) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) 2586 (2584 . 2586) (#("o" 0 1 (fontified t)) . -2584) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (#("p" 0 1 (fontified t)) . -2585) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) 2586 (2584 . 2586) (#("l" 0 1 (fontified t)) . -2584) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) 2585 (2582 . 2585) (t 26155 59308 105122 540000)) nil (26155 59322 973341 610000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 2583) (undo-tree-id5801 . -4) (t 26155 59323 33463 341000)) nil (26155 59363 283423 300000) 0 nil])
([nil nil ((#("() " 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face)) 2 3 (fontified t)) . 2583) (undo-tree-id5797 . -2) (undo-tree-id5798 . 1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -3)) nil (26155 59363 283418 963000) 0 nil])
([nil nil ((2582 . 2584) (#("." 0 1 (fontified t)) . -2582) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) 2583) nil (26155 59363 283404 287000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2578) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (#("a" 0 1 (fontified t)) . -2579) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (#("t" 0 1 (fontified t)) . -2580) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (#("a" 0 1 (fontified t)) . -2581) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (#("." 0 1 (fontified t)) . -2582) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (#("c" 0 1 (fontified t)) . -2583) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (#("o" 0 1 (fontified t)) . -2584) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) 2585 (2583 . 2585)) nil (26155 59363 283264 588000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2337) (undo-tree-id5431 . -4) (undo-tree-id5432 . -4) (undo-tree-id5433 . -4) (undo-tree-id5434 . -4) (undo-tree-id5435 . -4) (undo-tree-id5436 . -4) (undo-tree-id5437 . -4) (undo-tree-id5438 . -4) (undo-tree-id5439 . -4) (undo-tree-id5440 . -4) (undo-tree-id5441 . -4) (undo-tree-id5442 . -4) (undo-tree-id5443 . -4) 2341 (2337 . 2341) (#("    " 0 4 (fontified nil)) . 2336) (undo-tree-id5444 . -4) (undo-tree-id5445 . -4) (undo-tree-id5446 . -4) (undo-tree-id5447 . -4) (undo-tree-id5448 . -4) (undo-tree-id5449 . -4) (undo-tree-id5450 . -4) (undo-tree-id5451 . -4) (undo-tree-id5452 . -4) (undo-tree-id5453 . -4) (undo-tree-id5454 . -4) (undo-tree-id5455 . -4) (undo-tree-id5456 . -4) (2336 . 2341) (#("    " 0 4 (fontified nil)) . 2335) (undo-tree-id5457 . -4) (undo-tree-id5458 . -3) (undo-tree-id5459 . -3) (undo-tree-id5460 . -3) (undo-tree-id5461 . -3) (undo-tree-id5462 . -3) (undo-tree-id5463 . -3) (undo-tree-id5464 . -3) (undo-tree-id5465 . -3) (undo-tree-id5466 . -3) (undo-tree-id5467 . -4) (undo-tree-id5468 . -4) (undo-tree-id5469 . -4) (undo-tree-id5470 . -4) (undo-tree-id5471 . -4) (undo-tree-id5472 . -4) (undo-tree-id5473 . -4) (undo-tree-id5474 . -4) (undo-tree-id5475 . -4) (undo-tree-id5476 . -4) (undo-tree-id5477 . -4) (undo-tree-id5478 . -4) (2339 . 2340)) nil (26155 59363 282823 770000) 0 nil])
([nil nil ((2368 . 2369) (apply yas--snippet-revive 2356 2368 #s(yas--snippet nil nil #s(yas--exit 2368 nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2368 nil) 69 nil nil nil nil)) (2356 . 2368) (#("get_buffer()$0" 0 14 (fontified nil)) . 2356) (2356 . 2370) (#("get" 0 3 (fontified nil)) . 2356) (2356 . 2359) (#("get_buffer()" 0 12 (fontified nil)) . -2356) (2356 . 2368) (#("get" 0 3 (fontified t)) . -2356) (undo-tree-id5426 . -3) (undo-tree-id5427 . -3) (undo-tree-id5428 . -3) (undo-tree-id5429 . -3) 2359 (2358 . 2359) (2356 . 2358) (2355 . 2356) (2349 . 2355) (2347 . 2349) (2341 . 2347) (2337 . 2341) (#("    " 0 4 (fontified nil)) . 2336) (undo-tree-id5430 . -4) (2340 . 2341) (2336 . 2340)) nil (26155 59363 282564 725000) 0 nil])
([nil nil ((#("cat.get_buffer()" 0 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-4-face)) 15 16 (fontified t face (rainbow-delimiters-depth-4-face))) . 2526) (undo-tree-id5240 . -15) (undo-tree-id5241 . -15) (undo-tree-id5242 . -15) (undo-tree-id5243 . -1) (undo-tree-id5244 . -15) (undo-tree-id5245 . -8) (undo-tree-id5246 . -8) (undo-tree-id5247 . -8) (undo-tree-id5248 . -8) (undo-tree-id5249 . -8) (undo-tree-id5250 . -8) (undo-tree-id5251 . -8) (undo-tree-id5252 . -8) (undo-tree-id5253 . -8) (undo-tree-id5254 . -8) (undo-tree-id5255 . -8) (undo-tree-id5256 . -8) (undo-tree-id5257 . -8) (undo-tree-id5258 . -8) (undo-tree-id5259 . -8) (undo-tree-id5260 . -8) (undo-tree-id5261 . -8) (undo-tree-id5262 . -8) (undo-tree-id5263 . -16) (undo-tree-id5264 . -15) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -2) (undo-tree-id5298 . -2) (undo-tree-id5299 . -2) (undo-tree-id5300 . -2) (undo-tree-id5301 . -2) (undo-tree-id5302 . -2) (undo-tree-id5303 . -2) (undo-tree-id5304 . -2) (undo-tree-id5305 . -2) (undo-tree-id5306 . -3) (undo-tree-id5307 . -3) (undo-tree-id5308 . -3) (undo-tree-id5309 . -3) (undo-tree-id5310 . -3) (undo-tree-id5311 . -3) (undo-tree-id5312 . -3) (undo-tree-id5313 . -3) (undo-tree-id5314 . -3) (undo-tree-id5315 . -4) (undo-tree-id5316 . -4) (undo-tree-id5317 . -4) (undo-tree-id5318 . -4) (undo-tree-id5319 . -4) (undo-tree-id5320 . -4) (undo-tree-id5321 . -4) (undo-tree-id5322 . -4) (undo-tree-id5323 . -4) (undo-tree-id5324 . -5) (undo-tree-id5325 . -5) (undo-tree-id5326 . -5) (undo-tree-id5327 . -5) (undo-tree-id5328 . -5) (undo-tree-id5329 . -5) (undo-tree-id5330 . -5) (undo-tree-id5331 . -5) (undo-tree-id5332 . -5) (undo-tree-id5333 . -6) (undo-tree-id5334 . -6) (undo-tree-id5335 . -6) (undo-tree-id5336 . -6) (undo-tree-id5337 . -6) (undo-tree-id5338 . -6) (undo-tree-id5339 . -6) (undo-tree-id5340 . -6) (undo-tree-id5341 . -6) (undo-tree-id5342 . -7) (undo-tree-id5343 . -7) (undo-tree-id5344 . -7) (undo-tree-id5345 . -7) (undo-tree-id5346 . -7) (undo-tree-id5347 . -7) (undo-tree-id5348 . -7) (undo-tree-id5349 . -7) (undo-tree-id5350 . -7) (undo-tree-id5351 . -8) (undo-tree-id5352 . -8) (undo-tree-id5353 . -8) (undo-tree-id5354 . -8) (undo-tree-id5355 . -8) (undo-tree-id5356 . -8) (undo-tree-id5357 . -8) (undo-tree-id5358 . -8) (undo-tree-id5359 . -8) (undo-tree-id5360 . -9) (undo-tree-id5361 . -9) (undo-tree-id5362 . -9) (undo-tree-id5363 . -9) (undo-tree-id5364 . -9) (undo-tree-id5365 . -9) (undo-tree-id5366 . -9) (undo-tree-id5367 . -9) (undo-tree-id5368 . -9) (undo-tree-id5369 . -10) (undo-tree-id5370 . -10) (undo-tree-id5371 . -10) (undo-tree-id5372 . -10) (undo-tree-id5373 . -10) (undo-tree-id5374 . -10) (undo-tree-id5375 . -10) (undo-tree-id5376 . -10) (undo-tree-id5377 . -10) (undo-tree-id5378 . -11) (undo-tree-id5379 . -11) (undo-tree-id5380 . -11) (undo-tree-id5381 . -11) (undo-tree-id5382 . -11) (undo-tree-id5383 . -11) (undo-tree-id5384 . -11) (undo-tree-id5385 . -11) (undo-tree-id5386 . -11) (undo-tree-id5387 . -12) (undo-tree-id5388 . -12) (undo-tree-id5389 . -12) (undo-tree-id5390 . -12) (undo-tree-id5391 . -12) (undo-tree-id5392 . -12) (undo-tree-id5393 . -12) (undo-tree-id5394 . -12) (undo-tree-id5395 . -12) (undo-tree-id5396 . -13) (undo-tree-id5397 . -13) (undo-tree-id5398 . -13) (undo-tree-id5399 . -13) (undo-tree-id5400 . -13) (undo-tree-id5401 . -13) (undo-tree-id5402 . -13) (undo-tree-id5403 . -13) (undo-tree-id5404 . -13) (undo-tree-id5405 . -14) (undo-tree-id5406 . -14) (undo-tree-id5407 . -14) (undo-tree-id5408 . -14) (undo-tree-id5409 . -14) (undo-tree-id5410 . -14) (undo-tree-id5411 . -14) (undo-tree-id5412 . -14) (undo-tree-id5413 . -14) (undo-tree-id5414 . -15) (undo-tree-id5415 . -15) (undo-tree-id5416 . -15) (undo-tree-id5417 . -15) (undo-tree-id5418 . -15) (undo-tree-id5419 . -15) (undo-tree-id5420 . -15) (undo-tree-id5421 . -15) (undo-tree-id5422 . -15) (undo-tree-id5423 . -15) (undo-tree-id5424 . -16) (undo-tree-id5425 . -16) 2541) nil (26155 59363 282525 489000) 0 nil])
([nil nil ((2526 . 2530)) nil (26155 59363 281681 312000) 0 nil])
([nil nil ((2598 . 2603) (t 26155 59363 346451 970000)) nil (26155 59370 330180 154000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2602) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (#("l" 0 1 (fontified t)) . -2603) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) 2604 (2601 . 2604) (t 26155 59370 366633 528000)) nil (26155 59385 649309 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 2603 2610 #s(yas--snippet nil nil #s(yas--exit 2610 nil) 70 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2610 nil) 70 nil nil nil nil)) (2603 . 2610) (#("clone()$0" 0 9 (fontified nil)) . 2603) (2603 . 2612) (#("cl" 0 2 (fontified nil)) . 2603) (2603 . 2605) (#("clone() (as Clone)" 0 18 (fontified nil)) . -2603) (2603 . 2621) (#("cl" 0 2 (fontified t)) . -2603) (undo-tree-id5802 . -2) (undo-tree-id5803 . -2) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -2) (undo-tree-id5816 . -2) (undo-tree-id5817 . -2) (undo-tree-id5818 . -2) (undo-tree-id5819 . -2) (undo-tree-id5820 . -2) (undo-tree-id5821 . -2) (undo-tree-id5822 . -2) (undo-tree-id5823 . -2) (undo-tree-id5824 . -2) (undo-tree-id5825 . -2) (undo-tree-id5826 . -2) (undo-tree-id5827 . -2) (undo-tree-id5828 . -2) (undo-tree-id5829 . -2) (undo-tree-id5830 . -2) (undo-tree-id5831 . -2) (undo-tree-id5832 . -2) (undo-tree-id5833 . -2) (undo-tree-id5834 . -2) (undo-tree-id5835 . -2) (undo-tree-id5836 . -2) (undo-tree-id5837 . -2) (undo-tree-id5838 . -2) (undo-tree-id5839 . -2) (undo-tree-id5840 . -2) (undo-tree-id5841 . -2) (undo-tree-id5842 . -2) (undo-tree-id5843 . -2) (undo-tree-id5844 . -2) (undo-tree-id5845 . -2) (undo-tree-id5846 . -2) (undo-tree-id5847 . -2) (undo-tree-id5848 . -2) (undo-tree-id5849 . -2) (undo-tree-id5850 . -2) (undo-tree-id5851 . -2) (undo-tree-id5852 . -2) (undo-tree-id5853 . -2) (undo-tree-id5854 . -2) (undo-tree-id5855 . -2) (undo-tree-id5856 . -2) (undo-tree-id5857 . -2) (undo-tree-id5858 . -2) (undo-tree-id5859 . -2) (undo-tree-id5860 . -2) (undo-tree-id5861 . -2) (undo-tree-id5862 . -2) (undo-tree-id5863 . -2) (undo-tree-id5864 . -2) (undo-tree-id5865 . -2) (undo-tree-id5866 . -2) (undo-tree-id5867 . -2) (undo-tree-id5868 . -2) (undo-tree-id5869 . -2) (undo-tree-id5870 . -2) (undo-tree-id5871 . -2) (undo-tree-id5872 . -2) (undo-tree-id5873 . -2) (undo-tree-id5874 . -2) (undo-tree-id5875 . -2) (undo-tree-id5876 . -2) (undo-tree-id5877 . -2) (undo-tree-id5878 . -2) (undo-tree-id5879 . -2) (undo-tree-id5880 . -2) (undo-tree-id5881 . -2) (undo-tree-id5882 . -2) (undo-tree-id5883 . -2) (undo-tree-id5884 . -2) (undo-tree-id5885 . -2) (undo-tree-id5886 . -2) (undo-tree-id5887 . -2) (undo-tree-id5888 . -2) (undo-tree-id5889 . -2) (undo-tree-id5890 . -2) (undo-tree-id5891 . -2) (undo-tree-id5892 . -2) (undo-tree-id5893 . -2) (undo-tree-id5894 . -2) (undo-tree-id5895 . -2) (undo-tree-id5896 . -2) (undo-tree-id5897 . -2) (undo-tree-id5898 . -2) (undo-tree-id5899 . -2) (undo-tree-id5900 . -2) (undo-tree-id5901 . -2) 2605 (2601 . 2605) (#("." 0 1 (fontified t)) . -2601) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (#("a" 0 1 (fontified t)) . -2602) (undo-tree-id5904 . 1) (undo-tree-id5905 . -1) 2603) nil (26155 59385 649267 514000) 0 nil])
([nil nil ((#("x*self.width + y" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 16 (fontified t)) . 1840) (undo-tree-id5918 . -15) (undo-tree-id5919 . -15) (undo-tree-id5920 . -15) (undo-tree-id5921 . -15) (undo-tree-id5922 . -15) (undo-tree-id5923 . -15) 1855 (t 26155 59385 711039 296000)) nil (26155 59575 10341 325000) 0 nil])
([nil nil ((1852 . 1857) (1847 . 1852) (#("wi" 0 2 (fontified nil)) . 1847) (1847 . 1849) (#("width" 0 5 (fontified nil)) . -1847) (1847 . 1852) (#("wi" 0 2 (fontified t)) . -1847) (undo-tree-id5913 . -2) (undo-tree-id5914 . -2) (undo-tree-id5915 . -1) 1849 (1846 . 1849) (1842 . 1846) (#("sel" 0 3 (fontified nil)) . 1842) (1842 . 1845) (#("self" 0 4 (fontified nil)) . -1842) (1842 . 1846) (#("sel" 0 3 (fontified t)) . -1842) (undo-tree-id5916 . -3) (undo-tree-id5917 . -3) 1845 (1842 . 1845) (1841 . 1842) (1840 . 1841)) nil (26155 59575 10315 501000) 0 nil])
([nil nil ((apply -3 2527 2564 undo--wrap-and-run-primitive-undo 2527 2564 (("                       " . 2527) (2527 . 2553) 2561)) (t 26155 59575 48823 987000)) nil (26156 3049 688405 621000) 0 nil])
([nil nil ((2546 . 2547) (apply yas--snippet-revive 2537 2546 #s(yas--snippet nil (#s(yas--field 1 2541 2542 nil nil nil t #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil))) #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil))) #s(yas--exit 2546 nil) 71 nil #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil)) nil nil)) (2544 . 2545) (#("j" 0 1 (fontified nil)) . 2544) (2544 . 2545) (#("j" 0 1 (fontified t)) . -2544) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) 2545 (#("y" 0 1 (fontified nil)) . 2545) (2544 . 2545) (#("x" 0 1 (fontified nil)) . 2542) (2541 . 2542) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2541 2542 nil nil nil t #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil))) #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil))) #s(yas--exit 2546 nil) 71 nil #s(yas--field 2 2544 2545 nil nil nil t #s(yas--exit 2546 nil)) nil nil)) (2537 . 2546) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2537) (2537 . 2558) (#("ge" 0 2 (fontified nil)) . 2537) (2537 . 2539) (#("get(…)" 0 6 (fontified nil)) . -2537) (2537 . 2543) (#("ge" 0 2 (fontified t)) . -2537) (undo-tree-id5930 . -2) (undo-tree-id5931 . -2) (undo-tree-id5932 . -2) 2539 (2536 . 2539) (2528 . 2536) (#("map" 0 3 (fontified nil)) . 2528) (2528 . 2531) (#("map_data" 0 8 (fontified nil)) . -2528) (2528 . 2536) (#("map" 0 3 (fontified t)) . -2528) (undo-tree-id5933 . -3) (undo-tree-id5934 . -3) 2531 (2530 . 2531) (2528 . 2530) (2527 . 2528)) nil (26156 3049 688394 589000) 0 nil])
([nil nil ((2546 . 2547) (#("l" 0 1 (fontified t)) . -2546) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (#("=" 0 1 (fontified t)) . -2547) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) 2548 (2547 . 2548)) nil (26156 3049 688360 787000) 0 nil])
([nil nil ((apply yas--snippet-revive 2547 2555 #s(yas--snippet nil nil #s(yas--exit 2555 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2555 nil) 72 nil nil nil nil)) (2547 . 2555) (#("unwrap()$0" 0 10 (fontified nil)) . 2547) (2547 . 2557) (#("un" 0 2 (fontified nil)) . 2547) (2547 . 2549) (#("unwrap()" 0 8 (fontified nil)) . -2547) (2547 . 2555) (#("un" 0 2 (fontified t)) . -2547) (undo-tree-id5935 . -1) (undo-tree-id5936 . -2) (undo-tree-id5937 . -2) 2549 (2547 . 2549) (2546 . 2547) (t 26156 3049 750087 544000)) nil (26156 3058 620120 785000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2541) (t 26156 3058 658066 389000)) nil (26156 3095 197753 563000) 0 nil])
([nil nil ((2541 . 2542)) nil (26156 3095 197750 16000) 0 nil])
([nil nil ((2544 . 2545) (#("j" 0 1 (fontified t)) . -2544) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) 2545) nil (26156 3095 197739 383000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1880) (undo-tree-id6079 . -4) 1884 (1880 . 1884) (#("    " 0 4 (fontified nil)) . 1879) (undo-tree-id6080 . -4) (1879 . 1884) (#("    " 0 4 (fontified nil)) . 1878) (undo-tree-id6081 . -4) (1877 . 1883) (t 26156 3095 234022 733000)) nil (26156 3241 882106 167000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1884) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) 1885 (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -1885) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) 1886 (1884 . 1886) (1880 . 1884) (#("    " 0 4 (fontified nil)) . 1879) (undo-tree-id6078 . -4) (1883 . 1884) (1879 . 1883)) nil (26156 3241 882094 919000) 0 nil])
([nil nil ((1892 . 1902) (1887 . 1892) (1884 . 1887)) nil (26156 3241 882082 527000) 0 nil])
([nil nil ((1911 . 1912) (1903 . 1911) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -1903) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) 1904 (1900 . 1904)) nil (26156 3241 882078 957000) 0 nil])
([nil nil ((1944 . 1949) (#("us" 0 2 (fontified nil)) . 1944) (1944 . 1946) (#("usize" 0 5 (fontified nil)) . -1944) (1944 . 1949) (#("us" 0 2 (fontified t)) . -1944) (undo-tree-id6002 . -2) (undo-tree-id6003 . -2) (undo-tree-id6004 . -2) (undo-tree-id6005 . -2) (undo-tree-id6006 . -2) (undo-tree-id6007 . -2) (undo-tree-id6008 . -2) (undo-tree-id6009 . -2) (undo-tree-id6010 . -2) (undo-tree-id6011 . -2) (undo-tree-id6012 . -2) (undo-tree-id6013 . -2) (undo-tree-id6014 . -2) (undo-tree-id6015 . -2) (undo-tree-id6016 . -2) (undo-tree-id6017 . -2) (undo-tree-id6018 . -2) (undo-tree-id6019 . -2) (undo-tree-id6020 . -2) (undo-tree-id6021 . -2) (undo-tree-id6022 . -2) (undo-tree-id6023 . -2) (undo-tree-id6024 . -2) (undo-tree-id6025 . -2) (undo-tree-id6026 . -2) (undo-tree-id6027 . -2) (undo-tree-id6028 . -2) (undo-tree-id6029 . -2) (undo-tree-id6030 . -2) (undo-tree-id6031 . -2) (undo-tree-id6032 . -2) (undo-tree-id6033 . -2) (undo-tree-id6034 . -2) (undo-tree-id6035 . -2) (undo-tree-id6036 . -2) (undo-tree-id6037 . -2) (undo-tree-id6038 . -2) (undo-tree-id6039 . -2) (undo-tree-id6040 . -2) (undo-tree-id6041 . -2) (undo-tree-id6042 . -2) (undo-tree-id6043 . -2) (undo-tree-id6044 . -2) (undo-tree-id6045 . -2) (undo-tree-id6046 . -2) (undo-tree-id6047 . -2) (undo-tree-id6048 . -2) (undo-tree-id6049 . -2) (undo-tree-id6050 . -2) (undo-tree-id6051 . -2) (undo-tree-id6052 . -2) (undo-tree-id6053 . -2) (undo-tree-id6054 . -2) (undo-tree-id6055 . -2) (undo-tree-id6056 . -2) (undo-tree-id6057 . -2) (undo-tree-id6058 . -2) (undo-tree-id6059 . -2) 1946 (1943 . 1946) (#("u" 0 1 (fontified t)) . -1943) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) 1944 (1937 . 1944) (1932 . 1937) (#("us" 0 2 (fontified nil)) . 1932) (1932 . 1934) (#("usize" 0 5 (fontified nil)) . -1932) (1932 . 1937) (#("us" 0 2 (fontified t)) . -1932) (undo-tree-id6062 . -2) (undo-tree-id6063 . -2) 1934 (1931 . 1934) (1928 . 1931) (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) 1929 (1928 . 1929) (1923 . 1928) (#("us" 0 2 (fontified nil)) . 1923) (1923 . 1925) (#("usize" 0 5 (fontified nil)) . -1923) (1923 . 1928) (#("us" 0 2 (fontified t)) . -1923) (undo-tree-id6066 . -2) (undo-tree-id6067 . -2) 1925 (1920 . 1925) (1918 . 1920) (1913 . 1918) (#("&s" 0 1 (fontified nil face rust-ampersand-face) 1 2 (fontified nil)) . 1913) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (1914 . 1915) (#("&self" 0 5 (fontified nil)) . -1914) (1914 . 1919) (#("sel" 0 3 (fontified t)) . -1914) (undo-tree-id6070 . -3) (undo-tree-id6071 . -3) 1917 (1913 . 1917)) nil (26156 3241 882059 206000) 0 nil])
([nil nil ((1932 . 1933)) nil (26156 3241 881918 228000) 0 nil])
([nil nil ((1962 . 1963) (1963 . 1967) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1962) (1962 . 1963) (1961 . 1963) (1959 . 1962) (1955 . 1959) (#("Sel" 0 3 (fontified nil)) . 1955) (1955 . 1958) (#("Self" 0 4 (fontified nil)) . -1955) (1955 . 1959) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -1955) (undo-tree-id5999 . -3) (undo-tree-id6000 . -3) (undo-tree-id6001 . -3) 1958 (1951 . 1958)) nil (26156 3241 881913 497000) 0 nil])
([nil nil ((apply yas--snippet-revive 1965 1972 #s(yas--snippet nil nil #s(yas--exit 1971 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1971 nil) 73 nil nil nil nil)) (1965 . 1972) (#("todo!($0)" 0 9 (fontified nil)) . 1965) (1965 . 1974) (#("to" 0 2 (fontified nil)) . 1965) (1965 . 1967) (#("todo!(…)" 0 8 (fontified nil)) . -1965) (1965 . 1973) (#("to" 0 2 (fontified t)) . -1965) (undo-tree-id5957 . -2) (undo-tree-id5958 . -2) (undo-tree-id5959 . -2) (undo-tree-id5960 . -2) (undo-tree-id5961 . -2) (undo-tree-id5962 . -2) (undo-tree-id5963 . -2) (undo-tree-id5964 . -2) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -2) (undo-tree-id5968 . -2) (undo-tree-id5969 . -2) (undo-tree-id5970 . -2) (undo-tree-id5971 . -2) (undo-tree-id5972 . -2) (undo-tree-id5973 . -2) (undo-tree-id5974 . -2) (undo-tree-id5975 . -2) (undo-tree-id5976 . -2) (undo-tree-id5977 . -2) (undo-tree-id5978 . -2) (undo-tree-id5979 . -2) (undo-tree-id5980 . -2) (undo-tree-id5981 . -2) (undo-tree-id5982 . -2) (undo-tree-id5983 . -2) (undo-tree-id5984 . -2) (undo-tree-id5985 . -2) (undo-tree-id5986 . -2) (undo-tree-id5987 . -2) (undo-tree-id5988 . -2) (undo-tree-id5989 . -2) (undo-tree-id5990 . -2) (undo-tree-id5991 . -2) (undo-tree-id5992 . -2) (undo-tree-id5993 . -2) (undo-tree-id5994 . -2) (undo-tree-id5995 . -2) (undo-tree-id5996 . -2) 1967 (1965 . 1967) (1964 . 1965) (#("	" 0 1 (fontified nil)) . 1963) (undo-tree-id5997 . -1) (1963 . 1965) (#("	" 0 1 (fontified nil)) . 1962) (undo-tree-id5998 . -1) (1963 . 1964)) nil (26156 3241 881890 327000) 0 nil])
([nil nil ((1972 . 1973)) nil (26156 3241 881809 629000) 0 nil])
([nil nil ((1963 . 1964)) nil (26156 3241 883722 940000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2739) (undo-tree-id6090 . -1) (t 26156 3245 718488 483000)) nil (26156 3261 817962 828000) 0 nil] [nil nil ((1962 . 1963) (#("	" 0 1 (fontified t)) . -1962) (undo-tree-id5956 . -1) 1963 (1962 . 1963)) ((#("	" 0 1 (fontified nil)) . 1962) (undo-tree-id6082 . -1) (1962 . 1963) (#("l" 0 1 (fontified t)) . 1962) (undo-tree-id6083 . -1)) (26156 3241 881797 170000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 2739) (undo-tree-id6088 . -4) (undo-tree-id6089 . -5)) nil (26156 3261 817957 766000) 0 nil])
nil
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2739) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1)) nil (26156 3261 817949 991000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 2739) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1)) nil (26156 3261 817936 994000) 0 nil])
([nil nil ((apply -23 2726 2826 undo--wrap-and-run-primitive-undo 2726 2826 ((2820 . 2823) (2798 . 2801) (2798 . 2799) (#("	" 0 1 (fontified t)) . 2798) (2794 . 2798) (2781 . 2784) (2759 . 2762) (2759 . 2760) (#("	" 0 1 (fontified t)) . 2759) (2755 . 2759) (2731 . 2734) 2726)) (t 26156 3261 854592 401000)) nil (26156 3285 544392 380000) 0 nil])
([nil nil ((#("0x00" 0 4 (fontified t)) . 2719) (undo-tree-id6091 . -3) (undo-tree-id6092 . -4)) nil (26156 3285 544387 226000) 0 nil])
([nil nil ((2719 . 2721)) nil (26156 3285 544357 309000) 0 nil])
([nil nil ((apply 23 2724 2801 undo--wrap-and-run-primitive-undo 2724 2801 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2798) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#<marker at 9845 in main.rs> . -3) (#("    " 0 4 (fontified t)) . 2779) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2783) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2769) (#("    " 0 4 (fontified t)) . 2750) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2754) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2729) 2724)) (t 26156 3285 606762 125000)) nil (26156 3294 989420 115000) 0 nil])
([nil nil ((#("== " 0 3 (fontified t)) . 2738) (undo-tree-id6093 . -2)) nil (26156 3294 989413 870000) 0 nil])
([nil nil ((2738 . 2740)) nil (26156 3294 989383 64000) 0 nil])
([nil nil ((2719 . 2720) (#("5" 0 1 (fontified t)) . -2719) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) 2720 (t 26156 3295 54835 7000)) nil (26156 3345 174032 201000) 0 nil])
([nil nil ((2719 . 2722) (#("8" 0 1 (fontified t)) . -2719) (undo-tree-id6107 . -1) (#("0" 0 1 (fontified t)) . -2720) (undo-tree-id6108 . 1) (undo-tree-id6109 . -1) 2721 (t 26156 3345 239270 692000)) nil (26156 3363 318816 262000) 0 nil])
([nil nil ((2719 . 2722) (#("1" 0 1 (fontified t)) . -2719) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (#("5" 0 1 (fontified t)) . -2720) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (#("0" 0 1 (fontified t)) . -2721) (undo-tree-id6114 . -1) 2722 (t 26156 3363 383447 335000)) nil (26156 3379 389098 319000) 0 nil])
([nil nil ((2719 . 2722) (#("1" 0 1 (fontified t)) . -2719) (undo-tree-id6115 . -1) 2720 (2719 . 2720) (#("2" 0 1 (fontified t)) . -2719) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (#("5" 0 1 (fontified t)) . -2720) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (#("5" 0 1 (fontified t)) . -2721) (undo-tree-id6120 . -1) 2722 (t 26156 3379 455611 824000)) nil (26156 3391 61753 163000) 0 nil])
([nil nil ((1964 . 1965) (#("	" 0 1 (fontified nil)) . 1963) (undo-tree-id6614 . -1) (1963 . 1965) (#("	" 0 1 (fontified nil)) . 1962) (undo-tree-id6615 . -1) (1963 . 1964) (1962 . 1963) (t 26156 3391 127735 872000)) nil (26156 3557 452306 726000) 0 nil])
([nil nil ((1963 . 1964)) nil (26156 3557 452299 717000) 0 nil])
([nil nil ((1576 . 1597)) nil (26156 3557 452297 837000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1596) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (#("a" 0 1 (fontified t)) . -1597) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (#("l" 0 1 (fontified t)) . -1598) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (#("u" 0 1 (fontified t)) . -1599) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (#("e" 0 1 (fontified t)) . -1600) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (#(":" 0 1 (fontified t)) . -1601) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) 1602 (1601 . 1602) (#(" " 0 1 (fontified t)) . -1601) (undo-tree-id6613 . -1) 1602 (1596 . 1602)) nil (26156 3557 452292 59000) 0 nil])
([nil nil ((1596 . 1597) (1595 . 1597)) nil (26156 3557 452265 498000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1599) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (#("a" 0 1 (fontified t)) . -1600) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (#("l" 0 1 (fontified t)) . -1601) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (#("u" 0 1 (fontified t)) . -1602) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (#("e" 0 1 (fontified t)) . -1603) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) 1604 (1599 . 1604)) nil (26156 3557 452260 272000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1597) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (#(" " 0 1 (fontified t)) . -1598) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) 1599 (1597 . 1599)) nil (26156 3557 452239 310000) 0 nil])
([nil nil ((1621 . 1623) (#("T" 0 1 (fontified t face font-lock-type-face)) . -1621) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) 1622 (1613 . 1622) (1611 . 1613) (1609 . 1611) (#("x" 0 1 (fontified t)) . -1609) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (#(":" 0 1 (fontified t)) . -1610) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (#(" " 0 1 (fontified t)) . -1611) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) 1612 (1609 . 1612) (#("X" 0 1 (fontified t face font-lock-type-face)) . -1609) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) 1610 (1609 . 1610) (#("x" 0 1 (fontified t)) . -1609) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) 1610 (1607 . 1610) (1599 . 1607)) nil (26156 3557 452225 407000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1625) (undo-tree-id6288 . -4) (undo-tree-id6289 . -4) (undo-tree-id6290 . -4) (undo-tree-id6291 . -4) (undo-tree-id6292 . -4) (undo-tree-id6293 . -4) (undo-tree-id6294 . -4) (undo-tree-id6295 . -4) (undo-tree-id6296 . -4) (undo-tree-id6297 . -4) (undo-tree-id6298 . -4) (undo-tree-id6299 . -4) (undo-tree-id6300 . -4) (undo-tree-id6301 . -4) (undo-tree-id6302 . -4) (undo-tree-id6303 . -4) (undo-tree-id6304 . -4) (undo-tree-id6305 . -4) (undo-tree-id6306 . -4) (undo-tree-id6307 . -4) (undo-tree-id6308 . -4) (undo-tree-id6309 . -4) (undo-tree-id6310 . -4) (undo-tree-id6311 . -4) (undo-tree-id6312 . -4) (undo-tree-id6313 . -4) (undo-tree-id6314 . -4) (undo-tree-id6315 . -4) (undo-tree-id6316 . -4) (undo-tree-id6317 . -4) (undo-tree-id6318 . -4) (undo-tree-id6319 . -4) (undo-tree-id6320 . -4) (undo-tree-id6321 . -4) (undo-tree-id6322 . -4) (undo-tree-id6323 . -4) (undo-tree-id6324 . -4) (undo-tree-id6325 . -4) (undo-tree-id6326 . -4) (undo-tree-id6327 . -4) (undo-tree-id6328 . -4) (undo-tree-id6329 . -4) (undo-tree-id6330 . -4) (undo-tree-id6331 . -4) (undo-tree-id6332 . -4) (undo-tree-id6333 . -4) (undo-tree-id6334 . -4) (undo-tree-id6335 . -4) (undo-tree-id6336 . -4) (undo-tree-id6337 . -4) (undo-tree-id6338 . -4) (undo-tree-id6339 . -4) (undo-tree-id6340 . -4) (undo-tree-id6341 . -4) (undo-tree-id6342 . -4) (undo-tree-id6343 . -4) (undo-tree-id6344 . -4) (undo-tree-id6345 . -4) (undo-tree-id6346 . -4) (undo-tree-id6347 . -4) (undo-tree-id6348 . -4) (undo-tree-id6349 . -4) (undo-tree-id6350 . -4) (undo-tree-id6351 . -4) (undo-tree-id6352 . -4) (undo-tree-id6353 . -4) (undo-tree-id6354 . -4) (undo-tree-id6355 . -4) (undo-tree-id6356 . -4) (undo-tree-id6357 . -4) (undo-tree-id6358 . -4) (undo-tree-id6359 . -4) (undo-tree-id6360 . -4) (undo-tree-id6361 . -4) (undo-tree-id6362 . -4) (undo-tree-id6363 . -4) (undo-tree-id6364 . -4) (undo-tree-id6365 . -4) (undo-tree-id6366 . -4) (undo-tree-id6367 . -4) (undo-tree-id6368 . -4) (undo-tree-id6369 . -4) (undo-tree-id6370 . -4) (undo-tree-id6371 . -4) (undo-tree-id6372 . -4) (undo-tree-id6373 . -4) (undo-tree-id6374 . -4) (undo-tree-id6375 . -4) (undo-tree-id6376 . -4) (undo-tree-id6377 . -4) (undo-tree-id6378 . -4) (undo-tree-id6379 . -4) (undo-tree-id6380 . -4) (undo-tree-id6381 . -4) (undo-tree-id6382 . -4) (undo-tree-id6383 . -4) (undo-tree-id6384 . -4) (undo-tree-id6385 . -4) (undo-tree-id6386 . -4) (undo-tree-id6387 . -4) (undo-tree-id6388 . -4) (undo-tree-id6389 . -4) (undo-tree-id6390 . -4) (undo-tree-id6391 . -4) (undo-tree-id6392 . -4) (undo-tree-id6393 . -4) (undo-tree-id6394 . -4) (undo-tree-id6395 . -4) (undo-tree-id6396 . -4) (undo-tree-id6397 . -4) (undo-tree-id6398 . -4) (undo-tree-id6399 . -4) (undo-tree-id6400 . -4) (undo-tree-id6401 . -4) (undo-tree-id6402 . -4) (undo-tree-id6403 . -4) (undo-tree-id6404 . -4) (undo-tree-id6405 . -4) (1635 . 1636) (#(" " 0 1 (fontified t)) . -1635) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) 1636 (1634 . 1636) (apply yas--snippet-revive 1629 1634 #s(yas--snippet nil nil nil 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 74 nil nil nil nil)) (1629 . 1634) (#("where" 0 5 (fontified nil)) . 1629) (1629 . 1634) (#("where" 0 5 (fontified nil)) . 1629) (1629 . 1634) (#("where" 0 5 (fontified t face font-lock-keyword-face)) . -1629) (undo-tree-id6454 . -5) (undo-tree-id6455 . -5) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -2) (undo-tree-id6467 . -2) (undo-tree-id6468 . -2) (undo-tree-id6469 . -2) (undo-tree-id6470 . -2) (undo-tree-id6471 . -2) (undo-tree-id6472 . -2) (undo-tree-id6473 . -2) (undo-tree-id6474 . -2) (undo-tree-id6475 . -2) (undo-tree-id6476 . -2) (undo-tree-id6477 . -2) (undo-tree-id6478 . -2) (undo-tree-id6479 . -2) (undo-tree-id6480 . -2) (undo-tree-id6481 . -2) (undo-tree-id6482 . -2) (undo-tree-id6483 . -2) (undo-tree-id6484 . -2) (undo-tree-id6485 . -2) (undo-tree-id6486 . -2) (undo-tree-id6487 . -2) (undo-tree-id6488 . -2) (undo-tree-id6489 . -2) (undo-tree-id6490 . -2) (undo-tree-id6491 . -2) (undo-tree-id6492 . -2) (undo-tree-id6493 . -2) (undo-tree-id6494 . -2) (undo-tree-id6495 . -2) (undo-tree-id6496 . -2) (undo-tree-id6497 . -2) (undo-tree-id6498 . -2) (undo-tree-id6499 . -2) (undo-tree-id6500 . -2) (undo-tree-id6501 . -2) (undo-tree-id6502 . -2) (undo-tree-id6503 . -2) (undo-tree-id6504 . -2) (undo-tree-id6505 . -2) (undo-tree-id6506 . -2) (undo-tree-id6507 . -2) (undo-tree-id6508 . -2) (undo-tree-id6509 . -2) (undo-tree-id6510 . -2) (undo-tree-id6511 . -2) (undo-tree-id6512 . -2) (undo-tree-id6513 . -2) (undo-tree-id6514 . -3) (undo-tree-id6515 . -3) (undo-tree-id6516 . -3) (undo-tree-id6517 . -3) (undo-tree-id6518 . -3) (undo-tree-id6519 . -3) (undo-tree-id6520 . -3) (undo-tree-id6521 . -3) (undo-tree-id6522 . -3) (undo-tree-id6523 . -3) (undo-tree-id6524 . -3) (undo-tree-id6525 . -3) (undo-tree-id6526 . -3) (undo-tree-id6527 . -3) (undo-tree-id6528 . -3) (undo-tree-id6529 . -3) (undo-tree-id6530 . -3) (undo-tree-id6531 . -3) (undo-tree-id6532 . -3) (undo-tree-id6533 . -3) (undo-tree-id6534 . -4) (undo-tree-id6535 . -4) (undo-tree-id6536 . -4) (undo-tree-id6537 . -4) (undo-tree-id6538 . -4) (undo-tree-id6539 . -4) (undo-tree-id6540 . -4) (undo-tree-id6541 . -4) (undo-tree-id6542 . -4) (undo-tree-id6543 . -4) (undo-tree-id6544 . -4) (undo-tree-id6545 . -4) (undo-tree-id6546 . -4) (undo-tree-id6547 . -4) (undo-tree-id6548 . -4) (undo-tree-id6549 . -4) (undo-tree-id6550 . -4) (undo-tree-id6551 . -4) (undo-tree-id6552 . -4) (undo-tree-id6553 . -4) (undo-tree-id6554 . -5) (undo-tree-id6555 . -5) (undo-tree-id6556 . -5) (undo-tree-id6557 . -5) (undo-tree-id6558 . -5) (undo-tree-id6559 . -5) (undo-tree-id6560 . -5) (undo-tree-id6561 . -5) (undo-tree-id6562 . -5) (undo-tree-id6563 . -5) (undo-tree-id6564 . -5) (undo-tree-id6565 . -5) (undo-tree-id6566 . -5) (undo-tree-id6567 . -5) (undo-tree-id6568 . -5) (undo-tree-id6569 . -5) (undo-tree-id6570 . -5) (undo-tree-id6571 . -5) (undo-tree-id6572 . -5) (undo-tree-id6573 . -5) (undo-tree-id6574 . -5) 1634 (1629 . 1634) (1624 . 1629)) nil (26156 3557 452171 43000) 0 nil])
([nil nil ((1662 . 1666) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1662) (1662 . 1666) (1661 . 1663) (#("    " 0 4 (fontified nil)) . -1660) (undo-tree-id6189 . -4) (undo-tree-id6190 . -4) (undo-tree-id6191 . -4) (undo-tree-id6192 . -4) (undo-tree-id6193 . -4) (undo-tree-id6194 . -4) (undo-tree-id6195 . -4) (undo-tree-id6196 . -4) (undo-tree-id6197 . -4) (undo-tree-id6198 . -4) (undo-tree-id6199 . -4) (undo-tree-id6200 . -4) (undo-tree-id6201 . -4) (undo-tree-id6202 . -4) (undo-tree-id6203 . -4) (undo-tree-id6204 . -4) (undo-tree-id6205 . -4) (undo-tree-id6206 . -4) (undo-tree-id6207 . -4) (undo-tree-id6208 . -4) (undo-tree-id6209 . -4) (undo-tree-id6210 . -4) (undo-tree-id6211 . -4) (undo-tree-id6212 . -4) (undo-tree-id6213 . -4) (undo-tree-id6214 . -4) (undo-tree-id6215 . -4) (undo-tree-id6216 . -4) (undo-tree-id6217 . -4) (undo-tree-id6218 . -4) (undo-tree-id6219 . -4) (undo-tree-id6220 . -4) (undo-tree-id6221 . -4) (undo-tree-id6222 . -4) (undo-tree-id6223 . -4) (1664 . 1666) (1659 . 1664) (1650 . 1659) (#("P" 0 1 (fontified nil)) . 1650) (1650 . 1651) (#("PartialEq (alias ==, !=)" 0 24 (fontified nil)) . -1650) (1650 . 1674) (#("P" 0 1 (fontified t face font-lock-type-face)) . -1650) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) 1651 (1648 . 1651) (1638 . 1648) (#("P" 0 1 (fontified nil)) . 1638) (1638 . 1639) (#("PartialOrd (alias >, <, <=, >=)" 0 31 (fontified nil)) . -1638) (1638 . 1669) (#("P" 0 1 (fontified t face font-lock-type-face)) . -1638) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) 1639 (1635 . 1639) (1630 . 1635) (#(":" 0 1 (fontified t)) . -1630) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) 1631) nil (26156 3557 451403 181000) 0 nil])
([nil nil ((1659 . 1660) (#("
" 0 1 (fontified t)) . -1659) (undo-tree-id6121 . -1) (undo-tree-id6122 . 1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) 1660) nil (26156 3557 450781 110000) 0 nil])
([nil nil ((1661 . 1662) (1660 . 1661) (t 26156 3557 517875 125000)) nil (26156 3568 393272 693000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1659) (undo-tree-id6616 . -1) (#(";" 0 1 (fontified t)) . -1660) (undo-tree-id6617 . -1) 1661) nil (26156 3568 393263 43000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1648) (t 26156 3568 430036 840000)) nil (26156 3722 396532 273000) 0 nil])
([nil nil ((1648 . 1650)) nil (26156 3722 396529 584000) 0 nil])
([nil nil ((1660 . 1661) (#("
" 0 1 (fontified t)) . -1660) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) 1661) nil (26156 3722 396525 263000) 0 nil])
([nil nil ((1660 . 1661) (#("
" 0 1 (fontified t)) . -1660) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . 1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) 1661) nil (26156 3722 396500 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1660) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (1661 . 1662) (t 26156 3722 436545 540000)) nil (26156 3727 564953 775000) 0 nil])
([nil nil ((1660 . 1661) (#("
" 0 1 (fontified t)) . -1660) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) 1661 (t 26156 3727 632636 785000)) nil (26156 3733 48656 800000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1664) (undo-tree-id6891 . -4) 1668 (1664 . 1668) (#("    " 0 4 (fontified nil)) . 1663) (undo-tree-id6892 . -4) (1662 . 1668) (t 26156 3733 84732 936000)) nil (26156 3839 860516 164000) 0 nil])
([nil nil ((1664 . 1668)) nil (26156 3839 860509 552000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1660) (undo-tree-id6890 . -1) (1661 . 1662)) nil (26156 3839 860507 294000) 0 nil])
([nil nil ((1680 . 1683) (#("mi" 0 2 (fontified nil)) . 1680) (1680 . 1682) (#("min" 0 3 (fontified nil)) . -1680) (1680 . 1683) (#("mi" 0 2 (fontified t)) . -1680) (undo-tree-id6865 . -2) (undo-tree-id6866 . -2) (undo-tree-id6867 . -2) 1682 (1677 . 1682) (1672 . 1677) (#("val" 0 3 (fontified nil)) . 1672) (1672 . 1675) (#("value" 0 5 (fontified nil)) . -1672) (1672 . 1677) (#("val" 0 3 (fontified t)) . -1672) (undo-tree-id6868 . -1) (undo-tree-id6869 . -3) (undo-tree-id6870 . -3) 1675 (1672 . 1675) (#("c" 0 1 (fontified t)) . -1672) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (#("a" 0 1 (fontified t)) . -1673) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (#("l" 0 1 (fontified t)) . -1674) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) 1675 (1672 . 1675) (1671 . 1673) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1671) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1672) (#("T" 0 1 (fontified t face font-lock-type-face)) . -1672) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (#(" " 0 1 (fontified t)) . -1673) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (#("<" 0 1 (fontified t syntax-table (1))) . -1674) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) 1675 (1673 . 1675) (#(" " 0 1 (fontified t)) . -1673) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) 1674 (1672 . 1674) (1668 . 1673)) nil (26156 3839 860494 83000) 0 nil])
([nil nil ((1688 . 1691) (1687 . 1688) (1688 . 1692) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1687) (1687 . 1688) (1686 . 1688) (1684 . 1687)) nil (26156 3839 860440 709000) 0 nil])
([nil nil ((1703 . 1708) (#("o" 0 1 (fontified t)) . -1703) (undo-tree-id6862 . -1) (#("f" 0 1 (fontified t)) . -1704) (undo-tree-id6863 . -1) (#(" " 0 1 (fontified t)) . -1705) (undo-tree-id6864 . -1) 1706 (1697 . 1706)) nil (26156 3839 860434 697000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1671)) nil (26156 3839 860425 957000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1682)) nil (26156 3839 860423 659000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1694)) nil (26156 3839 860421 191000) 0 nil])
([nil nil ((#("	min
" 0 5 (fontified t)) . 1685) (undo-tree-id6860 . -4) (undo-tree-id6861 . -1) 1686) nil (26156 3839 860418 703000) 0 nil])
([nil nil ((1683 . 1686) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1683) (undo-tree-id6859 . -1) 1684) nil (26156 3839 860412 76000) 0 nil])
([nil nil ((1683 . 1684) (#(" " 0 1 (fontified nil)) . 1682) (undo-tree-id6858 . -1) (1683 . 1684)) nil (26156 3839 860407 498000) 0 nil])
([nil nil ((1712 . 1713) (#(" " 0 1 (fontified nil)) . -1692) (1712 . 1713) (1709 . 1712) (#("mi" 0 2 (fontified nil)) . 1709) (1709 . 1711) (#("min" 0 3 (fontified nil)) . -1709) (1709 . 1712) (#("mi" 0 2 (fontified t)) . -1709) (undo-tree-id6850 . -2) (undo-tree-id6851 . -2) (undo-tree-id6852 . -2) 1711 (1706 . 1711) (1701 . 1706) (#("val" 0 3 (fontified nil)) . 1701) (1701 . 1704) (#("value" 0 5 (fontified nil)) . -1701) (1701 . 1706) (#("val" 0 3 (fontified t)) . -1701) (undo-tree-id6853 . -3) (undo-tree-id6854 . -3) 1704 (1701 . 1704) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1701) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1702) (undo-tree-id6857 . -1) 1703) nil (26156 3839 860397 959000) 0 nil])
([nil nil ((#("min" 0 3 (fontified t)) . 1708) (undo-tree-id6846 . -1) (undo-tree-id6847 . -2) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1)) nil (26156 3839 860375 626000) 0 nil])
([nil nil ((1707 . 1710)) nil (26156 3839 860367 753000) 0 nil])
([nil nil ((1710 . 1711)) nil (26156 3839 860365 593000) 0 nil])
([nil nil ((24 . 63) (1718 . 1730) (#("else" 0 4 (fontified nil)) . 1718) (1718 . 1722) (#("OpenClosed01 (use rand::distributions::OpenClosed01)" 0 52 (fontified nil)) . -1718) (1718 . 1770) (#("else" 0 4 (fontified t face font-lock-keyword-face)) . -1718) (undo-tree-id6836 . -4) (undo-tree-id6837 . -4) 1722 (1718 . 1722) (1716 . 1718) (1713 . 1716) (#("max" 0 3 (fontified nil)) . 1713) (1713 . 1716) (#("max" 0 3 (fontified t)) . -1713) (undo-tree-id6838 . -3) (undo-tree-id6839 . -3) 1716 (1713 . 1716) (1712 . 1713) (#(" " 0 1 (fontified nil)) . 1712) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . 1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (1711 . 1712)) nil (26156 3839 860359 288000) 0 nil])
([nil nil ((#("	OpenClosed01
" 0 1 (fontified t) 1 13 (fontified t face font-lock-type-face) 13 14 (fontified t)) . 1756) (undo-tree-id6832 . -13) (undo-tree-id6833 . 1) (undo-tree-id6834 . -13) (undo-tree-id6835 . -12) 1768) nil (26156 3839 860334 364000) 0 nil])
([nil nil ((1756 . 1757) (#("	" 0 1 (fontified t)) . -1756) (undo-tree-id6831 . -1) 1757 (1755 . 1757)) nil (26156 3839 860324 786000) 0 nil])
([nil nil ((1724 . 1725) (1725 . 1729) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1724) (1724 . 1725) (1723 . 1725) (1721 . 1724)) nil (26156 3839 860319 414000) 0 nil])
([nil nil ((#("	min
" 0 4 (fontified t) 4 5 (fontified t)) . 1732) (undo-tree-id6830 . -4)) nil (26156 3839 860315 278000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1726 . 1727) (#("
" 0 1 (fontified nil)) . -1730) (1725 . 1731) 1724) nil (26156 3839 860310 812000) 0 nil])
([nil nil ((1763 . 1764) (1764 . 1768) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1763) (1763 . 1764) (1762 . 1764) (1760 . 1763)) nil (26156 3839 860306 757000) 0 nil])
([nil nil ((#("	max
" 0 1 (fontified t) 1 5 (fontified t)) . 1771) (undo-tree-id6829 . -4)) nil (26156 3839 860302 505000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1765 . 1766) (#("
" 0 1 (fontified nil)) . -1769) (1764 . 1770) 1763) nil (26156 3839 860298 185000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1724) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1)) nil (26156 3839 860294 83000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1761) (undo-tree-id6825 . -1) (undo-tree-id6826 . -2)) nil (26156 3839 860287 17000) 0 nil])
([nil nil ((1780 . 1785) (1779 . 1780) (1780 . 1784) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1779) (1779 . 1780) (1778 . 1780) (1771 . 1779)) nil (26156 3839 860256 355000) 0 nil])
([nil nil ((1663 . 1668) (t 26156 3839 894696 139000)) nil (26156 3848 762895 191000) 0 nil])
([nil nil ((2203 . 2212) (2202 . 2203) (2196 . 2202) (t 26156 3848 826866 644000)) nil (26156 3960 269282 197000) 0 nil])
([nil nil ((2209 . 2211)) nil (26156 3960 269279 20000) 0 nil])
([nil nil ((2254 . 2255) (apply yas--snippet-revive 2214 2254 #s(yas--snippet nil (#s(yas--field 1 2231 2238 nil nil nil t #s(yas--field 2 2240 2241 nil nil nil t #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil)))) #s(yas--field 2 2240 2241 nil nil nil t #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil))) #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil))) #s(yas--exit 2254 nil) 75 nil #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil)) nil nil)) (2248 . 2253) (#("w" 0 1 (fontified nil)) . 2248) (2248 . 2249) (#("width" 0 5 (fontified nil)) . -2248) (2248 . 2253) (#("w" 0 1 (fontified t)) . -2248) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) 2249 (2247 . 2249) (2243 . 2247) (#("sel" 0 3 (fontified nil)) . 2243) (2243 . 2246) (#("self" 0 4 (fontified nil)) . -2243) (2243 . 2247) (#("sel" 0 3 (fontified t)) . -2243) (undo-tree-id6902 . -3) (undo-tree-id6903 . -3) 2246 (2244 . 2246) (#("max" 0 3 (fontified nil)) . 2244) (2243 . 2244) (2240 . 2241) (#("s" 0 1 (fontified t)) . -2240) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (#("e" 0 1 (fontified t)) . -2241) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (#("l" 0 1 (fontified t)) . -2242) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2243) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (#("." 0 1 (fontified t)) . -2244) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) 2245 (2244 . 2245) (2240 . 2244) (#("sel" 0 3 (fontified nil)) . 2240) (2240 . 2243) (#("self" 0 4 (fontified nil)) . -2240) (2240 . 2244) (#("sel" 0 3 (fontified t)) . -2240) (undo-tree-id6914 . -3) (undo-tree-id6915 . -3) 2243 (2241 . 2243) (#("min" 0 3 (fontified nil)) . 2241) (2240 . 2241) (2235 . 2238) (#("ra" 0 2 (fontified nil)) . 2235) (2235 . 2237) (#("rad" 0 3 (fontified nil)) . -2235) (2235 . 2238) (#("ra" 0 2 (fontified t)) . -2235) (undo-tree-id6916 . -2) (undo-tree-id6917 . -2) 2237 (2233 . 2237) (2232 . 2233) (#("value" 0 5 (fontified nil)) . 2232) (2231 . 2232) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2231 2238 nil nil nil t #s(yas--field 2 2240 2241 nil nil nil t #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil)))) #s(yas--field 2 2240 2241 nil nil nil t #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil))) #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil))) #s(yas--exit 2254 nil) 75 nil #s(yas--field 3 2243 2253 nil nil nil t #s(yas--exit 2254 nil)) nil nil)) (2214 . 2247) (#("get_within_range(${1:value}, ${2:min}, ${3:max})$0" 0 50 (fontified nil)) . 2214) (2214 . 2264) (#("ge" 0 2 (fontified nil)) . 2214) (2214 . 2216) (#("get_within_range(…)" 0 19 (fontified nil)) . -2214) (2214 . 2233) (#("get" 0 3 (fontified t)) . -2214) (undo-tree-id6918 . -2) (undo-tree-id6919 . -3) (undo-tree-id6920 . -3) 2217 (2214 . 2217)) nil (26156 3960 269261 439000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2256 . 2257) (#("
" 0 1 (fontified nil)) . -2316) (2255 . 2317) 2254) nil (26156 3960 269202 739000) 0 nil])
([nil nil ((2271 . 2272) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . 2271)) nil (26156 3960 269198 857000) 0 nil])
([nil nil ((2292 . 2293) (#("x" 0 1 (fontified t)) . 2292) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1)) nil (26156 3960 269196 133000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 2309) (undo-tree-id6895 . -4) (undo-tree-id6896 . -5)) nil (26156 3960 269188 613000) 0 nil])
([nil nil ((2309 . 2315) (#("he" 0 2 (fontified nil)) . 2309) (2309 . 2311) (#("height" 0 6 (fontified nil)) . -2309) (2309 . 2315) (#("he" 0 2 (fontified t)) . -2309) (undo-tree-id6893 . -2) (undo-tree-id6894 . -2) 2311 (2309 . 2311)) nil (26156 3960 269173 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2446 . 2447) (nil fontified nil 2321 . 2447) (2321 . 2447) 2320 (t 26156 3960 333066 185000)) nil (26156 3980 153808 797000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2321) 2320) nil (26156 3980 153803 457000) 0 nil])
([nil nil ((#("min" 0 3 (fontified t face font-lock-variable-name-face)) . 2325) (undo-tree-id6971 . -2) (undo-tree-id6972 . -3)) nil (26156 3980 153799 102000) 0 nil])
([nil nil ((2325 . 2328)) nil (26156 3980 153790 762000) 0 nil])
([nil nil ((#("min" 0 3 (fontified t face font-lock-variable-name-face)) . 2386) (undo-tree-id6949 . -2) (undo-tree-id6950 . -2) (undo-tree-id6951 . -2) (undo-tree-id6952 . -2) (undo-tree-id6953 . -2) (undo-tree-id6954 . -2) (undo-tree-id6955 . -2) (undo-tree-id6956 . -2) (undo-tree-id6957 . -2) (undo-tree-id6958 . -2) (undo-tree-id6959 . -2) (undo-tree-id6960 . -2) (undo-tree-id6961 . -2) (undo-tree-id6962 . -2) (undo-tree-id6963 . -2) (undo-tree-id6964 . -2) (undo-tree-id6965 . -2) (undo-tree-id6966 . -2) (undo-tree-id6967 . -2) (undo-tree-id6968 . -2) (undo-tree-id6969 . -2) (undo-tree-id6970 . -3)) nil (26156 3980 153784 327000) 0 nil])
([nil nil ((2388 . 2389) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -2388) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -2389) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) 2390 (2386 . 2390)) nil (26156 3980 153714 224000) 0 nil])
([nil nil ((2358 . 2359) (#("-" 0 1 (fontified t)) . -2358) (undo-tree-id6934 . -1) 2359) nil (26156 3980 153672 826000) 0 nil])
([nil nil ((2419 . 2420) (#("-" 0 1 (fontified t)) . -2419) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) 2420) nil (26156 3980 153655 830000) 0 nil])
([nil nil ((2445 . 2446) (#("	" 0 1 (fontified nil)) . 2444) (undo-tree-id7010 . -1) (2444 . 2446) (#("	" 0 1 (fontified nil)) . 2443) (undo-tree-id7011 . -1) (2444 . 2445) (t 26156 3980 217471 30000)) nil (26156 4096 777698 714000) 0 nil])
([nil nil ((2455 . 2460) (#(" " 0 1 (fontified t)) . -2455) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) 2456 (2449 . 2456) (2445 . 2449) (2444 . 2445)) nil (26156 4096 777691 136000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 2452)) nil (26156 4096 777684 364000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-variable-name-face)) . 2452)) nil (26156 4096 777682 399000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-variable-name-face)) . 2452)) nil (26156 4096 777679 927000) 0 nil])
([nil nil ((2463 . 2465) (2460 . 2463) (#("ne" 0 2 (fontified nil)) . 2460) (2460 . 2462) (#("new" 0 3 (fontified nil)) . -2460) (2460 . 2463) (#("ne" 0 2 (fontified t)) . -2460) (undo-tree-id7006 . -2) (undo-tree-id7007 . -2) 2462 (2457 . 2462)) nil (26156 4096 777676 146000) 0 nil])
([nil nil ((2465 . 2466)) nil (26156 4096 777668 637000) 0 nil])
([nil nil ((2449 . 2453)) nil (26156 4096 777666 910000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2474) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (#("o" 0 1 (fontified t)) . -2475) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -2476) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (#(" " 0 1 (fontified t)) . -2477) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2478) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (#(" " 0 1 (fontified t)) . -2479) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (#("i" 0 1 (fontified t)) . -2480) (undo-tree-id7001 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -2481) (undo-tree-id7002 . -1) (#(" " 0 1 (fontified t)) . -2482) (undo-tree-id7003 . -1) 2483 (2482 . 2483) (2474 . 2482) (2473 . 2474) (#("	" 0 1 (fontified nil)) . 2472) (undo-tree-id7004 . -1) (2472 . 2474) (#("	" 0 1 (fontified nil)) . 2471) (undo-tree-id7005 . -1) (2472 . 2473)) nil (26156 4096 777658 699000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2820 . 2821) (nil fontified nil 2472 . 2821) (2472 . 2821)) nil (26156 4096 777624 877000) 0 nil])
([nil nil ((2474 . 2475) (#("    " 0 4 (fontified t)) . 2474)) nil (26156 4096 777622 227000) 0 nil])
([nil nil ((2496 . 2500)) nil (26156 4096 777620 282000) 0 nil])
([nil nil ((2519 . 2521)) nil (26156 4096 777618 628000) 0 nil])
([nil nil ((2523 . 2524)) nil (26156 4096 777617 92000) 0 nil])
([nil nil ((2554 . 2555) (#("    " 0 4 (fontified t)) . 2554) 2562) nil (26156 4096 777614 964000) 0 nil])
([nil nil ((2611 . 2613)) nil (26156 4096 777612 588000) 0 nil])
([nil nil ((2615 . 2616) (#("    " 0 4 (fontified t)) . 2615)) nil (26156 4096 777610 246000) 0 nil])
([nil nil ((2693 . 2695)) nil (26156 4096 777607 580000) 0 nil])
([nil nil ((2697 . 2698) (#("    " 0 4 (fontified t)) . 2697)) nil (26156 4096 777605 385000) 0 nil])
([nil nil ((2719 . 2721)) nil (26156 4096 777603 444000) 0 nil])
([nil nil ((2723 . 2724) (#("    " 0 4 (fontified t)) . 2723)) nil (26156 4096 777601 267000) 0 nil])
([nil nil ((2745 . 2749)) nil (26156 4096 777598 599000) 0 nil])
([nil nil ((2763 . 2764) (#("    " 0 4 (fontified t)) . 2763) 2774) nil (26156 4096 777596 118000) 0 nil])
([nil nil ((2789 . 2790) (#("    " 0 4 (fontified t)) . 2789) 2793) nil (26156 4096 777592 776000) 0 nil])
([nil nil ((2792 . 2794)) nil (26156 4096 777589 871000) 0 nil])
([nil nil ((2795 . 2797)) nil (26156 4096 777587 586000) 0 nil])
([nil nil ((2799 . 2803)) nil (26156 4096 777585 394000) 0 nil])
([nil nil ((2806 . 2810) 2810) nil (26156 4096 777583 313000) 0 nil])
([nil nil ((2822 . 2823) (#("    " 0 4 (fontified t)) . 2822) (undo-tree-id6988 . -4) 2826) nil (26156 4096 777579 819000) 0 nil])
([nil nil ((2775 . 2779)) nil (26156 4096 777575 770000) 0 nil])
([nil nil ((2472 . 2473) (#(" " 0 1 (fontified t)) . 2472)) nil (26156 4096 777573 547000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2484)) nil (26156 4096 777570 896000) 0 nil])
([nil nil ((2484 . 2495) (#("min" 0 3 (fontified nil)) . 2484) (2484 . 2487) (#("min_point_y" 0 11 (fontified nil)) . -2484) (2484 . 2495) (#("min" 0 3 (fontified t)) . -2484) (undo-tree-id6985 . -2) (undo-tree-id6986 . -3) (undo-tree-id6987 . -3) 2487 (2484 . 2487)) nil (26156 4096 777566 994000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 2497) (undo-tree-id6984 . -5)) nil (26156 4096 777554 919000) 0 nil])
([nil nil ((2497 . 2508) (#("max" 0 3 (fontified nil)) . 2497) (2497 . 2500) (#("max_point_y" 0 11 (fontified nil)) . -2497) (2497 . 2508) (#("max" 0 3 (fontified t)) . -2497) (undo-tree-id6981 . -2) (undo-tree-id6982 . -3) (undo-tree-id6983 . -3) 2500 (2497 . 2500)) nil (26156 4096 777549 115000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2524)) nil (26156 4096 777539 388000) 0 nil])
([nil nil ((2524 . 2535) (#("min_point_x" 0 11 (fontified nil)) . 2524) (2524 . 2535) (#("min_point_x" 0 11 (fontified t)) . -2524) (undo-tree-id6976 . -11) (undo-tree-id6977 . -11) (undo-tree-id6978 . -11) 2535 (2524 . 2535) (#("min" 0 3 (fontified nil)) . 2524) (2524 . 2527) (#("min_point_x" 0 11 (fontified nil)) . -2524) (2524 . 2535) (#("min" 0 3 (fontified t)) . -2524) (undo-tree-id6979 . -3) (undo-tree-id6980 . -3) 2527 (2524 . 2527)) nil (26156 4096 777533 970000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 2537) (undo-tree-id6975 . -4)) nil (26156 4096 777518 304000) 0 nil])
([nil nil ((2537 . 2548) (#("max" 0 3 (fontified nil)) . 2537) (2537 . 2540) (#("max_point_x" 0 11 (fontified nil)) . -2537) (2537 . 2548) (#("max" 0 3 (fontified t)) . -2537) (undo-tree-id6973 . -3) (undo-tree-id6974 . -3) 2540 (2537 . 2540)) nil (26156 4096 777512 94000) 0 nil])
([nil nil ((2728 . 2732) (#("	let" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face)) . 2728)) nil (26156 4096 777484 358000) 0 nil])
([nil nil ((apply -18 2725 2847 undo--wrap-and-run-primitive-undo 2725 2847 ((2840 . 2843) (2818 . 2821) (2804 . 2807) (2782 . 2785) (2758 . 2761) (2729 . 2732) 2829))) nil (26156 4096 777472 626000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 2659) (undo-tree-id7067 . -2) (undo-tree-id7068 . -3) (undo-tree-id7069 . -3) (undo-tree-id7070 . -3) (undo-tree-id7071 . -3) (undo-tree-id7072 . -3) (undo-tree-id7073 . -3) (undo-tree-id7074 . -3) (undo-tree-id7075 . -3) (undo-tree-id7076 . -3) (undo-tree-id7077 . -3) (undo-tree-id7078 . -3) (undo-tree-id7079 . -3) (undo-tree-id7080 . -3) (undo-tree-id7081 . -3) (undo-tree-id7082 . -3) (undo-tree-id7083 . -3) (undo-tree-id7084 . -3) (undo-tree-id7085 . -3) (undo-tree-id7086 . -3) (undo-tree-id7087 . -3) (undo-tree-id7088 . -3) (undo-tree-id7089 . -3) (undo-tree-id7090 . -3) (undo-tree-id7091 . -3) (undo-tree-id7092 . -3) (undo-tree-id7093 . -3) (undo-tree-id7094 . -3) (undo-tree-id7095 . -3) (undo-tree-id7096 . -3) (undo-tree-id7097 . -3) (undo-tree-id7098 . -3) (undo-tree-id7099 . -3) (undo-tree-id7100 . -3) (undo-tree-id7101 . -3) (undo-tree-id7102 . -3) (undo-tree-id7103 . -3) (undo-tree-id7104 . -3) (undo-tree-id7105 . -3) (undo-tree-id7106 . -3) (undo-tree-id7107 . -3) (undo-tree-id7108 . -3) (undo-tree-id7109 . -3) (undo-tree-id7110 . -3) (undo-tree-id7111 . -3) (undo-tree-id7112 . -3) (undo-tree-id7113 . -3) (undo-tree-id7114 . -3) (undo-tree-id7115 . -3) (undo-tree-id7116 . -3) (undo-tree-id7117 . -3) (undo-tree-id7118 . -3) (undo-tree-id7119 . -3) (undo-tree-id7120 . -3) (undo-tree-id7121 . -3) (undo-tree-id7122 . -3) (undo-tree-id7123 . -3) (undo-tree-id7124 . -3) (undo-tree-id7125 . -3) (undo-tree-id7126 . -3) (undo-tree-id7127 . -3) (undo-tree-id7128 . -3) (undo-tree-id7129 . -3) (undo-tree-id7130 . -3) (undo-tree-id7131 . -3) (undo-tree-id7132 . -3) (undo-tree-id7133 . -3) (t 26156 4096 819910 296000)) nil (26156 4112 400533 339000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2659) (undo-tree-id7066 . -1)) nil (26156 4112 400415 175000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . 2659) (undo-tree-id7063 . -3) (undo-tree-id7064 . -4) (undo-tree-id7065 . -4)) nil (26156 4112 400408 966000) 0 nil])
([nil nil ((2659 . 2663) (#("sel" 0 3 (fontified nil)) . 2659) (2659 . 2662) (#("self" 0 4 (fontified nil)) . -2659) (2659 . 2663) (#("sel" 0 3 (fontified t)) . -2659) (undo-tree-id7012 . -3) (undo-tree-id7013 . -3) (undo-tree-id7014 . -3) (undo-tree-id7015 . -3) (undo-tree-id7016 . -3) (undo-tree-id7017 . -3) (undo-tree-id7018 . -3) (undo-tree-id7019 . -3) (undo-tree-id7020 . -3) (undo-tree-id7021 . -3) (undo-tree-id7022 . -3) (undo-tree-id7023 . -3) (undo-tree-id7024 . -3) (undo-tree-id7025 . -3) (undo-tree-id7026 . -3) (undo-tree-id7027 . -3) (undo-tree-id7028 . -3) (undo-tree-id7029 . -3) (undo-tree-id7030 . -3) (undo-tree-id7031 . -3) (undo-tree-id7032 . -3) (undo-tree-id7033 . -3) (undo-tree-id7034 . -3) (undo-tree-id7035 . -3) (undo-tree-id7036 . -3) (undo-tree-id7037 . -3) (undo-tree-id7038 . -3) (undo-tree-id7039 . -3) (undo-tree-id7040 . -3) (undo-tree-id7041 . -3) (undo-tree-id7042 . -3) (undo-tree-id7043 . -3) (undo-tree-id7044 . -3) (undo-tree-id7045 . -3) (undo-tree-id7046 . -3) (undo-tree-id7047 . -3) (undo-tree-id7048 . -3) (undo-tree-id7049 . -3) (undo-tree-id7050 . -3) (undo-tree-id7051 . -3) (undo-tree-id7052 . -3) (undo-tree-id7053 . -3) (undo-tree-id7054 . -3) (undo-tree-id7055 . -3) (undo-tree-id7056 . -3) (undo-tree-id7057 . -3) (undo-tree-id7058 . -3) (undo-tree-id7059 . -3) (undo-tree-id7060 . -3) (undo-tree-id7061 . -3) (undo-tree-id7062 . -3) 2662 (2659 . 2662)) nil (26156 4112 400388 644000) 0 nil])
([nil nil ((#("	// let thing: u8 = 200;
		
		// if  data < thing {
		//     print!(\" \");
		// } else {
		//     print!(\"#\");
		// }
		
		" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 7 (fontified t face font-lock-comment-face) 7 8 (fontified t face font-lock-comment-face) 8 13 (fontified t face font-lock-comment-face) 13 15 (fontified t face font-lock-comment-face) 15 17 (fontified t face font-lock-comment-face) 17 25 (fontified t face font-lock-comment-face) 25 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t) 30 33 (fontified t face font-lock-comment-delimiter-face) 33 35 (fontified t face font-lock-comment-face) 35 42 (fontified t face font-lock-comment-face) 42 43 (syntax-table (1) fontified t face font-lock-comment-face) 43 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 52 (fontified t face font-lock-comment-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-comment-delimiter-face) 57 61 (fontified t face font-lock-comment-delimiter-face) 61 67 (fontified t face font-lock-comment-face) 67 68 (fontified t face font-lock-comment-face) 68 71 (fontified t face font-lock-comment-face) 71 72 (fontified t face font-lock-comment-face) 72 74 (fontified t face font-lock-comment-face) 74 76 (fontified t) 76 79 (fontified t face font-lock-comment-delimiter-face) 79 80 (fontified t face font-lock-comment-face) 80 81 (fontified t face font-lock-comment-face) 81 85 (fontified t face font-lock-comment-face) 85 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 90 (fontified t) 90 93 (fontified t face font-lock-comment-delimiter-face) 93 97 (fontified t face font-lock-comment-delimiter-face) 97 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 110 (fontified t face font-lock-comment-face) 110 112 (fontified t) 112 115 (fontified t face font-lock-comment-delimiter-face) 115 116 (fontified t face font-lock-comment-face) 116 117 (fontified t face font-lock-comment-face) 117 119 (fontified t) 119 120 (fontified t) 120 122 (fontified t)) . 2724) (undo-tree-id7166 . -121) (undo-tree-id7167 . -121) (undo-tree-id7168 . -121) (undo-tree-id7169 . -121) (t 26156 4112 444244 836000)) nil (26156 4171 917381 676000) 0 nil])
([nil nil ((2732 . 2736) (#("da" 0 2 (fontified nil)) . 2732) (2732 . 2734) (#("data" 0 4 (fontified nil)) . -2732) (2732 . 2736) (#("da" 0 2 (fontified t)) . -2732) (undo-tree-id7161 . -2) (undo-tree-id7162 . -2) 2734 (2733 . 2734) (#("value" 0 5 (fontified nil)) . 2733) (2732 . 2733) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2732 2736 nil nil nil t #s(yas--exit 2737 nil))) #s(yas--exit 2737 nil) 76 nil #s(yas--field 1 2732 2736 nil nil nil t #s(yas--exit 2737 nil)) nil nil)) (2727 . 2738) (#("push(${1:value})$0" 0 18 (fontified nil)) . 2727) (2727 . 2745) (#("pu" 0 2 (fontified nil)) . 2727) (2727 . 2729) (#("push(…)" 0 7 (fontified nil)) . -2727) (2727 . 2734) (#("pu" 0 2 (fontified t)) . -2727) (undo-tree-id7163 . -2) (undo-tree-id7164 . -2) 2729 (2723 . 2729) (2721 . 2723) (#("		" 0 2 (fontified nil)) . 2720) (undo-tree-id7165 . -2) (2722 . 2723)) nil (26156 4171 917368 576000) 0 nil])
([nil nil ((2737 . 2738) (apply yas--snippet-revive 2727 2737 #s(yas--snippet nil (#s(yas--field 1 2732 2736 nil nil nil t #s(yas--exit 2737 nil))) #s(yas--exit 2737 nil) 76 nil #s(yas--field 1 2732 2736 nil nil nil t #s(yas--exit 2737 nil)) nil nil))) nil (26156 4171 917350 0) 0 nil])
([nil nil ((apply 6 2554 2638 undo--wrap-and-run-primitive-undo 2554 2638 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2583) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2555) 2554))) nil (26156 4171 917347 941000) 0 nil])
([nil nil ((#("	    println!(\"{i}, {j}\");
		//	    vectordata.push(map_data.get(i, j).unwrap());
		" 0 1 (fontified t) 1 5 (fontified t) 5 13 (fontified t face rust-builtin-formatting-macro) 13 14 (fontified t face (rainbow-delimiters-depth-5-face)) 14 15 (fontified t face font-lock-string-face) 15 18 (fontified t face rust-string-interpolation) 18 20 (fontified t face font-lock-string-face) 20 23 (fontified t face rust-string-interpolation) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face (rainbow-delimiters-depth-5-face)) 25 27 (fontified t) 27 29 (fontified t) 29 36 (fontified t face font-lock-comment-delimiter-face) 36 82 (fontified t face font-lock-comment-face) 82 84 (fontified t)) . 2554) (undo-tree-id7156 . -83) (undo-tree-id7157 . -83) (undo-tree-id7158 . -83) (undo-tree-id7159 . -83) (undo-tree-id7160 . -83) 2637) nil (26156 4171 917345 424000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2553) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) 2554) nil (26156 4171 917334 681000) 0 nil])
([nil nil ((#(";// buff.get(i * width + j).unwrap();
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 38 (fontified t face font-lock-comment-face)) . 2591) (undo-tree-id7143 . -37) (undo-tree-id7144 . -37) (undo-tree-id7145 . 37) (undo-tree-id7146 . -37) (undo-tree-id7147 . -37) (undo-tree-id7148 . -37) 2628) nil (26156 4171 917320 981000) 0 nil])
([nil nil ((2591 . 2592)) nil (26156 4171 917308 900000) 0 nil])
([nil nil ((#("	    println!();
" 0 5 (fontified t) 5 13 (fontified t face rust-builtin-formatting-macro) 13 14 (fontified t face (rainbow-delimiters-depth-4-face)) 14 15 (fontified t face (rainbow-delimiters-depth-4-face)) 15 17 (fontified t)) . 2620) (undo-tree-id7141 . -16) (undo-tree-id7142 . -15) 2635) nil (26156 4171 917306 356000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2553)) nil (26156 4171 917300 660000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2550) (undo-tree-id7140 . -2)) nil (26156 4171 917298 529000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2607) (undo-tree-id7139 . -1)) nil (26156 4171 917294 699000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2550) (undo-tree-id7138 . -2) 2552 (2549 . 2552)) nil (26156 4171 917290 298000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2608) (undo-tree-id7137 . -2) 2610 (2607 . 2610)) nil (26156 4258 540290 118000) 0 nil])
([nil nil ((2458 . 2465) (#("Ve" 0 2 (fontified nil)) . 2458) (2458 . 2460) (#("Vec<u8>" 0 7 (fontified nil)) . 2458) (2458 . 2465) (#("Ve" 0 2 (fontified nil face font-lock-type-face)) . 2458) (2456 . 2460)) ((#(": Ve" 0 2 (fontified nil) 2 4 (fontified nil face font-lock-type-face)) . 2456) (2458 . 2460) (#("Vec<u8>" 0 7 (fontified nil)) . 2458) (2458 . 2465) (#("Ve" 0 2 (fontified nil)) . 2458) (2458 . 2460) (#("Vec<u8>" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t face (rainbow-delimiters-depth-3-face)) 4 6 (fontified t face font-lock-type-face) 6 7 (fontified t face (rainbow-delimiters-depth-3-face))) . 2458) (t 26156 4171 985534 321000)) (26156 4260 296844 235000) 0 nil])
([nil nil ((2629 . 2630) (t 26156 4171 985534 321000)) ((#("	" 0 1 (fontified t)) . 2629) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1)) (26156 4260 737501 545000) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified nil)) . 2648) (undo-tree-id7948 . -6) (2647 . 2648) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2647 2650 nil nil nil t #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))))) #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)))) #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--exit 2710 nil) 78 nil #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)) nil nil)) (2643 . 2681) (#("pgm(${1:buffer}, ${2:saturation}, ${3:height}, ${4:width})$0" 0 60 (fontified nil)) . 2643) (2643 . 2703) (#("pg" 0 2 (fontified nil)) . 2643) (2643 . 2645) (#("pgm(…)" 0 6 (fontified nil)) . 2643) (2643 . 2649) (#("pg" 0 2 (fontified nil)) . 2643) (undo-tree-id7949 . -2) (2630 . 2645) (#("An" 0 2 (fontified nil)) . 2630) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil)) . 2630) (2630 . 2641) (#("An" 0 2 (fontified nil face font-lock-type-face)) . 2630) (undo-tree-id7950 . -2) (2630 . 2632)) ((#("An" 0 2 (fontified nil face font-lock-type-face)) . 2630) (undo-tree-id7923 . -2) (undo-tree-id7924 . -2) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil)) . 2630) (2630 . 2641) (#("An" 0 2 (fontified nil)) . 2630) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil face font-lock-type-face)) . 2630) (undo-tree-id7925 . -11) (undo-tree-id7926 . -11) (undo-tree-id7927 . -11) (undo-tree-id7928 . -11) (undo-tree-id7929 . -11) (undo-tree-id7930 . -11) (#("::pg" 0 2 (fontified nil) 2 4 (fontified nil)) . 2641) (undo-tree-id7931 . -3) (undo-tree-id7932 . -4) (undo-tree-id7933 . -4) (undo-tree-id7934 . -2) (undo-tree-id7935 . -2) (undo-tree-id7936 . -2) (2643 . 2645) (#("pgm(…)" 0 6 (fontified nil)) . 2643) (2643 . 2649) (#("pg" 0 2 (fontified nil)) . 2643) (2643 . 2645) (#("pgm(${1:buffer}, ${2:saturation}, ${3:height}, ${4:width})$0" 0 60 (fontified nil)) . 2643) (2643 . 2703) (#("pgm(buffer, saturation, height, width)" 0 3 (fontified nil) 3 4 (fontified nil face (rainbow-delimiters-depth-3-face)) 4 10 (fontified nil) 10 37 (fontified nil) 37 38 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2643) (undo-tree-id7937 . 28) (undo-tree-id7938 . -4) (undo-tree-id7939 . -4) (undo-tree-id7940 . -4) (undo-tree-id7941 . 28) (undo-tree-id7942 . -38) (undo-tree-id7943 . -4) (apply yas--snippet-revive 2643 2681 #s(yas--snippet nil (#s(yas--field 1 2647 2650 nil nil nil t #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))))) #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)))) #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--exit 2710 nil) 78 nil #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)) nil nil)) (#("v" 0 1 (fontified nil)) . 2647) (2648 . 2654)) (26156 4261 426531 477000) 0 nil] [nil nil ((2693 . 2704) (#("mi" 0 2 (fontified nil)) . 2693) (undo-tree-id7170 . -2) (2693 . 2695) (#("min_point_y" 0 11 (fontified nil)) . -2693) (undo-tree-id7171 . -11) (2693 . 2704) (#("mi" 0 2 (fontified t)) . -2693) (undo-tree-id7172 . -2) (undo-tree-id7173 . -2) (undo-tree-id7174 . -2) (undo-tree-id7175 . -2) (undo-tree-id7176 . -2) (undo-tree-id7177 . -2) (undo-tree-id7178 . -2) (undo-tree-id7179 . -2) (undo-tree-id7180 . -2) (undo-tree-id7181 . -2) (undo-tree-id7182 . -2) (undo-tree-id7183 . -2) (undo-tree-id7184 . -2) (undo-tree-id7185 . -2) (undo-tree-id7186 . -2) (undo-tree-id7187 . -2) (undo-tree-id7188 . -2) (undo-tree-id7189 . -2) (undo-tree-id7190 . -2) (undo-tree-id7191 . -2) (undo-tree-id7192 . -2) (undo-tree-id7193 . -2) (undo-tree-id7194 . -2) (undo-tree-id7195 . -2) (undo-tree-id7196 . -2) (undo-tree-id7197 . -2) (undo-tree-id7198 . -2) (undo-tree-id7199 . -2) (undo-tree-id7200 . -2) (undo-tree-id7201 . -2) (undo-tree-id7202 . -2) (undo-tree-id7203 . -2) (undo-tree-id7204 . -2) (undo-tree-id7205 . -2) (undo-tree-id7206 . -2) (undo-tree-id7207 . -2) (undo-tree-id7208 . -2) (undo-tree-id7209 . -2) (undo-tree-id7210 . -2) (undo-tree-id7211 . -2) (undo-tree-id7212 . -2) (undo-tree-id7213 . -2) (undo-tree-id7214 . -2) (undo-tree-id7215 . -2) (undo-tree-id7216 . -2) (undo-tree-id7217 . -2) (undo-tree-id7218 . -2) (undo-tree-id7219 . -2) (undo-tree-id7220 . -2) (undo-tree-id7221 . -2) (undo-tree-id7222 . -2) (undo-tree-id7223 . -2) (undo-tree-id7224 . -2) (undo-tree-id7225 . -2) (undo-tree-id7226 . -2) (undo-tree-id7227 . -2) (undo-tree-id7228 . -2) (undo-tree-id7229 . -2) (undo-tree-id7230 . -2) (undo-tree-id7231 . -2) (undo-tree-id7232 . -2) (undo-tree-id7233 . -2) (undo-tree-id7234 . -2) (undo-tree-id7235 . -2) (undo-tree-id7236 . -2) (undo-tree-id7237 . -2) (undo-tree-id7238 . -2) (undo-tree-id7239 . -2) (undo-tree-id7240 . -2) (undo-tree-id7241 . -2) (undo-tree-id7242 . -2) (undo-tree-id7243 . -2) (undo-tree-id7244 . -2) (undo-tree-id7245 . -2) (undo-tree-id7246 . -2) (undo-tree-id7247 . -2) (undo-tree-id7248 . -2) (undo-tree-id7249 . -2) (undo-tree-id7250 . -2) (undo-tree-id7251 . -2) (undo-tree-id7252 . -2) (undo-tree-id7253 . -2) (undo-tree-id7254 . -2) (undo-tree-id7255 . -2) (undo-tree-id7256 . -2) (undo-tree-id7257 . -2) (undo-tree-id7258 . -2) (undo-tree-id7259 . -2) (undo-tree-id7260 . -2) (undo-tree-id7261 . -2) (undo-tree-id7262 . -2) (undo-tree-id7263 . -2) (undo-tree-id7264 . -2) (undo-tree-id7265 . -2) (undo-tree-id7266 . -2) (undo-tree-id7267 . -2) (undo-tree-id7268 . -2) (undo-tree-id7269 . -2) (undo-tree-id7270 . -2) (undo-tree-id7271 . -2) (undo-tree-id7272 . -2) (undo-tree-id7273 . -2) (undo-tree-id7274 . -2) (undo-tree-id7275 . -2) (undo-tree-id7276 . -2) (undo-tree-id7277 . -2) (undo-tree-id7278 . -2) (undo-tree-id7279 . -2) (undo-tree-id7280 . -2) (undo-tree-id7281 . -2) (undo-tree-id7282 . -2) (undo-tree-id7283 . -2) (undo-tree-id7284 . -2) 2695 (2690 . 2695) (2679 . 2690) (#("max" 0 3 (fontified nil)) . 2679) (undo-tree-id7285 . -3) (2679 . 2682) (#("max_point_y" 0 11 (fontified nil)) . -2679) (undo-tree-id7286 . -11) (2679 . 2690) (#("max" 0 3 (fontified t)) . -2679) (undo-tree-id7287 . -3) (undo-tree-id7288 . -3) (undo-tree-id7289 . -3) 2682 (2680 . 2682) (#("height" 0 6 (fontified nil)) . 2680) (undo-tree-id7290 . -6) (2679 . 2680) (2666 . 2677) (#("mi" 0 2 (fontified nil)) . 2666) (undo-tree-id7291 . -2) (2666 . 2668) (#("min_point_x" 0 11 (fontified nil)) . -2666) (undo-tree-id7292 . -11) (2666 . 2677) (#("mi" 0 2 (fontified t)) . -2666) (undo-tree-id7293 . -2) (undo-tree-id7294 . -2) (undo-tree-id7295 . -2) (undo-tree-id7296 . -2) 2668 (2667 . 2668) (2663 . 2667) (#("-" 0 1 (fontified t)) . -2663) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) 2664 (2663 . 2664) (2652 . 2663) (#("ma" 0 2 (fontified nil)) . 2652) (undo-tree-id7300 . -2) (2652 . 2654) (#("max_point_x" 0 11 (fontified nil)) . -2652) (undo-tree-id7301 . -11) (2652 . 2663) (#("ma" 0 2 (fontified t)) . -2652) (undo-tree-id7302 . -2) (undo-tree-id7303 . -2) (undo-tree-id7304 . -2) (undo-tree-id7305 . -2) 2654 (2653 . 2654) (#("saturation" 0 10 (fontified nil)) . 2653) (undo-tree-id7306 . -10) (2652 . 2653) (2647 . 2650) (#("ve" 0 2 (fontified nil)) . 2647) (undo-tree-id7307 . -2) (2647 . 2649) (#("vec" 0 3 (fontified nil)) . -2647) (undo-tree-id7308 . -3) (2647 . 2650) (#("ve" 0 2 (fontified t)) . -2647) (undo-tree-id7309 . -2) (undo-tree-id7310 . -2) (undo-tree-id7311 . -2) 2649 (2648 . 2649) (#("buffer" 0 6 (fontified nil)) . 2648) (undo-tree-id7312 . -6) (2647 . 2648) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2647 2653 nil nil nil t #s(yas--field 2 2655 2665 nil nil nil t #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))))) #s(yas--field 2 2655 2665 nil nil nil t #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil)))) #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) #s(yas--exit 2681 nil) 77 nil #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) nil nil)) (2643 . 2681) (#("pgm(${1:buffer}, ${2:saturation}, ${3:height}, ${4:width})$0" 0 60 (fontified nil)) . 2643) (2643 . 2703) (#("p" 0 1 (fontified nil)) . 2643) (2643 . 2644) (#("pgm(…)" 0 6 (fontified nil)) . -2643) (2643 . 2649) (#("p" 0 1 (fontified t)) . -2643) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) 2644 (2641 . 2644) (2630 . 2641) (#("An" 0 2 (fontified nil)) . 2630) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil)) . -2630) (2630 . 2641) (#("An" 0 2 (fontified t face font-lock-type-face)) . -2630) (undo-tree-id7316 . -2) (undo-tree-id7317 . -2) 2632 (2630 . 2632)) ((#("An" 0 2 (fontified nil face font-lock-type-face)) . 2630) (undo-tree-id7318 . -2) (undo-tree-id7319 . -2) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil)) . 2630) (2630 . 2641) (#("An" 0 2 (fontified nil)) . 2630) (2630 . 2632) (#("AnymapImage" 0 11 (fontified nil face font-lock-type-face)) . 2630) (undo-tree-id7320 . -11) (undo-tree-id7321 . -11) (undo-tree-id7322 . -11) (undo-tree-id7323 . -11) (undo-tree-id7324 . -11) (undo-tree-id7325 . -11) (undo-tree-id7326 . -11) (undo-tree-id7327 . -11) (undo-tree-id7328 . -11) (undo-tree-id7329 . -11) (undo-tree-id7330 . -11) (undo-tree-id7331 . -11) (undo-tree-id7332 . -11) (undo-tree-id7333 . -11) (undo-tree-id7334 . -11) (undo-tree-id7335 . -11) (undo-tree-id7336 . -11) (undo-tree-id7337 . -11) (undo-tree-id7338 . -11) (undo-tree-id7339 . -11) (undo-tree-id7340 . -11) (undo-tree-id7341 . -11) (undo-tree-id7342 . -11) (undo-tree-id7343 . -11) (undo-tree-id7344 . -11) (undo-tree-id7345 . -11) (undo-tree-id7346 . -11) (undo-tree-id7347 . -11) (undo-tree-id7348 . -11) (undo-tree-id7349 . -11) (undo-tree-id7350 . -11) (undo-tree-id7351 . -11) (undo-tree-id7352 . -11) (undo-tree-id7353 . -11) (undo-tree-id7354 . -11) (undo-tree-id7355 . -11) (undo-tree-id7356 . -11) (undo-tree-id7357 . -11) (undo-tree-id7358 . -11) (undo-tree-id7359 . -11) (undo-tree-id7360 . -11) (undo-tree-id7361 . -11) (undo-tree-id7362 . -11) (undo-tree-id7363 . -11) (undo-tree-id7364 . -11) (undo-tree-id7365 . -11) (undo-tree-id7366 . -11) (undo-tree-id7367 . -11) (undo-tree-id7368 . -11) (undo-tree-id7369 . -11) (undo-tree-id7370 . -11) (undo-tree-id7371 . -11) (undo-tree-id7372 . -11) (undo-tree-id7373 . -11) (undo-tree-id7374 . -11) (undo-tree-id7375 . -11) (undo-tree-id7376 . -11) (undo-tree-id7377 . -11) (undo-tree-id7378 . -11) (undo-tree-id7379 . -11) (undo-tree-id7380 . -11) (undo-tree-id7381 . -11) (undo-tree-id7382 . -11) (undo-tree-id7383 . -11) (undo-tree-id7384 . -11) (undo-tree-id7385 . -11) (undo-tree-id7386 . -11) (undo-tree-id7387 . -11) (undo-tree-id7388 . -11) (undo-tree-id7389 . -11) (undo-tree-id7390 . -11) (undo-tree-id7391 . -11) (undo-tree-id7392 . -11) (undo-tree-id7393 . -11) (undo-tree-id7394 . -11) (undo-tree-id7395 . -11) (undo-tree-id7396 . -11) (undo-tree-id7397 . -11) (undo-tree-id7398 . -11) (undo-tree-id7399 . -11) (undo-tree-id7400 . -11) (undo-tree-id7401 . -11) (undo-tree-id7402 . -11) (undo-tree-id7403 . -11) (undo-tree-id7404 . -11) (undo-tree-id7405 . -11) (undo-tree-id7406 . -11) (undo-tree-id7407 . -11) (undo-tree-id7408 . -11) (undo-tree-id7409 . -11) (undo-tree-id7410 . -11) (undo-tree-id7411 . -11) (undo-tree-id7412 . -11) (undo-tree-id7413 . -11) (undo-tree-id7414 . -11) (undo-tree-id7415 . -11) (undo-tree-id7416 . -11) (undo-tree-id7417 . -11) (undo-tree-id7418 . -11) (undo-tree-id7419 . -11) (undo-tree-id7420 . -11) (undo-tree-id7421 . -11) (undo-tree-id7422 . -11) (undo-tree-id7423 . -11) (undo-tree-id7424 . -11) (undo-tree-id7425 . -11) (undo-tree-id7426 . -11) (undo-tree-id7427 . -11) (undo-tree-id7428 . -11) (undo-tree-id7429 . -11) (undo-tree-id7430 . -11) (undo-tree-id7431 . -11) (undo-tree-id7432 . -11) (undo-tree-id7433 . -11) (#("::p" 0 2 (fontified nil) 2 3 (fontified nil)) . 2641) (undo-tree-id7434 . -3) (undo-tree-id7435 . -3) (undo-tree-id7436 . -3) (undo-tree-id7437 . -2) (undo-tree-id7438 . -2) (undo-tree-id7439 . -2) (undo-tree-id7440 . -2) (undo-tree-id7441 . -2) (undo-tree-id7442 . -2) (undo-tree-id7443 . -2) (undo-tree-id7444 . -2) (undo-tree-id7445 . -2) (undo-tree-id7446 . -2) (undo-tree-id7447 . -2) (undo-tree-id7448 . -2) (undo-tree-id7449 . -2) (undo-tree-id7450 . -2) (undo-tree-id7451 . -2) (undo-tree-id7452 . -2) (undo-tree-id7453 . -2) (undo-tree-id7454 . -2) (undo-tree-id7455 . -2) (undo-tree-id7456 . -2) (undo-tree-id7457 . -2) (undo-tree-id7458 . -2) (undo-tree-id7459 . -2) (undo-tree-id7460 . -2) (undo-tree-id7461 . -2) (undo-tree-id7462 . -2) (undo-tree-id7463 . -2) (undo-tree-id7464 . -2) (undo-tree-id7465 . -2) (undo-tree-id7466 . -2) (undo-tree-id7467 . -2) (undo-tree-id7468 . -2) (undo-tree-id7469 . -2) (undo-tree-id7470 . -2) (undo-tree-id7471 . -2) (undo-tree-id7472 . -2) (undo-tree-id7473 . -2) (undo-tree-id7474 . -2) (undo-tree-id7475 . -2) (undo-tree-id7476 . -2) (undo-tree-id7477 . -2) (undo-tree-id7478 . -2) (undo-tree-id7479 . -2) (undo-tree-id7480 . -2) (undo-tree-id7481 . -2) (undo-tree-id7482 . -2) (undo-tree-id7483 . -2) (undo-tree-id7484 . -2) (undo-tree-id7485 . -2) (undo-tree-id7486 . -2) (undo-tree-id7487 . -2) (undo-tree-id7488 . -2) (undo-tree-id7489 . -2) (undo-tree-id7490 . -2) (undo-tree-id7491 . -2) (undo-tree-id7492 . -2) (undo-tree-id7493 . -2) (undo-tree-id7494 . -2) (undo-tree-id7495 . -2) (undo-tree-id7496 . -2) (undo-tree-id7497 . -2) (undo-tree-id7498 . -2) (undo-tree-id7499 . -2) (undo-tree-id7500 . -2) (undo-tree-id7501 . -2) (undo-tree-id7502 . -2) (undo-tree-id7503 . -2) (undo-tree-id7504 . -2) (undo-tree-id7505 . -2) (undo-tree-id7506 . -2) (undo-tree-id7507 . -2) (undo-tree-id7508 . -2) (undo-tree-id7509 . -2) (undo-tree-id7510 . -2) (undo-tree-id7511 . -2) (undo-tree-id7512 . -2) (undo-tree-id7513 . -2) (undo-tree-id7514 . -2) (undo-tree-id7515 . -2) (undo-tree-id7516 . -2) (undo-tree-id7517 . -2) (undo-tree-id7518 . -2) (undo-tree-id7519 . -2) (undo-tree-id7520 . -2) (undo-tree-id7521 . -2) (undo-tree-id7522 . -2) (undo-tree-id7523 . -2) (undo-tree-id7524 . -2) (undo-tree-id7525 . -2) (undo-tree-id7526 . -2) (undo-tree-id7527 . -2) (undo-tree-id7528 . -2) (undo-tree-id7529 . -2) (undo-tree-id7530 . -2) (undo-tree-id7531 . -2) (undo-tree-id7532 . -2) (undo-tree-id7533 . -2) (undo-tree-id7534 . -2) (undo-tree-id7535 . -2) (undo-tree-id7536 . -2) (undo-tree-id7537 . -2) (undo-tree-id7538 . -2) (undo-tree-id7539 . -2) (undo-tree-id7540 . -2) (undo-tree-id7541 . -2) (undo-tree-id7542 . -2) (undo-tree-id7543 . -2) (undo-tree-id7544 . -2) (undo-tree-id7545 . -2) (undo-tree-id7546 . -2) (undo-tree-id7547 . -2) (2643 . 2644) (#("pgm(…)" 0 6 (fontified nil)) . 2643) (2643 . 2649) (#("p" 0 1 (fontified nil)) . 2643) (2643 . 2644) (#("pgm(${1:buffer}, ${2:saturation}, ${3:height}, ${4:width})$0" 0 60 (fontified nil)) . 2643) (2643 . 2703) (#("pgm(buffer, saturation, height, width)" 0 3 (fontified nil) 3 4 (fontified nil face (rainbow-delimiters-depth-3-face)) 4 10 (fontified nil) 10 12 (fontified nil) 12 22 (fontified nil) 22 24 (fontified nil) 24 30 (fontified nil) 30 37 (fontified nil) 37 38 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2643) (undo-tree-id7548 . 8) (undo-tree-id7549 . -24) (undo-tree-id7550 . -24) (undo-tree-id7551 . -24) (undo-tree-id7552 . -4) (undo-tree-id7553 . -24) (undo-tree-id7554 . -24) (undo-tree-id7555 . -24) (undo-tree-id7556 . -24) (undo-tree-id7557 . -24) (undo-tree-id7558 . -24) (undo-tree-id7559 . -24) (undo-tree-id7560 . -24) (undo-tree-id7561 . -24) (undo-tree-id7562 . -24) (undo-tree-id7563 . -24) (undo-tree-id7564 . -24) (undo-tree-id7565 . -24) (undo-tree-id7566 . -24) (undo-tree-id7567 . -24) (undo-tree-id7568 . -24) (undo-tree-id7569 . -24) (undo-tree-id7570 . -24) (undo-tree-id7571 . -24) (undo-tree-id7572 . -24) (undo-tree-id7573 . -24) (undo-tree-id7574 . -24) (undo-tree-id7575 . -24) (undo-tree-id7576 . -24) (undo-tree-id7577 . -24) (undo-tree-id7578 . -24) (undo-tree-id7579 . -24) (undo-tree-id7580 . -24) (undo-tree-id7581 . -24) (undo-tree-id7582 . -24) (undo-tree-id7583 . -24) (undo-tree-id7584 . -24) (undo-tree-id7585 . -24) (undo-tree-id7586 . -24) (undo-tree-id7587 . -24) (undo-tree-id7588 . -24) (undo-tree-id7589 . -24) (undo-tree-id7590 . -24) (undo-tree-id7591 . -24) (undo-tree-id7592 . -24) (undo-tree-id7593 . -24) (undo-tree-id7594 . -24) (undo-tree-id7595 . -24) (undo-tree-id7596 . -24) (undo-tree-id7597 . -24) (undo-tree-id7598 . -24) (undo-tree-id7599 . -24) (undo-tree-id7600 . -24) (undo-tree-id7601 . -24) (undo-tree-id7602 . -24) (undo-tree-id7603 . -24) (undo-tree-id7604 . -24) (undo-tree-id7605 . -24) (undo-tree-id7606 . -24) (undo-tree-id7607 . -24) (undo-tree-id7608 . -24) (undo-tree-id7609 . -24) (undo-tree-id7610 . -24) (undo-tree-id7611 . -24) (undo-tree-id7612 . -24) (undo-tree-id7613 . -24) (undo-tree-id7614 . -24) (undo-tree-id7615 . -24) (undo-tree-id7616 . -24) (undo-tree-id7617 . -24) (undo-tree-id7618 . -24) (undo-tree-id7619 . -24) (undo-tree-id7620 . -24) (undo-tree-id7621 . -24) (undo-tree-id7622 . -24) (undo-tree-id7623 . -24) (undo-tree-id7624 . -24) (undo-tree-id7625 . -24) (undo-tree-id7626 . -24) (undo-tree-id7627 . -24) (undo-tree-id7628 . -24) (undo-tree-id7629 . -24) (undo-tree-id7630 . -24) (undo-tree-id7631 . -24) (undo-tree-id7632 . -24) (undo-tree-id7633 . -24) (undo-tree-id7634 . -24) (undo-tree-id7635 . -24) (undo-tree-id7636 . -24) (undo-tree-id7637 . -24) (undo-tree-id7638 . -24) (undo-tree-id7639 . -24) (undo-tree-id7640 . -24) (undo-tree-id7641 . -24) (undo-tree-id7642 . -24) (undo-tree-id7643 . -24) (undo-tree-id7644 . -24) (undo-tree-id7645 . -24) (undo-tree-id7646 . -24) (undo-tree-id7647 . -24) (undo-tree-id7648 . -24) (undo-tree-id7649 . -24) (undo-tree-id7650 . -24) (undo-tree-id7651 . -24) (undo-tree-id7652 . -24) (undo-tree-id7653 . -24) (undo-tree-id7654 . -24) (undo-tree-id7655 . -24) (undo-tree-id7656 . -24) (undo-tree-id7657 . -24) (undo-tree-id7658 . -24) (undo-tree-id7659 . -24) (undo-tree-id7660 . -24) (undo-tree-id7661 . -38) (undo-tree-id7662 . -24) (apply yas--snippet-revive 2643 2681 #s(yas--snippet nil (#s(yas--field 1 2647 2653 nil nil nil t #s(yas--field 2 2655 2665 nil nil nil t #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))))) #s(yas--field 2 2655 2665 nil nil nil t #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil)))) #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) #s(yas--exit 2681 nil) 77 nil #s(yas--field 3 2667 2673 nil nil nil t #s(yas--field 4 2675 2680 nil nil nil nil #s(yas--exit 2681 nil))) nil nil)) (#("v" 0 1 (fontified nil)) . 2647) (2648 . 2654) (#("e" 0 1 (fontified nil)) . 2648) (undo-tree-id7663 . -1) (2647 . 2649) (#("vec" 0 3 (fontified nil)) . 2647) (undo-tree-id7664 . -3) (2647 . 2650) (#("ve" 0 2 (fontified nil)) . 2647) (undo-tree-id7665 . -2) (2647 . 2649) (#("vec" 0 3 (fontified nil)) . 2647) (undo-tree-id7666 . -3) (#("m" 0 1 (fontified nil)) . 2652) (2653 . 2663) (#("a" 0 1 (fontified nil)) . 2653) (undo-tree-id7667 . -1) (2652 . 2654) (#("max_point_x" 0 11 (fontified nil)) . 2652) (undo-tree-id7668 . -11) (2652 . 2663) (#("ma" 0 2 (fontified nil)) . 2652) (undo-tree-id7669 . -2) (2652 . 2654) (#("max_point_x" 0 11 (fontified nil)) . 2652) (undo-tree-id7670 . -11) (#("-" 0 1 (fontified nil)) . 2663) (undo-tree-id7671 . -1) (2663 . 2664) (#(" - m" 0 3 (fontified nil) 3 4 (fontified nil)) . 2663) (undo-tree-id7672 . -4) (#("i" 0 1 (fontified nil)) . 2667) (undo-tree-id7673 . -1) (2666 . 2668) (#("min_point_x" 0 11 (fontified nil)) . 2666) (undo-tree-id7674 . -11) (2666 . 2677) (#("mi" 0 2 (fontified nil)) . 2666) (undo-tree-id7675 . -2) (2666 . 2668) (#("min_point_x" 0 11 (fontified nil)) . 2666) (undo-tree-id7676 . -11) (#("m" 0 1 (fontified nil)) . 2679) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (2680 . 2686) (#("ax" 0 2 (fontified nil)) . 2680) (undo-tree-id7679 . -2) (undo-tree-id7680 . -2) (undo-tree-id7681 . -2) (2679 . 2682) (#("max_point_y" 0 11 (fontified nil)) . 2679) (undo-tree-id7682 . -11) (2679 . 2690) (#("max" 0 3 (fontified nil)) . 2679) (undo-tree-id7683 . -3) (2679 . 2682) (#("max_point_y" 0 11 (fontified nil)) . 2679) (undo-tree-id7684 . -11) (undo-tree-id7685 . -11) (undo-tree-id7686 . -11) (undo-tree-id7687 . -11) (undo-tree-id7688 . -11) (undo-tree-id7689 . -11) (undo-tree-id7690 . -11) (undo-tree-id7691 . -11) (undo-tree-id7692 . -11) (undo-tree-id7693 . -11) (undo-tree-id7694 . -11) (undo-tree-id7695 . -11) (undo-tree-id7696 . -11) (undo-tree-id7697 . -11) (undo-tree-id7698 . -11) (undo-tree-id7699 . -11) (undo-tree-id7700 . -11) (undo-tree-id7701 . -11) (undo-tree-id7702 . -11) (undo-tree-id7703 . -11) (undo-tree-id7704 . -11) (undo-tree-id7705 . -11) (undo-tree-id7706 . -11) (undo-tree-id7707 . -11) (undo-tree-id7708 . -11) (undo-tree-id7709 . -11) (undo-tree-id7710 . -11) (undo-tree-id7711 . -11) (undo-tree-id7712 . -11) (undo-tree-id7713 . -11) (undo-tree-id7714 . -11) (undo-tree-id7715 . -11) (undo-tree-id7716 . -11) (undo-tree-id7717 . -11) (undo-tree-id7718 . -11) (undo-tree-id7719 . -11) (undo-tree-id7720 . -11) (undo-tree-id7721 . -11) (undo-tree-id7722 . -11) (undo-tree-id7723 . -11) (undo-tree-id7724 . -11) (undo-tree-id7725 . -11) (undo-tree-id7726 . -11) (undo-tree-id7727 . -11) (undo-tree-id7728 . -11) (undo-tree-id7729 . -11) (undo-tree-id7730 . -11) (undo-tree-id7731 . -11) (undo-tree-id7732 . -11) (undo-tree-id7733 . -11) (undo-tree-id7734 . -11) (undo-tree-id7735 . -11) (undo-tree-id7736 . -11) (undo-tree-id7737 . -11) (undo-tree-id7738 . -11) (undo-tree-id7739 . -11) (undo-tree-id7740 . -11) (undo-tree-id7741 . -11) (undo-tree-id7742 . -11) (undo-tree-id7743 . -11) (undo-tree-id7744 . -11) (undo-tree-id7745 . -11) (undo-tree-id7746 . -11) (undo-tree-id7747 . -11) (undo-tree-id7748 . -11) (undo-tree-id7749 . -11) (undo-tree-id7750 . -11) (undo-tree-id7751 . -11) (undo-tree-id7752 . -11) (undo-tree-id7753 . -11) (undo-tree-id7754 . -11) (undo-tree-id7755 . -11) (undo-tree-id7756 . -11) (undo-tree-id7757 . -11) (undo-tree-id7758 . -11) (undo-tree-id7759 . -11) (undo-tree-id7760 . -11) (undo-tree-id7761 . -11) (undo-tree-id7762 . -11) (undo-tree-id7763 . -11) (undo-tree-id7764 . -11) (undo-tree-id7765 . -11) (undo-tree-id7766 . -11) (undo-tree-id7767 . -11) (undo-tree-id7768 . -11) (undo-tree-id7769 . -11) (undo-tree-id7770 . -11) (undo-tree-id7771 . -11) (undo-tree-id7772 . -11) (undo-tree-id7773 . -11) (undo-tree-id7774 . -11) (undo-tree-id7775 . -11) (undo-tree-id7776 . -11) (undo-tree-id7777 . -11) (undo-tree-id7778 . -11) (undo-tree-id7779 . -11) (undo-tree-id7780 . -11) (undo-tree-id7781 . -11) (undo-tree-id7782 . -11) (undo-tree-id7783 . -11) (undo-tree-id7784 . -11) (undo-tree-id7785 . -11) (undo-tree-id7786 . -11) (undo-tree-id7787 . -11) (undo-tree-id7788 . -11) (undo-tree-id7789 . -11) (undo-tree-id7790 . -11) (undo-tree-id7791 . -11) (undo-tree-id7792 . -11) (undo-tree-id7793 . -11) (undo-tree-id7794 . -11) (undo-tree-id7795 . -11) (undo-tree-id7796 . -11) (#(" - mi" 0 3 (fontified nil) 3 5 (fontified nil)) . 2690) (undo-tree-id7797 . -5) (undo-tree-id7798 . -5) (undo-tree-id7799 . -5) (undo-tree-id7800 . -5) (undo-tree-id7801 . -5) (undo-tree-id7802 . -5) (undo-tree-id7803 . -5) (undo-tree-id7804 . -5) (undo-tree-id7805 . -5) (undo-tree-id7806 . -5) (undo-tree-id7807 . -5) (undo-tree-id7808 . -5) (undo-tree-id7809 . -5) (undo-tree-id7810 . -5) (undo-tree-id7811 . -5) (undo-tree-id7812 . -5) (undo-tree-id7813 . -5) (undo-tree-id7814 . -5) (undo-tree-id7815 . -5) (undo-tree-id7816 . -5) (undo-tree-id7817 . -5) (undo-tree-id7818 . -5) (undo-tree-id7819 . -5) (undo-tree-id7820 . -5) (undo-tree-id7821 . -5) (undo-tree-id7822 . -5) (undo-tree-id7823 . -5) (undo-tree-id7824 . -5) (undo-tree-id7825 . -5) (undo-tree-id7826 . -5) (undo-tree-id7827 . -5) (undo-tree-id7828 . -5) (undo-tree-id7829 . -5) (undo-tree-id7830 . -5) (undo-tree-id7831 . -5) (undo-tree-id7832 . -5) (undo-tree-id7833 . -5) (undo-tree-id7834 . -5) (undo-tree-id7835 . -5) (undo-tree-id7836 . -5) (undo-tree-id7837 . -5) (undo-tree-id7838 . -5) (undo-tree-id7839 . -5) (undo-tree-id7840 . -5) (undo-tree-id7841 . -5) (undo-tree-id7842 . -5) (undo-tree-id7843 . -5) (undo-tree-id7844 . -5) (undo-tree-id7845 . -5) (undo-tree-id7846 . -5) (undo-tree-id7847 . -5) (undo-tree-id7848 . -5) (undo-tree-id7849 . -5) (undo-tree-id7850 . -5) (undo-tree-id7851 . -5) (undo-tree-id7852 . -5) (undo-tree-id7853 . -5) (undo-tree-id7854 . -5) (undo-tree-id7855 . -5) (undo-tree-id7856 . -5) (undo-tree-id7857 . -5) (undo-tree-id7858 . -5) (undo-tree-id7859 . -5) (undo-tree-id7860 . -5) (undo-tree-id7861 . -5) (undo-tree-id7862 . -5) (undo-tree-id7863 . -5) (undo-tree-id7864 . -5) (undo-tree-id7865 . -5) (undo-tree-id7866 . -5) (undo-tree-id7867 . -5) (undo-tree-id7868 . -5) (undo-tree-id7869 . -5) (undo-tree-id7870 . -5) (undo-tree-id7871 . -5) (undo-tree-id7872 . -5) (undo-tree-id7873 . -5) (undo-tree-id7874 . -5) (undo-tree-id7875 . -5) (undo-tree-id7876 . -5) (undo-tree-id7877 . -5) (undo-tree-id7878 . -5) (undo-tree-id7879 . -5) (undo-tree-id7880 . -5) (undo-tree-id7881 . -5) (undo-tree-id7882 . -5) (undo-tree-id7883 . -5) (undo-tree-id7884 . -5) (undo-tree-id7885 . -5) (undo-tree-id7886 . -5) (undo-tree-id7887 . -5) (undo-tree-id7888 . -5) (undo-tree-id7889 . -5) (undo-tree-id7890 . -5) (undo-tree-id7891 . -5) (undo-tree-id7892 . -5) (undo-tree-id7893 . -5) (undo-tree-id7894 . -5) (undo-tree-id7895 . -5) (undo-tree-id7896 . -5) (undo-tree-id7897 . -5) (undo-tree-id7898 . -5) (undo-tree-id7899 . -5) (undo-tree-id7900 . -5) (undo-tree-id7901 . -5) (undo-tree-id7902 . -5) (undo-tree-id7903 . -5) (undo-tree-id7904 . -5) (undo-tree-id7905 . -5) (undo-tree-id7906 . -5) (undo-tree-id7907 . -5) (undo-tree-id7908 . -5) (undo-tree-id7909 . -3) (2693 . 2695) (#("min_point_y" 0 11 (fontified nil)) . 2693) (undo-tree-id7910 . -11) (2693 . 2704) (#("mi" 0 2 (fontified nil)) . 2693) (undo-tree-id7911 . -2) (2693 . 2695) (#("min_point_y" 0 11 (fontified t)) . 2693) (undo-tree-id7912 . -10) (undo-tree-id7913 . -10) (undo-tree-id7914 . -11) (undo-tree-id7915 . -11) (undo-tree-id7916 . -10)) (26156 4240 908884 822000) 0 nil])
([nil nil ((2698 . 2709) (#("min" 0 3 (fontified nil)) . 2698) (undo-tree-id8042 . -3) (2698 . 2701) (#("min_point_x" 0 11 (fontified nil)) . -2698) (undo-tree-id8043 . -11) (2698 . 2709) (#("min" 0 3 (fontified t)) . -2698) (undo-tree-id8044 . -2) (undo-tree-id8045 . -3) (undo-tree-id8046 . -3) (undo-tree-id8047 . -3) 2701 (2698 . 2701) (#("i" 0 1 (fontified t)) . -2698) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) 2699 (2695 . 2699) (2684 . 2695) (#("max" 0 3 (fontified nil)) . 2684) (undo-tree-id8051 . -3) (2684 . 2687) (#("max_point_x" 0 11 (fontified nil)) . -2684) (undo-tree-id8052 . -11) (2684 . 2695) (#("max" 0 3 (fontified t)) . -2684) (undo-tree-id8053 . -3) (undo-tree-id8054 . -3) (undo-tree-id8055 . -3) 2687 (2685 . 2687) (#("width" 0 5 (fontified nil)) . 2685) (undo-tree-id8056 . -5) (2684 . 2685) (2671 . 2682) (#("min" 0 3 (fontified nil)) . 2671) (undo-tree-id8057 . -3) (2671 . 2674) (#("min_point_y" 0 11 (fontified nil)) . -2671) (undo-tree-id8058 . -11) (2671 . 2682) (#("min" 0 3 (fontified t)) . -2671) (undo-tree-id8059 . -3) (undo-tree-id8060 . -3) (undo-tree-id8061 . -3) 2674 (2668 . 2674) (2657 . 2668) (#("max" 0 3 (fontified nil)) . 2657) (undo-tree-id8062 . -3) (2657 . 2660) (#("max_point_y" 0 11 (fontified nil)) . -2657) (undo-tree-id8063 . -11) (2657 . 2668) (#("max" 0 3 (fontified t)) . -2657) (undo-tree-id8064 . -3) (undo-tree-id8065 . -3) (undo-tree-id8066 . -3) 2660 (2658 . 2660) (#("height" 0 6 (fontified nil)) . 2658) (undo-tree-id8067 . -6) (2657 . 2658) (2653 . 2655) (#("saturation" 0 10 (fontified nil)) . 2653) (undo-tree-id8068 . -10) (2652 . 2653) (2647 . 2650) (#("ve" 0 2 (fontified nil)) . 2647) (undo-tree-id8069 . -2) (2647 . 2649) (#("vec" 0 3 (fontified nil)) . -2647) (undo-tree-id8070 . -3) (2647 . 2650) (#("ve" 0 2 (fontified t)) . -2647) (undo-tree-id8071 . -2) (undo-tree-id8072 . -2) (undo-tree-id8073 . -2) 2649 (2648 . 2649)) nil (26156 4306 466081 560000) 0 nil])
nil
([nil nil ((2710 . 2711) (apply yas--snippet-revive 2643 2710 #s(yas--snippet nil (#s(yas--field 1 2647 2650 nil nil nil t #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))))) #s(yas--field 2 2652 2655 nil nil nil t #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)))) #s(yas--field 3 2657 2682 nil nil nil t #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil))) #s(yas--exit 2710 nil) 78 nil #s(yas--field 4 2684 2709 nil nil nil t #s(yas--exit 2710 nil)) nil nil))) nil (26156 4306 465463 923000) 0 nil])
([nil nil ((2684 . 2688) (#(" " 0 1 (fontified nil)) . 2684) (2683 . 2684)) nil (26156 4306 465461 195000) 0 nil])
([nil nil ((2657 . 2661) (#(" " 0 1 (fontified nil)) . 2657) (2656 . 2657)) nil (26156 4306 465457 923000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2721) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) 2722 (2721 . 2722) (#("	" 0 1 (fontified nil)) . 2720) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (2719 . 2722)) nil (26156 4306 465450 761000) 0 nil])
([nil nil ((apply yas--snippet-revive 2719 2727 #s(yas--snippet nil nil #s(yas--exit 2727 nil) 79 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2727 nil) 79 nil nil nil nil)) (2719 . 2727) (#("unwrap()$0" 0 10 (fontified nil)) . 2719) (2719 . 2729) (#("un" 0 2 (fontified nil)) . 2719) (2719 . 2721) (#("unwrap()" 0 8 (fontified nil)) . -2719) (2719 . 2727) (#("un" 0 2 (fontified t)) . -2719) (undo-tree-id7951 . -2) (undo-tree-id7952 . -2) (undo-tree-id7953 . -2) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -2) (undo-tree-id7985 . -2) (undo-tree-id7986 . -2) (undo-tree-id7987 . -2) (undo-tree-id7988 . -2) (undo-tree-id7989 . -2) (undo-tree-id7990 . -2) (undo-tree-id7991 . -2) (undo-tree-id7992 . -2) (undo-tree-id7993 . -2) (undo-tree-id7994 . -2) (undo-tree-id7995 . -2) (undo-tree-id7996 . -2) (undo-tree-id7997 . -2) (undo-tree-id7998 . -2) (undo-tree-id7999 . -2) (undo-tree-id8000 . -2) (undo-tree-id8001 . -2) (undo-tree-id8002 . -2) (undo-tree-id8003 . -2) (undo-tree-id8004 . -2) (undo-tree-id8005 . -2) (undo-tree-id8006 . -2) (undo-tree-id8007 . -2) (undo-tree-id8008 . -2) (undo-tree-id8009 . -2) (undo-tree-id8010 . -2) (undo-tree-id8011 . -2) (undo-tree-id8012 . -2) (undo-tree-id8013 . -2) (undo-tree-id8014 . -2) 2721 (2718 . 2721) (#(";" 0 1 (fontified t)) . -2718) (undo-tree-id8015 . -1) 2719) nil (26156 4306 465389 173000) 0 nil])
([nil nil ((#("	todo!();
" 0 1 (fontified t) 1 6 (fontified t face font-lock-preprocessor-face) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t) 9 10 (fontified t)) . 2734) (undo-tree-id8074 . -9) (undo-tree-id8075 . -8) (undo-tree-id8076 . -1) (undo-tree-id8077 . -5) (undo-tree-id8078 . -8) (undo-tree-id8079 . -8) (undo-tree-id8080 . -8) (undo-tree-id8081 . -8) (undo-tree-id8082 . -8) (undo-tree-id8083 . -8) (undo-tree-id8084 . -8) (undo-tree-id8085 . -8) (undo-tree-id8086 . -8) (undo-tree-id8087 . -8) (undo-tree-id8088 . -8) (undo-tree-id8089 . -8) (undo-tree-id8090 . -8) (undo-tree-id8091 . -8) (undo-tree-id8092 . -8) (undo-tree-id8093 . -8) (undo-tree-id8094 . -8) (undo-tree-id8095 . -8) (undo-tree-id8096 . -8) (undo-tree-id8097 . -8) (undo-tree-id8098 . -8) (undo-tree-id8099 . -8) (undo-tree-id8100 . -8) (undo-tree-id8101 . -8) (undo-tree-id8102 . -8) (undo-tree-id8103 . -8) (undo-tree-id8104 . -8) (undo-tree-id8105 . -8) (undo-tree-id8106 . -8) (undo-tree-id8107 . -8) (undo-tree-id8108 . -10) 2742 (t 26156 4306 540523 214000)) nil (26156 4311 32339 426000) 0 nil])
([nil nil ((#("	AnymapImage::pgm(vec, 255,
" 0 1 (fontified t) 1 12 (fontified t face font-lock-type-face) 12 14 (fontified t) 14 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 21 (fontified t) 21 28 (fontified t)) . 2629) (undo-tree-id8392 . -27) (undo-tree-id8393 . -18) (t 26156 4311 104626 189000)) nil (26156 4386 230943 459000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -2689) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (#("." 0 1 (fontified t)) . -2690) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (#("u" 0 1 (fontified t)) . -2691) (undo-tree-id8384 . -1) (#("n" 0 1 (fontified t)) . -2692) (undo-tree-id8385 . -1) (#("w" 0 1 (fontified t)) . -2693) (undo-tree-id8386 . -1) (#("r" 0 1 (fontified t)) . -2694) (undo-tree-id8387 . -1) (#("a" 0 1 (fontified t)) . -2695) (undo-tree-id8388 . -1) (#("p" 0 1 (fontified t)) . -2696) (undo-tree-id8389 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2697) (undo-tree-id8390 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2698) (undo-tree-id8391 . -1) 2699) nil (26156 4386 230930 707000) 0 nil])
([nil nil ((2636 . 2641) (2637 . 2638) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2636) (2636 . 2641) (2635 . 2637) (2633 . 2636) (2630 . 2633) (#("M" 0 1 (fontified nil)) . 2630) (2630 . 2631) (#("Map" 0 3 (fontified nil)) . -2630) (2630 . 2633) (#("M" 0 1 (fontified t face font-lock-type-face)) . -2630) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) 2631 (2630 . 2631) (2629 . 2630) (#("	" 0 1 (fontified nil)) . 2628) (undo-tree-id8379 . -1) (2629 . 2630) (2628 . 2629)) nil (26156 4386 230904 874000) 0 nil])
([nil nil ((2647 . 2649) (2641 . 2647) (#("hei" 0 3 (fontified nil)) . 2641) (2641 . 2644) (#("height" 0 6 (fontified nil)) . -2641) (2641 . 2647) (#("hei" 0 3 (fontified t)) . -2641) (undo-tree-id8375 . -3) (undo-tree-id8376 . -3) 2644 (2641 . 2644)) nil (26156 4386 230891 116000) 0 nil])
([nil nil ((#("max_point_y - min_point_y," 0 14 (fontified t) 14 25 (fontified t) 25 26 (fontified t)) . 2657) (undo-tree-id8371 . -25) (undo-tree-id8372 . -25) (undo-tree-id8373 . -25) (undo-tree-id8374 . -25)) nil (26156 4386 230882 649000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2674 . 2675) (nil fontified nil 2649 . 2675) (2649 . 2675) 2648) nil (26156 4386 230872 138000) 0 nil])
([nil nil ((2686 . 2688) (2681 . 2686) (#("wid" 0 3 (fontified nil)) . 2681) (2681 . 2684) (#("width" 0 5 (fontified nil)) . -2681) (2681 . 2686) (#("wid" 0 3 (fontified t)) . -2681) (undo-tree-id8369 . -3) (undo-tree-id8370 . -3) 2684 (2681 . 2684) (2675 . 2681)) nil (26156 4386 230867 442000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2712 . 2713) (nil fontified nil 2688 . 2713) (2688 . 2713) 2687) nil (26156 4386 230859 327000) 0 nil])
([nil nil ((#("			 max_point_x - min_point_x
" 0 4 (fontified t) 4 18 (fontified t) 18 29 (fontified t) 29 30 (fontified t)) . 2722) (undo-tree-id8174 . -29) (undo-tree-id8175 . -4) (undo-tree-id8176 . 1) (undo-tree-id8177 . -4) (undo-tree-id8178 . -28) (undo-tree-id8179 . -29) (undo-tree-id8180 . -22) (undo-tree-id8181 . -22) (undo-tree-id8182 . -3) (undo-tree-id8183 . -3) (undo-tree-id8184 . -3) (undo-tree-id8185 . -3) (undo-tree-id8186 . -3) (undo-tree-id8187 . -3) (undo-tree-id8188 . -3) (undo-tree-id8189 . -3) (undo-tree-id8190 . -3) (undo-tree-id8191 . -3) (undo-tree-id8192 . -3) (undo-tree-id8193 . -3) (undo-tree-id8194 . -3) (undo-tree-id8195 . -3) (undo-tree-id8196 . -3) (undo-tree-id8197 . -3) (undo-tree-id8198 . -3) (undo-tree-id8199 . -3) (undo-tree-id8200 . -3) (undo-tree-id8201 . -3) (undo-tree-id8202 . -3) (undo-tree-id8203 . -3) (undo-tree-id8204 . -3) (undo-tree-id8205 . -3) (undo-tree-id8206 . -3) (undo-tree-id8207 . -3) (undo-tree-id8208 . -3) (undo-tree-id8209 . -3) (undo-tree-id8210 . -3) (undo-tree-id8211 . -3) (undo-tree-id8212 . -3) (undo-tree-id8213 . -4) (undo-tree-id8214 . -4) (undo-tree-id8215 . -4) (undo-tree-id8216 . -4) (undo-tree-id8217 . -4) (undo-tree-id8218 . -4) (undo-tree-id8219 . -4) (undo-tree-id8220 . -4) (undo-tree-id8221 . -4) (undo-tree-id8222 . -4) (undo-tree-id8223 . -4) (undo-tree-id8224 . -4) (undo-tree-id8225 . -4) (undo-tree-id8226 . -4) (undo-tree-id8227 . -4) (undo-tree-id8228 . -4) (undo-tree-id8229 . -4) (undo-tree-id8230 . -4) (undo-tree-id8231 . -4) (undo-tree-id8232 . -4) (undo-tree-id8233 . -4) (undo-tree-id8234 . -4) (undo-tree-id8235 . -4) (undo-tree-id8236 . -4) (undo-tree-id8237 . -4) (undo-tree-id8238 . -4) (undo-tree-id8239 . -4) (undo-tree-id8240 . -4) (undo-tree-id8241 . -4) (undo-tree-id8242 . -4) (undo-tree-id8243 . -4) (undo-tree-id8244 . -4) (undo-tree-id8245 . -4) (undo-tree-id8246 . -4) (undo-tree-id8247 . -29) (undo-tree-id8248 . -29) (undo-tree-id8249 . -29) (undo-tree-id8250 . -29) (undo-tree-id8251 . -29) (undo-tree-id8252 . -29) (undo-tree-id8253 . -29) (undo-tree-id8254 . -29) (undo-tree-id8255 . -29) (undo-tree-id8256 . -29) (undo-tree-id8257 . -29) (undo-tree-id8258 . -29) (undo-tree-id8259 . -29) (undo-tree-id8260 . -29) (undo-tree-id8261 . -29) (undo-tree-id8262 . -29) (undo-tree-id8263 . -29) (undo-tree-id8264 . -29) (undo-tree-id8265 . -29) (undo-tree-id8266 . -29) (undo-tree-id8267 . -28) (undo-tree-id8268 . -28) (undo-tree-id8269 . -28) (undo-tree-id8270 . -28) (undo-tree-id8271 . -28) (undo-tree-id8272 . -28) (undo-tree-id8273 . -28) (undo-tree-id8274 . -28) (undo-tree-id8275 . -28) (undo-tree-id8276 . -28) (undo-tree-id8277 . -28) (undo-tree-id8278 . -28) (undo-tree-id8279 . -28) (undo-tree-id8280 . -28) (undo-tree-id8281 . -28) (undo-tree-id8282 . -28) (undo-tree-id8283 . -28) (undo-tree-id8284 . -28) (undo-tree-id8285 . -28) (undo-tree-id8286 . -28) (undo-tree-id8287 . -28) (undo-tree-id8288 . -28) (undo-tree-id8289 . -28) (undo-tree-id8290 . -28) (undo-tree-id8291 . -28) (undo-tree-id8292 . -28) (undo-tree-id8293 . -28) (undo-tree-id8294 . -28) (undo-tree-id8295 . -28) (undo-tree-id8296 . -28) (undo-tree-id8297 . -28) (undo-tree-id8298 . -28) (undo-tree-id8299 . -28) (undo-tree-id8300 . -28) (undo-tree-id8301 . -28) (undo-tree-id8302 . -28) (undo-tree-id8303 . -28) (undo-tree-id8304 . -28) (undo-tree-id8305 . -28) (undo-tree-id8306 . -28) (undo-tree-id8307 . -28) (undo-tree-id8308 . -28) (undo-tree-id8309 . -28) (undo-tree-id8310 . -4) (undo-tree-id8311 . -4) (undo-tree-id8312 . -4) (undo-tree-id8313 . -4) (undo-tree-id8314 . -4) (undo-tree-id8315 . -4) (undo-tree-id8316 . -4) (undo-tree-id8317 . -4) (undo-tree-id8318 . -4) (undo-tree-id8319 . -4) (undo-tree-id8320 . -4) (undo-tree-id8321 . -28) (undo-tree-id8322 . -22) (undo-tree-id8323 . -22) (undo-tree-id8324 . -22) (undo-tree-id8325 . -22) (undo-tree-id8326 . -22) (undo-tree-id8327 . -22) (undo-tree-id8328 . -22) (undo-tree-id8329 . -22) (undo-tree-id8330 . -22) (undo-tree-id8331 . -22) (undo-tree-id8332 . -22) (undo-tree-id8333 . -22) (undo-tree-id8334 . -22) (undo-tree-id8335 . -22) (undo-tree-id8336 . -22) (undo-tree-id8337 . -22) (undo-tree-id8338 . -22) (undo-tree-id8339 . -22) (undo-tree-id8340 . -22) (undo-tree-id8341 . -22) (undo-tree-id8342 . -18) (undo-tree-id8343 . -29) (undo-tree-id8344 . -22) (undo-tree-id8345 . -22) (undo-tree-id8346 . -22) (undo-tree-id8347 . -22) (undo-tree-id8348 . -22) (undo-tree-id8349 . -22) (undo-tree-id8350 . -22) (undo-tree-id8351 . -22) (undo-tree-id8352 . -22) (undo-tree-id8353 . -22) (undo-tree-id8354 . -22) (undo-tree-id8355 . -22) (undo-tree-id8356 . -22) (undo-tree-id8357 . -22) (undo-tree-id8358 . -22) (undo-tree-id8359 . -22) (undo-tree-id8360 . -22) (undo-tree-id8361 . -22) (undo-tree-id8362 . -22) (undo-tree-id8363 . -22) (undo-tree-id8364 . -22) (undo-tree-id8365 . -22) (undo-tree-id8366 . -22) (undo-tree-id8367 . -22) (undo-tree-id8368 . -30) 2744) nil (26156 4386 230838 822000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2714) (undo-tree-id8162 . -2) (undo-tree-id8163 . -2) (undo-tree-id8164 . -2) (undo-tree-id8165 . -2) (undo-tree-id8166 . -2) (undo-tree-id8167 . -2) (undo-tree-id8168 . -2) (undo-tree-id8169 . -2) (undo-tree-id8170 . -2) (undo-tree-id8171 . -2) (undo-tree-id8172 . -2) (undo-tree-id8173 . -2) 2716 (2713 . 2716)) nil (26156 4386 230265 1000) 0 nil])
([nil nil ((2728 . 2731) (#("v" 0 1 (fontified nil)) . 2728) (2728 . 2729) (#("vec" 0 3 (fontified nil)) . -2728) (2728 . 2731) (#("v" 0 1 (fontified t)) . -2728) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) 2729 (2726 . 2729) (2720 . 2726) (#("buf" 0 3 (fontified nil)) . 2720) (2720 . 2723) (#("buffer" 0 6 (fontified nil)) . -2720) (2720 . 2726) (#("buf" 0 3 (fontified t)) . -2720) (undo-tree-id8160 . -3) (undo-tree-id8161 . -3) 2723 (2720 . 2723) (2714 . 2720) (2713 . 2714)) nil (26156 4386 230228 467000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2732) (undo-tree-id8394 . -1) (t 26156 4386 301764 835000)) nil (26156 4389 296202 916000) 0 nil])
([nil nil ((#("			 
" 0 4 (fontified t) 4 5 (fontified t)) . 2735) (undo-tree-id8401 . -4) (undo-tree-id8402 . -5) (undo-tree-id8403 . -5) (undo-tree-id8404 . -5) (undo-tree-id8405 . -4) (undo-tree-id8406 . -5) (t 26156 4389 365272 714000)) nil (26156 4407 805582 938000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2735) (undo-tree-id8400 . 1)) nil (26156 4407 805569 667000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2735) (undo-tree-id8399 . 1)) nil (26156 4407 805565 965000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2735) (undo-tree-id8397 . -1) (undo-tree-id8398 . 2)) nil (26156 4407 805560 139000) 0 nil])
([nil nil ((#("	
" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t)) . 2735) (undo-tree-id8395 . -1) (undo-tree-id8396 . 2)) nil (26156 4407 805545 970000) 0 nil])
([nil nil ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 3318) (undo-tree-id8412 . -2) (undo-tree-id8413 . -3) (t 26156 4407 874362 561000)) nil (26156 4414 408346 813000) 0 nil])
([nil nil ((#("//	    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-delimiter-face)) . 3318) (undo-tree-id8407 . -6) (undo-tree-id8408 . -7) (undo-tree-id8409 . -7) (undo-tree-id8410 . -7) (undo-tree-id8411 . -7)) nil (26156 4414 408331 987000) 0 nil])
([nil nil ((3347 . 3348) (#("i" 0 1 (fontified t)) . 3347) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (t 26156 4414 477350 179000)) nil (26156 4422 49464 260000) 0 nil])
([nil nil ((3350 . 3351) (#("j" 0 1 (fontified t)) . 3350) (undo-tree-id8414 . -1)) nil (26156 4422 49450 529000) 0 nil])
([nil nil ((apply 3 3575 3659 undo--wrap-and-run-primitive-undo 3575 3659 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -3579) 3575)) (t 26156 4422 124194 277000)) nil (26156 4437 916136 635000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3632) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1)) nil (26156 4437 916133 738000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 3632) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1)) nil (26156 4437 916127 496000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3641) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1)) nil (26156 4437 916120 355000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 3641) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1)) nil (26156 4437 916107 17000) 0 nil])
([nil nil ((apply 3 3658 3733 undo--wrap-and-run-primitive-undo 3658 3733 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -3659) 3658)) (t 26156 4437 985852 274000)) nil (26156 4440 475139 590000) 0 nil])
([nil nil ((apply -26 3448 3577 undo--wrap-and-run-primitive-undo 3448 3577 ((3571 . 3574) (3549 . 3552) (3549 . 3550) (#("	" 0 1 (fontified t)) . 3549) (3545 . 3549) (3532 . 3535) (3510 . 3513) (3510 . 3511) (#("	" 0 1 (fontified t)) . 3510) (3506 . 3510) (3483 . 3486) (3453 . 3456) 3448)) (t 26156 4440 545481 292000)) nil (26156 4489 170613 378000) 0 nil])
([nil nil ((3581 . 3583) (t 26156 4489 242773 42000)) nil (26156 4495 51049 310000) 0 nil])
([nil nil ((3365 . 3367) (#("." 0 1 (fontified t)) . -3365) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (#("." 0 1 (fontified t)) . -3366) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) 3367 (3365 . 3367) (t 26156 4495 122006 550000)) nil (26156 4506 141389 662000) 0 nil])
([nil nil ((#("width " 0 5 (fontified t) 5 6 (fontified t)) . 3657) (undo-tree-id8669 . -5) (undo-tree-id8670 . -6) (undo-tree-id8671 . -6) (undo-tree-id8672 . -6) (undo-tree-id8673 . -6) (undo-tree-id8674 . -6) (undo-tree-id8675 . -6) (undo-tree-id8676 . -6) (undo-tree-id8677 . -6) (undo-tree-id8678 . -6) (undo-tree-id8679 . -6) (t 26156 4506 216584 556000)) nil (26156 4575 193103 707000) 0 nil])
([nil nil ((3657 . 3663) (#("hei" 0 3 (fontified nil)) . 3657) (3657 . 3660) (#("height" 0 6 (fontified nil)) . -3657) (3657 . 3663) (#("hei" 0 3 (fontified t)) . -3657) (undo-tree-id8582 . -3) (undo-tree-id8583 . -3) (undo-tree-id8584 . -2) (undo-tree-id8585 . -2) (undo-tree-id8586 . -2) (undo-tree-id8587 . -2) (undo-tree-id8588 . -2) (undo-tree-id8589 . -2) (undo-tree-id8590 . -2) (undo-tree-id8591 . -2) (undo-tree-id8592 . -2) (undo-tree-id8593 . -3) (undo-tree-id8594 . -3) (undo-tree-id8595 . -3) (undo-tree-id8596 . -3) (undo-tree-id8597 . -3) (undo-tree-id8598 . -3) (undo-tree-id8599 . -3) (undo-tree-id8600 . -3) (undo-tree-id8601 . -3) (undo-tree-id8602 . -3) (undo-tree-id8603 . -3) (undo-tree-id8604 . -3) (undo-tree-id8605 . -3) (undo-tree-id8606 . -3) (undo-tree-id8607 . -3) (undo-tree-id8608 . -3) (undo-tree-id8609 . -3) (undo-tree-id8610 . -3) (undo-tree-id8611 . -3) (undo-tree-id8612 . -3) (undo-tree-id8613 . -3) (undo-tree-id8614 . -3) (undo-tree-id8615 . -3) (undo-tree-id8616 . -3) (undo-tree-id8617 . -3) (undo-tree-id8618 . -3) (undo-tree-id8619 . -3) (undo-tree-id8620 . -3) (undo-tree-id8621 . -3) (undo-tree-id8622 . -3) (undo-tree-id8623 . -3) (undo-tree-id8624 . -3) (undo-tree-id8625 . -3) (undo-tree-id8626 . -3) (undo-tree-id8627 . -3) (undo-tree-id8628 . -3) (undo-tree-id8629 . -3) (undo-tree-id8630 . -3) (undo-tree-id8631 . -3) (undo-tree-id8632 . -3) (undo-tree-id8633 . -3) (undo-tree-id8634 . -3) (undo-tree-id8635 . -3) (undo-tree-id8636 . -3) (undo-tree-id8637 . -3) (undo-tree-id8638 . -3) (undo-tree-id8639 . -3) (undo-tree-id8640 . -3) (undo-tree-id8641 . -3) (undo-tree-id8642 . -3) (undo-tree-id8643 . -3) (undo-tree-id8644 . -3) (undo-tree-id8645 . -3) (undo-tree-id8646 . -3) (undo-tree-id8647 . -3) (undo-tree-id8648 . -3) (undo-tree-id8649 . -3) (undo-tree-id8650 . -3) (undo-tree-id8651 . -3) (undo-tree-id8652 . -3) (undo-tree-id8653 . -3) (undo-tree-id8654 . -3) (undo-tree-id8655 . -3) (undo-tree-id8656 . -3) (undo-tree-id8657 . -3) (undo-tree-id8658 . -3) (undo-tree-id8659 . -3) (undo-tree-id8660 . -3) (undo-tree-id8661 . -3) (undo-tree-id8662 . -3) (undo-tree-id8663 . -3) (undo-tree-id8664 . -3) (undo-tree-id8665 . -3) (undo-tree-id8666 . -3) (undo-tree-id8667 . -3) (undo-tree-id8668 . -3) 3660 (3657 . 3660)) nil (26156 4575 193071 460000) 0 nil])
([nil nil ((#("height " 0 7 (fontified t)) . 3665) (undo-tree-id8580 . -6) (undo-tree-id8581 . -7)) nil (26156 4575 192908 291000) 0 nil])
([nil nil ((3668 . 3670) (3665 . 3668)) nil (26156 4575 192880 239000) 0 nil])
([nil nil ((2756 . 2761) (2749 . 2757) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -2749) (undo-tree-id8704 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -2750) (undo-tree-id8705 . -1) 2751 (2746 . 2751) (2742 . 2746) (#("    " 0 4 (fontified nil)) . 2741) (undo-tree-id8706 . -4) (2740 . 2746) (t 26156 4575 240415 478000)) nil (26156 4685 537384 105000) 0 nil])
([nil nil ((2780 . 2781) (2781 . 2785) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2780) (2780 . 2781) (2779 . 2781) (2777 . 2780) (2766 . 2777) (#("A" 0 1 (fontified nil)) . 2766) (2766 . 2767) (#("AnymapImage" 0 11 (fontified nil)) . -2766) (2766 . 2777) (#("A" 0 1 (fontified t face font-lock-type-face)) . -2766) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) 2767 (2763 . 2767) (2762 . 2763)) nil (26156 4685 537370 223000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2782) (undo-tree-id8699 . -1) 2783 (2782 . 2783) (#("	" 0 1 (fontified nil)) . 2781) (undo-tree-id8700 . -1) (2781 . 2783) (#("	" 0 1 (fontified nil)) . 2780) (undo-tree-id8701 . -1) (2781 . 2782)) nil (26156 4685 537357 331000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3454 . 3455) (nil fontified nil 2781 . 3455) (2781 . 3455)) nil (26156 4685 537347 727000) 0 nil])
([nil nil ((#("//	    let data =  map_data.get(j, i).unwrap();// buff.get(i * width + j).unwrap();

	    // let thing: u8 = 200;

	    // if  data < thing {
	    // 	print!(\" \");
	    // } else {
	    // 	print!(\"#\");
	    // }


	}
/" 0 7 (fontified t face font-lock-comment-delimiter-face) 7 84 (fontified t face font-lock-comment-face) 84 90 (fontified t) 90 93 (fontified t face font-lock-comment-delimiter-face) 93 114 (fontified t face font-lock-comment-face) 114 120 (fontified t) 120 123 (fontified t face font-lock-comment-delimiter-face) 123 132 (fontified t face font-lock-comment-face) 132 133 (fontified t syntax-table (1) face font-lock-comment-face) 133 142 (fontified t face font-lock-comment-face) 142 147 (fontified t) 147 151 (fontified t face font-lock-comment-delimiter-face) 151 164 (fontified t face font-lock-comment-face) 164 169 (fontified t) 169 172 (fontified t face font-lock-comment-delimiter-face) 172 181 (fontified t face font-lock-comment-face) 181 186 (fontified t) 186 190 (fontified t face font-lock-comment-delimiter-face) 190 203 (fontified t face font-lock-comment-face) 203 208 (fontified t) 208 211 (fontified t face font-lock-comment-delimiter-face) 211 213 (fontified t face font-lock-comment-face) 213 216 (fontified t) 216 217 (fontified t face (rainbow-delimiters-depth-4-face)) 217 218 (fontified t) 218 219 (fontified t face font-lock-comment-delimiter-face)) . 3063) (undo-tree-id8695 . -218) (undo-tree-id8696 . -218) (undo-tree-id8697 . -218) (undo-tree-id8698 . -218)) nil (26156 4685 537343 806000) 0 nil])
([nil nil ((#("	//     println!(\"{i}, {j}\");
" 0 1 (fontified t) 1 8 (fontified t face font-lock-comment-delimiter-face) 8 30 (fontified t face font-lock-comment-face)) . 2981) (undo-tree-id8694 . -29)) nil (26156 4685 537332 247000) 0 nil])
([nil nil ((#("/	println!();
" 0 2 (fontified t) 2 10 (fontified t face rust-builtin-formatting-macro) 10 11 (fontified t face (rainbow-delimiters-depth-5-face)) 11 12 (fontified t face (rainbow-delimiters-depth-5-face)) 12 14 (fontified t)) . 3033) (undo-tree-id8680 . -13) (undo-tree-id8681 . 14) (undo-tree-id8682 . -1) (undo-tree-id8683 . -14) (undo-tree-id8684 . -14) (undo-tree-id8685 . -14) (undo-tree-id8686 . -14) (undo-tree-id8687 . -14) (undo-tree-id8688 . -14) (undo-tree-id8689 . -14) (undo-tree-id8690 . -14) (undo-tree-id8691 . -14) (undo-tree-id8692 . -14) (undo-tree-id8693 . -14)) nil (26156 4685 537318 301000) 0 nil])
([nil nil ((#("    dbg!(height);
    dbg!(width);
    dbg!(map_data.get(379, 523));


" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 22 (fontified t) 22 26 (fontified t face font-lock-preprocessor-face) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 39 (fontified t) 39 43 (fontified t face font-lock-preprocessor-face) 43 44 (fontified t face (rainbow-delimiters-depth-3-face)) 44 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-4-face)) 57 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-4-face)) 66 67 (fontified t face (rainbow-delimiters-depth-3-face)) 67 71 (fontified t)) . 2829) (undo-tree-id8707 . -70) (undo-tree-id8708 . -70) (undo-tree-id8709 . -70) (undo-tree-id8710 . -71) (undo-tree-id8711 . -71) (undo-tree-id8712 . -71) (undo-tree-id8713 . -71) (undo-tree-id8714 . -71) (undo-tree-id8715 . -71) (undo-tree-id8716 . -71) (undo-tree-id8717 . -71) (undo-tree-id8718 . -71) (undo-tree-id8719 . -71) (undo-tree-id8720 . -71) (undo-tree-id8721 . -71) (undo-tree-id8722 . -71) (undo-tree-id8723 . -71) (undo-tree-id8724 . -71) (undo-tree-id8725 . -71) (undo-tree-id8726 . -71) (undo-tree-id8727 . -71) (undo-tree-id8728 . -71) (undo-tree-id8729 . -71) (undo-tree-id8730 . -71) (undo-tree-id8731 . -71) (undo-tree-id8732 . -71) (undo-tree-id8733 . -71) (undo-tree-id8734 . -71) (undo-tree-id8735 . -71) (undo-tree-id8736 . -71) (undo-tree-id8737 . -71) (undo-tree-id8738 . -71) (undo-tree-id8739 . -71) (undo-tree-id8740 . -71) (undo-tree-id8741 . -70) (undo-tree-id8742 . -70) (undo-tree-id8743 . -70) (undo-tree-id8744 . -70) (undo-tree-id8745 . -70) (undo-tree-id8746 . -70) (undo-tree-id8747 . -70) (undo-tree-id8748 . -70) (undo-tree-id8749 . -70) (undo-tree-id8750 . -71) (undo-tree-id8751 . -70) (undo-tree-id8752 . -70) (undo-tree-id8753 . -70) (undo-tree-id8754 . -70) (undo-tree-id8755 . -70) (undo-tree-id8756 . -70) (undo-tree-id8757 . -70) (undo-tree-id8758 . -70) (undo-tree-id8759 . -70) (undo-tree-id8760 . -70) (undo-tree-id8761 . -70) (undo-tree-id8762 . -70) (undo-tree-id8763 . -69) (undo-tree-id8764 . -69) (undo-tree-id8765 . -69) (undo-tree-id8766 . -69) (undo-tree-id8767 . -69) (undo-tree-id8768 . -69) (undo-tree-id8769 . -69) (undo-tree-id8770 . -69) (undo-tree-id8771 . -69) (undo-tree-id8772 . -35) (undo-tree-id8773 . -35) (undo-tree-id8774 . -35) (undo-tree-id8775 . -35) (undo-tree-id8776 . -35) (undo-tree-id8777 . -35) (undo-tree-id8778 . -35) (undo-tree-id8779 . -35) (undo-tree-id8780 . -35) (undo-tree-id8781 . -18) (undo-tree-id8782 . -18) (undo-tree-id8783 . -18) (undo-tree-id8784 . -18) (undo-tree-id8785 . -18) (undo-tree-id8786 . -18) (undo-tree-id8787 . -18) (undo-tree-id8788 . -18) (undo-tree-id8789 . -18) (undo-tree-id8790 . -71) (t 26156 4685 609500 911000)) nil (26156 4690 231786 921000) 0 nil])
([nil nil ((#("    newimage.write_as_binary(\"data.pbm\").expect(\"couldn't write bitch\");
" 0 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-4-face)) 29 39 (fontified t face font-lock-string-face) 39 40 (fontified t face (rainbow-delimiters-depth-4-face)) 40 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 70 (fontified t face font-lock-string-face) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 73 (fontified t)) . 3047) (undo-tree-id8791 . -72) (undo-tree-id8792 . -51) (undo-tree-id8793 . -51) (undo-tree-id8794 . -51) (undo-tree-id8795 . -51) (undo-tree-id8796 . -51) (undo-tree-id8797 . -51) (undo-tree-id8798 . -51) (undo-tree-id8799 . -51) (undo-tree-id8800 . -51) (undo-tree-id8801 . -51) (undo-tree-id8802 . -51) (undo-tree-id8803 . -51) (undo-tree-id8804 . -51) (undo-tree-id8805 . -51) (undo-tree-id8806 . -51) (undo-tree-id8807 . -51) (undo-tree-id8808 . -51) (undo-tree-id8809 . -51) (undo-tree-id8810 . -51) (undo-tree-id8811 . -51) (undo-tree-id8812 . -51) (undo-tree-id8813 . -51) (undo-tree-id8814 . -51) (undo-tree-id8815 . -51) (undo-tree-id8816 . -51) (undo-tree-id8817 . -51) (undo-tree-id8818 . -51) (undo-tree-id8819 . -51) (undo-tree-id8820 . -51) (undo-tree-id8821 . -51) (undo-tree-id8822 . -51) (undo-tree-id8823 . -51) (undo-tree-id8824 . -51) (undo-tree-id8825 . -51) (undo-tree-id8826 . -51) (undo-tree-id8827 . -51) (undo-tree-id8828 . -51) (undo-tree-id8829 . -51) (undo-tree-id8830 . -51) (undo-tree-id8831 . -51) (undo-tree-id8832 . -51) (undo-tree-id8833 . -51) (undo-tree-id8834 . -51) (undo-tree-id8835 . -51) (undo-tree-id8836 . -51) (undo-tree-id8837 . -51) (undo-tree-id8838 . -73) 3098 (t 26156 4690 301088 822000)) nil (26156 4707 750203 370000) 0 nil])
([nil nil ((3021 . 3026)) nil (26156 4707 750104 885000) 0 nil])
([nil nil ((3034 . 3039)) nil (26156 4707 750094 311000) 0 nil])
([nil nil ((2881 . 2886) (t 26156 4707 823584 1000)) nil (26156 4717 593956 193000) 0 nil])
([nil nil ((2907 . 2912)) nil (26156 4717 593944 521000) 0 nil])
([nil nil ((3068 . 3069) (t 26156 4717 638764 214000)) nil (26156 4740 502218 3000) 0 nil])
([nil nil ((2865 . 2866) (#("    " 0 4 (fontified t)) . 2865)) nil (26156 4740 502215 538000) 0 nil])
([nil nil ((2892 . 2896)) nil (26156 4740 502213 523000) 0 nil])
([nil nil ((2920 . 2922)) nil (26156 4740 502212 75000) 0 nil])
([nil nil ((2924 . 2925) (#("    " 0 4 (fontified t)) . 2924)) nil (26156 4740 502210 300000) 0 nil])
([nil nil ((2971 . 2973)) nil (26156 4740 502208 198000) 0 nil])
([nil nil ((2974 . 2979) (#("    " 0 4 (fontified t)) . 2974) (undo-tree-id8994 . -4) 2978) nil (26156 4740 502206 169000) 0 nil])
([nil nil ((2981 . 2986)) nil (26156 4740 502202 445000) 0 nil])
([nil nil ((2987 . 2992) (#("    " 0 4 (fontified t)) . 2987) 2998) nil (26156 4740 502200 323000) 0 nil])
([nil nil ((3075 . 3080)) nil (26156 4740 502197 876000) 0 nil])
([nil nil ((3081 . 3086)) nil (26156 4740 502196 309000) 0 nil])
([nil nil ((2827 . 2828)) nil (26156 4740 502194 778000) 0 nil])
([nil nil ((2781 . 2782) (#("    " 0 4 (fontified t)) . 2781)) nil (26156 4740 502192 911000) 0 nil])
([nil nil ((2826 . 2827)) nil (26156 4740 502190 780000) 0 nil])
([nil nil ((2828 . 2829) (#("    " 0 4 (fontified t)) . 2828) (undo-tree-id8993 . 4)) nil (26156 4740 502188 266000) 0 nil])
([nil nil ((2858 . 2859)) nil (26156 4740 502184 364000) 0 nil])
([nil nil ((2860 . 2861) (#(" " 0 1 (fontified t)) . 2860)) nil (26156 4740 502182 59000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -2979) (undo-tree-id8918 . -4) (undo-tree-id8919 . -3) (undo-tree-id8920 . -3) (undo-tree-id8921 . -3) (undo-tree-id8922 . -3) (undo-tree-id8923 . -3) (undo-tree-id8924 . -3) (undo-tree-id8925 . -3) (undo-tree-id8926 . -3) (undo-tree-id8927 . -3) (undo-tree-id8928 . -3) (undo-tree-id8929 . -3) (undo-tree-id8930 . -3) (undo-tree-id8931 . -3) (undo-tree-id8932 . -3) (undo-tree-id8933 . -3) (undo-tree-id8934 . -3) (undo-tree-id8935 . -3) (undo-tree-id8936 . -3) (undo-tree-id8937 . -3) (undo-tree-id8938 . -3) (undo-tree-id8939 . -3) (undo-tree-id8940 . -3) (undo-tree-id8941 . -3) (undo-tree-id8942 . -3) (undo-tree-id8943 . -3) (undo-tree-id8944 . -3) (undo-tree-id8945 . -3) (undo-tree-id8946 . -3) (undo-tree-id8947 . -3) (undo-tree-id8948 . -3) (undo-tree-id8949 . -3) (undo-tree-id8950 . -3) (undo-tree-id8951 . -3) (undo-tree-id8952 . -3) (undo-tree-id8953 . -3) (undo-tree-id8954 . -3) (undo-tree-id8955 . -3) (undo-tree-id8956 . -3) (undo-tree-id8957 . -3) (undo-tree-id8958 . -3) (undo-tree-id8959 . -4) (undo-tree-id8960 . -4) (undo-tree-id8961 . -4) (undo-tree-id8962 . -4) (undo-tree-id8963 . -4) (undo-tree-id8964 . -4) (undo-tree-id8965 . -4) (undo-tree-id8966 . -4) (undo-tree-id8967 . -4) (undo-tree-id8968 . -4) (undo-tree-id8969 . -4) (undo-tree-id8970 . -4) (undo-tree-id8971 . -4) (undo-tree-id8972 . -4) (undo-tree-id8973 . -4) (undo-tree-id8974 . -4) (undo-tree-id8975 . -4) (undo-tree-id8976 . -4) (undo-tree-id8977 . -4) (undo-tree-id8978 . -4) (undo-tree-id8979 . -4) (undo-tree-id8980 . -4) (undo-tree-id8981 . -4) (undo-tree-id8982 . -4) (undo-tree-id8983 . -4) (undo-tree-id8984 . -4) (undo-tree-id8985 . -4) (undo-tree-id8986 . -4) (undo-tree-id8987 . -4) (undo-tree-id8988 . -4) (undo-tree-id8989 . -4) (undo-tree-id8990 . -4) (undo-tree-id8991 . -4) (undo-tree-id8992 . -4) (2983 . 2984) (#("}" 0 1 (fontified nil)) . -2983) (2983 . 2984)) nil (26156 4740 502171 934000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2982) (undo-tree-id8865 . -4) (undo-tree-id8866 . -4) (undo-tree-id8867 . -4) (undo-tree-id8868 . -4) (undo-tree-id8869 . -4) (undo-tree-id8870 . -4) (undo-tree-id8871 . -4) (undo-tree-id8872 . -4) (undo-tree-id8873 . -4) (undo-tree-id8874 . -4) (undo-tree-id8875 . -3) (undo-tree-id8876 . -3) (undo-tree-id8877 . -3) (undo-tree-id8878 . -3) (undo-tree-id8879 . -3) (undo-tree-id8880 . -3) (undo-tree-id8881 . -3) (undo-tree-id8882 . -3) (undo-tree-id8883 . -3) (undo-tree-id8884 . -4) (undo-tree-id8885 . -4) (undo-tree-id8886 . -4) (undo-tree-id8887 . -4) (undo-tree-id8888 . -4) (undo-tree-id8889 . -4) (undo-tree-id8890 . -4) (undo-tree-id8891 . -4) (undo-tree-id8892 . -4) (undo-tree-id8893 . -4) (undo-tree-id8894 . -4) (undo-tree-id8895 . -4) (undo-tree-id8896 . -4) (undo-tree-id8897 . -4) (undo-tree-id8898 . -4) (undo-tree-id8899 . -4) (undo-tree-id8900 . -4) (undo-tree-id8901 . -4) (undo-tree-id8902 . -4) (undo-tree-id8903 . -4) (undo-tree-id8904 . -4) (undo-tree-id8905 . -4) (undo-tree-id8906 . -4) (undo-tree-id8907 . -4) (undo-tree-id8908 . -4) (undo-tree-id8909 . -4) (undo-tree-id8910 . -4) (undo-tree-id8911 . -4) (undo-tree-id8912 . -4) (undo-tree-id8913 . -4) (undo-tree-id8914 . -4) (undo-tree-id8915 . -4) (undo-tree-id8916 . -4) (undo-tree-id8917 . -4)) nil (26156 4740 502038 182000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2982) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) 2983 (2982 . 2983) (#("	" 0 1 (fontified nil)) . 2981) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (2980 . 2983)) nil (26156 4740 501936 46000) 0 nil])
([nil nil ((3080 . 3088) (#("new" 0 3 (fontified nil)) . 3080) (3080 . 3083) (#("newimage" 0 8 (fontified nil)) . -3080) (3080 . 3088) (#("new" 0 3 (fontified t)) . -3080) (undo-tree-id8995 . -3) (undo-tree-id8996 . -3) (undo-tree-id8997 . -3) 3083 (3080 . 3083) (t 26156 4740 572911 341000)) nil (26156 4744 810419 936000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 2938) (undo-tree-id9030 . -2) (t 26156 4744 884572 554000)) nil (26156 4760 117451 683000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2938)) nil (26156 4760 117447 535000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . 2938) (undo-tree-id9029 . -3)) nil (26156 4760 117445 278000) 0 nil])
([nil nil ((2938 . 2942)) nil (26156 4760 117440 372000) 0 nil])
([nil nil ((#("	let buff = cat.get_buffer();
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 9 (fontified t face font-lock-variable-name-face) 9 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 30 (fontified t)) . 2828) (undo-tree-id8998 . -29) (undo-tree-id8999 . 29) (undo-tree-id9000 . -28) (undo-tree-id9001 . -28) (undo-tree-id9002 . -12) (undo-tree-id9003 . -15) (undo-tree-id9004 . -28) (undo-tree-id9005 . -28) (undo-tree-id9006 . -28) (undo-tree-id9007 . -28) (undo-tree-id9008 . -28) (undo-tree-id9009 . -28) (undo-tree-id9010 . -28) (undo-tree-id9011 . -28) (undo-tree-id9012 . -28) (undo-tree-id9013 . -28) (undo-tree-id9014 . -28) (undo-tree-id9015 . -28) (undo-tree-id9016 . -28) (undo-tree-id9017 . -28) (undo-tree-id9018 . -28) (undo-tree-id9019 . -28) (undo-tree-id9020 . -28) (undo-tree-id9021 . -28) (undo-tree-id9022 . -28) (undo-tree-id9023 . -28) (undo-tree-id9024 . -28) (undo-tree-id9025 . -28) (undo-tree-id9026 . -28) (undo-tree-id9027 . -28) (undo-tree-id9028 . -30) 2856) nil (26156 4760 117428 363000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2828) (undo-tree-id9184 . -1) (undo-tree-id9185 . 2) (undo-tree-id9186 . -2) (undo-tree-id9187 . -2) (undo-tree-id9188 . -2) (undo-tree-id9189 . -2) (undo-tree-id9190 . -2) (undo-tree-id9191 . -2) (undo-tree-id9192 . -2) (undo-tree-id9193 . -2) (undo-tree-id9194 . -2) (undo-tree-id9195 . -2) (undo-tree-id9196 . -2) (undo-tree-id9197 . -2) (undo-tree-id9198 . -2) (undo-tree-id9199 . -2) (undo-tree-id9200 . -2) (undo-tree-id9201 . -2) (undo-tree-id9202 . -2) (undo-tree-id9203 . -2) (undo-tree-id9204 . -2) (t 26156 4760 191393 656000)) nil (26156 4767 63505 698000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2826) (undo-tree-id9031 . -2) (undo-tree-id9032 . -1) (undo-tree-id9033 . -2) (undo-tree-id9034 . -2) (undo-tree-id9035 . -2) (undo-tree-id9036 . -2) (undo-tree-id9037 . -2) (undo-tree-id9038 . -2) (undo-tree-id9039 . -2) (undo-tree-id9040 . -2) (undo-tree-id9041 . -2) (undo-tree-id9042 . -2) (undo-tree-id9043 . -2) (undo-tree-id9044 . -2) (undo-tree-id9045 . -2) (undo-tree-id9046 . -2) (undo-tree-id9047 . -2) (undo-tree-id9048 . -2) (undo-tree-id9049 . -2) (undo-tree-id9050 . -2) (undo-tree-id9051 . -2) (undo-tree-id9052 . -2) (undo-tree-id9053 . -2) (undo-tree-id9054 . -2) (undo-tree-id9055 . -2) (undo-tree-id9056 . -2) (undo-tree-id9057 . -2) (undo-tree-id9058 . -2) (undo-tree-id9059 . -2) (undo-tree-id9060 . -2) (undo-tree-id9061 . -2) (undo-tree-id9062 . -2) (undo-tree-id9063 . -2) (undo-tree-id9064 . -2) (undo-tree-id9065 . -2) (undo-tree-id9066 . -2) (undo-tree-id9067 . -2) (undo-tree-id9068 . -2) (undo-tree-id9069 . -2) (undo-tree-id9070 . -2) (undo-tree-id9071 . -2) (undo-tree-id9072 . -2) (undo-tree-id9073 . -2) (undo-tree-id9074 . -2) (undo-tree-id9075 . -2) (undo-tree-id9076 . -2) (undo-tree-id9077 . -2) (undo-tree-id9078 . -2) (undo-tree-id9079 . -2) (undo-tree-id9080 . -2) (undo-tree-id9081 . -2) (undo-tree-id9082 . -2) (undo-tree-id9083 . -2) (undo-tree-id9084 . -2) (undo-tree-id9085 . -2) (undo-tree-id9086 . -2) (undo-tree-id9087 . -2) (undo-tree-id9088 . -2) (undo-tree-id9089 . -2) (undo-tree-id9090 . -2) (undo-tree-id9091 . -2) (undo-tree-id9092 . -2) (undo-tree-id9093 . -2) (undo-tree-id9094 . -2) (undo-tree-id9095 . -2) (undo-tree-id9096 . -2) (undo-tree-id9097 . -2) (undo-tree-id9098 . -2) (undo-tree-id9099 . -2) (undo-tree-id9100 . -2) (undo-tree-id9101 . -2) (undo-tree-id9102 . -2) (undo-tree-id9103 . -2) (undo-tree-id9104 . -2) (undo-tree-id9105 . -2) (undo-tree-id9106 . -2) (undo-tree-id9107 . -2) (undo-tree-id9108 . -2) (undo-tree-id9109 . -2) (undo-tree-id9110 . -2) (undo-tree-id9111 . -2) (undo-tree-id9112 . -2) (undo-tree-id9113 . -2) (undo-tree-id9114 . -2) (undo-tree-id9115 . -2) (undo-tree-id9116 . -2) (undo-tree-id9117 . -2) (undo-tree-id9118 . -2) (undo-tree-id9119 . -2) (undo-tree-id9120 . -2) (undo-tree-id9121 . -2) (undo-tree-id9122 . -2) (undo-tree-id9123 . -2) (undo-tree-id9124 . -2) (undo-tree-id9125 . -2) (undo-tree-id9126 . -2) (undo-tree-id9127 . -2) (undo-tree-id9128 . -2) (undo-tree-id9129 . -2) (undo-tree-id9130 . -2) (undo-tree-id9131 . -2) (undo-tree-id9132 . -2) (undo-tree-id9133 . -2) (undo-tree-id9134 . -2) (undo-tree-id9135 . -2) (undo-tree-id9136 . -2) (undo-tree-id9137 . -2) (undo-tree-id9138 . -2) (undo-tree-id9139 . -2) (undo-tree-id9140 . -2) (undo-tree-id9141 . -2) (undo-tree-id9142 . -2) (undo-tree-id9143 . -2) (undo-tree-id9144 . -2) (undo-tree-id9145 . -2) (undo-tree-id9146 . -2) (undo-tree-id9147 . -2) (undo-tree-id9148 . -2) (undo-tree-id9149 . -2) (undo-tree-id9150 . -2) (undo-tree-id9151 . -2) (undo-tree-id9152 . -2) (undo-tree-id9153 . -2) (undo-tree-id9154 . -2) (undo-tree-id9155 . -2) (undo-tree-id9156 . -2) (undo-tree-id9157 . -2) (undo-tree-id9158 . -2) (undo-tree-id9159 . -2) (undo-tree-id9160 . -2) (undo-tree-id9161 . -2) (undo-tree-id9162 . -2) (undo-tree-id9163 . -2) (undo-tree-id9164 . -2) (undo-tree-id9165 . -2) (undo-tree-id9166 . -2) (undo-tree-id9167 . -2) (undo-tree-id9168 . -2) (undo-tree-id9169 . -2) (undo-tree-id9170 . -2) (undo-tree-id9171 . -2) (undo-tree-id9172 . -2) (undo-tree-id9173 . -2) (undo-tree-id9174 . -2) (undo-tree-id9175 . -2) (undo-tree-id9176 . -2) (undo-tree-id9177 . -2) (undo-tree-id9178 . -2) (undo-tree-id9179 . -2) (undo-tree-id9180 . -2) (undo-tree-id9181 . -2) (undo-tree-id9182 . -2) (undo-tree-id9183 . -2)) nil (26156 4767 63447 964000) 0 nil])
([nil nil ((apply -42 3553 3964 undo--wrap-and-run-primitive-undo 3553 3964 ((3954 . 3957) (3936 . 3939) (3930 . 3933) (3915 . 3918) (3890 . 3893) (3870 . 3873) (3845 . 3848) (3815 . 3818) (3782 . 3785) (3694 . 3697) (3639 . 3642) (3606 . 3609) (3582 . 3585) (3555 . 3558) 3553)) (t 26156 4767 98873 594000)) nil (26156 4780 878013 386000) 0 nil])
([nil nil ((#("AnymapImage::pgm(vectordata, 255,height, width).unwrap();" 0 11 (fontified t face font-lock-type-face) 11 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 27 (fontified t) 27 33 (fontified t) 33 39 (fontified t) 39 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 57 (fontified t)) . 3983) (undo-tree-id9212 . -57) (t 26156 4780 949852 631000)) nil (26156 4792 334502 803000) 0 nil])
([nil nil ((4000 . 4001) (apply yas--snippet-revive 3992 4000 #s(yas--snippet nil nil #s(yas--exit 4000 nil) 80 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4000 nil) 80 nil nil nil nil)) (3992 . 4000) (#("to_pgm()$0" 0 10 (fontified nil)) . 3992) (3992 . 4002) (#("to" 0 2 (fontified nil)) . 3992) (3992 . 3994) (#("to_pgm()" 0 8 (fontified nil)) . -3992) (3992 . 4000) (#("to" 0 2 (fontified t)) . -3992) (undo-tree-id9205 . -1) (undo-tree-id9206 . -2) (undo-tree-id9207 . -2) (undo-tree-id9208 . -2) 3994 (3991 . 3994) (3983 . 3991) (#("ma" 0 2 (fontified nil)) . 3983) (3983 . 3985) (#("map_data" 0 8 (fontified nil)) . -3983) (3983 . 3991) (#("ma" 0 2 (fontified t)) . -3983) (undo-tree-id9209 . -2) (undo-tree-id9210 . -2) (undo-tree-id9211 . -2) 3985 (3983 . 3985)) nil (26156 4792 334487 707000) 0 nil])
([nil nil ((#(" 
//     for i in 0..height{
// 	for j in 0..width{

// 	//     println!(\"{i}, {j}\");
// 	    vectordata.push(map_data.get(j, i).unwrap());

// //	    let data =  map_data.get(j, i).unwrap();// buff.get(i * width + j).unwrap();

// 	    // let thing: u8 = 200;

// 	    // if  data < thing {
// 	    // 	print!(\" \");
// 	    // } else {
// 	    // 	print!(\"#\");
// 	    // }


// 	}
// //	println!();
//     }

" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t) 2 5 (fontified t face font-lock-comment-delimiter-face) 5 7 (fontified t face font-lock-comment-delimiter-face) 7 8 (fontified t face font-lock-comment-delimiter-face) 8 9 (fontified t face font-lock-comment-delimiter-face) 9 12 (fontified t face font-lock-comment-face) 12 13 (fontified t face font-lock-comment-face) 13 14 (fontified t face font-lock-comment-face) 14 15 (fontified t face font-lock-comment-face) 15 17 (fontified t face font-lock-comment-face) 17 19 (fontified t face font-lock-comment-face) 19 21 (fontified t face font-lock-comment-face) 21 26 (fontified t face font-lock-comment-face) 26 27 (fontified t face font-lock-comment-face) 27 28 (fontified t face font-lock-comment-face) 28 29 (fontified t face font-lock-comment-face) 29 32 (fontified t face font-lock-comment-delimiter-face) 32 33 (fontified t face font-lock-comment-delimiter-face) 33 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face) 39 41 (fontified t face font-lock-comment-face) 41 45 (fontified t face font-lock-comment-face) 45 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 52 (fontified t face font-lock-comment-face) 52 53 (fontified t) 53 56 (fontified t face font-lock-comment-delimiter-face) 56 57 (fontified t face font-lock-comment-delimiter-face) 57 59 (fontified t face font-lock-comment-face) 59 60 (fontified t face font-lock-comment-face) 60 64 (fontified t face font-lock-comment-face) 64 72 (fontified t face font-lock-comment-face) 72 73 (fontified t face font-lock-comment-face) 73 74 (fontified t face font-lock-comment-face) 74 76 (fontified t face font-lock-comment-face) 76 77 (fontified t face font-lock-comment-face) 77 79 (fontified t face font-lock-comment-face) 79 81 (fontified t face font-lock-comment-face) 81 82 (fontified t face font-lock-comment-face) 82 83 (fontified t face font-lock-comment-face) 83 84 (fontified t face font-lock-comment-face) 84 85 (fontified t face font-lock-comment-face) 85 86 (fontified t face font-lock-comment-face) 86 89 (fontified t face font-lock-comment-delimiter-face) 89 94 (fontified t face font-lock-comment-delimiter-face) 94 105 (fontified t face font-lock-comment-face) 105 109 (fontified t face font-lock-comment-face) 109 110 (fontified t face font-lock-comment-face) 110 119 (fontified t face font-lock-comment-face) 119 122 (fontified t face font-lock-comment-face) 122 123 (fontified t face font-lock-comment-face) 123 124 (fontified t face font-lock-comment-face) 124 126 (fontified t face font-lock-comment-face) 126 127 (fontified t face font-lock-comment-face) 127 128 (fontified t face font-lock-comment-face) 128 129 (fontified t face font-lock-comment-face) 129 135 (fontified t face font-lock-comment-face) 135 136 (fontified t face font-lock-comment-face) 136 137 (fontified t face font-lock-comment-face) 137 138 (fontified t face font-lock-comment-face) 138 140 (fontified t face font-lock-comment-face) 140 141 (fontified t) 141 144 (fontified t face font-lock-comment-delimiter-face) 144 146 (fontified t face font-lock-comment-face) 146 151 (fontified t face font-lock-comment-face) 151 154 (fontified t face font-lock-comment-face) 154 155 (fontified t face font-lock-comment-face) 155 159 (fontified t face font-lock-comment-face) 159 163 (fontified t face font-lock-comment-face) 163 172 (fontified t face font-lock-comment-face) 172 175 (fontified t face font-lock-comment-face) 175 176 (fontified t face font-lock-comment-face) 176 177 (fontified t face font-lock-comment-face) 177 180 (fontified t face font-lock-comment-face) 180 181 (fontified t face font-lock-comment-face) 181 182 (fontified t face font-lock-comment-face) 182 188 (fontified t face font-lock-comment-face) 188 189 (fontified t face font-lock-comment-face) 189 190 (fontified t face font-lock-comment-face) 190 191 (fontified t face font-lock-comment-face) 191 194 (fontified t face font-lock-comment-face) 194 198 (fontified t face font-lock-comment-face) 198 202 (fontified t face font-lock-comment-face) 202 203 (fontified t face font-lock-comment-face) 203 216 (fontified t face font-lock-comment-face) 216 217 (fontified t face font-lock-comment-face) 217 224 (fontified t face font-lock-comment-face) 224 225 (fontified t face font-lock-comment-face) 225 226 (rear-nonsticky t fontified t face font-lock-comment-face) 226 227 (fontified t face font-lock-comment-face) 227 228 (fontified t face font-lock-comment-face) 228 229 (fontified t) 229 232 (fontified t face font-lock-comment-delimiter-face) 232 237 (fontified t face font-lock-comment-delimiter-face) 237 240 (fontified t face font-lock-comment-face) 240 243 (fontified t face font-lock-comment-face) 243 244 (fontified t face font-lock-comment-face) 244 249 (fontified t face font-lock-comment-face) 249 251 (fontified t face font-lock-comment-face) 251 253 (fontified t face font-lock-comment-face) 253 260 (fontified t face font-lock-comment-face) 260 261 (fontified t face font-lock-comment-face) 261 262 (fontified t) 262 265 (fontified t face font-lock-comment-delimiter-face) 265 270 (fontified t face font-lock-comment-delimiter-face) 270 273 (fontified t face font-lock-comment-face) 273 275 (fontified t face font-lock-comment-face) 275 276 (fontified t face font-lock-comment-face) 276 281 (fontified t face font-lock-comment-face) 281 282 (fontified t face font-lock-comment-face) 282 283 (fontified t syntax-table (1) face font-lock-comment-face) 283 289 (fontified t face font-lock-comment-face) 289 290 (fontified t face font-lock-comment-face) 290 291 (fontified t face font-lock-comment-face) 291 292 (fontified t face font-lock-comment-face) 292 295 (fontified t face font-lock-comment-delimiter-face) 295 300 (fontified t face font-lock-comment-delimiter-face) 300 303 (fontified t face font-lock-comment-face) 303 304 (fontified t face font-lock-comment-face) 304 306 (fontified t face font-lock-comment-face) 306 310 (fontified t face font-lock-comment-face) 310 311 (fontified t face font-lock-comment-face) 311 314 (fontified t face font-lock-comment-face) 314 315 (fontified t face font-lock-comment-face) 315 317 (fontified t face font-lock-comment-face) 317 320 (fontified t face font-lock-comment-delimiter-face) 320 325 (fontified t face font-lock-comment-delimiter-face) 325 328 (fontified t face font-lock-comment-face) 328 329 (fontified t face font-lock-comment-face) 329 330 (fontified t face font-lock-comment-face) 330 334 (fontified t face font-lock-comment-face) 334 335 (fontified t face font-lock-comment-face) 335 336 (fontified t face font-lock-comment-face) 336 337 (fontified t face font-lock-comment-face) 337 340 (fontified t face font-lock-comment-delimiter-face) 340 345 (fontified t face font-lock-comment-delimiter-face) 345 348 (fontified t face font-lock-comment-face) 348 349 (fontified t face font-lock-comment-face) 349 355 (fontified t face font-lock-comment-face) 355 356 (fontified t face font-lock-comment-face) 356 359 (fontified t face font-lock-comment-face) 359 360 (fontified t face font-lock-comment-face) 360 361 (fontified t face font-lock-comment-face) 361 362 (fontified t face font-lock-comment-face) 362 365 (fontified t face font-lock-comment-delimiter-face) 365 370 (fontified t face font-lock-comment-delimiter-face) 370 373 (fontified t face font-lock-comment-face) 373 374 (fontified t face font-lock-comment-face) 374 375 (fontified t face font-lock-comment-face) 375 376 (fontified t) 376 377 (fontified t) 377 380 (fontified t face font-lock-comment-delimiter-face) 380 381 (fontified t face font-lock-comment-delimiter-face) 381 382 (fontified t face font-lock-comment-face) 382 383 (fontified t face font-lock-comment-face) 383 386 (fontified t face font-lock-comment-delimiter-face) 386 388 (fontified t face font-lock-comment-face) 388 389 (fontified t face font-lock-comment-face) 389 397 (fontified t face font-lock-comment-face) 397 398 (fontified t face font-lock-comment-face) 398 399 (fontified t face font-lock-comment-face) 399 400 (fontified t face font-lock-comment-face) 400 401 (fontified t face font-lock-comment-face) 401 404 (fontified t face font-lock-comment-delimiter-face) 404 408 (fontified t face font-lock-comment-delimiter-face) 408 409 (fontified t face font-lock-comment-face) 409 410 (fontified t face font-lock-comment-face) 410 411 (fontified t)) . 3553) (undo-tree-id9292 . -410) (undo-tree-id9293 . -410) (undo-tree-id9294 . -370) (undo-tree-id9295 . -410) (undo-tree-id9296 . -52) (undo-tree-id9297 . -410) (undo-tree-id9298 . -381) (undo-tree-id9299 . -45) (undo-tree-id9300 . -45) (undo-tree-id9301 . -126) (undo-tree-id9302 . -52) (undo-tree-id9303 . -45) (undo-tree-id9304 . -52) (undo-tree-id9305 . -45) (undo-tree-id9306 . -52) (undo-tree-id9307 . -49) (undo-tree-id9308 . -49) (undo-tree-id9309 . -49) (undo-tree-id9310 . -94) (undo-tree-id9311 . -94) (undo-tree-id9312 . -94) (undo-tree-id9313 . -376) (undo-tree-id9314 . -162) (undo-tree-id9315 . -370) (undo-tree-id9316 . -370) (undo-tree-id9317 . -370) (undo-tree-id9318 . -370) (undo-tree-id9319 . -370) (undo-tree-id9320 . -370) (undo-tree-id9321 . -370) (undo-tree-id9322 . -370) (undo-tree-id9323 . -370) (undo-tree-id9324 . -375) (undo-tree-id9325 . -410) (undo-tree-id9326 . -410) (undo-tree-id9327 . -401) (undo-tree-id9328 . -410) (undo-tree-id9329 . -410) (undo-tree-id9330 . -410) (undo-tree-id9331 . -410) (undo-tree-id9332 . -410) (undo-tree-id9333 . -410) (undo-tree-id9334 . -410) (undo-tree-id9335 . -410) (undo-tree-id9336 . -410) (undo-tree-id9337 . -408) (undo-tree-id9338 . -408) (undo-tree-id9339 . -408) (undo-tree-id9340 . -408) (undo-tree-id9341 . -408) (undo-tree-id9342 . -408) (undo-tree-id9343 . -408) (undo-tree-id9344 . -408) (undo-tree-id9345 . -408) (undo-tree-id9346 . -410) (undo-tree-id9347 . -410) (undo-tree-id9348 . -410) (undo-tree-id9349 . -410) (undo-tree-id9350 . -410) (undo-tree-id9351 . -410) (undo-tree-id9352 . -410) (undo-tree-id9353 . -410) (undo-tree-id9354 . -410) (undo-tree-id9355 . -411) (undo-tree-id9356 . -410) (undo-tree-id9357 . -410) (undo-tree-id9358 . -410) (undo-tree-id9359 . -410) (undo-tree-id9360 . -410) (undo-tree-id9361 . -410) (undo-tree-id9362 . -410) (undo-tree-id9363 . -410) (undo-tree-id9364 . -410) (undo-tree-id9365 . -410) (undo-tree-id9366 . -410) (undo-tree-id9367 . -410) (undo-tree-id9368 . -401) (undo-tree-id9369 . -401) (undo-tree-id9370 . -401) (undo-tree-id9371 . -401) (undo-tree-id9372 . -401) (undo-tree-id9373 . -401) (undo-tree-id9374 . -401) (undo-tree-id9375 . -401) (undo-tree-id9376 . -401) (undo-tree-id9377 . -401) (undo-tree-id9378 . -401) (undo-tree-id9379 . -401) (undo-tree-id9380 . -401) (undo-tree-id9381 . -401) (undo-tree-id9382 . -401) (undo-tree-id9383 . -401) (undo-tree-id9384 . -401) (undo-tree-id9385 . -401) (undo-tree-id9386 . -401) (undo-tree-id9387 . -401) (undo-tree-id9388 . -401) (undo-tree-id9389 . -401) (undo-tree-id9390 . -401) (undo-tree-id9391 . -401) (undo-tree-id9392 . -401) (undo-tree-id9393 . -401) (undo-tree-id9394 . -401) (undo-tree-id9395 . -401) (undo-tree-id9396 . -401) (undo-tree-id9397 . -401) (undo-tree-id9398 . -401) (undo-tree-id9399 . -401) (undo-tree-id9400 . -383) (undo-tree-id9401 . -383) (undo-tree-id9402 . -383) (undo-tree-id9403 . -383) (undo-tree-id9404 . -383) (undo-tree-id9405 . -383) (undo-tree-id9406 . -383) (undo-tree-id9407 . -383) (undo-tree-id9408 . -383) (undo-tree-id9409 . -377) (undo-tree-id9410 . -377) (undo-tree-id9411 . -377) (undo-tree-id9412 . -377) (undo-tree-id9413 . -377) (undo-tree-id9414 . -377) (undo-tree-id9415 . -377) (undo-tree-id9416 . -377) (undo-tree-id9417 . -377) (undo-tree-id9418 . -376) (undo-tree-id9419 . -376) (undo-tree-id9420 . -376) (undo-tree-id9421 . -376) (undo-tree-id9422 . -376) (undo-tree-id9423 . -376) (undo-tree-id9424 . -376) (undo-tree-id9425 . -376) (undo-tree-id9426 . -376) (undo-tree-id9427 . -375) (undo-tree-id9428 . -375) (undo-tree-id9429 . -375) (undo-tree-id9430 . -375) (undo-tree-id9431 . -375) (undo-tree-id9432 . -375) (undo-tree-id9433 . -375) (undo-tree-id9434 . -375) (undo-tree-id9435 . -375) (undo-tree-id9436 . -362) (undo-tree-id9437 . -362) (undo-tree-id9438 . -362) (undo-tree-id9439 . -362) (undo-tree-id9440 . -362) (undo-tree-id9441 . -362) (undo-tree-id9442 . -362) (undo-tree-id9443 . -362) (undo-tree-id9444 . -362) (undo-tree-id9445 . -337) (undo-tree-id9446 . -337) (undo-tree-id9447 . -337) (undo-tree-id9448 . -337) (undo-tree-id9449 . -337) (undo-tree-id9450 . -337) (undo-tree-id9451 . -337) (undo-tree-id9452 . -337) (undo-tree-id9453 . -337) (undo-tree-id9454 . -317) (undo-tree-id9455 . -317) (undo-tree-id9456 . -317) (undo-tree-id9457 . -317) (undo-tree-id9458 . -317) (undo-tree-id9459 . -317) (undo-tree-id9460 . -317) (undo-tree-id9461 . -317) (undo-tree-id9462 . -317) (undo-tree-id9463 . -292) (undo-tree-id9464 . -292) (undo-tree-id9465 . -292) (undo-tree-id9466 . -292) (undo-tree-id9467 . -292) (undo-tree-id9468 . -292) (undo-tree-id9469 . -292) (undo-tree-id9470 . -292) (undo-tree-id9471 . -292) (undo-tree-id9472 . -262) (undo-tree-id9473 . -262) (undo-tree-id9474 . -262) (undo-tree-id9475 . -262) (undo-tree-id9476 . -262) (undo-tree-id9477 . -262) (undo-tree-id9478 . -262) (undo-tree-id9479 . -262) (undo-tree-id9480 . -262) (undo-tree-id9481 . -261) (undo-tree-id9482 . -261) (undo-tree-id9483 . -261) (undo-tree-id9484 . -261) (undo-tree-id9485 . -261) (undo-tree-id9486 . -261) (undo-tree-id9487 . -261) (undo-tree-id9488 . -261) (undo-tree-id9489 . -261) (undo-tree-id9490 . -229) (undo-tree-id9491 . -229) (undo-tree-id9492 . -229) (undo-tree-id9493 . -229) (undo-tree-id9494 . -229) (undo-tree-id9495 . -229) (undo-tree-id9496 . -229) (undo-tree-id9497 . -229) (undo-tree-id9498 . -229) (undo-tree-id9499 . -228) (undo-tree-id9500 . -228) (undo-tree-id9501 . -228) (undo-tree-id9502 . -228) (undo-tree-id9503 . -228) (undo-tree-id9504 . -228) (undo-tree-id9505 . -228) (undo-tree-id9506 . -228) (undo-tree-id9507 . -228) (undo-tree-id9508 . -141) (undo-tree-id9509 . -141) (undo-tree-id9510 . -141) (undo-tree-id9511 . -141) (undo-tree-id9512 . -141) (undo-tree-id9513 . -141) (undo-tree-id9514 . -141) (undo-tree-id9515 . -141) (undo-tree-id9516 . -141) (undo-tree-id9517 . -140) (undo-tree-id9518 . -140) (undo-tree-id9519 . -140) (undo-tree-id9520 . -140) (undo-tree-id9521 . -140) (undo-tree-id9522 . -140) (undo-tree-id9523 . -140) (undo-tree-id9524 . -140) (undo-tree-id9525 . -140) (undo-tree-id9526 . -86) (undo-tree-id9527 . -86) (undo-tree-id9528 . -86) (undo-tree-id9529 . -86) (undo-tree-id9530 . -86) (undo-tree-id9531 . -86) (undo-tree-id9532 . -86) (undo-tree-id9533 . -86) (undo-tree-id9534 . -86) (undo-tree-id9535 . -53) (undo-tree-id9536 . -53) (undo-tree-id9537 . -53) (undo-tree-id9538 . -53) (undo-tree-id9539 . -53) (undo-tree-id9540 . -53) (undo-tree-id9541 . -53) (undo-tree-id9542 . -53) (undo-tree-id9543 . -53) (undo-tree-id9544 . -52) (undo-tree-id9545 . -52) (undo-tree-id9546 . -52) (undo-tree-id9547 . -52) (undo-tree-id9548 . -52) (undo-tree-id9549 . -52) (undo-tree-id9550 . -52) (undo-tree-id9551 . -52) (undo-tree-id9552 . -52) (undo-tree-id9553 . -29) (undo-tree-id9554 . -29) (undo-tree-id9555 . -29) (undo-tree-id9556 . -29) (undo-tree-id9557 . -29) (undo-tree-id9558 . -29) (undo-tree-id9559 . -29) (undo-tree-id9560 . -29) (undo-tree-id9561 . -29) (undo-tree-id9562 . -2) (undo-tree-id9563 . -2) (undo-tree-id9564 . -2) (undo-tree-id9565 . -2) (undo-tree-id9566 . -2) (undo-tree-id9567 . -2) (undo-tree-id9568 . -2) (undo-tree-id9569 . -2) (undo-tree-id9570 . -2) (undo-tree-id9571 . -411) (t 26156 4792 405029 859000)) nil (26156 4838 599774 812000) 0 nil])
([nil nil ((#("
    
//    let inverted = cat.invert();

   

 //   Cat.write_as_binary(\"inverted.pgm\").expect(\"couldn't write to binary\");

" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 9 (fontified t face font-lock-comment-delimiter-face) 9 10 (fontified t face font-lock-comment-delimiter-face) 10 12 (fontified t face font-lock-comment-delimiter-face) 12 14 (fontified t face font-lock-comment-face) 14 41 (fontified t face font-lock-comment-face) 41 42 (fontified t) 42 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 53 (fontified t face font-lock-comment-delimiter-face) 53 56 (fontified t face font-lock-comment-face) 56 59 (fontified t face font-lock-comment-face) 59 60 (fontified t face font-lock-comment-face) 60 68 (fontified t face font-lock-comment-face) 68 72 (fontified t face font-lock-comment-face) 72 92 (fontified t face font-lock-comment-face) 92 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-face) 96 102 (fontified t face font-lock-comment-face) 102 106 (fontified t face font-lock-comment-face) 106 110 (fontified t face font-lock-comment-face) 110 120 (fontified t face font-lock-comment-face) 120 125 (fontified t face font-lock-comment-face) 125 126 (fontified t)) . 3665) (undo-tree-id9213 . -125) (undo-tree-id9214 . -125) (undo-tree-id9215 . -42) (undo-tree-id9216 . -56) (undo-tree-id9217 . -125) (undo-tree-id9218 . -42) (undo-tree-id9219 . -42) (undo-tree-id9220 . -42) (undo-tree-id9221 . -4) (undo-tree-id9222 . -4) (undo-tree-id9223 . -125) (undo-tree-id9224 . -126) (undo-tree-id9225 . -125) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -6) (undo-tree-id9236 . -6) (undo-tree-id9237 . -6) (undo-tree-id9238 . -6) (undo-tree-id9239 . -6) (undo-tree-id9240 . -6) (undo-tree-id9241 . -6) (undo-tree-id9242 . -6) (undo-tree-id9243 . -6) (undo-tree-id9244 . -41) (undo-tree-id9245 . -41) (undo-tree-id9246 . -41) (undo-tree-id9247 . -41) (undo-tree-id9248 . -41) (undo-tree-id9249 . -41) (undo-tree-id9250 . -41) (undo-tree-id9251 . -41) (undo-tree-id9252 . -41) (undo-tree-id9253 . -42) (undo-tree-id9254 . -42) (undo-tree-id9255 . -42) (undo-tree-id9256 . -42) (undo-tree-id9257 . -42) (undo-tree-id9258 . -42) (undo-tree-id9259 . -42) (undo-tree-id9260 . -42) (undo-tree-id9261 . -42) (undo-tree-id9262 . -46) (undo-tree-id9263 . -46) (undo-tree-id9264 . -46) (undo-tree-id9265 . -46) (undo-tree-id9266 . -46) (undo-tree-id9267 . -46) (undo-tree-id9268 . -46) (undo-tree-id9269 . -46) (undo-tree-id9270 . -46) (undo-tree-id9271 . -47) (undo-tree-id9272 . -47) (undo-tree-id9273 . -47) (undo-tree-id9274 . -47) (undo-tree-id9275 . -47) (undo-tree-id9276 . -47) (undo-tree-id9277 . -47) (undo-tree-id9278 . -47) (undo-tree-id9279 . -47) (undo-tree-id9280 . -125) (undo-tree-id9281 . -125) (undo-tree-id9282 . -125) (undo-tree-id9283 . -125) (undo-tree-id9284 . -125) (undo-tree-id9285 . -125) (undo-tree-id9286 . -125) (undo-tree-id9287 . -125) (undo-tree-id9288 . -125) (undo-tree-id9289 . -125) (undo-tree-id9290 . -125) (undo-tree-id9291 . -126) 3790) nil (26156 4838 598942 338000) 0 nil])
([nil nil ((#("    let mut vectordata: Vec<u8> = Vec::new();
" 0 1 (fontified t) 1 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t face font-lock-variable-name-face) 13 22 (fontified t face font-lock-variable-name-face) 22 24 (fontified t) 24 27 (fontified t face font-lock-type-face) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 30 (fontified t face font-lock-type-face) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 34 (fontified t) 34 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 46 (fontified t)) . 3400) (undo-tree-id9692 . -45) (undo-tree-id9693 . -46) (undo-tree-id9694 . -46) (undo-tree-id9695 . -46) (undo-tree-id9696 . -46) (undo-tree-id9697 . -12) (undo-tree-id9698 . -22) (undo-tree-id9699 . -12) (undo-tree-id9700 . -22) (undo-tree-id9701 . -8) (undo-tree-id9702 . -22) (undo-tree-id9703 . -8) (undo-tree-id9704 . -12) (undo-tree-id9705 . -46) (undo-tree-id9706 . -46) (undo-tree-id9707 . -46) (undo-tree-id9708 . -46) (undo-tree-id9709 . -46) (undo-tree-id9710 . -46) (undo-tree-id9711 . -46) (undo-tree-id9712 . -46) (undo-tree-id9713 . -46) (undo-tree-id9714 . -46) (t 26156 4838 673896 384000)) nil (26156 4843 877004 132000) 0 nil])
([nil nil ((#("    // let thing = vector_data.get((height / 2) * (width / 2));

" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 16 (fontified t face font-lock-comment-face) 16 19 (fontified t face font-lock-comment-face) 19 31 (fontified t face font-lock-comment-face) 31 34 (fontified t face font-lock-comment-face) 34 35 (fontified t face font-lock-comment-face) 35 36 (fontified t face font-lock-comment-face) 36 46 (fontified t face font-lock-comment-face) 46 47 (fontified t face font-lock-comment-face) 47 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 52 (fontified t face font-lock-comment-face) 52 54 (fontified t face font-lock-comment-face) 54 60 (fontified t face font-lock-comment-face) 60 61 (fontified t face font-lock-comment-face) 61 62 (fontified t face font-lock-comment-face) 62 63 (fontified t face font-lock-comment-face) 63 64 (fontified t face font-lock-comment-face) 64 65 (fontified t)) . 3336) (undo-tree-id9582 . -64) (undo-tree-id9583 . -64) (undo-tree-id9584 . -57) (undo-tree-id9585 . -59) (undo-tree-id9586 . -64) (undo-tree-id9587 . -64) (undo-tree-id9588 . -64) (undo-tree-id9589 . -64) (undo-tree-id9590 . -65) (undo-tree-id9591 . -65) (undo-tree-id9592 . -65) (undo-tree-id9593 . -65) (undo-tree-id9594 . -65) (undo-tree-id9595 . -65) (undo-tree-id9596 . -65) (undo-tree-id9597 . -65) (undo-tree-id9598 . -65) (undo-tree-id9599 . -64) (undo-tree-id9600 . -64) (undo-tree-id9601 . -64) (undo-tree-id9602 . -64) (undo-tree-id9603 . -64) (undo-tree-id9604 . -64) (undo-tree-id9605 . -64) (undo-tree-id9606 . -64) (undo-tree-id9607 . -64) (undo-tree-id9608 . -64) (undo-tree-id9609 . -64) (undo-tree-id9610 . -64) (undo-tree-id9611 . -64) (undo-tree-id9612 . -64) (undo-tree-id9613 . -64) (undo-tree-id9614 . -64) (undo-tree-id9615 . -64) (undo-tree-id9616 . -64) (undo-tree-id9617 . -64) (undo-tree-id9618 . -64) (undo-tree-id9619 . -64) (undo-tree-id9620 . -64) (undo-tree-id9621 . -64) (undo-tree-id9622 . -64) (undo-tree-id9623 . -64) (undo-tree-id9624 . -64) (undo-tree-id9625 . -64) (undo-tree-id9626 . -64) (undo-tree-id9627 . -64) (undo-tree-id9628 . -64) (undo-tree-id9629 . -64) (undo-tree-id9630 . -64) (undo-tree-id9631 . -64) (undo-tree-id9632 . -64) (undo-tree-id9633 . -64) (undo-tree-id9634 . -64) (undo-tree-id9635 . -64) (undo-tree-id9636 . -64) (undo-tree-id9637 . -64) (undo-tree-id9638 . -64) (undo-tree-id9639 . -64) (undo-tree-id9640 . -64) (undo-tree-id9641 . -64) (undo-tree-id9642 . -64) (undo-tree-id9643 . -64) (undo-tree-id9644 . -64) (undo-tree-id9645 . -64) (undo-tree-id9646 . -64) (undo-tree-id9647 . -64) (undo-tree-id9648 . -64) (undo-tree-id9649 . -64) (undo-tree-id9650 . -64) (undo-tree-id9651 . -64) (undo-tree-id9652 . -64) (undo-tree-id9653 . -64) (undo-tree-id9654 . -64) (undo-tree-id9655 . -64) (undo-tree-id9656 . -64) (undo-tree-id9657 . -64) (undo-tree-id9658 . -64) (undo-tree-id9659 . -64) (undo-tree-id9660 . -64) (undo-tree-id9661 . -64) (undo-tree-id9662 . -64) (undo-tree-id9663 . -64) (undo-tree-id9664 . -64) (undo-tree-id9665 . -64) (undo-tree-id9666 . -64) (undo-tree-id9667 . -64) (undo-tree-id9668 . -64) (undo-tree-id9669 . -64) (undo-tree-id9670 . -64) (undo-tree-id9671 . -65) (undo-tree-id9672 . -64) (undo-tree-id9673 . -65) (undo-tree-id9674 . -64) (undo-tree-id9675 . -65) (undo-tree-id9676 . -64) (undo-tree-id9677 . -65) (undo-tree-id9678 . -63) (undo-tree-id9679 . -63) (undo-tree-id9680 . -64) (undo-tree-id9681 . -64) (undo-tree-id9682 . -64) (undo-tree-id9683 . -64) (undo-tree-id9684 . -64) (undo-tree-id9685 . -64) (undo-tree-id9686 . -64) (undo-tree-id9687 . -64) (undo-tree-id9688 . -64) (undo-tree-id9689 . -64) (undo-tree-id9690 . -64) (undo-tree-id9691 . -65) 3400) nil (26156 4843 876950 32000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3336) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1)) nil (26156 4843 876231 997000) 0 nil])
([nil nil ((#("
    let buff = cat.get_buffer();

 " 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 13 (fontified t face font-lock-variable-name-face) 13 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 22 (fontified t) 22 23 (fontified t) 23 28 (fontified t) 28 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t)) . 3406) (undo-tree-id9715 . -35) (undo-tree-id9716 . -35) (undo-tree-id9717 . -34) (undo-tree-id9718 . -35) (undo-tree-id9719 . -35) (undo-tree-id9720 . -35) (undo-tree-id9721 . -35) (undo-tree-id9722 . -35) (undo-tree-id9723 . -35) (undo-tree-id9724 . -35) (undo-tree-id9725 . -35) (undo-tree-id9726 . -35) (undo-tree-id9727 . -35) (undo-tree-id9728 . -35) (undo-tree-id9729 . -35) (undo-tree-id9730 . -35) (undo-tree-id9731 . -35) (undo-tree-id9732 . -35) (undo-tree-id9733 . -35) (undo-tree-id9734 . -35) (undo-tree-id9735 . -35) (undo-tree-id9736 . -35) (undo-tree-id9737 . -35) (undo-tree-id9738 . -35) (undo-tree-id9739 . -35) (undo-tree-id9740 . -35) (undo-tree-id9741 . -35) (undo-tree-id9742 . -35) (undo-tree-id9743 . -35) (undo-tree-id9744 . -35) (undo-tree-id9745 . -35) (undo-tree-id9746 . -35) (undo-tree-id9747 . -35) (undo-tree-id9748 . -35) (undo-tree-id9749 . -35) (undo-tree-id9750 . -35) (undo-tree-id9751 . -9) (undo-tree-id9752 . -13) (undo-tree-id9753 . -9) (undo-tree-id9754 . -13) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1) (undo-tree-id9761 . -1) (undo-tree-id9762 . -1) (undo-tree-id9763 . -1) (undo-tree-id9764 . -34) (undo-tree-id9765 . -34) (undo-tree-id9766 . -34) (undo-tree-id9767 . -34) (undo-tree-id9768 . -34) (undo-tree-id9769 . -34) (undo-tree-id9770 . -34) (undo-tree-id9771 . -34) (undo-tree-id9772 . -34) (undo-tree-id9773 . -35) (undo-tree-id9774 . -35) (undo-tree-id9775 . -35) (undo-tree-id9776 . -35) (undo-tree-id9777 . -35) (undo-tree-id9778 . -35) (undo-tree-id9779 . -35) (undo-tree-id9780 . -35) (undo-tree-id9781 . -35) (undo-tree-id9782 . -36) (undo-tree-id9783 . -35) (undo-tree-id9784 . -35) (undo-tree-id9785 . -35) (undo-tree-id9786 . -35) (undo-tree-id9787 . -35) (undo-tree-id9788 . -35) (undo-tree-id9789 . -35) (undo-tree-id9790 . -35) (undo-tree-id9791 . -35) (undo-tree-id9792 . -35) (undo-tree-id9793 . -35) (undo-tree-id9794 . -35) (undo-tree-id9795 . -34) (undo-tree-id9796 . -34) (undo-tree-id9797 . -34) (undo-tree-id9798 . -34) (undo-tree-id9799 . -34) (undo-tree-id9800 . -34) (undo-tree-id9801 . -34) (undo-tree-id9802 . -34) (undo-tree-id9803 . -34) (undo-tree-id9804 . -1) (undo-tree-id9805 . -1) (undo-tree-id9806 . -1) (undo-tree-id9807 . -1) (undo-tree-id9808 . -1) (undo-tree-id9809 . -1) (undo-tree-id9810 . -1) (undo-tree-id9811 . -1) (undo-tree-id9812 . -1) (undo-tree-id9813 . -36) (t 26156 4843 949557 642000)) nil (26156 4848 391077 677000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3446) (undo-tree-id9846 . -4) (undo-tree-id9847 . -4) (undo-tree-id9848 . -4) (undo-tree-id9849 . -4) (undo-tree-id9850 . -4) (undo-tree-id9851 . -4) (undo-tree-id9852 . -4) (undo-tree-id9853 . -4) (undo-tree-id9854 . -4) (undo-tree-id9855 . -4) (undo-tree-id9856 . -4) (undo-tree-id9857 . -4) (undo-tree-id9858 . -4) 3450 (3446 . 3450) (#("    " 0 4 (fontified nil)) . 3445) (undo-tree-id9859 . -4) (undo-tree-id9860 . -4) (undo-tree-id9861 . -4) (undo-tree-id9862 . -4) (undo-tree-id9863 . -4) (undo-tree-id9864 . -4) (undo-tree-id9865 . -4) (undo-tree-id9866 . -4) (undo-tree-id9867 . -4) (undo-tree-id9868 . -4) (undo-tree-id9869 . -4) (undo-tree-id9870 . -4) (undo-tree-id9871 . -4) (3449 . 3450) (3445 . 3449) (#("    " 0 4 (fontified nil)) . 3444) (undo-tree-id9872 . -4) (undo-tree-id9873 . -4) (undo-tree-id9874 . -4) (undo-tree-id9875 . -4) (undo-tree-id9876 . -4) (undo-tree-id9877 . -4) (undo-tree-id9878 . -4) (undo-tree-id9879 . -4) (undo-tree-id9880 . -4) (undo-tree-id9881 . -4) (undo-tree-id9882 . -4) (undo-tree-id9883 . -4) (undo-tree-id9884 . -4) (3444 . 3449) (3409 . 3410) (3442 . 3443) (t 26156 4848 461270 880000)) nil (26156 4901 690989 805000) 0 nil])
([nil nil ((3541 . 3542) (apply yas--snippet-revive 3470 3541 #s(yas--snippet nil (#s(yas--field 1 3496 3514 nil nil nil t #s(yas--field 2 3516 3535 nil nil nil t #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil)))) #s(yas--field 2 3516 3535 nil nil nil t #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil))) #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil))) #s(yas--exit 3541 nil) 81 nil #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil)) nil nil)) (3538 . 3540) (#("rad" 0 3 (fontified nil)) . 3538) (undo-tree-id9814 . -3) (3537 . 3538) (3531 . 3535) (3525 . 3531) (#("h" 0 1 (fontified nil)) . 3525) (undo-tree-id9815 . -1) (3525 . 3526) (#("height" 0 6 (fontified nil)) . -3525) (undo-tree-id9816 . -6) (3525 . 3531) (#("h" 0 1 (fontified t)) . -3525) (undo-tree-id9817 . -1) (undo-tree-id9818 . -1) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1) 3526 (3525 . 3526) (3524 . 3525) (3516 . 3524) (#("ma" 0 2 (fontified nil)) . 3516) (undo-tree-id9821 . -2) (3516 . 3518) (#("map_data" 0 8 (fontified nil)) . -3516) (undo-tree-id9822 . -8) (3516 . 3524) (#("ma" 0 2 (fontified t)) . -3516) (undo-tree-id9823 . -2) (undo-tree-id9824 . -2) (undo-tree-id9825 . -2) 3518 (3517 . 3518) (#("y" 0 1 (fontified nil)) . 3517) (undo-tree-id9826 . -1) (3516 . 3517) (3511 . 3514) (3510 . 3511) (3505 . 3510) (#("w" 0 1 (fontified nil)) . 3505) (undo-tree-id9827 . -1) (3505 . 3506) (#("width" 0 5 (fontified nil)) . -3505) (undo-tree-id9828 . -5) (3505 . 3510) (#("w" 0 1 (fontified t)) . -3505) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) 3506 (3505 . 3506) (#("h" 0 1 (fontified t)) . -3505) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) 3506 (3505 . 3506) (3504 . 3505) (3496 . 3504) (#("ma" 0 2 (fontified nil)) . 3496) (undo-tree-id9837 . -2) (3496 . 3498) (#("map_data" 0 8 (fontified nil)) . -3496) (undo-tree-id9838 . -8) (3496 . 3504) (#("ma" 0 2 (fontified t)) . -3496) (undo-tree-id9839 . -2) (undo-tree-id9840 . -2) (undo-tree-id9841 . -2) (undo-tree-id9842 . -2) 3498 (3497 . 3498) (#("x" 0 1 (fontified nil)) . 3497) (undo-tree-id9843 . -1) (3496 . 3497) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3496 3514 nil nil nil t #s(yas--field 2 3516 3535 nil nil nil t #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil)))) #s(yas--field 2 3516 3535 nil nil nil t #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil))) #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil))) #s(yas--exit 3541 nil) 81 nil #s(yas--field 3 3537 3540 nil nil nil t #s(yas--exit 3541 nil)) nil nil)) (3470 . 3506) (#("lidar_reading_no_rotation(${1:x}, ${2:y}, ${3:rad})$0" 0 53 (fontified nil)) . 3470) (3470 . 3523) (#("lidar_reading_no_rotation(…)" 0 28 (fontified nil)) . -3470) (3470 . 3498) (3469 . 3470) (3461 . 3469) (#("ma" 0 2 (fontified nil)) . 3461) (3461 . 3463) (#("map_data" 0 8 (fontified nil)) . -3461) (3461 . 3469) (#("ma" 0 2 (fontified t)) . -3461) (undo-tree-id9844 . -2) (undo-tree-id9845 . -2) 3463 (3449 . 3463) (3445 . 3449)) nil (26156 4901 690711 82000) 0 nil])
([nil nil ((apply yas--snippet-revive 3542 3550 #s(yas--snippet nil nil #s(yas--exit 3550 nil) 82 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3550 nil) 82 nil nil nil nil)) (3542 . 3550) (#("to_pgm()$0" 0 10 (fontified nil)) . 3542) (3542 . 3552) (#("t" 0 1 (fontified nil)) . 3542) (3542 . 3543) (#("to_pgm()" 0 8 (fontified nil)) . -3542) (3542 . 3550) (#("to" 0 2 (fontified t)) . -3542) (undo-tree-id9885 . -1) (undo-tree-id9886 . -2) (undo-tree-id9887 . -2) (undo-tree-id9888 . -1) (undo-tree-id9889 . -1) (undo-tree-id9890 . -1) (undo-tree-id9891 . -1) (undo-tree-id9892 . -1) (undo-tree-id9893 . -1) (undo-tree-id9894 . -1) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) (undo-tree-id9901 . -1) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) (undo-tree-id9908 . -1) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -2) (undo-tree-id9919 . -2) (undo-tree-id9920 . -2) (undo-tree-id9921 . -2) (undo-tree-id9922 . -2) (undo-tree-id9923 . -2) (undo-tree-id9924 . -2) (undo-tree-id9925 . -2) (undo-tree-id9926 . -2) (undo-tree-id9927 . -2) (undo-tree-id9928 . -2) (undo-tree-id9929 . -2) (undo-tree-id9930 . -2) (undo-tree-id9931 . -2) (undo-tree-id9932 . -2) (undo-tree-id9933 . -2) (undo-tree-id9934 . -2) (undo-tree-id9935 . -2) (undo-tree-id9936 . -2) (undo-tree-id9937 . -2) (undo-tree-id9938 . -2) (undo-tree-id9939 . -2) (undo-tree-id9940 . -2) (undo-tree-id9941 . -2) (undo-tree-id9942 . -2) (undo-tree-id9943 . -2) (undo-tree-id9944 . -2) (undo-tree-id9945 . -2) (undo-tree-id9946 . -2) (undo-tree-id9947 . -2) (undo-tree-id9948 . -2) (undo-tree-id9949 . -2) (undo-tree-id9950 . -2) (undo-tree-id9951 . -2) (undo-tree-id9952 . -2) (undo-tree-id9953 . -2) (undo-tree-id9954 . -2) (undo-tree-id9955 . -2) (undo-tree-id9956 . -2) (undo-tree-id9957 . -2) (undo-tree-id9958 . -2) (undo-tree-id9959 . -2) (undo-tree-id9960 . -2) (undo-tree-id9961 . -2) (undo-tree-id9962 . -2) (undo-tree-id9963 . -2) (undo-tree-id9964 . -2) (undo-tree-id9965 . -2) (undo-tree-id9966 . -2) (undo-tree-id9967 . -2) (undo-tree-id9968 . -2) (undo-tree-id9969 . -2) (undo-tree-id9970 . -2) (undo-tree-id9971 . -2) (undo-tree-id9972 . -2) (undo-tree-id9973 . -2) (undo-tree-id9974 . -2) (undo-tree-id9975 . -2) (undo-tree-id9976 . -2) (undo-tree-id9977 . -2) (undo-tree-id9978 . -2) (undo-tree-id9979 . -2) (undo-tree-id9980 . -2) (undo-tree-id9981 . -2) (undo-tree-id9982 . -2) 3544 (3542 . 3544) (3541 . 3542) (t 26156 4901 762077 456000)) nil (26156 4907 986684 735000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3630 . 3631) (#("
" 0 1 (fontified nil)) . -3699) (3626 . 3700) 3625 (t 26156 4908 57722 970000)) nil (26156 4918 34281 785000) 0 nil])
([nil nil ((3661 . 3662)) nil (26156 4918 34277 818000) 0 nil])
([nil nil ((#("newimage" 0 8 (fontified t)) . 3631) (undo-tree-id9983 . -7) (undo-tree-id9984 . -8)) nil (26156 4918 34273 190000) 0 nil])
([nil nil ((3631 . 3636)) nil (26156 4918 34244 335000) 0 nil])
([nil nil ((3537 . 3538) (#("1" 0 1 (fontified t)) . -3537) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) (undo-tree-id9995 . -1) (undo-tree-id9996 . -1) (undo-tree-id9997 . -1) 3538 (t 26156 4918 105166 747000)) nil (26156 4956 637148 460000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 3537) (t 26156 4956 687135 587000)) nil (26156 4973 907257 550000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 3537) (undo-tree-id10002 . 1) (undo-tree-id10003 . 1)) nil (26156 4973 907254 189000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 3537) (undo-tree-id9998 . 1) (undo-tree-id9999 . 1) (undo-tree-id10000 . -1) (undo-tree-id10001 . -1)) nil (26156 4973 907244 870000) 0 nil])
([nil nil ((3537 . 3540)) nil (26156 4973 906951 841000) 0 nil])
([nil nil ((2146 . 2151) (#("us" 0 2 (fontified nil)) . 2146) (2146 . 2148) (#("usize" 0 5 (fontified nil)) . -2146) (2146 . 2151) (#("us" 0 2 (fontified t)) . -2146) (undo-tree-id10347 . -2) (undo-tree-id10348 . -2) (undo-tree-id10349 . -2) (undo-tree-id10350 . -2) (undo-tree-id10351 . -2) (undo-tree-id10352 . -2) (undo-tree-id10353 . -2) (undo-tree-id10354 . -2) (undo-tree-id10355 . -2) (undo-tree-id10356 . -2) (undo-tree-id10357 . -2) (undo-tree-id10358 . -2) (undo-tree-id10359 . -2) (undo-tree-id10360 . -2) (undo-tree-id10361 . -2) (undo-tree-id10362 . -2) (undo-tree-id10363 . -2) (undo-tree-id10364 . -2) (undo-tree-id10365 . -2) (undo-tree-id10366 . -2) (undo-tree-id10367 . -2) (undo-tree-id10368 . -2) (undo-tree-id10369 . -2) (undo-tree-id10370 . -2) (undo-tree-id10371 . -2) (undo-tree-id10372 . -2) (undo-tree-id10373 . -2) (undo-tree-id10374 . -2) (undo-tree-id10375 . -2) (undo-tree-id10376 . -2) (undo-tree-id10377 . -2) (undo-tree-id10378 . -2) (undo-tree-id10379 . -2) (undo-tree-id10380 . -2) (undo-tree-id10381 . -2) (undo-tree-id10382 . -2) (undo-tree-id10383 . -2) (undo-tree-id10384 . -2) (undo-tree-id10385 . -2) (undo-tree-id10386 . -2) (undo-tree-id10387 . -2) (undo-tree-id10388 . -2) (undo-tree-id10389 . -2) (undo-tree-id10390 . -2) (undo-tree-id10391 . -2) (undo-tree-id10392 . -2) (undo-tree-id10393 . -2) (undo-tree-id10394 . -2) (undo-tree-id10395 . -2) (undo-tree-id10396 . -2) (undo-tree-id10397 . -2) (undo-tree-id10398 . -2) (undo-tree-id10399 . -2) (undo-tree-id10400 . -2) (undo-tree-id10401 . -2) (undo-tree-id10402 . -2) (undo-tree-id10403 . -2) (undo-tree-id10404 . -2) (undo-tree-id10405 . -2) (undo-tree-id10406 . -2) (undo-tree-id10407 . -2) (undo-tree-id10408 . -2) (undo-tree-id10409 . -2) (undo-tree-id10410 . -2) (undo-tree-id10411 . -2) (undo-tree-id10412 . -2) (undo-tree-id10413 . -2) (undo-tree-id10414 . -2) 2148 (2144 . 2148) (#("L" 0 1 (fontified t)) . -2144) (undo-tree-id10415 . -1) (undo-tree-id10416 . -1) 2145 (2141 . 2145) (2136 . 2141) (#("us" 0 2 (fontified nil)) . 2136) (2136 . 2138) (#("usize" 0 5 (fontified nil)) . -2136) (2136 . 2141) (#("us" 0 2 (fontified t)) . -2136) (undo-tree-id10417 . -2) (undo-tree-id10418 . -2) (undo-tree-id10419 . -2) 2138 (2135 . 2138) (2131 . 2135) (2122 . 2131) (#("&mut" 0 1 (fontified nil face rust-ampersand-face) 1 4 (fontified nil)) . 2122) (undo-tree-id10420 . -1) (undo-tree-id10421 . -1) (undo-tree-id10422 . -1) (2123 . 2126) (#("&mut self" 0 9 (fontified nil)) . -2123) (2123 . 2132) (#("mut" 0 3 (fontified t face font-lock-keyword-face)) . -2123) (undo-tree-id10423 . -2) (undo-tree-id10424 . -3) (undo-tree-id10425 . -3) 2126 (2123 . 2126) (#("u" 0 1 (fontified t)) . -2123) (undo-tree-id10426 . -1) (undo-tree-id10427 . -1) 2124 (2122 . 2124) (2115 . 2123) (2111 . 2115) (#("    " 0 4 (fontified nil)) . 2110) (undo-tree-id10428 . -4) (2109 . 2115) (t 26156 4973 982276 746000)) nil (26156 5085 645369 369000) 0 nil])
([nil nil ((2155 . 2156) (2156 . 2160) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2155) (2155 . 2156) (2154 . 2156) (2153 . 2155) (#("-" 0 1 (fontified t)) . -2153) (undo-tree-id10004 . -1) (undo-tree-id10005 . -1) (undo-tree-id10006 . -1) (undo-tree-id10007 . -1) (undo-tree-id10008 . -1) (undo-tree-id10009 . -1) (undo-tree-id10010 . -1) (undo-tree-id10011 . -1) (undo-tree-id10012 . -1) (undo-tree-id10013 . -1) (undo-tree-id10014 . -1) (undo-tree-id10015 . -1) (undo-tree-id10016 . -1) (undo-tree-id10017 . -1) (undo-tree-id10018 . -1) (undo-tree-id10019 . -1) (undo-tree-id10020 . -1) (undo-tree-id10021 . -1) (undo-tree-id10022 . -1) (undo-tree-id10023 . -1) (undo-tree-id10024 . -1) (undo-tree-id10025 . -1) (undo-tree-id10026 . -1) (undo-tree-id10027 . -1) (undo-tree-id10028 . -1) (undo-tree-id10029 . -1) (undo-tree-id10030 . -1) (undo-tree-id10031 . -1) (undo-tree-id10032 . -1) (undo-tree-id10033 . -1) (undo-tree-id10034 . -1) (undo-tree-id10035 . -1) (undo-tree-id10036 . -1) (undo-tree-id10037 . -1) (undo-tree-id10038 . -1) (undo-tree-id10039 . -1) (undo-tree-id10040 . -1) (undo-tree-id10041 . -1) (undo-tree-id10042 . -1) (undo-tree-id10043 . -1) (undo-tree-id10044 . -1) (undo-tree-id10045 . -1) (undo-tree-id10046 . -1) (undo-tree-id10047 . -1) (undo-tree-id10048 . -1) (undo-tree-id10049 . -1) (undo-tree-id10050 . -1) (undo-tree-id10051 . -1) (undo-tree-id10052 . -1) (undo-tree-id10053 . -1) (undo-tree-id10054 . -1) (undo-tree-id10055 . -1) (undo-tree-id10056 . -1) (undo-tree-id10057 . -1) (undo-tree-id10058 . -1) (undo-tree-id10059 . -1) (undo-tree-id10060 . -1) (undo-tree-id10061 . -1) (undo-tree-id10062 . -1) (undo-tree-id10063 . -1) (undo-tree-id10064 . -1) (undo-tree-id10065 . -1) (undo-tree-id10066 . -1) (undo-tree-id10067 . -1) (undo-tree-id10068 . -1) (undo-tree-id10069 . -1) (undo-tree-id10070 . -1) (undo-tree-id10071 . -1) (undo-tree-id10072 . -1) (undo-tree-id10073 . -1) (undo-tree-id10074 . -1) (undo-tree-id10075 . -1) (undo-tree-id10076 . -1) (undo-tree-id10077 . -1) (undo-tree-id10078 . -1) (undo-tree-id10079 . -1) (undo-tree-id10080 . -1) (undo-tree-id10081 . -1) (undo-tree-id10082 . -1) (undo-tree-id10083 . -1) (undo-tree-id10084 . -1) (undo-tree-id10085 . -1) (undo-tree-id10086 . -1) (undo-tree-id10087 . -1) (undo-tree-id10088 . -1) (undo-tree-id10089 . -1) (undo-tree-id10090 . -1) (undo-tree-id10091 . -1) (undo-tree-id10092 . -1) (undo-tree-id10093 . -1) (undo-tree-id10094 . -1) (undo-tree-id10095 . -1) (undo-tree-id10096 . -1) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) (undo-tree-id10107 . -1) (undo-tree-id10108 . -1) (undo-tree-id10109 . -1) (undo-tree-id10110 . -1) (undo-tree-id10111 . -1) (undo-tree-id10112 . -1) (#(">" 0 1 (fontified t syntax-table (1))) . -2154) (undo-tree-id10113 . -1) (undo-tree-id10114 . -1) (undo-tree-id10115 . -1) (undo-tree-id10116 . -1) (undo-tree-id10117 . -1) (undo-tree-id10118 . -1) (undo-tree-id10119 . -1) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -1) (undo-tree-id10123 . -1) (undo-tree-id10124 . -1) (undo-tree-id10125 . -1) (undo-tree-id10126 . -1) (undo-tree-id10127 . -1) (undo-tree-id10128 . -1) (undo-tree-id10129 . -1) (undo-tree-id10130 . -1) (undo-tree-id10131 . -1) (undo-tree-id10132 . -1) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (#(" " 0 1 (fontified t)) . -2155) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) 2156 (#("O" 0 1 (fontified t face font-lock-type-face)) . -2156) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1) (undo-tree-id10330 . -1) (undo-tree-id10331 . -1) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . -1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) 2157 (2154 . 2157) (2152 . 2154)) nil (26156 5085 645148 572000) 0 nil])
([nil nil ((2163 . 2164) (apply yas--snippet-revive 2156 2164 #s(yas--snippet nil nil #s(yas--exit 2163 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2163 nil) 83 nil nil nil nil)) (2156 . 2164) (#("Option<$0>" 0 10 (fontified nil)) . 2156) (2156 . 2166) (#("O" 0 1 (fontified nil)) . 2156) (2156 . 2157) (#("Option<…>" 0 9 (fontified nil)) . -2156) (2156 . 2165) (#("O" 0 1 (fontified t face font-lock-type-face)) . -2156) (undo-tree-id10477 . -1) (undo-tree-id10478 . -1) 2157 (2152 . 2157) (t 26156 5085 721420 127000)) nil (26156 5139 457035 380000) 0 nil])
([nil nil ((2175 . 2177) (#("s" 0 1 (fontified t)) . -2175) (undo-tree-id10430 . -1) (undo-tree-id10431 . -1) (undo-tree-id10432 . -1) (#("e" 0 1 (fontified t)) . -2176) (undo-tree-id10433 . -1) (undo-tree-id10434 . -1) (undo-tree-id10435 . -1) (#("l" 0 1 (fontified t)) . -2177) (undo-tree-id10436 . -1) (undo-tree-id10437 . -1) (undo-tree-id10438 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2178) (undo-tree-id10439 . -1) (undo-tree-id10440 . -1) (undo-tree-id10441 . -1) (#("." 0 1 (fontified t)) . -2179) (undo-tree-id10442 . -1) (undo-tree-id10443 . -1) (undo-tree-id10444 . -1) (#("t" 0 1 (fontified t)) . -2180) (undo-tree-id10445 . -1) (undo-tree-id10446 . -1) (undo-tree-id10447 . -1) (#("o" 0 1 (fontified t)) . -2181) (undo-tree-id10448 . -1) (undo-tree-id10449 . -1) (undo-tree-id10450 . -1) (#("_" 0 1 (fontified t)) . -2182) (undo-tree-id10451 . -1) (undo-tree-id10452 . -1) (undo-tree-id10453 . -1) (#("p" 0 1 (fontified t)) . -2183) (undo-tree-id10454 . -1) (undo-tree-id10455 . -1) (undo-tree-id10456 . -1) (#("g" 0 1 (fontified t)) . -2184) (undo-tree-id10457 . -1) (undo-tree-id10458 . -1) (undo-tree-id10459 . -1) (#("m" 0 1 (fontified t)) . -2185) (undo-tree-id10460 . -1) (undo-tree-id10461 . -1) (undo-tree-id10462 . -1) 2186 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2186) (undo-tree-id10463 . -1) (undo-tree-id10464 . -1) (undo-tree-id10465 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2187) (undo-tree-id10466 . 1) (undo-tree-id10467 . -1) (undo-tree-id10468 . 1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2187) (undo-tree-id10469 . -1) (undo-tree-id10470 . -1) 2188 (apply yas--snippet-revive 2175 2188 #s(yas--snippet nil nil #s(yas--exit 2188 nil) 85 nil nil #s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2188 nil) 85 nil nil #s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil)) nil)) (2175 . 2188) (#("self.to_pgm()$0" 0 15 (fontified nil)) . 2175) (2175 . 2190) (#("_" 0 1 (fontified nil)) . 2175) (2175 . 2176) (#("self.to_pgm()" 0 13 (fontified nil)) . -2175) (2175 . 2188) (#("_" 0 1 (fontified t)) . -2175) (undo-tree-id10471 . -1) (undo-tree-id10472 . -1) 2176 (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2176) (2175 . 2176) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil))) #s(yas--exit 2178 nil) 84 nil #s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil)) nil nil)) (2170 . 2178) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2170) (2170 . 2185) (#("S" 0 1 (fontified nil)) . 2170) (2170 . 2171) (#("Some(…)" 0 7 (fontified nil)) . -2170) (2170 . 2177) (#("S" 0 1 (fontified t face font-lock-type-face)) . -2170) (undo-tree-id10473 . -1) (undo-tree-id10474 . -1) (undo-tree-id10475 . -1) 2171 (2170 . 2171) (2169 . 2170) (#("	" 0 1 (fontified nil)) . 2168) (undo-tree-id10476 . -1) (2169 . 2170)) nil (26156 5139 457005 973000) 0 nil])
([nil nil ((2177 . 2178) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2177) (2177 . 2178)) nil (26156 5139 456894 703000) 0 nil])
([nil nil ((apply yas--snippet-revive 2170 2178 #s(yas--snippet nil (#s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil))) #s(yas--exit 2178 nil) 84 nil #s(yas--field 1 2175 2178 nil nil nil t #s(yas--exit 2178 nil)) nil nil))) nil (26156 5139 456890 949000) 0 nil])
([nil nil ((2163 . 2165) (#("_" 0 1 (fontified t)) . -2163) (undo-tree-id10429 . -1) 2164) nil (26156 5139 456881 474000) 0 nil])
([nil nil ((2172 . 2173) (#("	" 0 1 (fontified nil)) . 2171) (undo-tree-id10800 . -1) (2171 . 2173) (#("	" 0 1 (fontified nil)) . 2170) (undo-tree-id10801 . -1) (2170 . 2172) (#("	" 0 1 (fontified nil)) . 2169) (undo-tree-id10802 . -1) (2170 . 2171) (2169 . 2170) (t 26156 5139 531461 176000)) nil (26156 5195 106843 424000) 0 nil])
([nil nil ((2170 . 2171)) nil (26156 5195 106832 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2286 . 2287) (nil fontified nil 2171 . 2287) (2171 . 2287) 2170) nil (26156 5195 106827 772000) 0 nil])
([nil nil ((2286 . 2287)) nil (26156 5195 106819 66000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2288) (undo-tree-id10798 . 1) (undo-tree-id10799 . -1)) nil (26156 5195 106770 721000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2288) (undo-tree-id10796 . 1) (undo-tree-id10797 . -1)) nil (26156 5195 106751 202000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t)) . 2286) (undo-tree-id10728 . -1) (undo-tree-id10729 . -2) (undo-tree-id10730 . -2) (undo-tree-id10731 . -2) (undo-tree-id10732 . -2) (undo-tree-id10733 . -2) (undo-tree-id10734 . -2) (undo-tree-id10735 . -2) (undo-tree-id10736 . -2) (undo-tree-id10737 . -2) (undo-tree-id10738 . -2) (undo-tree-id10739 . -2) (undo-tree-id10740 . -1) (undo-tree-id10741 . -2) (undo-tree-id10742 . -2) (undo-tree-id10743 . -2) (undo-tree-id10744 . -2) (undo-tree-id10745 . -2) (undo-tree-id10746 . -2) (undo-tree-id10747 . -2) (undo-tree-id10748 . -2) (undo-tree-id10749 . -2) (undo-tree-id10750 . -2) (undo-tree-id10751 . -2) (undo-tree-id10752 . -2) (undo-tree-id10753 . -2) (undo-tree-id10754 . -2) (undo-tree-id10755 . -2) (undo-tree-id10756 . -2) (undo-tree-id10757 . -2) (undo-tree-id10758 . -2) (undo-tree-id10759 . -2) (undo-tree-id10760 . -2) (undo-tree-id10761 . -2) (undo-tree-id10762 . -2) (undo-tree-id10763 . -2) (undo-tree-id10764 . -2) (undo-tree-id10765 . -2) (undo-tree-id10766 . -2) (undo-tree-id10767 . -2) (undo-tree-id10768 . -2) (undo-tree-id10769 . -2) (undo-tree-id10770 . -2) (undo-tree-id10771 . -2) (undo-tree-id10772 . -2) (undo-tree-id10773 . -2) (undo-tree-id10774 . -2) (undo-tree-id10775 . -2) (undo-tree-id10776 . -2) (undo-tree-id10777 . -2) (undo-tree-id10778 . -2) (undo-tree-id10779 . -2) (undo-tree-id10780 . -2) (undo-tree-id10781 . -2) (undo-tree-id10782 . -2) (undo-tree-id10783 . -2) (undo-tree-id10784 . -2) (undo-tree-id10785 . -2) (undo-tree-id10786 . -2) (undo-tree-id10787 . -2) (undo-tree-id10788 . -2) (undo-tree-id10789 . -2) (undo-tree-id10790 . -2) (undo-tree-id10791 . -2) (undo-tree-id10792 . -2) (undo-tree-id10793 . -2) (undo-tree-id10794 . -2) (undo-tree-id10795 . -2)) nil (26156 5195 106738 851000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2169) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1)) nil (26156 5195 106612 230000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 2250) (undo-tree-id10685 . -2) (undo-tree-id10686 . -3)) nil (26156 5195 106528 891000) 0 nil])
([nil nil ((2250 . 2257) (#("ge" 0 2 (fontified nil)) . 2250) (2250 . 2252) (#("get_mut" 0 7 (fontified nil)) . -2250) (2250 . 2257) (#("ge" 0 2 (fontified t)) . -2250) (undo-tree-id10565 . -2) (undo-tree-id10566 . -2) (undo-tree-id10567 . -2) (undo-tree-id10568 . -2) (undo-tree-id10569 . -2) (undo-tree-id10570 . -2) (undo-tree-id10571 . -2) (undo-tree-id10572 . -2) (undo-tree-id10573 . -2) (undo-tree-id10574 . -2) (undo-tree-id10575 . -2) (undo-tree-id10576 . -2) (undo-tree-id10577 . -2) (undo-tree-id10578 . -2) (undo-tree-id10579 . -2) (undo-tree-id10580 . -2) (undo-tree-id10581 . -2) (undo-tree-id10582 . -2) (undo-tree-id10583 . -2) (undo-tree-id10584 . -2) (undo-tree-id10585 . -2) (undo-tree-id10586 . -2) (undo-tree-id10587 . -2) (undo-tree-id10588 . -2) (undo-tree-id10589 . -2) (undo-tree-id10590 . -2) (undo-tree-id10591 . -2) (undo-tree-id10592 . -2) (undo-tree-id10593 . -2) (undo-tree-id10594 . -2) (undo-tree-id10595 . -2) (undo-tree-id10596 . -2) (undo-tree-id10597 . -2) (undo-tree-id10598 . -2) (undo-tree-id10599 . -2) (undo-tree-id10600 . -2) (undo-tree-id10601 . -2) (undo-tree-id10602 . -2) (undo-tree-id10603 . -2) (undo-tree-id10604 . -2) (undo-tree-id10605 . -2) (undo-tree-id10606 . -2) (undo-tree-id10607 . -2) (undo-tree-id10608 . -2) (undo-tree-id10609 . -2) (undo-tree-id10610 . -2) (undo-tree-id10611 . -2) (undo-tree-id10612 . -2) (undo-tree-id10613 . -2) (undo-tree-id10614 . -2) (undo-tree-id10615 . -2) (undo-tree-id10616 . -2) (undo-tree-id10617 . -2) (undo-tree-id10618 . -2) (undo-tree-id10619 . -2) (undo-tree-id10620 . -2) (undo-tree-id10621 . -2) (undo-tree-id10622 . -2) (undo-tree-id10623 . -2) (undo-tree-id10624 . -2) (undo-tree-id10625 . -2) (undo-tree-id10626 . -2) (undo-tree-id10627 . -2) (undo-tree-id10628 . -2) (undo-tree-id10629 . -2) (undo-tree-id10630 . -2) (undo-tree-id10631 . -2) (undo-tree-id10632 . -2) (undo-tree-id10633 . -2) (undo-tree-id10634 . -2) (undo-tree-id10635 . -2) (undo-tree-id10636 . -2) (undo-tree-id10637 . -2) (undo-tree-id10638 . -2) (undo-tree-id10639 . -2) (undo-tree-id10640 . -2) (undo-tree-id10641 . -2) (undo-tree-id10642 . -2) (undo-tree-id10643 . -2) (undo-tree-id10644 . -2) (undo-tree-id10645 . -2) (undo-tree-id10646 . -2) (undo-tree-id10647 . -2) (undo-tree-id10648 . -2) (undo-tree-id10649 . -2) (undo-tree-id10650 . -2) (undo-tree-id10651 . -2) (undo-tree-id10652 . -2) (undo-tree-id10653 . -2) (undo-tree-id10654 . -2) (undo-tree-id10655 . -2) (undo-tree-id10656 . -2) (undo-tree-id10657 . -2) (undo-tree-id10658 . -2) (undo-tree-id10659 . -2) (undo-tree-id10660 . -2) (undo-tree-id10661 . -2) (undo-tree-id10662 . -2) (undo-tree-id10663 . -2) (undo-tree-id10664 . -2) (undo-tree-id10665 . -2) (undo-tree-id10666 . -2) (undo-tree-id10667 . -2) (undo-tree-id10668 . -2) (undo-tree-id10669 . -2) (undo-tree-id10670 . -2) (undo-tree-id10671 . -2) (undo-tree-id10672 . -2) (undo-tree-id10673 . -2) (undo-tree-id10674 . -2) (undo-tree-id10675 . -2) (undo-tree-id10676 . -2) (undo-tree-id10677 . -2) (undo-tree-id10678 . -2) (undo-tree-id10679 . -2) (undo-tree-id10680 . -2) (undo-tree-id10681 . -2) (undo-tree-id10682 . -2) (undo-tree-id10683 . -2) (undo-tree-id10684 . -2) 2252 (2250 . 2252)) nil (26156 5195 106491 839000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2276) (undo-tree-id10479 . -1) (undo-tree-id10480 . -1) (undo-tree-id10481 . -1) (undo-tree-id10482 . -1) (undo-tree-id10483 . -1) (undo-tree-id10484 . -1) (undo-tree-id10485 . -1) (undo-tree-id10486 . -1) (undo-tree-id10487 . -1) (undo-tree-id10488 . -1) (undo-tree-id10489 . -1) (undo-tree-id10490 . -1) (undo-tree-id10491 . -1) (undo-tree-id10492 . -1) (undo-tree-id10493 . -1) (undo-tree-id10494 . -1) (undo-tree-id10495 . -1) (undo-tree-id10496 . -1) (undo-tree-id10497 . -1) (undo-tree-id10498 . -1) (undo-tree-id10499 . -1) (undo-tree-id10500 . -1) (undo-tree-id10501 . -1) (undo-tree-id10502 . -1) (undo-tree-id10503 . -1) (undo-tree-id10504 . -1) (undo-tree-id10505 . -1) (undo-tree-id10506 . -1) (undo-tree-id10507 . -1) (undo-tree-id10508 . -1) (undo-tree-id10509 . -1) (undo-tree-id10510 . -1) (undo-tree-id10511 . -1) (undo-tree-id10512 . -1) (undo-tree-id10513 . -1) (undo-tree-id10514 . -1) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1) (undo-tree-id10535 . -1) (undo-tree-id10536 . -1) (undo-tree-id10537 . -1) (#("u" 0 1 (fontified t)) . -2277) (undo-tree-id10538 . -1) (undo-tree-id10539 . -1) (undo-tree-id10540 . -1) (undo-tree-id10541 . -1) (undo-tree-id10542 . -1) (undo-tree-id10543 . -1) (undo-tree-id10544 . -1) (undo-tree-id10545 . -1) (undo-tree-id10546 . -1) (undo-tree-id10547 . -1) (undo-tree-id10548 . -1) (undo-tree-id10549 . -1) (undo-tree-id10550 . -1) (undo-tree-id10551 . -1) (undo-tree-id10552 . -1) (#("n" 0 1 (fontified t)) . -2278) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1) 2279 (2276 . 2279) (#("." 0 1 (fontified t)) . -2276) (undo-tree-id10556 . -1) (#("c" 0 1 (fontified t)) . -2277) (undo-tree-id10557 . -1) (#("o" 0 1 (fontified t)) . -2278) (undo-tree-id10558 . -1) (#("p" 0 1 (fontified t)) . -2279) (undo-tree-id10559 . -1) (#("i" 0 1 (fontified t)) . -2280) (undo-tree-id10560 . -1) (#("e" 0 1 (fontified t)) . -2281) (undo-tree-id10561 . -1) (#("d" 0 1 (fontified t)) . -2282) (undo-tree-id10562 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2283) (undo-tree-id10563 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2284) (undo-tree-id10564 . -1) 2285) nil (26156 5195 105022 624000) 0 nil])
([nil nil ((2238 . 2244) (t 26156 5195 153660 652000)) nil (26156 5256 271141 524000) 0 nil])
([nil nil ((2285 . 2287) (2286 . 2291) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2285) (2285 . 2287) (2284 . 2286) (2282 . 2285)) nil (26156 5256 271137 890000) 0 nil])
([nil nil ((2316 . 2319) (2312 . 2316) (apply yas--snippet-revive 2303 2312 #s(yas--snippet nil (#s(yas--field 1 2308 2311 nil nil nil t #s(yas--exit 2312 nil))) #s(yas--exit 2312 nil) 89 nil #s(yas--field 1 2308 2311 nil nil nil t #s(yas--exit 2312 nil)) nil nil)) (2308 . 2311) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2308 2311 nil nil nil t #s(yas--exit 2312 nil))) #s(yas--exit 2312 nil) 89 nil #s(yas--field 1 2308 2311 nil nil nil t #s(yas--exit 2312 nil)) nil nil)) (2303 . 2309) (#("Some($1)$0" 0 10 (fontified nil)) . 2303) (2303 . 2313) (#("S" 0 1 (fontified nil)) . 2303) (2303 . 2304) (#("Some(…)" 0 7 (fontified nil)) . -2303) (2303 . 2310) (#("S" 0 1 (fontified t face font-lock-type-face)) . -2303) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) 2304 (2303 . 2304) (2300 . 2303) (2299 . 2300) (apply yas--snippet-revive 2295 2299 #s(yas--snippet nil nil #s(yas--exit 2299 nil) 88 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2299 nil) 88 nil nil nil nil)) (2295 . 2299) (#("None$0" 0 6 (fontified nil)) . 2295) (2295 . 2301) (#("N" 0 1 (fontified nil)) . 2295) (2295 . 2296) (#("None" 0 4 (fontified nil)) . -2295) (2295 . 2299) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2295) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) 2296 (2295 . 2296) (#("r" 0 1 (fontified t)) . -2295) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (#("e" 0 1 (fontified t)) . -2296) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (#("t" 0 1 (fontified t)) . -2297) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (#("u" 0 1 (fontified t)) . -2298) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (#("r" 0 1 (fontified t)) . -2299) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -2300) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (#(" " 0 1 (fontified t)) . -2301) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (#(" " 0 1 (fontified t)) . -2302) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (undo-tree-id10908 . -1) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2303) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) 2304 (2302 . 2304) (apply yas--snippet-revive 2295 2302 #s(yas--snippet nil nil #s(yas--exit 2302 nil) 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2302 nil) 87 nil nil nil nil)) (2295 . 2302) (#("return $0" 0 9 (fontified nil)) . 2295) (2295 . 2304) (#("ret" 0 3 (fontified nil)) . 2295) (2295 . 2298) (#("return" 0 6 (fontified nil)) . -2295) (2295 . 2301) (#("ret" 0 3 (fontified t)) . -2295) (undo-tree-id10912 . -3) (undo-tree-id10913 . -3) 2298 (2291 . 2298) (apply yas--snippet-revive 2287 2291 #s(yas--snippet nil nil #s(yas--exit 2291 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2291 nil) 86 nil nil nil nil)) (2287 . 2291) (#("None$0" 0 6 (fontified nil)) . 2287) (2287 . 2293) (#("N" 0 1 (fontified nil)) . 2287) (2287 . 2288) (#("None" 0 4 (fontified nil)) . -2287) (2287 . 2291) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2287) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) 2288 (2287 . 2288)) nil (26156 5256 271116 4000) 0 nil])
([nil nil ((2153 . 2156) (#("c" 0 1 (fontified t)) . -2153) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (#("a" 0 1 (fontified t)) . -2154) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (undo-tree-id10872 . -1) (#("l" 0 1 (fontified t)) . -2155) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) 2156 (2153 . 2156) (#("n" 0 1 (fontified t)) . -2153) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (#("e" 0 1 (fontified t)) . -2154) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) 2155 (#("w" 0 1 (fontified t)) . -2155) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) 2156 (2151 . 2156)) nil (26156 5256 271017 927000) 0 nil])
([nil nil ((2154 . 2156) (#("a" 0 1 (fontified t)) . -2154) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (#("l" 0 1 (fontified t)) . -2155) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) 2156) nil (26156 5256 270981 609000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2154) (undo-tree-id10861 . -1) 2155) nil (26156 5256 270968 187000) 0 nil])
([nil nil ((2154 . 2156) (#("l" 0 1 (fontified t)) . -2154) (undo-tree-id10858 . 1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) 2155) nil (26156 5256 270962 753000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 2314) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1)) nil (26156 5256 270954 4000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2314) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1)) nil (26156 5256 270947 797000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 2320) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1)) nil (26156 5256 270939 361000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2320) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1)) nil (26156 5256 270892 67000) 0 nil])
([nil nil ((2320 . 2327)) nil (26156 5256 270884 515000) 0 nil])
([nil nil ((2326 . 2327) (#(";" 0 1 (fontified t)) . -2326) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1) (undo-tree-id10820 . -1) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) 2327) nil (26156 5256 270872 477000) 0 nil])
([nil nil ((2321 . 2327) (2322 . 2324) (#("		    " 0 6 (fontified nil face (rainbow-delimiters-depth-5-face))) . 2321) (2321 . 2327) (2320 . 2322) (2319 . 2321) (t 26156 5256 347915 611000)) nil (26156 5278 628797 119000) 0 nil])
([nil nil ((#("v = val," 0 8 (fontified t)) . 2331) (undo-tree-id10916 . -7) (undo-tree-id10917 . -7) (undo-tree-id10918 . -7) (undo-tree-id10919 . -7) (undo-tree-id10920 . -7) 2338) nil (26156 5278 628790 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2331 . 2332) (nil fontified nil 2324 . 2332) (2324 . 2332) 2323) nil (26156 5278 628761 82000) 0 nil])
([nil nil ((2324 . 2327) 2331) nil (26156 5278 628755 584000) 0 nil])
([nil nil ((2302 . 2307) (2300 . 2302)) nil (26156 5278 628742 778000) 0 nil])
([nil nil ((2341 . 2342) (#("," 0 1 (rear-nonsticky t fontified t)) . -2341) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (#(" " 0 1 (fontified t)) . -2342) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (#(" " 0 1 (fontified t)) . -2343) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (undo-tree-id11021 . -1) (#(" " 0 1 (fontified t)) . -2344) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (undo-tree-id11033 . -1) (undo-tree-id11034 . -1) 2345 (t 26156 5278 711334 161000)) nil (26156 5282 136127 0) 0 nil])
([nil nil ((#("None" 0 4 (fontified t face font-lock-type-face)) . 2223) (undo-tree-id11040 . -3) (t 26156 5282 211245 734000)) nil (26156 5293 743548 17000) 0 nil])
([nil nil ((apply yas--snippet-revive 2230 2234 #s(yas--snippet nil nil #s(yas--exit 2234 nil) 91 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2234 nil) 91 nil nil nil nil)) (2230 . 2234) (#("None$0" 0 6 (fontified nil)) . 2230) (2230 . 2236) (#("N" 0 1 (fontified nil)) . 2230) (2230 . 2231) (#("None" 0 4 (fontified nil)) . -2230) (2230 . 2234) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2230) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) 2231 (2230 . 2231) (apply yas--snippet-revive 2223 2231 #s(yas--snippet nil nil #s(yas--exit 2230 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2230 nil) 90 nil nil nil nil)) (2223 . 2231) (#("return $0;" 0 10 (fontified nil)) . 2223) (2223 . 2233) (#("ret" 0 3 (fontified nil)) . 2223) (2223 . 2226) (#("return" 0 6 (fontified nil)) . -2223) (2223 . 2229) (#("ret" 0 3 (fontified t)) . -2223) (undo-tree-id11038 . -3) (undo-tree-id11039 . -3) 2226 (2223 . 2226)) nil (26156 5293 743530 971000) 0 nil])
([nil nil ((2342 . 2343) (t 26156 5293 818957 334000)) nil (26156 5308 171179 3000) 0 nil])
([nil nil ((2158 . 2160) (#("u" 0 1 (fontified nil)) . 2158) (2158 . 2159) (#("u8" 0 2 (fontified nil)) . -2158) (2158 . 2160) (#("u" 0 1 (fontified t)) . -2158) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) 2159 (2156 . 2159) (t 26156 5308 246609 101000)) nil (26156 5340 843342 649000) 0 nil])
([nil nil ((2224 . 2236) (2222 . 2224) (2210 . 2222) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2210) (undo-tree-id11063 . -1) (undo-tree-id11064 . -1) 2211 (2200 . 2211) (2179 . 2200) (t 26156 5342 257831 318000)) nil (26156 5354 848314 184000) 0 nil] [nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 2227) (undo-tree-id11060 . -6) (undo-tree-id11061 . -7) (undo-tree-id11062 . -7) (t 26156 5320 338325 759000)) ((2227 . 2234)) (26156 5340 208361 487000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2238) (undo-tree-id11168 . -1) 2239 (2238 . 2239) (#("	" 0 1 (fontified nil)) . 2237) (undo-tree-id11169 . -1) (2236 . 2239) (t 26156 5354 921556 589000)) nil (26156 5380 60278 861000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2231) (undo-tree-id11047 . -1) (undo-tree-id11048 . -1) (undo-tree-id11049 . -1) (undo-tree-id11050 . -1) (undo-tree-id11051 . -1) (undo-tree-id11052 . -1) (undo-tree-id11053 . -1) (undo-tree-id11054 . -1) (undo-tree-id11055 . -1) (undo-tree-id11056 . -1) (undo-tree-id11057 . -1) (undo-tree-id11058 . -1) (undo-tree-id11059 . -1) 2232) ((2231 . 2232)) (26156 5339 780790 899000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4036) (undo-tree-id11142 . -4) (undo-tree-id11143 . -4) (undo-tree-id11144 . -4) (undo-tree-id11145 . -4) (undo-tree-id11146 . -4) (undo-tree-id11147 . -4) (undo-tree-id11148 . -4) (undo-tree-id11149 . -4) (undo-tree-id11150 . -4) (undo-tree-id11151 . -4) (undo-tree-id11152 . -4) (undo-tree-id11153 . -4) (undo-tree-id11154 . -4) 4040 (4036 . 4040) (#("    " 0 4 (fontified nil)) . 4035) (undo-tree-id11155 . -4) (undo-tree-id11156 . -4) (undo-tree-id11157 . -4) (undo-tree-id11158 . -4) (undo-tree-id11159 . -4) (undo-tree-id11160 . -4) (undo-tree-id11161 . -4) (undo-tree-id11162 . -4) (undo-tree-id11163 . -4) (undo-tree-id11164 . -4) (undo-tree-id11165 . -4) (undo-tree-id11166 . -4) (undo-tree-id11167 . -4) (4034 . 4040)) nil (26156 5380 60268 548000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 2304) (undo-tree-id11044 . -6) (undo-tree-id11045 . -6) (undo-tree-id11046 . -7)) ((2304 . 2311) (t 26156 5334 278008 506000)) (26156 5334 199707 835000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4035) (undo-tree-id11118 . 1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) (undo-tree-id11137 . -1) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1)) nil (26156 5380 60216 596000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 4035) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . 1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . 1) (undo-tree-id11117 . -1)) nil (26156 5380 60169 200000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 4035) (undo-tree-id11065 . -4) (undo-tree-id11066 . 5) (undo-tree-id11067 . -3) (undo-tree-id11068 . -3) (undo-tree-id11069 . -3) (undo-tree-id11070 . -3) (undo-tree-id11071 . -3) (undo-tree-id11072 . -3) (undo-tree-id11073 . -3) (undo-tree-id11074 . -3) (undo-tree-id11075 . -3) (undo-tree-id11076 . -3) (undo-tree-id11077 . -5) (undo-tree-id11078 . -5) (undo-tree-id11079 . -5) (undo-tree-id11080 . -5) (undo-tree-id11081 . -5) (undo-tree-id11082 . -5) (undo-tree-id11083 . -5) (undo-tree-id11084 . -5) (undo-tree-id11085 . -5) (undo-tree-id11086 . -5) (undo-tree-id11087 . -5) (undo-tree-id11088 . -5) (undo-tree-id11089 . -5) (undo-tree-id11090 . -5) (undo-tree-id11091 . -5) (undo-tree-id11092 . -5) (undo-tree-id11093 . -5) (undo-tree-id11094 . -5) (undo-tree-id11095 . -3) (undo-tree-id11096 . -3) (undo-tree-id11097 . -3) (undo-tree-id11098 . -3) (undo-tree-id11099 . -3) (undo-tree-id11100 . -3) (undo-tree-id11101 . -3) (undo-tree-id11102 . -3) (undo-tree-id11103 . -3) (undo-tree-id11104 . 5) (undo-tree-id11105 . -4) (undo-tree-id11106 . -5)) nil (26156 5380 60139 41000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3397) (undo-tree-id11206 . -4) 3401 (3397 . 3401) (#("    " 0 4 (fontified nil)) . 3396) (undo-tree-id11207 . -4) (3396 . 3401) (#("    " 0 4 (fontified nil)) . 3395) (undo-tree-id11208 . -4) (3394 . 3400) (t 26156 5380 137032 490000)) nil (26156 5500 832526 882000) 0 nil])
([nil nil ((3397 . 3401)) nil (26156 5500 832516 580000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2448) (undo-tree-id11204 . -4) 2452 (2448 . 2452) (#("    " 0 4 (fontified nil)) . 2447) (undo-tree-id11205 . -4) (2446 . 2452)) nil (26156 5500 832513 143000) 0 nil])
([nil nil ((2507 . 2517) (#("rad" 0 3 (fontified nil)) . 2507) (2507 . 2510) (#("rad: usize" 0 10 (fontified nil)) . -2507) (2507 . 2517) (#("rad" 0 3 (fontified t)) . -2507) (undo-tree-id11182 . -3) (undo-tree-id11183 . -3) 2510 (2505 . 2510) (#("," 0 1 (fontified t)) . -2505) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (#(" " 0 1 (fontified t)) . -2506) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) 2507 (2505 . 2507) (2497 . 2505) (#("y" 0 1 (fontified nil)) . 2497) (2497 . 2498) (#("y: usize" 0 8 (fontified nil)) . -2497) (2497 . 2505) (#("y" 0 1 (fontified t)) . -2497) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) 2498 (2497 . 2498) (#("u" 0 1 (fontified t)) . -2497) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) 2498 (2495 . 2498) (2487 . 2495) (#("us" 0 2 (fontified nil)) . 2487) (2487 . 2489) (#("x: usize" 0 8 (fontified nil)) . -2487) (2487 . 2495) (#("us" 0 2 (fontified t)) . -2487) (undo-tree-id11193 . -2) (undo-tree-id11194 . -2) (undo-tree-id11195 . -2) 2489 (2485 . 2489) (2484 . 2485) (#("d" 0 1 (fontified t)) . -2484) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) 2485 (2479 . 2485) (2476 . 2479) (2475 . 2477) (#(" " 0 1 (fontified t)) . -2475) (undo-tree-id11198 . -1) 2476 (2475 . 2476) (2472 . 2475) (#("v" 0 1 (fontified t face font-lock-function-name-face)) . -2472) (undo-tree-id11199 . -1) 2473 (2460 . 2473) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -2460) (undo-tree-id11200 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -2461) (undo-tree-id11201 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -2462) (undo-tree-id11202 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -2463) (undo-tree-id11203 . -1) 2464 (2452 . 2464) (2448 . 2452)) nil (26156 5500 832492 659000) 0 nil])
([nil nil ((2521 . 2522) (2522 . 2526) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2521) (2521 . 2522) (2520 . 2522) (2518 . 2521)) nil (26156 5500 832434 942000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2955 . 2956) (nil fontified nil 2522 . 2956) (2522 . 2956) 2521) nil (26156 5500 832430 990000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2522) 2521) nil (26156 5500 832427 653000) 0 nil])
([nil nil ((2769 . 2770)) nil (26156 5500 832424 683000) 0 nil])
([nil nil ((#("	let mut vec: Vec<u8> = Vec::new();

	" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 17 (fontified t face font-lock-type-face) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 20 (fontified t face font-lock-type-face) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 24 (fontified t) 24 27 (fontified t face font-lock-type-face) 27 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 38 (fontified t)) . 2771) (undo-tree-id11178 . -37) (undo-tree-id11179 . -37) (undo-tree-id11180 . -37) (undo-tree-id11181 . -37)) nil (26156 5500 832422 130000) 0 nil])
([nil nil ((#("		vec.push(data);
" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-5-face)) 11 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-5-face)) 16 18 (fontified t)) . 2888) (undo-tree-id11176 . -17) (undo-tree-id11177 . -2) 2890) nil (26156 5500 832411 820000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 2868) (undo-tree-id11174 . -2) (undo-tree-id11175 . -3)) nil (26156 5500 832404 904000) 0 nil])
([nil nil ((2868 . 2871)) nil (26156 5500 832397 698000) 0 nil])
([nil nil ((2876 . 2879) (#("m" 0 1 (fontified t)) . -2876) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (#(" " 0 1 (fontified t)) . -2877) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) 2878 (2876 . 2878)) nil (26156 5500 832386 272000) 0 nil])
([nil nil ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 2851) (undo-tree-id11211 . -3) (undo-tree-id11212 . -4) (t 26156 5500 906904 685000)) nil (26156 5508 15991 78000) 0 nil])
([nil nil ((#("data " 0 4 (fontified t) 4 5 (fontified t)) . 2851) (undo-tree-id11210 . -4)) nil (26156 5508 15981 972000) 0 nil])
([nil nil ((#("=  " 0 3 (fontified t)) . 2851) (undo-tree-id11209 . -2)) nil (26156 5508 15969 338000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2848) (undo-tree-id11214 . -1) (t 26156 5508 90796 151000)) nil (26156 5511 196651 696000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2878) (undo-tree-id11213 . -1)) nil (26156 5511 196626 91000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2449) (undo-tree-id11266 . -4) (undo-tree-id11267 . -4) (undo-tree-id11268 . -4) (undo-tree-id11269 . -4) (undo-tree-id11270 . -4) (undo-tree-id11271 . -4) (undo-tree-id11272 . -4) (undo-tree-id11273 . -4) (undo-tree-id11274 . -4) (undo-tree-id11275 . -4) (undo-tree-id11276 . -4) (undo-tree-id11277 . -4) (undo-tree-id11278 . -4) 2453 (2449 . 2453) (#("    " 0 4 (fontified nil)) . 2448) (undo-tree-id11279 . -4) (undo-tree-id11280 . -4) (undo-tree-id11281 . -4) (undo-tree-id11282 . -4) (undo-tree-id11283 . -4) (undo-tree-id11284 . -4) (undo-tree-id11285 . -4) (undo-tree-id11286 . -4) (undo-tree-id11287 . -4) (undo-tree-id11288 . -4) (undo-tree-id11289 . -4) (undo-tree-id11290 . -4) (undo-tree-id11291 . -4) (undo-tree-id11292 . -4) (2448 . 2453) (#("    " 0 4 (fontified nil)) . 2447) (2447 . 2451) (2447 . 2448) (t 26156 5511 274748 642000)) nil (26156 5532 543067 801000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2524) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) 2525 (2524 . 2525) (#("	" 0 1 (fontified nil)) . 2523) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (2522 . 2525)) nil (26156 5532 543008 961000) 0 nil])
([nil nil ((2523 . 2524)) nil (26156 5532 542960 148000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -2574) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) 2575 (2572 . 2575) (2551 . 2572) (2540 . 2551) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2540) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) 2541 (2529 . 2541) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -2529) (undo-tree-id11232 . -1) 2530 (2529 . 2530) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -2529) (undo-tree-id11233 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -2530) (undo-tree-id11234 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2531) (undo-tree-id11235 . -1) 2532 (2529 . 2532) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -2529) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2530) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) 2531 (2524 . 2531)) nil (26156 5532 542943 892000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -4428) (undo-tree-id11429 . -1) (undo-tree-id11430 . -1) (undo-tree-id11431 . -1) (undo-tree-id11432 . -1) (undo-tree-id11433 . -1) (#("l" 0 1 (fontified t)) . -4429) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) 4430 (4429 . 4430) (4428 . 4429) (4427 . 4428) (4419 . 4427) (#("map" 0 3 (fontified nil)) . 4419) (4419 . 4422) (#("map_data" 0 8 (fontified nil)) . -4419) (4419 . 4427) (#("map" 0 3 (fontified t)) . -4419) (undo-tree-id11437 . -3) (undo-tree-id11438 . -3) 4422 (4421 . 4422) (4419 . 4421) (4412 . 4419) (4411 . 4412) (4409 . 4411) (4407 . 4409) (4405 . 4407) (4401 . 4405) (#("    " 0 4 (fontified nil)) . 4400) (undo-tree-id11439 . -4) (4399 . 4405) (t 26156 5532 594439 725000)) nil (26156 5585 746395 14000) 0 nil])
([nil nil ((#("    let blacked = map_data.
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 27 (fontified t) 27 28 (fontified t)) . 4401) (undo-tree-id11293 . -27) (undo-tree-id11294 . 1) (undo-tree-id11295 . -27) (undo-tree-id11296 . -4) (undo-tree-id11297 . -4) (undo-tree-id11298 . -27) (undo-tree-id11299 . -27) (undo-tree-id11300 . -27) (undo-tree-id11301 . -27) (undo-tree-id11302 . -27) (undo-tree-id11303 . -27) (undo-tree-id11304 . -27) (undo-tree-id11305 . -27) (undo-tree-id11306 . -27) (undo-tree-id11307 . -27) (undo-tree-id11308 . 1) (undo-tree-id11309 . -27) (undo-tree-id11310 . -27) (undo-tree-id11311 . -27) (undo-tree-id11312 . -27) (undo-tree-id11313 . -27) (undo-tree-id11314 . -27) (undo-tree-id11315 . -27) (undo-tree-id11316 . -27) (undo-tree-id11317 . -27) (undo-tree-id11318 . -27) (undo-tree-id11319 . -27) (undo-tree-id11320 . -27) (undo-tree-id11321 . -27) (undo-tree-id11322 . -27) (undo-tree-id11323 . -27) (undo-tree-id11324 . -27) (undo-tree-id11325 . -27) (undo-tree-id11326 . -27) (undo-tree-id11327 . -27) (undo-tree-id11328 . -27) (undo-tree-id11329 . -27) (undo-tree-id11330 . -27) (undo-tree-id11331 . -27) (undo-tree-id11332 . -27) (undo-tree-id11333 . -27) (undo-tree-id11334 . -27) (undo-tree-id11335 . -27) (undo-tree-id11336 . -27) (undo-tree-id11337 . -27) (undo-tree-id11338 . -27) (undo-tree-id11339 . -27) (undo-tree-id11340 . -27) (undo-tree-id11341 . -27) (undo-tree-id11342 . -27) (undo-tree-id11343 . -27) (undo-tree-id11344 . -27) (undo-tree-id11345 . -27) (undo-tree-id11346 . -27) (undo-tree-id11347 . -27) (undo-tree-id11348 . -27) (undo-tree-id11349 . -27) (undo-tree-id11350 . -27) (undo-tree-id11351 . -27) (undo-tree-id11352 . -27) (undo-tree-id11353 . -27) (undo-tree-id11354 . -27) (undo-tree-id11355 . -27) (undo-tree-id11356 . -27) (undo-tree-id11357 . -27) (undo-tree-id11358 . -27) (undo-tree-id11359 . -27) (undo-tree-id11360 . -27) (undo-tree-id11361 . -26) (undo-tree-id11362 . -26) (undo-tree-id11363 . -26) (undo-tree-id11364 . -26) (undo-tree-id11365 . -26) (undo-tree-id11366 . -26) (undo-tree-id11367 . -26) (undo-tree-id11368 . -26) (undo-tree-id11369 . -26) (undo-tree-id11370 . -26) (undo-tree-id11371 . -26) (undo-tree-id11372 . -4) (undo-tree-id11373 . -4) (undo-tree-id11374 . -4) (undo-tree-id11375 . -4) (undo-tree-id11376 . -4) (undo-tree-id11377 . -4) (undo-tree-id11378 . -4) (undo-tree-id11379 . -4) (undo-tree-id11380 . -4) (undo-tree-id11381 . -4) (undo-tree-id11382 . -4) (undo-tree-id11383 . -4) (undo-tree-id11384 . -4) (undo-tree-id11385 . -4) (undo-tree-id11386 . -4) (undo-tree-id11387 . -4) (undo-tree-id11388 . -4) (undo-tree-id11389 . -4) (undo-tree-id11390 . -4) (undo-tree-id11391 . -4) (undo-tree-id11392 . -4) (undo-tree-id11393 . -4) (undo-tree-id11394 . -4) (undo-tree-id11395 . -4) (undo-tree-id11396 . -4) (undo-tree-id11397 . -4) (undo-tree-id11398 . -4) (undo-tree-id11399 . -4) (undo-tree-id11400 . -4) (undo-tree-id11401 . -4) (undo-tree-id11402 . -4) (undo-tree-id11403 . -4) (undo-tree-id11404 . -4) (undo-tree-id11405 . -4) (undo-tree-id11406 . -4) (undo-tree-id11407 . -4) (undo-tree-id11408 . -4) (undo-tree-id11409 . -4) (undo-tree-id11410 . -4) (undo-tree-id11411 . -4) (undo-tree-id11412 . -4) (undo-tree-id11413 . -4) (undo-tree-id11414 . -4) (undo-tree-id11415 . -4) (undo-tree-id11416 . -4) (undo-tree-id11417 . -4) (undo-tree-id11418 . -4) (undo-tree-id11419 . -4) (undo-tree-id11420 . -4) (undo-tree-id11421 . -4) (undo-tree-id11422 . -4) (undo-tree-id11423 . -4) (undo-tree-id11424 . -4) (undo-tree-id11425 . -4) (undo-tree-id11426 . -4) (undo-tree-id11427 . -4) (undo-tree-id11428 . -28) 4405) nil (26156 5585 746345 977000) 0 nil])
([nil nil ((65 . 67) (t 26156 5585 793735 302000)) nil (26156 5612 851879 851000) 0 nil])
([nil nil ((65 . 66)) nil (26156 5612 851877 879000) 0 nil])
([nil nil ((74 . 75) (apply yas--snippet-revive 67 80 #s(yas--snippet nil (#s(yas--field 0 74 79 nil nil nil nil nil)) nil 92 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 74 79 nil nil nil nil nil)) nil 92 nil nil nil nil)) (67 . 80) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 67) (67 . 85) (#("der" 0 3 (fontified nil)) . 67) (67 . 70) (#("derive(…)" 0 9 (fontified nil)) . -67) (67 . 76) (#("der" 0 3 (fontified t face font-lock-preprocessor-face)) . -67) (undo-tree-id11542 . -2) (undo-tree-id11543 . -3) (undo-tree-id11544 . -3) (undo-tree-id11545 . -3) (undo-tree-id11546 . -3) (undo-tree-id11547 . -3) (undo-tree-id11548 . -3) (undo-tree-id11549 . -3) (undo-tree-id11550 . -3) (undo-tree-id11551 . -3) (undo-tree-id11552 . -3) (undo-tree-id11553 . -3) (undo-tree-id11554 . -3) (undo-tree-id11555 . -3) (undo-tree-id11556 . -3) (undo-tree-id11557 . -3) (undo-tree-id11558 . -3) (undo-tree-id11559 . -3) (undo-tree-id11560 . -3) (undo-tree-id11561 . -3) (undo-tree-id11562 . -3) (undo-tree-id11563 . -3) (undo-tree-id11564 . -3) (undo-tree-id11565 . -3) (undo-tree-id11566 . -3) (undo-tree-id11567 . -3) (undo-tree-id11568 . -3) (undo-tree-id11569 . -3) (undo-tree-id11570 . -3) (undo-tree-id11571 . -3) (undo-tree-id11572 . -3) (undo-tree-id11573 . -3) (undo-tree-id11574 . -3) (undo-tree-id11575 . -3) (undo-tree-id11576 . -3) (undo-tree-id11577 . -3) (undo-tree-id11578 . -3) (undo-tree-id11579 . -3) (undo-tree-id11580 . -3) (undo-tree-id11581 . -3) (undo-tree-id11582 . -3) (undo-tree-id11583 . -3) (undo-tree-id11584 . -3) (undo-tree-id11585 . -3) (undo-tree-id11586 . -3) (undo-tree-id11587 . -3) (undo-tree-id11588 . -3) (undo-tree-id11589 . -3) (undo-tree-id11590 . -3) (undo-tree-id11591 . -3) (undo-tree-id11592 . -3) (undo-tree-id11593 . -3) (undo-tree-id11594 . -3) (undo-tree-id11595 . -3) (undo-tree-id11596 . -3) (undo-tree-id11597 . -3) (undo-tree-id11598 . -3) (undo-tree-id11599 . -3) (undo-tree-id11600 . -3) (undo-tree-id11601 . -3) (undo-tree-id11602 . -3) (undo-tree-id11603 . -3) (undo-tree-id11604 . -3) (undo-tree-id11605 . -3) (undo-tree-id11606 . -3) (undo-tree-id11607 . -3) (undo-tree-id11608 . -3) (undo-tree-id11609 . -3) (undo-tree-id11610 . -3) (undo-tree-id11611 . -3) (undo-tree-id11612 . -3) (undo-tree-id11613 . -3) (undo-tree-id11614 . -3) (undo-tree-id11615 . -3) (undo-tree-id11616 . -3) (undo-tree-id11617 . -3) 70 (67 . 70)) nil (26156 5612 851865 724000) 0 nil])
([nil nil ((74 . 79) (#("Cl" 0 2 (fontified nil)) . 74) (74 . 76) (#("Clone" 0 5 (fontified nil)) . -74) (74 . 79) (#("Cl" 0 2 (fontified t face font-lock-preprocessor-face)) . -74) (undo-tree-id11440 . -2) (undo-tree-id11441 . -2) (undo-tree-id11442 . -1) (undo-tree-id11443 . -1) (undo-tree-id11444 . -1) (undo-tree-id11445 . -1) (undo-tree-id11446 . -1) (undo-tree-id11447 . -1) (undo-tree-id11448 . -1) (undo-tree-id11449 . -1) (undo-tree-id11450 . -1) (undo-tree-id11451 . -1) (undo-tree-id11452 . -1) (undo-tree-id11453 . -1) (undo-tree-id11454 . -1) (undo-tree-id11455 . -1) (undo-tree-id11456 . -1) (undo-tree-id11457 . -1) (undo-tree-id11458 . -1) (undo-tree-id11459 . -1) (undo-tree-id11460 . -1) (undo-tree-id11461 . -1) (undo-tree-id11462 . -1) (undo-tree-id11463 . -1) (undo-tree-id11464 . -1) (undo-tree-id11465 . -1) (undo-tree-id11466 . -1) (undo-tree-id11467 . -1) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -2) (undo-tree-id11477 . -2) (undo-tree-id11478 . -2) (undo-tree-id11479 . -2) (undo-tree-id11480 . -2) (undo-tree-id11481 . -2) (undo-tree-id11482 . -2) (undo-tree-id11483 . -2) (undo-tree-id11484 . -2) (undo-tree-id11485 . -2) (undo-tree-id11486 . -2) (undo-tree-id11487 . -2) (undo-tree-id11488 . -2) (undo-tree-id11489 . -2) (undo-tree-id11490 . -2) (undo-tree-id11491 . -2) (undo-tree-id11492 . -2) (undo-tree-id11493 . -2) (undo-tree-id11494 . -2) (undo-tree-id11495 . -2) (undo-tree-id11496 . -2) (undo-tree-id11497 . -2) (undo-tree-id11498 . -2) (undo-tree-id11499 . -2) (undo-tree-id11500 . -2) (undo-tree-id11501 . -2) (undo-tree-id11502 . -2) (undo-tree-id11503 . -2) (undo-tree-id11504 . -2) (undo-tree-id11505 . -2) (undo-tree-id11506 . -2) (undo-tree-id11507 . -2) (undo-tree-id11508 . -2) (undo-tree-id11509 . -2) (undo-tree-id11510 . -2) (undo-tree-id11511 . -2) (undo-tree-id11512 . -2) (undo-tree-id11513 . -2) (undo-tree-id11514 . -2) (undo-tree-id11515 . -2) (undo-tree-id11516 . -2) (undo-tree-id11517 . -2) (undo-tree-id11518 . -2) (undo-tree-id11519 . -2) (undo-tree-id11520 . -2) (undo-tree-id11521 . -2) (undo-tree-id11522 . -2) (undo-tree-id11523 . -2) (undo-tree-id11524 . -2) (undo-tree-id11525 . -2) (undo-tree-id11526 . -2) (undo-tree-id11527 . -2) (undo-tree-id11528 . -2) (undo-tree-id11529 . -2) (undo-tree-id11530 . -2) (undo-tree-id11531 . -2) (undo-tree-id11532 . -2) (undo-tree-id11533 . -2) (undo-tree-id11534 . -2) (undo-tree-id11535 . -2) (undo-tree-id11536 . -2) (undo-tree-id11537 . -2) (undo-tree-id11538 . -2) (undo-tree-id11539 . -2) (undo-tree-id11540 . -2) (undo-tree-id11541 . -2) 76 (74 . 76)) nil (26156 5612 851489 287000) 0 nil])
([nil nil ((4424 . 4428) (t 26156 5612 925410 230000)) nil (26156 5701 457343 547000) 0 nil])
([nil nil ((apply yas--snippet-revive 4453 4460 #s(yas--snippet nil nil #s(yas--exit 4460 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4460 nil) 93 nil nil nil nil)) (4453 . 4460) (#("clone()$0" 0 9 (fontified nil)) . 4453) (4453 . 4462) (#("cl" 0 2 (fontified nil)) . 4453) (4453 . 4455) (#("clone() (as Clone)" 0 18 (fontified nil)) . -4453) (4453 . 4471) (#("cl" 0 2 (fontified t)) . -4453) (undo-tree-id11668 . -2) (undo-tree-id11669 . -2) (undo-tree-id11670 . -2) 4455 (4452 . 4455) (4444 . 4452) (#("ma" 0 2 (fontified nil)) . 4444) (4444 . 4446) (#("map_data" 0 8 (fontified nil)) . -4444) (4444 . 4452) (#("ma" 0 2 (fontified t)) . -4444) (undo-tree-id11671 . -2) (undo-tree-id11672 . -2) (undo-tree-id11673 . -2) 4446 (4438 . 4446) (4427 . 4438) (4423 . 4427)) nil (26156 5701 457336 678000) 0 nil])
([nil nil ((4460 . 4461)) nil (26156 5701 457317 837000) 0 nil])
([nil nil ((4431 . 4435)) nil (26156 5701 457315 778000) 0 nil])
([nil nil ((4551 . 4552) (apply yas--snippet-revive 4482 4551 #s(yas--snippet nil (#s(yas--field 1 4503 4523 nil nil nil t #s(yas--field 2 4525 4546 nil nil nil t #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil)))) #s(yas--field 2 4525 4546 nil nil nil t #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil))) #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil))) #s(yas--exit 4551 nil) 94 nil #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil)) nil nil)) (4549 . 4550) (#("rad" 0 3 (fontified nil)) . 4549) (4548 . 4549) (4542 . 4546) (4536 . 4542) (#("he" 0 2 (fontified nil)) . 4536) (4536 . 4538) (#("height" 0 6 (fontified nil)) . -4536) (4536 . 4542) (#("he" 0 2 (fontified t)) . -4536) (undo-tree-id11648 . -1) (undo-tree-id11649 . -2) (undo-tree-id11650 . -2) 4538 (4535 . 4538) (4525 . 4535) (#("ne" 0 2 (fontified nil)) . 4525) (4525 . 4527) (#("next_thing" 0 10 (fontified nil)) . -4525) (4525 . 4535) (#("ne" 0 2 (fontified t)) . -4525) (undo-tree-id11651 . -2) (undo-tree-id11652 . -2) 4527 (4526 . 4527) (#("y" 0 1 (fontified nil)) . 4526) (4525 . 4526) (4519 . 4523) (4514 . 4519) (#("w" 0 1 (fontified nil)) . 4514) (4514 . 4515) (#("width" 0 5 (fontified nil)) . -4514) (4514 . 4519) (#("w" 0 1 (fontified t)) . -4514) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) 4515 (4513 . 4515) (4503 . 4513) (#("ne" 0 2 (fontified nil)) . 4503) (4503 . 4505) (#("next_thing" 0 10 (fontified nil)) . -4503) (4503 . 4513) (#("ne" 0 2 (fontified t)) . -4503) (undo-tree-id11656 . -2) (undo-tree-id11657 . -2) 4505 (4504 . 4505) (#("x" 0 1 (fontified nil)) . 4504) (4503 . 4504) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4503 4523 nil nil nil t #s(yas--field 2 4525 4546 nil nil nil t #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil)))) #s(yas--field 2 4525 4546 nil nil nil t #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil))) #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil))) #s(yas--exit 4551 nil) 94 nil #s(yas--field 3 4548 4550 nil nil nil t #s(yas--exit 4551 nil)) nil nil)) (4482 . 4513) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 4482) (4482 . 4530) (#("make" 0 4 (fontified nil)) . 4482) (4482 . 4486) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -4482) (4482 . 4505) (#("make" 0 4 (fontified t)) . -4482) (undo-tree-id11658 . -1) (undo-tree-id11659 . -4) (undo-tree-id11660 . -4) 4486 (4484 . 4486) (4481 . 4484) (4471 . 4481) (#("ne" 0 2 (fontified nil)) . 4471) (4471 . 4473) (#("next_thing" 0 10 (fontified nil)) . -4471) (4471 . 4481) (#("ne" 0 2 (fontified t)) . -4471) (undo-tree-id11661 . -2) (undo-tree-id11662 . -2) 4473 (4471 . 4473) (#("m" 0 1 (fontified t)) . -4471) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (#("a" 0 1 (fontified t)) . -4472) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) 4473 (4471 . 4473) (4467 . 4471) (#("    " 0 4 (fontified nil)) . 4466) (undo-tree-id11667 . -4) (4465 . 4471)) nil (26156 5701 457299 130000) 0 nil])
([nil nil ((4599 . 4600) (#("4" 0 1 (fontified t face font-lock-string-face)) . -4599) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (#("3" 0 1 (fontified t face font-lock-string-face)) . -4600) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) 4601 (4595 . 4601) (4594 . 4596) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4594) (undo-tree-id11631 . -1) (#("path" 0 4 (fontified nil)) . 4595) (undo-tree-id11632 . -4) (4594 . 4595) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4594 4601 nil nil nil t #s(yas--exit 4602 nil))) #s(yas--exit 4602 nil) 96 nil #s(yas--field 1 4594 4601 nil nil nil t #s(yas--exit 4602 nil)) nil nil)) (4578 . 4599) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 4578) (4578 . 4606) (#("wr" 0 2 (fontified nil)) . 4578) (4578 . 4580) (#("write_as_binary(…)" 0 18 (fontified nil)) . -4578) (4578 . 4596) (#("wr" 0 2 (fontified t)) . -4578) (undo-tree-id11633 . -1) (undo-tree-id11634 . -2) (undo-tree-id11635 . -2) 4580 (4577 . 4580) (apply yas--snippet-revive 4569 4577 #s(yas--snippet nil nil #s(yas--exit 4577 nil) 95 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4577 nil) 95 nil nil nil nil)) (4569 . 4577) (#("to_pgm()$0" 0 10 (fontified nil)) . 4569) (4569 . 4579) (#("to" 0 2 (fontified nil)) . 4569) (4569 . 4571) (#("to_pgm()" 0 8 (fontified nil)) . -4569) (4569 . 4577) (#("to" 0 2 (fontified t)) . -4569) (undo-tree-id11636 . -2) (undo-tree-id11637 . -2) (undo-tree-id11638 . -2) 4571 (4569 . 4571) (#("m" 0 1 (fontified t)) . -4569) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (#("a" 0 1 (fontified t)) . -4570) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) 4571 (4568 . 4571) (4558 . 4568) (#("ne" 0 2 (fontified nil)) . 4558) (4558 . 4560) (#("next_thing" 0 10 (fontified nil)) . -4558) (4558 . 4568) (#("ne" 0 2 (fontified t)) . -4558) (undo-tree-id11645 . -2) (undo-tree-id11646 . -2) 4560 (4558 . 4560) (4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id11647 . -4) (4552 . 4558)) nil (26156 5701 457224 589000) 0 nil])
([nil nil ((4623 . 4631) (4617 . 4623) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4617) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -4618) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) 4619 (4611 . 4619) (4610 . 4612) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4610) (undo-tree-id11622 . -1) (#("msg" 0 3 (fontified nil)) . 4611) (undo-tree-id11623 . -3) (4610 . 4611) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4610 4632 nil nil nil t #s(yas--exit 4633 nil))) #s(yas--exit 4633 nil) 97 nil #s(yas--field 1 4610 4632 nil nil nil t #s(yas--exit 4633 nil)) nil nil)) (4603 . 4614) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 4603) (4603 . 4621) (#("ex" 0 2 (fontified nil)) . 4603) (4603 . 4605) (#("expect(…)" 0 9 (fontified nil)) . -4603) (4603 . 4612) (#("ex" 0 2 (fontified t)) . -4603) (undo-tree-id11624 . -2) (undo-tree-id11625 . -2) (undo-tree-id11626 . -2) 4605 (4602 . 4605) (apply yas--snippet-revive 4578 4602 #s(yas--snippet nil (#s(yas--field 1 4594 4601 nil nil nil t #s(yas--exit 4602 nil))) #s(yas--exit 4602 nil) 96 nil #s(yas--field 1 4594 4601 nil nil nil t #s(yas--exit 4602 nil)) nil nil))) nil (26156 5701 457165 539000) 0 nil])
([nil nil ((4633 . 4634) (apply yas--snippet-revive 4603 4633 #s(yas--snippet nil (#s(yas--field 1 4610 4632 nil nil nil t #s(yas--exit 4633 nil))) #s(yas--exit 4633 nil) 97 nil #s(yas--field 1 4610 4632 nil nil nil t #s(yas--exit 4633 nil)) nil nil))) nil (26156 5701 456936 998000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 4635) (undo-tree-id11674 . -4) (undo-tree-id11675 . -3) (undo-tree-id11676 . -3) (undo-tree-id11677 . -3) (undo-tree-id11678 . -3) (undo-tree-id11679 . -3) (undo-tree-id11680 . -3) (undo-tree-id11681 . -3) (undo-tree-id11682 . -3) (undo-tree-id11683 . -3) (undo-tree-id11684 . -3) (undo-tree-id11685 . -3) (undo-tree-id11686 . -3) (undo-tree-id11687 . -3) (undo-tree-id11688 . -3) (undo-tree-id11689 . -3) (undo-tree-id11690 . -3) (undo-tree-id11691 . -3) (undo-tree-id11692 . -3) (undo-tree-id11693 . -3) (undo-tree-id11694 . -3) (undo-tree-id11695 . -3) (undo-tree-id11696 . -3) (undo-tree-id11697 . -5) 4638 (t 26156 5701 536492 710000)) nil (26156 5703 280367 665000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 4548) (undo-tree-id11700 . -1) (undo-tree-id11701 . -1) (t 26156 5703 332476 226000)) nil (26156 5731 14378 821000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 4548) (undo-tree-id11698 . -1) (undo-tree-id11699 . -1)) nil (26156 5731 14368 678000) 0 nil])
([nil nil ((4548 . 4550)) nil (26156 5731 14339 216000) 0 nil])
([nil nil ((4548 . 4549) (#("1" 0 1 (fontified t)) . -4548) (undo-tree-id11702 . -1) (undo-tree-id11703 . -1) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (#("0" 0 1 (fontified t)) . -4549) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) 4550 (t 26156 5731 68231 549000)) nil (26156 5804 550872 85000) 0 nil])
([nil nil ((2991 . 2993) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -2991) (undo-tree-id11831 . -1) (undo-tree-id11832 . -1) (undo-tree-id11833 . -1) (undo-tree-id11834 . -1) (undo-tree-id11835 . -1) (undo-tree-id11836 . -1) (undo-tree-id11837 . -1) (undo-tree-id11838 . -1) (undo-tree-id11839 . -1) (undo-tree-id11840 . -1) (undo-tree-id11841 . -1) (undo-tree-id11842 . -1) (undo-tree-id11843 . -1) (undo-tree-id11844 . -1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1) (undo-tree-id11849 . -1) (undo-tree-id11850 . -1) (undo-tree-id11851 . -1) (undo-tree-id11852 . -1) (undo-tree-id11853 . -1) (undo-tree-id11854 . -1) (undo-tree-id11855 . -1) (undo-tree-id11856 . -1) (undo-tree-id11857 . -1) (undo-tree-id11858 . -1) (undo-tree-id11859 . -1) (undo-tree-id11860 . -1) (undo-tree-id11861 . -1) (undo-tree-id11862 . -1) (undo-tree-id11863 . -1) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) (undo-tree-id11871 . -1) (undo-tree-id11872 . -1) (undo-tree-id11873 . -1) (undo-tree-id11874 . -1) (undo-tree-id11875 . -1) (undo-tree-id11876 . -1) (undo-tree-id11877 . -1) 2992 (2978 . 2992) (2974 . 2978) (#("    " 0 4 (fontified nil)) . 2973) (undo-tree-id11878 . -4) (2972 . 2978) (t 26156 5804 631666 547000)) nil (26156 5846 743006 571000) 0 nil])
([nil nil ((apply yas--snippet-revive 2997 3004 #s(yas--snippet nil nil #s(yas--exit 3003 nil) 98 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3003 nil) 98 nil nil nil nil)) (2997 . 3004) (#("todo!($0)" 0 9 (fontified nil)) . 2997) (2997 . 3006) (#("t" 0 1 (fontified nil)) . 2997) (2997 . 2998) (#("todo!(…)" 0 8 (fontified nil)) . -2997) (2997 . 3005) (#("t" 0 1 (fontified t)) . -2997) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -1) (undo-tree-id11766 . -1) (undo-tree-id11767 . -1) (undo-tree-id11768 . -1) (undo-tree-id11769 . -1) (undo-tree-id11770 . -1) (undo-tree-id11771 . -1) (undo-tree-id11772 . -1) (undo-tree-id11773 . -1) (undo-tree-id11774 . -1) (undo-tree-id11775 . -1) (undo-tree-id11776 . -1) (undo-tree-id11777 . -1) (undo-tree-id11778 . -1) (undo-tree-id11779 . -1) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1) (undo-tree-id11800 . -1) (undo-tree-id11801 . -1) (undo-tree-id11802 . -1) (undo-tree-id11803 . -1) (undo-tree-id11804 . -1) (undo-tree-id11805 . -1) (undo-tree-id11806 . -1) (undo-tree-id11807 . -1) (undo-tree-id11808 . -1) (undo-tree-id11809 . -1) (undo-tree-id11810 . -1) (undo-tree-id11811 . -1) (undo-tree-id11812 . -1) (undo-tree-id11813 . -1) (undo-tree-id11814 . -1) (undo-tree-id11815 . -1) (undo-tree-id11816 . -1) (undo-tree-id11817 . -1) (undo-tree-id11818 . -1) (undo-tree-id11819 . -1) (undo-tree-id11820 . -1) (undo-tree-id11821 . -1) (undo-tree-id11822 . -1) (undo-tree-id11823 . -1) (undo-tree-id11824 . -1) (undo-tree-id11825 . -1) (undo-tree-id11826 . -1) (undo-tree-id11827 . -1) (undo-tree-id11828 . -1) (undo-tree-id11829 . -1) (undo-tree-id11830 . -1) 2998 (2997 . 2998) (2996 . 2997) (2997 . 3001) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2996) (2996 . 2997) (2995 . 2997) (2993 . 2996)) nil (26156 5846 742407 760000) 0 nil])
([nil nil ((3004 . 3005)) nil (26156 5846 742208 891000) 0 nil])
([nil nil ((2996 . 2998) (2995 . 2996) (2992 . 2995) (t 26156 5846 783392 866000)) nil (26156 39042 545434 382000) 0 nil])
([nil nil ((2992 . 2996)) nil (26156 39042 545431 358000) 0 nil])
([nil nil ((3013 . 3021) (#("y" 0 1 (fontified nil)) . 3013) (3013 . 3014) (#("y: usize" 0 8 (fontified nil)) . -3013) (3013 . 3021) (#("y" 0 1 (fontified t)) . -3013) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) 3014 (3011 . 3014) (3003 . 3011) (#("x" 0 1 (fontified nil)) . 3003) (3003 . 3004) (#("x: usize" 0 8 (fontified nil)) . -3003) (3003 . 3011) (#("x" 0 1 (fontified t)) . -3003) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) 3004 (3001 . 3004)) nil (26156 39042 545424 865000) 0 nil])
([nil nil ((#("	todo!();
" 0 1 (fontified t) 1 6 (fontified t face font-lock-preprocessor-face) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t) 9 10 (fontified t)) . 3026) (undo-tree-id11931 . -9) (undo-tree-id11932 . -8) 3034) nil (26156 39042 545410 410000) 0 nil])
([nil nil ((3032 . 3036) (#("m" 0 1 (fontified t)) . -3032) (undo-tree-id11926 . -1) (undo-tree-id11927 . -1) (undo-tree-id11928 . -1) 3033 (#("a" 0 1 (fontified t)) . -3033) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) 3034 (3032 . 3034) (3027 . 3032) (3025 . 3027)) nil (26156 39042 545402 249000) 0 nil])
([nil nil ((3052 . 3054) (#(" " 0 1 (fontified t)) . -3052) (undo-tree-id11913 . -1) (undo-tree-id11914 . -1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -1) (undo-tree-id11920 . -1) (undo-tree-id11921 . -1) (undo-tree-id11922 . -1) (undo-tree-id11923 . -1) (undo-tree-id11924 . -1) 3053 (3037 . 3053) (#("v" 0 1 (fontified t)) . -3037) (undo-tree-id11925 . -1) 3038 (3036 . 3038)) nil (26156 39042 545387 305000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 2996) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1) (undo-tree-id11888 . -1) (undo-tree-id11889 . -1) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1)) nil (26156 39042 545357 220000) 0 nil])
([nil nil ((2992 . 2993)) nil (26156 39042 545307 113000) 0 nil])
([nil nil ((3058 . 3061) (3057 . 3058) (3055 . 3057) (3053 . 3055) (#("x" 0 1 (fontified t)) . -3053) (undo-tree-id11879 . -1) (undo-tree-id11880 . -1) (undo-tree-id11881 . -1) (#("," 0 1 (fontified t)) . -3054) (undo-tree-id11882 . -1) (undo-tree-id11883 . -1) (undo-tree-id11884 . -1) 3055 (3054 . 3055) (3053 . 3054)) nil (26156 39042 545300 179000) 0 nil])
([nil nil ((3062 . 3063)) nil (26156 39042 545261 294000) 0 nil])
([nil nil ((3053 . 3054) (#("s" 0 1 (fontified t)) . 3053) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (t 26156 39042 625239 310000)) nil (26156 39049 78839 358000) 0 nil])
([nil nil ((4036 . 4039) (#("f" 0 1 (fontified t face font-lock-function-name-face)) . -4036) (undo-tree-id12013 . -1) 4037 (4024 . 4037) (t 26156 39049 129684 236000)) nil (26156 39234 869195 773000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -4040) (undo-tree-id12010 . -1) (#(">" 0 1 (fontified t syntax-table (1))) . -4041) (undo-tree-id12011 . -1) (#(" " 0 1 (fontified t)) . -4042) (undo-tree-id12012 . -1) 4043 (4039 . 4043)) nil (26156 39234 869189 114000) 0 nil])
([nil nil ((4038 . 4043) (#("&sel" 0 1 (fontified nil face rust-ampersand-face) 1 4 (fontified nil)) . 4038) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (4039 . 4042) (#("&self" 0 5 (fontified nil)) . -4039) (4039 . 4044) (#("sel" 0 3 (fontified t)) . -4039) (undo-tree-id12007 . -3) (undo-tree-id12008 . -3) (undo-tree-id12009 . -3) 4042 (4038 . 4042)) nil (26156 39234 869178 586000) 0 nil])
([nil nil ((4048 . 4049) (4049 . 4053) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4048) (4048 . 4049) (4047 . 4049) (4045 . 4048)) nil (26156 39234 869165 48000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4094) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1) (undo-tree-id11981 . -1) (undo-tree-id11982 . -1) (undo-tree-id11983 . -1) (undo-tree-id11984 . -1) (undo-tree-id11985 . -1) (undo-tree-id11986 . -1) 4095 (4090 . 4095) (4087 . 4090) (4083 . 4088) (4078 . 4083) (4079 . 4080) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-4-face))) . 4078) (4078 . 4083) (4077 . 4079) (4076 . 4078) (#("i" 0 1 (fontified t)) . -4076) (undo-tree-id11987 . -1) (undo-tree-id11988 . -1) (undo-tree-id11989 . -1) 4077 (4073 . 4077) (#("f" 0 1 (fontified nil)) . 4073) (undo-tree-id11990 . -1) (4072 . 4073) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4072 4114 nil nil nil t #s(yas--exit 4115 nil))) #s(yas--exit 4115 nil) 100 nil #s(yas--field 1 4072 4114 nil nil nil t #s(yas--exit 4115 nil)) nil nil)) (4068 . 4074) (#("map(${1:f})$0" 0 13 (fontified nil)) . 4068) (4068 . 4081) (#("ma" 0 2 (fontified nil)) . 4068) (4068 . 4070) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -4068) (4068 . 4088) (#("ma" 0 2 (fontified t)) . -4068) (undo-tree-id11991 . -2) (undo-tree-id11992 . -2) (undo-tree-id11993 . -2) 4070 (4068 . 4070) (4067 . 4068) (apply yas--snippet-revive 4061 4067 #s(yas--snippet nil nil #s(yas--exit 4067 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4067 nil) 99 nil nil nil nil)) (4061 . 4067) (#("iter()$0" 0 8 (fontified nil)) . 4061) (4061 . 4069) (#("it" 0 2 (fontified nil)) . 4061) (4061 . 4063) (#("iter()" 0 6 (fontified nil)) . -4061) (4061 . 4067) (#("it" 0 2 (fontified t)) . -4061) (undo-tree-id11994 . -2) (undo-tree-id11995 . -2) 4063 (4061 . 4063) (#("m" 0 1 (fontified t)) . -4061) (undo-tree-id11996 . -1) (undo-tree-id11997 . -1) (undo-tree-id11998 . -1) (#("a" 0 1 (fontified t)) . -4062) (undo-tree-id11999 . -1) (undo-tree-id12000 . -1) (undo-tree-id12001 . -1) 4063 (4061 . 4063) (4060 . 4061) (4054 . 4060) (#("buffer" 0 6 (fontified nil)) . -4054) (4054 . 4060) (4053 . 4054) (4049 . 4053) (#("sel" 0 3 (fontified nil)) . 4049) (4049 . 4052) (#("self" 0 4 (fontified nil)) . -4049) (4049 . 4053) (#("sel" 0 3 (fontified t)) . -4049) (undo-tree-id12002 . -3) (undo-tree-id12003 . -3) 4052 (4049 . 4052)) nil (26156 39234 869148 325000) 0 nil])
([nil nil ((4097 . 4098) (4096 . 4098) (#("x" 0 1 (fontified t)) . -4096) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (#("
" 0 1 (fontified t)) . -4097) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (#("	" 0 1 (fontified t)) . -4098) (undo-tree-id11965 . -1) (undo-tree-id11966 . -1) (#("	" 0 1 (fontified t)) . -4099) (undo-tree-id11967 . -1) (undo-tree-id11968 . -1) (#("e" 0 1 (fontified t)) . -4100) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (#("l" 0 1 (fontified t)) . -4101) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) 4102 (4100 . 4102) (4097 . 4100) (#(" " 0 1 (fontified t)) . -4097) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) 4098 (4095 . 4098)) nil (26156 39234 869068 78000) 0 nil])
([nil nil ((4105 . 4110) (4099 . 4105)) nil (26156 39234 869034 22000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 4086) (undo-tree-id11948 . -1) (undo-tree-id11949 . -1) (undo-tree-id11950 . -1) (undo-tree-id11951 . -1) (undo-tree-id11952 . -1) (undo-tree-id11953 . -1) (undo-tree-id11954 . -1) (undo-tree-id11955 . -1) (undo-tree-id11956 . -1) (undo-tree-id11957 . -1) (undo-tree-id11958 . -1) (undo-tree-id11959 . -1) (undo-tree-id11960 . -1)) nil (26156 39234 869030 72000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 4093) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1) (undo-tree-id11946 . -1) (undo-tree-id11947 . -1)) nil (26156 39234 869004 807000) 0 nil])
([nil nil ((4108 . 4110)) nil (26156 39234 868994 541000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 4095) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1)) nil (26156 39234 868990 593000) 0 nil])
([nil nil ((4095 . 4096)) nil (26156 39234 868965 741000) 0 nil])
([nil nil ((4109 . 4110)) nil (26156 39234 868955 806000) 0 nil])
([nil nil ((apply yas--snippet-revive 4068 4115 #s(yas--snippet nil (#s(yas--field 1 4072 4114 nil nil nil t #s(yas--exit 4115 nil))) #s(yas--exit 4115 nil) 100 nil #s(yas--field 1 4072 4114 nil nil nil t #s(yas--exit 4115 nil)) nil nil))) nil (26156 39262 758933 913000) 0 nil])
([nil nil ((4059 . 4060) (4125 . 4126) (4057 . 4059) (4055 . 4057) (4053 . 4055) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -4053) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) 4054 (4053 . 4054) (4052 . 4053) (4049 . 4052) (#("b" 0 1 (fontified t)) . -4049) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (#("u" 0 1 (fontified t)) . -4050) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) 4051 (#("f" 0 1 (fontified t)) . -4051) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) 4052 (4051 . 4052) (4049 . 4051) (t 26156 39234 947287 593000)) nil (26156 39262 758925 763000) 0 nil])
([nil nil ((apply yas--snippet-revive 4127 4136 #s(yas--snippet nil nil #s(yas--exit 4136 nil) 101 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4136 nil) 101 nil nil nil nil)) (4127 . 4136) (#("collect()$0" 0 11 (fontified nil)) . 4127) (4127 . 4138) (#("co" 0 2 (fontified nil)) . 4127) (4127 . 4129) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -4127) (4127 . 4150) (#("co" 0 2 (fontified t)) . -4127) (undo-tree-id12014 . -2) (undo-tree-id12015 . -2) 4129 (4126 . 4129)) nil (26156 39262 758888 804000) 0 nil])
([nil nil ((4101 . 4102) (t 26156 39262 837441 422000)) nil (26156 39269 427158 596000) 0 nil])
([nil nil ((4063 . 4065) (apply yas--snippet-revive 4059 4064 #s(yas--snippet nil nil #s(yas--exit 4063 nil) 102 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4063 nil) 102 nil nil nil nil)) (4059 . 4064) (#("Vec<$0>" 0 7 (fontified nil)) . 4059) (4059 . 4066) (#("Ve" 0 2 (fontified nil)) . 4059) (4059 . 4061) (#("Vec<…>" 0 6 (fontified nil)) . -4059) (4059 . 4065) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -4059) (undo-tree-id12027 . -1) (undo-tree-id12028 . -2) (undo-tree-id12029 . -2) 4061 (4057 . 4061) (t 26156 39269 505959 597000)) nil (26156 39279 303123 542000) 0 nil])
([nil nil ((1831 . 1836) (t 26156 39279 354727 15000)) nil (26156 42101 945822 638000) 0 nil])
([nil nil ((1832 . 1850) (t 26156 42104 252842 679000)) nil (26156 44283 603380 596000) 0 nil] [nil nil ((nil rear-nonsticky nil 3820 . 3821) (nil fontified nil 1833 . 3821) (1833 . 3821)) ((#("fn count_intersection(vector1: &[u8], vector2: &[u8], index: usize, width: usize, height: usize, tolerance: usize) -> usize {
    let i = index / width;
    let j = index % width;

    let mut count = if vector1[index] == 1 && vector2[index] == 1 { 1 } else { 0 };

    for di in -tolerance as isize..=tolerance as isize {
        for dj in -tolerance as isize..=tolerance as isize {
            if di == 0 && dj == 0 {
                continue;
            }

            let ni = i as isize + di;
            let nj = j as isize + dj;

            if ni >= 0 && ni < height as isize && nj >= 0 && nj < width as isize {
                let neighbor_index = (ni * width as isize + nj) as usize;
                if vector1[neighbor_index] == 1 && vector2[neighbor_index] == 1 {
                    count += 1;
                }
            }
        }
    }

    count
}

fn jaccard_index_with_tolerance(vector1: &[u8], vector2: &[u8], width: usize, height: usize, tolerance: usize) -> f64 {
    let mut intersection = 0;
    let mut union = 0;

    for i in 0..height {
        for j in 0..width {
            let index = i * width + j;

            let value1 = vector1[index];
            let value2 = vector2[index];

            if value1 == 1 || value2 == 1 {
                union += 1;
            }

            if value1 == 1 && value2 == 1 {
                intersection += 1;
            } else {
                intersection += count_intersection(vector1, vector2, index, width, height, tolerance);
            }
        }
    }

    if union != 0 {
        intersection as f64 / union as f64
    } else {
        0.0
    }
}

fn main() {
    let width = 3;
    let height = 3;

    let vector1 = vec![1, 0, 1, 0, 1, 0, 1, 1, 1];
    let vector2 = vec![1, 0, 1, 0, 0, 1, 1, 1, 1];

    let tolerance = 1; // Adjust the tolerance value as needed

    println!(\"Jaccard Index (with tolerance): {}\", jaccard_index_with_tolerance(&vector1, &vector2, width, height, tolerance));
}
" 0 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil) 3 21 (fontified nil face font-lock-function-name-face) 21 22 (fontified nil face (rainbow-delimiters-depth-1-face)) 22 29 (fontified nil face font-lock-variable-name-face) 29 31 (fontified nil) 31 32 (fontified nil face rust-ampersand-face) 32 33 (fontified nil face (rainbow-delimiters-depth-2-face)) 33 35 (fontified nil face font-lock-type-face) 35 36 (fontified nil face (rainbow-delimiters-depth-2-face)) 36 38 (fontified nil) 38 45 (fontified nil face font-lock-variable-name-face) 45 47 (fontified nil) 47 48 (fontified nil face rust-ampersand-face) 48 49 (fontified nil face (rainbow-delimiters-depth-2-face)) 49 51 (fontified nil face font-lock-type-face) 51 52 (fontified nil face (rainbow-delimiters-depth-2-face)) 52 54 (fontified nil) 54 59 (fontified nil face font-lock-variable-name-face) 59 61 (fontified nil) 61 66 (fontified nil face font-lock-type-face) 66 68 (fontified nil) 68 73 (fontified nil face font-lock-variable-name-face) 73 75 (fontified nil) 75 80 (fontified nil face font-lock-type-face) 80 82 (fontified nil) 82 88 (fontified nil face font-lock-variable-name-face) 88 90 (fontified nil) 90 95 (fontified nil face font-lock-type-face) 95 97 (fontified nil) 97 106 (fontified nil face font-lock-variable-name-face) 106 108 (fontified nil) 108 113 (fontified nil face font-lock-type-face) 113 114 (fontified nil face (rainbow-delimiters-depth-1-face)) 114 116 (fontified nil) 116 117 (fontified nil syntax-table (1)) 117 118 (fontified nil) 118 123 (fontified nil face font-lock-type-face) 123 124 (fontified nil) 124 125 (fontified nil face (rainbow-delimiters-depth-1-face)) 125 130 (fontified nil) 130 133 (fontified nil face font-lock-keyword-face) 133 134 (fontified nil) 134 135 (fontified nil face font-lock-variable-name-face) 135 157 (fontified nil) 157 160 (fontified nil face font-lock-keyword-face) 160 161 (fontified nil) 161 162 (fontified nil face font-lock-variable-name-face) 162 185 (fontified nil) 185 188 (fontified nil face font-lock-keyword-face) 188 189 (fontified nil) 189 192 (fontified nil face font-lock-keyword-face) 192 193 (fontified nil) 193 198 (fontified nil face font-lock-variable-name-face) 198 201 (fontified nil) 201 203 (fontified nil face font-lock-keyword-face) 203 211 (fontified nil) 211 212 (fontified nil face (rainbow-delimiters-depth-2-face)) 212 217 (fontified nil) 217 218 (fontified nil face (rainbow-delimiters-depth-2-face)) 218 234 (fontified nil) 234 235 (fontified nil face (rainbow-delimiters-depth-2-face)) 235 240 (fontified nil) 240 241 (fontified nil face (rainbow-delimiters-depth-2-face)) 241 247 (fontified nil) 247 248 (fontified nil face (rainbow-delimiters-depth-2-face)) 248 251 (fontified nil) 251 252 (fontified nil face (rainbow-delimiters-depth-2-face)) 252 253 (fontified nil) 253 257 (fontified nil face font-lock-keyword-face) 257 258 (fontified nil) 258 259 (fontified nil face (rainbow-delimiters-depth-2-face)) 259 262 (fontified nil) 262 263 (fontified nil face (rainbow-delimiters-depth-2-face)) 263 265 (fontified nil) 265 270 (fontified nil) 270 273 (fontified nil face font-lock-keyword-face) 273 274 (fontified nil) 274 276 (fontified nil face font-lock-variable-name-face) 276 277 (fontified nil) 277 279 (fontified nil face font-lock-keyword-face) 279 291 (fontified nil) 291 293 (fontified nil face font-lock-keyword-face) 293 294 (fontified nil) 294 299 (fontified nil face font-lock-type-face) 299 312 (fontified nil) 312 314 (fontified nil face font-lock-keyword-face) 314 315 (fontified nil) 315 320 (fontified nil face font-lock-type-face) 320 321 (fontified nil) 321 322 (fontified nil face (rainbow-delimiters-depth-2-face)) 322 331 (fontified nil) 331 334 (fontified nil face font-lock-keyword-face) 334 335 (fontified nil) 335 337 (fontified nil face font-lock-variable-name-face) 337 338 (fontified nil) 338 340 (fontified nil face font-lock-keyword-face) 340 352 (fontified nil) 352 354 (fontified nil face font-lock-keyword-face) 354 355 (fontified nil) 355 360 (fontified nil face font-lock-type-face) 360 373 (fontified nil) 373 375 (fontified nil face font-lock-keyword-face) 375 376 (fontified nil) 376 381 (fontified nil face font-lock-type-face) 381 382 (fontified nil) 382 383 (fontified nil face (rainbow-delimiters-depth-3-face)) 383 396 (fontified nil) 396 398 (fontified nil face font-lock-keyword-face) 398 418 (fontified nil) 418 419 (fontified nil face (rainbow-delimiters-depth-4-face)) 419 436 (fontified nil) 436 444 (fontified nil face font-lock-keyword-face) 444 458 (fontified nil) 458 459 (fontified nil face (rainbow-delimiters-depth-4-face)) 459 460 (fontified nil) 460 461 (fontified nil) 461 473 (fontified nil) 473 476 (fontified nil face font-lock-keyword-face) 476 477 (fontified nil) 477 479 (fontified nil face font-lock-variable-name-face) 479 484 (fontified nil) 484 486 (fontified nil face font-lock-keyword-face) 486 487 (fontified nil) 487 492 (fontified nil face font-lock-type-face) 492 500 (fontified nil) 500 511 (fontified nil) 511 514 (fontified nil face font-lock-keyword-face) 514 515 (fontified nil) 515 517 (fontified nil face font-lock-variable-name-face) 517 522 (fontified nil) 522 524 (fontified nil face font-lock-keyword-face) 524 525 (fontified nil) 525 530 (fontified nil face font-lock-type-face) 530 537 (fontified nil) 537 550 (fontified nil) 550 552 (fontified nil face font-lock-keyword-face) 552 556 (fontified nil) 556 557 (syntax-table (1) fontified nil) 557 567 (fontified nil) 567 568 (syntax-table (1) fontified nil) 568 576 (fontified nil) 576 578 (fontified nil face font-lock-keyword-face) 578 579 (fontified nil) 579 584 (fontified nil face font-lock-type-face) 584 591 (fontified nil) 591 592 (syntax-table (1) fontified nil) 592 602 (fontified nil) 602 603 (syntax-table (1) fontified nil) 603 610 (fontified nil) 610 612 (fontified nil face font-lock-keyword-face) 612 613 (fontified nil) 613 618 (fontified nil face font-lock-type-face) 618 619 (fontified nil) 619 620 (fontified nil face (rainbow-delimiters-depth-4-face)) 620 637 (fontified nil) 637 640 (fontified nil face font-lock-keyword-face) 640 641 (fontified nil) 641 655 (fontified nil face font-lock-variable-name-face) 655 658 (fontified nil) 658 659 (fontified nil face (rainbow-delimiters-depth-5-face)) 659 670 (fontified nil) 670 672 (fontified nil face font-lock-keyword-face) 672 673 (fontified nil) 673 678 (fontified nil face font-lock-type-face) 678 683 (fontified nil) 683 684 (fontified nil face (rainbow-delimiters-depth-5-face)) 684 685 (fontified nil) 685 687 (fontified nil face font-lock-keyword-face) 687 688 (fontified nil) 688 693 (fontified nil face font-lock-type-face) 693 711 (fontified nil) 711 713 (fontified nil face font-lock-keyword-face) 713 721 (fontified nil) 721 722 (fontified nil face (rainbow-delimiters-depth-5-face)) 722 736 (fontified nil) 736 737 (fontified nil face (rainbow-delimiters-depth-5-face)) 737 753 (fontified nil) 753 754 (fontified nil face (rainbow-delimiters-depth-5-face)) 754 768 (fontified nil) 768 769 (fontified nil face (rainbow-delimiters-depth-5-face)) 769 775 (fontified nil) 775 776 (fontified nil face (rainbow-delimiters-depth-5-face)) 776 825 (fontified nil) 825 826 (fontified nil face (rainbow-delimiters-depth-5-face)) 826 839 (fontified nil) 839 840 (fontified nil face (rainbow-delimiters-depth-4-face)) 840 849 (fontified nil) 849 850 (fontified nil face (rainbow-delimiters-depth-3-face)) 850 855 (fontified nil) 855 856 (fontified nil face (rainbow-delimiters-depth-2-face)) 856 868 (fontified nil) 868 869 (fontified nil face (rainbow-delimiters-depth-1-face)) 869 871 (fontified nil) 871 873 (fontified nil face font-lock-keyword-face) 873 874 (fontified nil) 874 902 (fontified nil face font-lock-function-name-face) 902 903 (fontified nil face (rainbow-delimiters-depth-1-face)) 903 910 (fontified nil face font-lock-variable-name-face) 910 912 (fontified nil) 912 913 (fontified nil face rust-ampersand-face) 913 914 (fontified nil face (rainbow-delimiters-depth-2-face)) 914 916 (fontified nil face font-lock-type-face) 916 917 (fontified nil face (rainbow-delimiters-depth-2-face)) 917 919 (fontified nil) 919 926 (fontified nil face font-lock-variable-name-face) 926 928 (fontified nil) 928 929 (fontified nil face rust-ampersand-face) 929 930 (fontified nil face (rainbow-delimiters-depth-2-face)) 930 932 (fontified nil face font-lock-type-face) 932 933 (fontified nil face (rainbow-delimiters-depth-2-face)) 933 935 (fontified nil) 935 940 (fontified nil face font-lock-variable-name-face) 940 942 (fontified nil) 942 947 (fontified nil face font-lock-type-face) 947 949 (fontified nil) 949 955 (fontified nil face font-lock-variable-name-face) 955 957 (fontified nil) 957 961 (fontified nil face font-lock-type-face) 961 962 (face font-lock-type-face fontified nil) 962 964 (fontified nil) 964 973 (face font-lock-variable-name-face fontified nil) 973 975 (fontified nil) 975 980 (face font-lock-type-face fontified nil) 980 981 (face (rainbow-delimiters-depth-1-face) fontified nil) 981 983 (fontified nil) 983 984 (syntax-table (1) fontified nil) 984 985 (fontified nil) 985 988 (face font-lock-type-face fontified nil) 988 989 (fontified nil) 989 990 (face (rainbow-delimiters-depth-1-face) fontified nil) 990 991 (fontified nil) 991 995 (fontified nil) 995 998 (face font-lock-keyword-face fontified nil) 998 999 (fontified nil) 999 1002 (face font-lock-keyword-face fontified nil) 1002 1003 (fontified nil) 1003 1015 (face font-lock-variable-name-face fontified nil) 1015 1025 (fontified nil) 1025 1028 (face font-lock-keyword-face fontified nil) 1028 1029 (fontified nil) 1029 1032 (face font-lock-keyword-face fontified nil) 1032 1033 (fontified nil) 1033 1037 (face font-lock-variable-name-face fontified nil) 1037 1038 (face font-lock-variable-name-face fontified nil) 1038 1044 (fontified nil) 1044 1049 (fontified nil) 1049 1052 (face font-lock-keyword-face fontified nil) 1052 1053 (fontified nil) 1053 1054 (face font-lock-variable-name-face fontified nil) 1054 1055 (fontified nil) 1055 1057 (face font-lock-keyword-face fontified nil) 1057 1068 (fontified nil) 1068 1069 (face (rainbow-delimiters-depth-2-face) fontified nil) 1069 1078 (fontified nil) 1078 1081 (face font-lock-keyword-face fontified nil) 1081 1082 (fontified nil) 1082 1083 (face font-lock-variable-name-face fontified nil) 1083 1084 (fontified nil) 1084 1086 (face font-lock-keyword-face fontified nil) 1086 1096 (fontified nil) 1096 1097 (face (rainbow-delimiters-depth-3-face) fontified nil) 1097 1110 (fontified nil) 1110 1113 (face font-lock-keyword-face fontified nil) 1113 1114 (fontified nil) 1114 1119 (face font-lock-variable-name-face fontified nil) 1119 1150 (fontified nil) 1150 1153 (face font-lock-keyword-face fontified nil) 1153 1154 (fontified nil) 1154 1160 (face font-lock-variable-name-face fontified nil) 1160 1170 (fontified nil) 1170 1171 (face (rainbow-delimiters-depth-4-face) fontified nil) 1171 1176 (fontified nil) 1176 1177 (face (rainbow-delimiters-depth-4-face) fontified nil) 1177 1191 (fontified nil) 1191 1194 (face font-lock-keyword-face fontified nil) 1194 1195 (fontified nil) 1195 1201 (face font-lock-variable-name-face fontified nil) 1201 1211 (fontified nil) 1211 1212 (face (rainbow-delimiters-depth-4-face) fontified nil) 1212 1217 (fontified nil) 1217 1218 (face (rainbow-delimiters-depth-4-face) fontified nil) 1218 1233 (fontified nil) 1233 1235 (face font-lock-keyword-face fontified nil) 1235 1263 (fontified nil) 1263 1264 (face (rainbow-delimiters-depth-4-face) fontified nil) 1264 1305 (fontified nil) 1305 1306 (face (rainbow-delimiters-depth-4-face) fontified nil) 1306 1320 (fontified nil) 1320 1322 (face font-lock-keyword-face fontified nil) 1322 1350 (fontified nil) 1350 1351 (face (rainbow-delimiters-depth-4-face) fontified nil) 1351 1399 (fontified nil) 1399 1400 (face (rainbow-delimiters-depth-4-face) fontified nil) 1400 1401 (fontified nil) 1401 1405 (face font-lock-keyword-face fontified nil) 1405 1406 (fontified nil) 1406 1407 (face (rainbow-delimiters-depth-4-face) fontified nil) 1407 1458 (fontified nil) 1458 1459 (face (rainbow-delimiters-depth-5-face) fontified nil) 1459 1508 (fontified nil) 1508 1509 (face (rainbow-delimiters-depth-5-face) fontified nil) 1509 1523 (fontified nil) 1523 1524 (face (rainbow-delimiters-depth-4-face) fontified nil) 1524 1525 (fontified nil) 1525 1533 (fontified nil) 1533 1534 (face (rainbow-delimiters-depth-3-face) fontified nil) 1534 1535 (fontified nil) 1535 1539 (fontified nil) 1539 1540 (fontified nil face (rainbow-delimiters-depth-2-face)) 1540 1546 (fontified nil) 1546 1548 (fontified nil face font-lock-keyword-face) 1548 1560 (fontified nil) 1560 1561 (fontified nil face (rainbow-delimiters-depth-2-face)) 1561 1583 (fontified nil) 1583 1585 (fontified nil face font-lock-keyword-face) 1585 1586 (fontified nil) 1586 1589 (fontified nil face font-lock-type-face) 1589 1592 (fontified nil) 1592 1597 (fontified nil face font-lock-keyword-face) 1597 1598 (fontified nil) 1598 1600 (fontified nil face font-lock-keyword-face) 1600 1601 (fontified nil) 1601 1604 (fontified nil face font-lock-type-face) 1604 1609 (fontified nil) 1609 1610 (fontified nil face (rainbow-delimiters-depth-2-face)) 1610 1611 (fontified nil) 1611 1615 (fontified nil face font-lock-keyword-face) 1615 1616 (fontified nil) 1616 1617 (fontified nil face (rainbow-delimiters-depth-2-face)) 1617 1634 (fontified nil) 1634 1635 (fontified nil face (rainbow-delimiters-depth-2-face)) 1635 1636 (fontified nil) 1636 1637 (fontified nil face (rainbow-delimiters-depth-1-face)) 1637 1638 (fontified nil) 1638 1639 (fontified nil) 1639 1641 (fontified nil face font-lock-keyword-face) 1641 1642 (fontified nil) 1642 1646 (fontified nil face font-lock-function-name-face) 1646 1647 (fontified nil face (rainbow-delimiters-depth-1-face)) 1647 1648 (fontified nil face (rainbow-delimiters-depth-1-face)) 1648 1649 (fontified nil) 1649 1650 (fontified nil face (rainbow-delimiters-depth-1-face)) 1650 1655 (fontified nil) 1655 1658 (fontified nil face font-lock-keyword-face) 1658 1659 (fontified nil) 1659 1664 (fontified nil face font-lock-variable-name-face) 1664 1674 (fontified nil) 1674 1677 (fontified nil face font-lock-keyword-face) 1677 1678 (fontified nil) 1678 1684 (fontified nil face font-lock-variable-name-face) 1684 1695 (fontified nil) 1695 1698 (fontified nil face font-lock-keyword-face) 1698 1699 (fontified nil) 1699 1706 (fontified nil face font-lock-variable-name-face) 1706 1709 (fontified nil) 1709 1713 (fontified nil face font-lock-preprocessor-face) 1713 1714 (fontified nil face (rainbow-delimiters-depth-2-face)) 1714 1739 (fontified nil) 1739 1740 (fontified nil face (rainbow-delimiters-depth-2-face)) 1740 1746 (fontified nil) 1746 1749 (fontified nil face font-lock-keyword-face) 1749 1750 (fontified nil) 1750 1757 (fontified nil face font-lock-variable-name-face) 1757 1760 (fontified nil) 1760 1764 (fontified nil face font-lock-preprocessor-face) 1764 1765 (fontified nil face (rainbow-delimiters-depth-2-face)) 1765 1790 (fontified nil) 1790 1791 (fontified nil face (rainbow-delimiters-depth-2-face)) 1791 1798 (fontified nil) 1798 1801 (fontified nil face font-lock-keyword-face) 1801 1802 (fontified nil) 1802 1811 (fontified nil face font-lock-variable-name-face) 1811 1817 (fontified nil) 1817 1820 (fontified nil face font-lock-comment-delimiter-face) 1820 1857 (fontified nil face font-lock-comment-face) 1857 1862 (fontified nil) 1862 1870 (fontified nil face rust-builtin-formatting-macro) 1870 1871 (fontified nil face (rainbow-delimiters-depth-2-face)) 1871 1904 (fontified nil face font-lock-string-face) 1904 1906 (fontified nil face rust-string-interpolation) 1906 1907 (fontified nil face font-lock-string-face) 1907 1937 (fontified nil) 1937 1938 (fontified nil face (rainbow-delimiters-depth-3-face)) 1938 1939 (fontified nil face rust-ampersand-face) 1939 1948 (fontified nil) 1948 1949 (fontified nil face rust-ampersand-face) 1949 1982 (fontified nil) 1982 1983 (fontified nil face (rainbow-delimiters-depth-3-face)) 1983 1984 (fontified nil face (rainbow-delimiters-depth-2-face)) 1984 1986 (fontified nil) 1986 1987 (fontified nil face (rainbow-delimiters-depth-1-face)) 1987 1988 (rear-nonsticky nil fontified nil)) . 1833) (undo-tree-id12398 . -265) (undo-tree-id12399 . -265) (undo-tree-id12400 . -265) (undo-tree-id12401 . -265) (undo-tree-id12402 . 1528) (undo-tree-id12403 . -265) (undo-tree-id12404 . -265) (undo-tree-id12405 . -1535) (undo-tree-id12406 . -265) (undo-tree-id12407 . -1988) (undo-tree-id12408 . -265) (undo-tree-id12409 . -265) (undo-tree-id12410 . -265) (undo-tree-id12411 . -265) (undo-tree-id12412 . -265) (undo-tree-id12413 . -265) (undo-tree-id12414 . -265) (undo-tree-id12415 . -265) (undo-tree-id12416 . -265) (undo-tree-id12417 . -265) (undo-tree-id12418 . -265) (undo-tree-id12419 . -265) (undo-tree-id12420 . -265) (undo-tree-id12421 . -265) (undo-tree-id12422 . -265) (undo-tree-id12423 . -265) (undo-tree-id12424 . -265) (undo-tree-id12425 . -265) (undo-tree-id12426 . -265) (undo-tree-id12427 . -265) (undo-tree-id12428 . -265) (undo-tree-id12429 . -265) (undo-tree-id12430 . -265) (undo-tree-id12431 . -265) (undo-tree-id12432 . -265) (undo-tree-id12433 . -265) (undo-tree-id12434 . -265) (undo-tree-id12435 . -265) (undo-tree-id12436 . -265) (undo-tree-id12437 . -265) (undo-tree-id12438 . -265) (undo-tree-id12439 . -265) (undo-tree-id12440 . -265) (undo-tree-id12441 . -1988) (undo-tree-id12442 . -280) (undo-tree-id12443 . -290) (undo-tree-id12444 . -341) (undo-tree-id12445 . -351) (undo-tree-id12446 . -1988) (undo-tree-id12447 . -1988) (undo-tree-id12448 . -1988) (undo-tree-id12449 . -1988) (undo-tree-id12450 . -1988) (undo-tree-id12451 . -1988) (undo-tree-id12452 . -1988) (undo-tree-id12453 . -1988) (undo-tree-id12454 . -1988) (undo-tree-id12455 . -1988) (undo-tree-id12456 . -1988) (undo-tree-id12457 . -1988) (undo-tree-id12458 . -1988) (undo-tree-id12459 . -1988) (undo-tree-id12460 . -1988) (undo-tree-id12461 . -1988) (undo-tree-id12462 . -1988) (undo-tree-id12463 . -1988) (undo-tree-id12464 . -1988) (undo-tree-id12465 . -1988) (undo-tree-id12466 . -1988) (undo-tree-id12467 . -1988) (undo-tree-id12468 . -1988) (nil fontified t 3817 . 3819) (nil fontified t 3816 . 3817) (nil fontified t 3815 . 3816) (nil fontified t 3782 . 3815) (nil fontified t 3781 . 3782) (nil fontified t 3772 . 3781) (nil fontified t 3771 . 3772) (nil fontified t 3770 . 3771) (nil fontified t 3740 . 3770) (nil fontified t 3739 . 3740) (nil fontified t 3737 . 3739) (nil fontified t 3704 . 3737) (nil fontified t 3703 . 3704) (nil fontified t 3695 . 3703) (nil fontified t 3690 . 3695) (nil fontified t 3653 . 3690) (nil fontified t 3650 . 3653) (nil fontified t 3644 . 3650) (nil fontified t 3635 . 3644) (nil fontified t 3634 . 3635) (nil fontified t 3631 . 3634) (nil fontified t 3624 . 3631) (nil fontified t 3623 . 3624) (nil fontified t 3598 . 3623) (nil fontified t 3597 . 3598) (nil fontified t 3593 . 3597) (nil fontified t 3590 . 3593) (nil fontified t 3583 . 3590) (nil fontified t 3582 . 3583) (nil fontified t 3579 . 3582) (nil fontified t 3573 . 3579) (nil fontified t 3572 . 3573) (nil fontified t 3547 . 3572) (nil fontified t 3546 . 3547) (nil fontified t 3542 . 3546) (nil fontified t 3539 . 3542) (nil fontified t 3532 . 3539) (nil fontified t 3531 . 3532) (nil fontified t 3528 . 3531) (nil fontified t 3517 . 3528) (nil fontified t 3511 . 3517) (nil fontified t 3510 . 3511) (nil fontified t 3507 . 3510) (nil fontified t 3497 . 3507) (nil fontified t 3492 . 3497) (nil fontified t 3491 . 3492) (nil fontified t 3488 . 3491) (nil fontified t 3483 . 3488) (nil fontified t 3482 . 3483) (nil fontified t 3481 . 3482) (nil fontified t 3480 . 3481) (nil fontified t 3479 . 3480) (nil fontified t 3475 . 3479) (nil fontified t 3474 . 3475) (nil fontified t 3472 . 3474) (nil fontified t 3471 . 3472) (nil fontified t 3470 . 3471) (nil fontified t 3469 . 3470) (nil fontified t 3468 . 3469) (nil fontified t 3467 . 3468) (nil fontified t 3450 . 3467) (nil fontified t 3449 . 3450) (nil fontified t 3448 . 3449) (nil fontified t 3444 . 3448) (nil fontified t 3443 . 3444) (nil fontified t 3442 . 3443) (nil fontified t 3437 . 3442) (nil fontified t 3434 . 3437) (nil fontified t 3433 . 3434) (nil fontified t 3431 . 3433) (nil fontified t 3430 . 3431) (nil fontified t 3425 . 3430) (nil fontified t 3422 . 3425) (nil fontified t 3419 . 3422) (nil fontified t 3418 . 3419) (nil fontified t 3416 . 3418) (nil fontified t 3394 . 3416) (nil fontified t 3393 . 3394) (nil fontified t 3381 . 3393) (nil fontified t 3379 . 3381) (nil fontified t 3373 . 3379) (nil fontified t 3372 . 3373) (nil fontified t 3368 . 3372) (nil fontified nil 3367 . 3368) (nil fontified nil 3366 . 3367) (nil fontified nil 3358 . 3366) (nil fontified nil 3357 . 3358) (nil fontified nil 3356 . 3357) (nil fontified nil 3342 . 3356) (nil fontified nil 3341 . 3342) (nil fontified nil 3292 . 3341) (nil fontified nil 3291 . 3292) (nil fontified nil 3240 . 3291) (nil fontified nil 3239 . 3240) (nil fontified nil 3238 . 3239) (nil fontified nil 3234 . 3238) (nil fontified nil 3233 . 3234) (nil fontified nil 3232 . 3233) (nil fontified nil 3184 . 3232) (nil fontified nil 3183 . 3184) (nil fontified nil 3155 . 3183) (nil fontified nil 3153 . 3155) (nil fontified nil 3139 . 3153) (nil fontified nil 3138 . 3139) (nil fontified nil 3097 . 3138) (nil fontified nil 3096 . 3097) (nil fontified nil 3068 . 3096) (nil fontified nil 3066 . 3068) (nil fontified nil 3051 . 3066) (nil fontified nil 3050 . 3051) (nil fontified nil 3045 . 3050) (nil fontified nil 3044 . 3045) (nil fontified nil 3034 . 3044) (nil fontified nil 3028 . 3034) (nil fontified nil 3027 . 3028) (nil fontified nil 3024 . 3027) (nil fontified nil 3010 . 3024) (nil fontified nil 3009 . 3010) (nil fontified nil 3004 . 3009) (nil fontified nil 3003 . 3004) (nil fontified nil 2993 . 3003) (nil fontified nil 2987 . 2993) (nil fontified nil 2986 . 2987) (nil fontified nil 2983 . 2986) (nil fontified nil 2952 . 2983) (nil fontified nil 2947 . 2952) (nil fontified nil 2946 . 2947) (nil fontified nil 2943 . 2946) (nil fontified nil 2930 . 2943) (nil fontified nil 2929 . 2930) (nil fontified nil 2919 . 2929) (nil fontified nil 2917 . 2919) (nil fontified nil 2916 . 2917) (nil fontified nil 2915 . 2916) (nil fontified nil 2914 . 2915) (nil fontified nil 2911 . 2914) (nil fontified nil 2902 . 2911) (nil fontified nil 2901 . 2902) (nil fontified nil 2890 . 2901) (nil fontified nil 2888 . 2890) (nil fontified nil 2887 . 2888) (nil fontified nil 2886 . 2887) (nil fontified nil 2885 . 2886) (nil fontified nil 2882 . 2885) (nil fontified nil 2877 . 2882) (nil fontified nil 2871 . 2877) (nil fontified nil 2870 . 2871) (nil fontified nil 2866 . 2870) (nil fontified nil 2865 . 2866) (nil fontified nil 2862 . 2865) (nil fontified nil 2861 . 2862) (nil fontified nil 2858 . 2861) (nil fontified nil 2848 . 2858) (nil fontified nil 2836 . 2848) (nil fontified nil 2835 . 2836) (nil fontified nil 2832 . 2835) (nil fontified nil 2831 . 2832) (nil fontified nil 2828 . 2831) (nil fontified nil 2824 . 2828) (nil fontified t 2823 . 2824) (nil fontified t 2822 . 2823) (nil fontified t 2821 . 2822) (nil fontified t 2818 . 2821) (nil fontified t 2817 . 2818) (nil fontified t 2816 . 2817) (nil fontified t 2814 . 2816) (nil fontified t 2813 . 2814) (nil fontified t 2808 . 2813) (nil fontified t 2806 . 2808) (nil fontified t 2797 . 2806) (nil fontified t 2795 . 2797) (nil fontified t 2794 . 2795) (nil fontified t 2790 . 2794) (nil fontified t 2788 . 2790) (nil fontified t 2782 . 2788) (nil fontified t 2780 . 2782) (nil fontified t 2775 . 2780) (nil fontified t 2773 . 2775) (nil fontified t 2768 . 2773) (nil fontified t 2766 . 2768) (nil fontified t 2765 . 2766) (nil fontified t 2763 . 2765) (nil fontified t 2762 . 2763) (nil fontified t 2761 . 2762) (nil fontified t 2759 . 2761) (nil fontified t 2752 . 2759) (nil fontified t 2750 . 2752) (nil fontified t 2749 . 2750) (nil fontified t 2747 . 2749) (nil fontified t 2746 . 2747) (nil fontified t 2745 . 2746) (nil fontified t 2743 . 2745) (nil fontified t 2736 . 2743) (nil fontified t 2735 . 2736) (nil fontified t 2707 . 2735) (nil fontified t 2706 . 2707) (nil fontified t 2704 . 2706) (nil fontified t 2702 . 2704) (nil fontified t 2701 . 2702) (nil fontified t 2689 . 2701) (nil fontified t 2688 . 2689) (nil fontified t 2683 . 2688) (nil fontified t 2682 . 2683) (nil fontified t 2673 . 2682) (nil fontified t 2672 . 2673) (nil fontified t 2659 . 2672) (nil fontified t 2658 . 2659) (nil fontified t 2609 . 2658) (nil fontified t 2608 . 2609) (nil fontified t 2602 . 2608) (nil fontified t 2601 . 2602) (nil fontified t 2587 . 2601) (nil fontified t 2586 . 2587) (nil fontified t 2570 . 2586) (nil fontified t 2569 . 2570) (nil fontified t 2555 . 2569) (nil fontified t 2554 . 2555) (nil fontified t 2546 . 2554) (nil fontified t 2544 . 2546) (nil fontified t 2526 . 2544) (nil fontified t 2521 . 2526) (nil fontified t 2520 . 2521) (nil fontified t 2518 . 2520) (nil fontified t 2517 . 2518) (nil fontified t 2516 . 2517) (nil fontified t 2511 . 2516) (nil fontified t 2506 . 2511) (nil fontified t 2505 . 2506) (nil fontified t 2503 . 2505) (nil fontified t 2492 . 2503) (nil fontified t 2491 . 2492) (nil fontified t 2488 . 2491) (nil fontified t 2474 . 2488) (nil fontified t 2473 . 2474) (nil fontified t 2470 . 2473) (nil fontified t 2453 . 2470) (nil fontified t 2452 . 2453) (nil fontified t 2451 . 2452) (nil fontified t 2446 . 2451) (nil fontified t 2445 . 2446) (nil fontified t 2443 . 2445) (nil fontified t 2436 . 2443) (nil fontified t 2435 . 2436) (nil fontified t 2425 . 2435) (nil fontified t 2424 . 2425) (nil fontified t 2417 . 2424) (nil fontified t 2412 . 2417) (nil fontified t 2411 . 2412) (nil fontified t 2409 . 2411) (nil fontified t 2401 . 2409) (nil fontified t 2400 . 2401) (nil fontified t 2390 . 2400) (nil fontified t 2389 . 2390) (nil fontified t 2385 . 2389) (nil fontified t 2383 . 2385) (nil fontified t 2370 . 2383) (nil fontified t 2363 . 2370) (nil fontified t 2358 . 2363) (nil fontified t 2357 . 2358) (nil fontified t 2355 . 2357) (nil fontified t 2350 . 2355) (nil fontified t 2348 . 2350) (nil fontified t 2347 . 2348) (nil fontified t 2344 . 2347) (nil fontified t 2333 . 2344) (nil fontified t 2325 . 2333) (nil fontified t 2320 . 2325) (nil fontified t 2319 . 2320) (nil fontified t 2317 . 2319) (nil fontified t 2312 . 2317) (nil fontified t 2310 . 2312) (nil fontified t 2309 . 2310) (nil fontified t 2306 . 2309) (nil fontified t 2294 . 2306) (nil fontified t 2293 . 2294) (nil fontified t 2292 . 2293) (nil fontified t 2291 . 2292) (nil fontified t 2277 . 2291) (nil fontified t 2269 . 2277) (nil fontified t 2252 . 2269) (nil fontified t 2251 . 2252) (nil fontified t 2231 . 2251) (nil fontified t 2229 . 2231) (nil fontified t 2216 . 2229) (nil fontified t 2215 . 2216) (nil fontified t 2214 . 2215) (nil fontified t 2209 . 2214) (nil fontified t 2208 . 2209) (nil fontified t 2206 . 2208) (nil fontified t 2193 . 2206) (nil fontified t 2188 . 2193) (nil fontified t 2187 . 2188) (nil fontified t 2185 . 2187) (nil fontified t 2173 . 2185) (nil fontified t 2171 . 2173) (nil fontified t 2170 . 2171) (nil fontified t 2168 . 2170) (nil fontified t 2167 . 2168) (nil fontified t 2164 . 2167) (nil fontified t 2155 . 2164) (nil fontified t 2154 . 2155) (nil fontified t 2153 . 2154) (nil fontified t 2148 . 2153) (nil fontified t 2147 . 2148) (nil fontified t 2145 . 2147) (nil fontified t 2132 . 2145) (nil fontified t 2127 . 2132) (nil fontified t 2126 . 2127) (nil fontified t 2124 . 2126) (nil fontified t 2112 . 2124) (nil fontified t 2110 . 2112) (nil fontified t 2109 . 2110) (nil fontified t 2107 . 2109) (nil fontified t 2106 . 2107) (nil fontified t 2103 . 2106) (nil fontified t 2098 . 2103) (nil fontified t 2096 . 2098) (nil fontified t 2095 . 2096) (nil fontified t 2092 . 2095) (nil fontified t 2091 . 2092) (nil fontified t 2090 . 2091) (nil fontified t 2086 . 2090) (nil fontified t 2085 . 2086) (nil fontified t 2084 . 2085) (nil fontified t 2081 . 2084) (nil fontified t 2080 . 2081) (nil fontified t 2074 . 2080) (nil fontified t 2073 . 2074) (nil fontified t 2068 . 2073) (nil fontified t 2067 . 2068) (nil fontified t 2051 . 2067) (nil fontified t 2050 . 2051) (nil fontified t 2045 . 2050) (nil fontified t 2044 . 2045) (nil fontified t 2036 . 2044) (nil fontified t 2034 . 2036) (nil fontified t 2031 . 2034) (nil fontified t 2026 . 2031) (nil fontified t 2025 . 2026) (nil fontified t 2022 . 2025) (nil fontified t 2021 . 2022) (nil fontified t 2018 . 2021) (nil fontified t 1995 . 2018) (nil fontified t 1994 . 1995) (nil fontified t 1993 . 1994) (nil fontified t 1990 . 1993) (nil fontified t 1968 . 1990) (nil fontified t 1967 . 1968) (nil fontified t 1966 . 1967) (nil fontified t 1963 . 1966) (nil fontified t 1958 . 1963) (nil fontified t 1957 . 1958) (nil fontified t 1956 . 1957) (nil fontified t 1951 . 1956) (nil fontified t 1950 . 1951) (nil fontified t 1949 . 1950) (nil fontified t 1947 . 1949) (nil fontified t 1946 . 1947) (nil fontified t 1941 . 1946) (nil fontified t 1939 . 1941) (nil fontified t 1930 . 1939) (nil fontified t 1928 . 1930) (nil fontified t 1923 . 1928) (nil fontified t 1921 . 1923) (nil fontified t 1915 . 1921) (nil fontified t 1913 . 1915) (nil fontified t 1908 . 1913) (nil fontified t 1906 . 1908) (nil fontified t 1901 . 1906) (nil fontified t 1899 . 1901) (nil fontified t 1894 . 1899) (nil fontified t 1892 . 1894) (nil fontified t 1887 . 1892) (nil fontified t 1885 . 1887) (nil fontified t 1884 . 1885) (nil fontified t 1882 . 1884) (nil fontified t 1881 . 1882) (nil fontified t 1880 . 1881) (nil fontified t 1878 . 1880) (nil fontified t 1871 . 1878) (nil fontified t 1869 . 1871) (nil fontified t 1868 . 1869) (nil fontified t 1866 . 1868) (nil fontified t 1865 . 1866) (nil fontified t 1864 . 1865) (nil fontified t 1862 . 1864) (nil fontified t 1855 . 1862) (nil fontified t 1854 . 1855) (nil fontified t 1836 . 1854) (nil fontified t 1835 . 1836) (nil fontified t 1833 . 1835) (nil rear-nonsticky t 3820 . 3821)) (26156 42101 375067 476000) 0 nil])
([nil nil ((1866 . 1869) (#("M" 0 1 (fontified nil)) . 1866) (1866 . 1867) (#("Map" 0 3 (fontified nil)) . -1866) (1866 . 1869) (#("M" 0 1 (fontified t face font-lock-type-face)) . -1866) (undo-tree-id12579 . -1) (undo-tree-id12580 . -1) 1867 (1858 . 1867) (1855 . 1858) (#("M" 0 1 (fontified nil)) . 1855) (1855 . 1856) (#("Map" 0 3 (fontified nil)) . -1855) (1855 . 1858) (#("M" 0 1 (fontified t face font-lock-type-face)) . -1855) (undo-tree-id12581 . -1) (undo-tree-id12582 . -1) (undo-tree-id12583 . -1) 1856 (1855 . 1856) (#("m" 0 1 (fontified t)) . -1855) (undo-tree-id12584 . -1) (undo-tree-id12585 . -1) (undo-tree-id12586 . -1) (#("a" 0 1 (fontified t)) . -1856) (undo-tree-id12587 . -1) (undo-tree-id12588 . -1) (undo-tree-id12589 . -1) 1857 (1852 . 1857) (1849 . 1852)) nil (26156 44283 603372 999000) 0 nil])
([nil nil ((#("
fn main() {
    let width = 3;
    let height = 3;

    let vector1 = vec![1, 0, 1, 0, 1, 0, 1, 1, 1];
    let vector2 = vec![1, 0, 1, 0, 0, 1, 1, 1, 1];

    let tolerance = 1; // Adjust the tolerance value as needed

    println!(\"Jaccard Index (with tolerance): {}\", jaccard_index_with_tolerance(&vector1, &vector2, width, height, tolerance));
}

" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 26 (fontified t face font-lock-variable-name-face) 26 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 46 (fontified t face font-lock-variable-name-face) 46 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 68 (fontified t face font-lock-variable-name-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-preprocessor-face) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 101 (fontified t) 101 102 (fontified t face (rainbow-delimiters-depth-2-face)) 102 108 (fontified t) 108 111 (fontified t face font-lock-keyword-face) 111 112 (fontified t) 112 119 (fontified t face font-lock-variable-name-face) 119 122 (fontified t) 122 126 (fontified t face font-lock-preprocessor-face) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 152 (fontified t) 152 153 (fontified t face (rainbow-delimiters-depth-2-face)) 153 160 (fontified t) 160 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 173 (fontified t face font-lock-variable-name-face) 173 179 (fontified t) 179 182 (fontified t face font-lock-comment-delimiter-face) 182 219 (fontified t face font-lock-comment-face) 219 224 (fontified t) 224 232 (fontified t face rust-builtin-formatting-macro) 232 233 (fontified t face (rainbow-delimiters-depth-2-face)) 233 266 (fontified t face font-lock-string-face) 266 268 (fontified t face rust-string-interpolation) 268 269 (fontified t face font-lock-string-face) 269 299 (fontified t) 299 300 (fontified t face (rainbow-delimiters-depth-3-face)) 300 301 (fontified t face rust-ampersand-face) 301 310 (fontified t) 310 311 (fontified t face rust-ampersand-face) 311 344 (fontified t) 344 345 (fontified t face (rainbow-delimiters-depth-3-face)) 345 346 (fontified t face (rainbow-delimiters-depth-2-face)) 346 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-1-face)) 349 350 (rear-nonsticky t fontified t) 350 351 (fontified t)) . 3471) (undo-tree-id12030 . -350) (undo-tree-id12031 . -350) (undo-tree-id12032 . -350) (undo-tree-id12033 . -1) (undo-tree-id12034 . -350) (undo-tree-id12036 . -350) (undo-tree-id12038 . -350) (undo-tree-id12040 . -350) (undo-tree-id12042 . -350) (undo-tree-id12044 . -350) (undo-tree-id12046 . -350) (undo-tree-id12048 . -350) (undo-tree-id12050 . -350) (undo-tree-id12052 . -350) (undo-tree-id12054 . -350) (undo-tree-id12056 . -350) (undo-tree-id12058 . -350) (undo-tree-id12060 . -350) (undo-tree-id12062 . -350) (undo-tree-id12064 . -350) (undo-tree-id12066 . -350) (undo-tree-id12068 . -1) (undo-tree-id12070 . -350) (undo-tree-id12072 . -350) (undo-tree-id12074 . -350) (undo-tree-id12076 . -350) (undo-tree-id12078 . -350) (undo-tree-id12080 . -350) (undo-tree-id12082 . -350) (undo-tree-id12084 . -350) (undo-tree-id12086 . -350) (undo-tree-id12088 . -350) (undo-tree-id12090 . -350) (undo-tree-id12092 . -350) (undo-tree-id12094 . -350) (undo-tree-id12096 . -350) (undo-tree-id12098 . -350) (undo-tree-id12100 . -350) (undo-tree-id12102 . -350) (undo-tree-id12104 . -348) (undo-tree-id12106 . -348) (undo-tree-id12108 . -348) (undo-tree-id12110 . -348) (undo-tree-id12112 . -348) (undo-tree-id12114 . -348) (undo-tree-id12116 . -348) (undo-tree-id12118 . -348) (undo-tree-id12120 . -348) (undo-tree-id12122 . -348) (undo-tree-id12124 . -348) (undo-tree-id12126 . -348) (undo-tree-id12128 . -348) (undo-tree-id12130 . -348) (undo-tree-id12132 . -348) (undo-tree-id12134 . -348) (undo-tree-id12136 . -220) (undo-tree-id12138 . -220) (undo-tree-id12140 . -220) (undo-tree-id12142 . -220) (undo-tree-id12144 . -219) (undo-tree-id12146 . -219) (undo-tree-id12148 . -219) (undo-tree-id12150 . -219) (undo-tree-id12152 . -219) (undo-tree-id12154 . -156) (undo-tree-id12156 . -156) (undo-tree-id12158 . -156) (undo-tree-id12160 . -156) (undo-tree-id12162 . -155) (undo-tree-id12164 . -155) (undo-tree-id12166 . -155) (undo-tree-id12168 . -155) (undo-tree-id12170 . -155) (undo-tree-id12172 . -104) (undo-tree-id12174 . -104) (undo-tree-id12176 . -104) (undo-tree-id12178 . -104) (undo-tree-id12180 . -53) (undo-tree-id12182 . -53) (undo-tree-id12184 . -53) (undo-tree-id12186 . -53) (undo-tree-id12188 . -53) (undo-tree-id12190 . -52) (undo-tree-id12192 . -52) (undo-tree-id12194 . -52) (undo-tree-id12196 . -52) (undo-tree-id12198 . -32) (undo-tree-id12200 . -32) (undo-tree-id12202 . -32) (undo-tree-id12204 . -32) (undo-tree-id12206 . -32) (undo-tree-id12208 . -13) (undo-tree-id12210 . -13) (undo-tree-id12212 . -13) (undo-tree-id12214 . -13) (undo-tree-id12216 . -1) (undo-tree-id12218 . -1) (undo-tree-id12220 . -1) (undo-tree-id12222 . -1) (undo-tree-id12224 . -1) (undo-tree-id12226 . -1) (undo-tree-id12228 . -1) (undo-tree-id12230 . -1) (undo-tree-id12232 . -1) (undo-tree-id12234 . -1) (undo-tree-id12236 . -13) (undo-tree-id12238 . -13) (undo-tree-id12240 . -13) (undo-tree-id12242 . -13) (undo-tree-id12244 . -13) (undo-tree-id12246 . -1) (undo-tree-id12248 . -1) (undo-tree-id12250 . -1) (undo-tree-id12252 . -1) (undo-tree-id12254 . -351) (undo-tree-id12255 . -350) (undo-tree-id12257 . -1) (undo-tree-id12259 . -1) (undo-tree-id12261 . -1) (undo-tree-id12263 . -1) (undo-tree-id12265 . -1) (undo-tree-id12267 . -1) (undo-tree-id12269 . -1) (undo-tree-id12271 . -1) (undo-tree-id12273 . -1) (undo-tree-id12275 . -1) (undo-tree-id12277 . -1) (undo-tree-id12279 . -1) (undo-tree-id12281 . -1) (undo-tree-id12283 . -1) (undo-tree-id12285 . -1) (undo-tree-id12287 . -1) (undo-tree-id12289 . -13) (undo-tree-id12291 . -13) (undo-tree-id12293 . -13) (undo-tree-id12295 . -13) (undo-tree-id12297 . -32) (undo-tree-id12299 . -32) (undo-tree-id12301 . -32) (undo-tree-id12303 . -32) (undo-tree-id12305 . -32) (undo-tree-id12307 . -52) (undo-tree-id12309 . -52) (undo-tree-id12311 . -52) (undo-tree-id12313 . -52) (undo-tree-id12315 . -53) (undo-tree-id12317 . -53) (undo-tree-id12319 . -53) (undo-tree-id12321 . -53) (undo-tree-id12323 . -53) (undo-tree-id12325 . -104) (undo-tree-id12327 . -104) (undo-tree-id12329 . -104) (undo-tree-id12331 . -104) (undo-tree-id12333 . -155) (undo-tree-id12335 . -155) (undo-tree-id12337 . -155) (undo-tree-id12339 . -155) (undo-tree-id12341 . -155) (undo-tree-id12343 . -156) (undo-tree-id12345 . -156) (undo-tree-id12347 . -156) (undo-tree-id12349 . -156) (undo-tree-id12351 . -219) (undo-tree-id12353 . -219) (undo-tree-id12355 . -219) (undo-tree-id12357 . -219) (undo-tree-id12359 . -219) (undo-tree-id12361 . -220) (undo-tree-id12363 . -220) (undo-tree-id12365 . -220) (undo-tree-id12367 . -220) (undo-tree-id12369 . -348) (undo-tree-id12371 . -348) (undo-tree-id12373 . -348) (undo-tree-id12375 . -348) (undo-tree-id12377 . -348) (undo-tree-id12379 . -350) (undo-tree-id12381 . -350) (undo-tree-id12383 . -350) (undo-tree-id12385 . -350) (undo-tree-id12387 . -350) (undo-tree-id12389 . -351) 3821 (t 26156 42058 869887 616000)) ((3471 . 3822) (t 26156 42067 197686 61000)) (26156 42100 821202 389000) 0 nil])
([nil nil ((1870 . 1874)) nil (26156 44283 603346 433000) 0 nil])
([nil nil ((2098 . 2293) (#("
    for di in -tolerance as isize..=tolerance as isize {
        for dj in -tolerance as isize..=tolerance as isize {
            if di == 0 && dj == 0 {
                continue;
            }
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-keyword-face) 14 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 34 (fontified t face font-lock-type-face) 34 47 (fontified t) 47 49 (fontified t face font-lock-keyword-face) 49 50 (fontified t) 50 55 (fontified t face font-lock-type-face) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 72 (fontified t face font-lock-variable-name-face) 72 73 (fontified t) 73 75 (fontified t face font-lock-keyword-face) 75 87 (fontified t) 87 89 (fontified t face font-lock-keyword-face) 89 90 (fontified t) 90 95 (fontified t face font-lock-type-face) 95 108 (fontified t) 108 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 116 (fontified t face font-lock-type-face) 116 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-3-face)) 118 131 (fontified t) 131 133 (fontified t face font-lock-keyword-face) 133 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-4-face)) 154 171 (fontified t) 171 179 (fontified t face font-lock-keyword-face) 179 193 (fontified t) 193 194 (fontified t face (rainbow-delimiters-depth-4-face)) 194 195 (fontified t)) . 2098) (t 26156 42067 197686 61000)) ((2098 . 2293) (#("
    for di in -tolerance as isize..=tolerance as isize {
        for dj in -tolerance as isize..=tolerance as isize {
            if di == 0 && dj == 0 {
                continue;
            }
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-keyword-face) 14 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 34 (fontified t face font-lock-type-face) 34 47 (fontified t) 47 49 (fontified t face font-lock-keyword-face) 49 50 (fontified t) 50 55 (fontified t face font-lock-type-face) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 72 (fontified t face font-lock-variable-name-face) 72 73 (fontified t) 73 75 (fontified t face font-lock-keyword-face) 75 87 (fontified t) 87 89 (fontified t face font-lock-keyword-face) 89 90 (fontified t) 90 95 (fontified t face font-lock-type-face) 95 108 (fontified t) 108 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 116 (fontified t face font-lock-type-face) 116 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-3-face)) 118 131 (fontified t) 131 133 (fontified t face font-lock-keyword-face) 133 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-4-face)) 154 171 (fontified t) 171 179 (fontified t face font-lock-keyword-face) 179 193 (fontified t) 193 194 (fontified t face (rainbow-delimiters-depth-4-face)) 194 195 (fontified t)) . 2098) (undo-tree-id12390 . -194) (undo-tree-id12391 . -194) (undo-tree-id12392 . -194) (undo-tree-id12393 . -88) (undo-tree-id12394 . -15) (undo-tree-id12395 . -25) (undo-tree-id12396 . -76) (undo-tree-id12397 . -86)) (26156 42100 819186 905000) 0 nil])
([nil nil ((1877 . 1881) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1877) (1877 . 1881) (1876 . 1878) (1874 . 1877)) nil (26156 44283 603344 52000) 0 nil])
nil
([nil nil ((1874 . 1877) (#("f" 0 1 (fontified nil)) . 1874) (1874 . 1875) (#("f64" 0 3 (fontified nil)) . -1874) (1874 . 1877) (#("f" 0 1 (fontified t)) . -1874) (undo-tree-id12474 . -1) (undo-tree-id12475 . -1) (undo-tree-id12476 . -1) (undo-tree-id12477 . -1) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) (undo-tree-id12497 . -1) (undo-tree-id12498 . -1) (undo-tree-id12499 . -1) (undo-tree-id12500 . -1) (undo-tree-id12501 . -1) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -1) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1) (undo-tree-id12549 . -1) (undo-tree-id12550 . -1) (undo-tree-id12551 . -1) (undo-tree-id12552 . -1) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) (undo-tree-id12558 . -1) (undo-tree-id12559 . -1) (undo-tree-id12560 . -1) (undo-tree-id12561 . -1) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) (undo-tree-id12569 . -1) (undo-tree-id12570 . -1) (undo-tree-id12571 . -1) (undo-tree-id12572 . -1) (undo-tree-id12573 . -1) (undo-tree-id12574 . -1) (undo-tree-id12575 . -1) (undo-tree-id12576 . -1) (undo-tree-id12577 . -1) (undo-tree-id12578 . -1) 1875 (1874 . 1875)) nil (26156 44283 603328 699000) 0 nil])
([nil nil ((apply yas--snippet-revive 1886 1893 #s(yas--snippet nil nil #s(yas--exit 1892 nil) 103 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1892 nil) 103 nil nil nil nil)) (1886 . 1893) (#("todo!($0)" 0 9 (fontified nil)) . 1886) (1886 . 1895) (#("todo" 0 4 (fontified nil)) . 1886) (1886 . 1890) (#("todo!(…)" 0 8 (fontified nil)) . -1886) (1886 . 1894) (#("todo" 0 4 (fontified t)) . -1886) (undo-tree-id12469 . -4) (undo-tree-id12470 . -4) (undo-tree-id12471 . -4) 1890 (1886 . 1890) (1882 . 1886) (#("    " 0 4 (fontified nil)) . 1881) (undo-tree-id12472 . -4) (1881 . 1886) (#("    " 0 4 (fontified nil)) . 1880) (undo-tree-id12473 . -4) (1884 . 1885)) nil (26156 44283 603139 521000) 0 nil])
([nil nil ((1880 . 1884) (t 26156 44283 657729 985000)) nil (26156 44431 854622 171000) 0 nil])
([nil nil ((1876 . 1881) (#("us" 0 2 (fontified nil)) . 1876) (1876 . 1878) (#("usize" 0 5 (fontified nil)) . -1876) (1876 . 1881) (#("us" 0 2 (fontified t)) . -1876) (undo-tree-id12828 . -2) (undo-tree-id12829 . -2) 1878 (1875 . 1878) (1874 . 1875) (1869 . 1874)) nil (26156 44431 854618 638000) 0 nil])
([nil nil ((1894 . 1898) (#("    " 0 4 (fontified nil)) . 1893) (undo-tree-id12826 . -4) (1893 . 1898) (#("    " 0 4 (fontified nil)) . 1892) (undo-tree-id12827 . -4) (1896 . 1897)) nil (26156 44431 854609 528000) 0 nil])
([nil nil ((1938 . 1945) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -1938) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -1939) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) 1940 (1927 . 1940) (1922 . 1927) (1918 . 1922) (1897 . 1918) (1893 . 1897)) nil (26156 44431 854600 842000) 0 nil])
([nil nil ((1960 . 1961) (1958 . 1960) (1956 . 1958) (1951 . 1957) (1947 . 1951) (#("    " 0 4 (fontified nil)) . 1946) (undo-tree-id12819 . -4) (1945 . 1951)) nil (26156 44431 854584 430000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1951) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (#("o" 0 1 (fontified t)) . -1952) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -1953) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (#(" " 0 1 (fontified t)) . -1954) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) 1955 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1955) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) (undo-tree-id12806 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1956) (undo-tree-id12807 . 1) (#("i" 0 1 (fontified t)) . -1956) (undo-tree-id12808 . -1) (undo-tree-id12809 . -1) (undo-tree-id12810 . -1) (#(" " 0 1 (fontified t)) . -1957) (undo-tree-id12811 . -1) (undo-tree-id12812 . -1) (#("i" 0 1 (fontified t)) . -1958) (undo-tree-id12813 . -1) (undo-tree-id12814 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -1959) (undo-tree-id12815 . -1) (undo-tree-id12816 . -1) (#(" " 0 1 (fontified t)) . -1960) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) 1961) nil (26156 44431 854572 400000) 0 nil])
([nil nil ((1951 . 1956) (#("m" 0 1 (fontified t)) . -1951) (undo-tree-id12790 . -1) (undo-tree-id12791 . -1) 1952 (1951 . 1952)) nil (26156 44431 854519 144000) 0 nil])
([nil nil ((#("    if ()
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t)) . 1947) (undo-tree-id12749 . -9) (undo-tree-id12750 . 2) (undo-tree-id12751 . -7) (undo-tree-id12752 . -7) (undo-tree-id12753 . -7) (undo-tree-id12754 . -8) (undo-tree-id12755 . 2) (undo-tree-id12756 . -9) (undo-tree-id12757 . -10) (undo-tree-id12758 . -7) (undo-tree-id12759 . -7) (undo-tree-id12760 . -7) (undo-tree-id12761 . -7) (undo-tree-id12762 . -7) (undo-tree-id12763 . -7) (undo-tree-id12764 . -7) (undo-tree-id12765 . -7) (undo-tree-id12766 . -7) (undo-tree-id12767 . -7) (undo-tree-id12768 . -7) (undo-tree-id12769 . -7) (undo-tree-id12770 . -7) (undo-tree-id12771 . -7) (undo-tree-id12772 . -7) (undo-tree-id12773 . -7) (undo-tree-id12774 . -7) (undo-tree-id12775 . -7) (undo-tree-id12776 . -7) (undo-tree-id12777 . -7) (undo-tree-id12778 . -7) (undo-tree-id12779 . -7) (undo-tree-id12780 . -7) (undo-tree-id12781 . -7) (undo-tree-id12782 . -7) (undo-tree-id12783 . -7) (undo-tree-id12784 . -7) (undo-tree-id12785 . -7) (undo-tree-id12786 . -7) (undo-tree-id12787 . -7) (undo-tree-id12788 . -7) (undo-tree-id12789 . -10) 1954) nil (26156 44431 854509 39000) 0 nil])
([nil nil ((#("f64 " 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t)) . 1886) (undo-tree-id12736 . -3) (undo-tree-id12737 . -4) (undo-tree-id12738 . -4) (undo-tree-id12739 . -4) (undo-tree-id12740 . -4) (undo-tree-id12741 . -4) (undo-tree-id12742 . -4) (undo-tree-id12743 . -4) (undo-tree-id12744 . -4) (undo-tree-id12745 . -4) (undo-tree-id12746 . -4) (undo-tree-id12747 . -4) (undo-tree-id12748 . -4)) nil (26156 44431 854435 65000) 0 nil])
([nil nil ((1893 . 1896) (#("f" 0 1 (fontified nil)) . 1893) (1893 . 1894) (#("f64" 0 3 (fontified nil)) . -1893) (1893 . 1896) (#("f" 0 1 (fontified t)) . -1893) (undo-tree-id12731 . -1) (undo-tree-id12732 . -1) 1894 (1893 . 1894) (apply yas--snippet-revive 1886 1894 #s(yas--snippet nil nil #s(yas--exit 1893 nil) 104 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1893 nil) 104 nil nil nil nil)) (1886 . 1894) (#("Option<$0>" 0 10 (fontified nil)) . 1886) (1886 . 1896) (#("Op" 0 2 (fontified nil)) . 1886) (1886 . 1888) (#("Option<…>" 0 9 (fontified nil)) . -1886) (1886 . 1895) (#("Op" 0 2 (fontified t face font-lock-type-face)) . -1886) (undo-tree-id12733 . -1) (undo-tree-id12734 . -2) (undo-tree-id12735 . -2) 1888 (1886 . 1888)) nil (26156 44431 854408 62000) 0 nil])
([nil nil ((1897 . 1898)) nil (26156 44431 854388 991000) 0 nil])
([nil nil ((2011 . 2017) (#("h" 0 1 (fontified nil)) . 2011) (2011 . 2012) (#("height" 0 6 (fontified nil)) . -2011) (2011 . 2017) (#("h" 0 1 (fontified t)) . -2011) (undo-tree-id12662 . -1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1) (undo-tree-id12678 . -1) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) (undo-tree-id12692 . -1) (undo-tree-id12693 . -1) (undo-tree-id12694 . -1) (undo-tree-id12695 . -1) (undo-tree-id12696 . -1) (undo-tree-id12697 . -1) (undo-tree-id12698 . -1) (undo-tree-id12699 . -1) (undo-tree-id12700 . -1) (undo-tree-id12701 . -1) (undo-tree-id12702 . -1) (undo-tree-id12703 . -1) (undo-tree-id12704 . -1) (undo-tree-id12705 . -1) (undo-tree-id12706 . -1) 2012 (2010 . 2012) (2006 . 2010) (#("ma" 0 2 (fontified nil)) . 2006) (2006 . 2008) (#("map2" 0 4 (fontified nil)) . -2006) (2006 . 2010) (#("ma" 0 2 (fontified t)) . -2006) (undo-tree-id12707 . -2) (undo-tree-id12708 . -2) 2008 (2002 . 2008) (1996 . 2002) (#("he" 0 2 (fontified nil)) . 1996) (1996 . 1998) (#("height" 0 6 (fontified nil)) . -1996) (1996 . 2002) (#("he" 0 2 (fontified t)) . -1996) (undo-tree-id12709 . -1) (undo-tree-id12710 . -2) (undo-tree-id12711 . -2) 1998 (1996 . 1998) (1995 . 1996) (1991 . 1995) (#("map" 0 3 (fontified nil)) . 1991) (1991 . 1994) (#("map1" 0 4 (fontified nil)) . -1991) (1991 . 1995) (#("map" 0 3 (fontified t)) . -1991) (undo-tree-id12712 . -3) (undo-tree-id12713 . -3) 1994 (1993 . 1994) (#("1" 0 1 (fontified t)) . -1993) (undo-tree-id12714 . -1) (undo-tree-id12715 . -1) (#("." 0 1 (fontified t)) . -1994) (undo-tree-id12716 . -1) (undo-tree-id12717 . -1) 1995 (1987 . 1995) (1982 . 1987) (#("wi" 0 2 (fontified nil)) . 1982) (1982 . 1984) (#("width" 0 5 (fontified nil)) . -1982) (1982 . 1987) (#("wi" 0 2 (fontified t)) . -1982) (undo-tree-id12718 . -1) (undo-tree-id12719 . -2) (undo-tree-id12720 . -2) 1984 (1982 . 1984) (1981 . 1982) (1977 . 1981) (#("ma" 0 2 (fontified nil)) . 1977) (1977 . 1979) (#("map2" 0 4 (fontified nil)) . -1977) (1977 . 1981) (#("ma" 0 2 (fontified t)) . -1977) (undo-tree-id12721 . -2) (undo-tree-id12722 . -2) (undo-tree-id12723 . -2) 1979 (1975 . 1979) (1973 . 1975) (1968 . 1973) (#("w" 0 1 (fontified nil)) . 1968) (1968 . 1969) (#("width" 0 5 (fontified nil)) . -1968) (1968 . 1973) (#("w" 0 1 (fontified t)) . -1968) (undo-tree-id12724 . -1) (undo-tree-id12725 . -1) (undo-tree-id12726 . -1) 1969 (1967 . 1969) (1963 . 1967) (#("ma" 0 2 (fontified nil)) . 1963) (1963 . 1965) (#("map1" 0 4 (fontified nil)) . -1963) (1963 . 1967) (#("ma" 0 2 (fontified t)) . -1963) (undo-tree-id12727 . -2) (undo-tree-id12728 . -2) (undo-tree-id12729 . -2) 1965 (1963 . 1965) (1959 . 1964) (1955 . 1959) (#("    " 0 4 (fontified nil)) . 1954) (undo-tree-id12730 . -4) (1958 . 1959) (1954 . 1958)) nil (26156 44431 854366 540000) 0 nil])
([nil nil ((2021 . 2022) (2022 . 2026) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2021) (2021 . 2022) (2020 . 2022) (2018 . 2021)) nil (26156 44431 854216 706000) 0 nil])
([nil nil ((apply yas--snippet-revive 2022 2026 #s(yas--snippet nil nil #s(yas--exit 2026 nil) 105 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2026 nil) 105 nil nil nil nil)) (2022 . 2026) (#("None$0" 0 6 (fontified nil)) . 2022) (2022 . 2028) (#("N" 0 1 (fontified nil)) . 2022) (2022 . 2023) (#("None" 0 4 (fontified nil)) . -2022) (2022 . 2026) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2022) (undo-tree-id12590 . -1) (undo-tree-id12591 . -1) (undo-tree-id12592 . -1) (undo-tree-id12593 . -1) (undo-tree-id12594 . -1) (undo-tree-id12595 . -1) (undo-tree-id12596 . -1) (undo-tree-id12597 . -1) (undo-tree-id12598 . -1) (undo-tree-id12599 . -1) (undo-tree-id12600 . -1) (undo-tree-id12601 . -1) (undo-tree-id12602 . -1) (undo-tree-id12603 . -1) (undo-tree-id12604 . -1) (undo-tree-id12605 . -1) (undo-tree-id12606 . -1) (undo-tree-id12607 . -1) (undo-tree-id12608 . -1) (undo-tree-id12609 . -1) (undo-tree-id12610 . -1) (undo-tree-id12611 . -1) (undo-tree-id12612 . -1) (undo-tree-id12613 . -1) (undo-tree-id12614 . -1) (undo-tree-id12615 . -1) (undo-tree-id12616 . -1) (undo-tree-id12617 . -1) (undo-tree-id12618 . -1) (undo-tree-id12619 . -1) (undo-tree-id12620 . -1) (undo-tree-id12621 . -1) (undo-tree-id12622 . -1) (undo-tree-id12623 . -1) (undo-tree-id12624 . -1) (undo-tree-id12625 . -1) (undo-tree-id12626 . -1) (undo-tree-id12627 . -1) (undo-tree-id12628 . -1) (undo-tree-id12629 . -1) (undo-tree-id12630 . -1) (undo-tree-id12631 . -1) (undo-tree-id12632 . -1) (undo-tree-id12633 . -1) (undo-tree-id12634 . -1) (undo-tree-id12635 . -1) (undo-tree-id12636 . -1) (undo-tree-id12637 . -1) (undo-tree-id12638 . -1) (undo-tree-id12639 . -1) (undo-tree-id12640 . -1) (undo-tree-id12641 . -1) (undo-tree-id12642 . -1) (undo-tree-id12643 . -1) (undo-tree-id12644 . -1) (undo-tree-id12645 . -1) (undo-tree-id12646 . -1) (undo-tree-id12647 . -1) (undo-tree-id12648 . -1) (undo-tree-id12649 . -1) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1) (undo-tree-id12661 . -1) 2023 (2022 . 2023)) nil (26156 44431 854197 0) 0 nil])
([nil nil ((2024 . 2029) (2022 . 2024) (t 26156 44431 911081 333000)) nil (26156 44443 566750 369000) 0 nil])
([nil nil ((2033 . 2034)) nil (26156 44443 566737 836000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2042) (undo-tree-id12878 . -4) 2046 (2042 . 2046) (#("    " 0 4 (fontified nil)) . 2041) (undo-tree-id12879 . -4) (2040 . 2046) (t 26156 44443 623769 694000)) nil (26156 44499 801695 666000) 0 nil])
([nil nil ((2098 . 2103) (2099 . 2100) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2098) (2098 . 2103) (2097 . 2099) (2095 . 2098) (2089 . 2095) (#("he" 0 2 (fontified nil)) . 2089) (2089 . 2091) (#("height" 0 6 (fontified nil)) . -2089) (2089 . 2095) (#("he" 0 2 (fontified t)) . -2089) (undo-tree-id12866 . -2) (undo-tree-id12867 . -2) (undo-tree-id12868 . -2) 2091 (2088 . 2091) (2084 . 2088) (#("ma" 0 2 (fontified nil)) . 2084) (2084 . 2086) (#("map1" 0 4 (fontified nil)) . -2084) (2084 . 2088) (#("ma" 0 2 (fontified t)) . -2084) (undo-tree-id12869 . -2) (undo-tree-id12870 . -2) (undo-tree-id12871 . -2) 2086 (2082 . 2086) (2072 . 2082) (2071 . 2072) (2072 . 2076) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2071) (2071 . 2072) (2070 . 2072) (2068 . 2071) (2063 . 2068) (#("wi" 0 2 (fontified nil)) . 2063) (2063 . 2065) (#("width" 0 5 (fontified nil)) . -2063) (2063 . 2068) (#("wi" 0 2 (fontified t)) . -2063) (undo-tree-id12872 . -2) (undo-tree-id12873 . -2) (undo-tree-id12874 . -2) 2065 (2062 . 2065) (2058 . 2062) (#("ma" 0 2 (fontified nil)) . 2058) (2058 . 2060) (#("map1" 0 4 (fontified nil)) . -2058) (2058 . 2062) (#("ma" 0 2 (fontified t)) . -2058) (undo-tree-id12875 . -2) (undo-tree-id12876 . -2) (undo-tree-id12877 . -2) 2060 (2055 . 2060) (2046 . 2055) (2042 . 2046)) nil (26156 44499 801668 144000) 0 nil])
([nil nil ((2103 . 2111)) nil (26156 44499 801631 980000) 0 nil])
([nil nil ((2103 . 2107)) nil (26156 44499 801630 58000) 0 nil])
([nil nil ((2129 . 2130) (apply yas--snippet-revive 2120 2129 #s(yas--snippet nil (#s(yas--field 1 2124 2125 nil nil nil t #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil))) #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil))) #s(yas--exit 2129 nil) 106 nil #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil)) nil nil)) (#("y" 0 1 (fontified nil)) . 2128) (2127 . 2128) (#("," 0 1 (fontified t)) . -2125) (undo-tree-id12858 . -1) (undo-tree-id12859 . -1) 2126 (2125 . 2126) (#("x" 0 1 (fontified nil)) . 2125) (2124 . 2125) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2124 2125 nil nil nil t #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil))) #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil))) #s(yas--exit 2129 nil) 106 nil #s(yas--field 2 2127 2128 nil nil nil t #s(yas--exit 2129 nil)) nil nil)) (2120 . 2129) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2120) (2120 . 2141) (#("ge" 0 2 (fontified nil)) . 2120) (2120 . 2122) (#("get(…)" 0 6 (fontified nil)) . -2120) (2120 . 2126) (#("ge" 0 2 (fontified t)) . -2120) (undo-tree-id12860 . -1) (undo-tree-id12861 . -2) (undo-tree-id12862 . -2) 2122 (2119 . 2122) (2115 . 2119) (#("ma" 0 2 (fontified nil)) . 2115) (2115 . 2117) (#("map1" 0 4 (fontified nil)) . -2115) (2115 . 2119) (#("ma" 0 2 (fontified t)) . -2115) (undo-tree-id12863 . -2) (undo-tree-id12864 . -2) (undo-tree-id12865 . -2) 2117 (2115 . 2117)) nil (26156 44499 801622 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2135 . 2136) (#("
" 0 1 (fontified nil)) . -2163) (2130 . 2164) 2129) nil (26156 44499 801593 354000) 0 nil])
([nil nil ((2151 . 2152) (#("1" 0 1 (fontified t)) . 2151) (undo-tree-id12857 . -1)) nil (26156 44499 801589 720000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2165) (undo-tree-id12831 . -5) (undo-tree-id12832 . -5) (undo-tree-id12833 . -5) (undo-tree-id12834 . -5) (undo-tree-id12835 . -5) (undo-tree-id12836 . -5) (undo-tree-id12837 . -5) (undo-tree-id12838 . -5) (undo-tree-id12839 . -5) (undo-tree-id12840 . -5) (undo-tree-id12841 . -5) (undo-tree-id12842 . -5) (undo-tree-id12843 . -5) 2170 (2165 . 2170) (#("	    " 0 5 (fontified nil)) . 2164) (undo-tree-id12844 . -5) (undo-tree-id12845 . -5) (undo-tree-id12846 . -5) (undo-tree-id12847 . -5) (undo-tree-id12848 . -5) (undo-tree-id12849 . -5) (undo-tree-id12850 . -5) (undo-tree-id12851 . -5) (undo-tree-id12852 . -5) (undo-tree-id12853 . -5) (undo-tree-id12854 . -5) (undo-tree-id12855 . -5) (undo-tree-id12856 . -5) (2163 . 2170)) nil (26156 44499 801580 858000) 0 nil])
([nil nil ((2144 . 2145) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . 2144) (undo-tree-id12830 . -1)) nil (26156 44499 801523 13000) 0 nil])
([nil nil ((2165 . 2170) (t 26156 44499 858985 524000)) nil (26156 44532 973006 757000) 0 nil])
([nil nil ((1831 . 1833)) nil (26156 44532 973004 500000) 0 nil])
([nil nil ((1842 . 1846) (#("    " 0 4 (fontified nil)) . 1842) (1842 . 1846) (1841 . 1843) (1839 . 1842) (1837 . 1839) (#("u" 0 1 (fontified nil)) . 1837) (1837 . 1838) (#("u8" 0 2 (fontified nil)) . -1837) (1837 . 1839) (#("u" 0 1 (fontified t)) . -1837) (undo-tree-id13057 . -1) (undo-tree-id13058 . -1) 1838 (1832 . 1838)) nil (26156 44532 972999 133000) 0 nil])
([nil nil ((#("impl u8 {
    
}" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 7 (fontified t face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 1832) (undo-tree-id12880 . -15) (undo-tree-id12881 . -15) (undo-tree-id12882 . 2) (undo-tree-id12883 . -15) (undo-tree-id12884 . -2) (undo-tree-id12885 . -3) (undo-tree-id12886 . -8) (undo-tree-id12887 . -8) (undo-tree-id12888 . -8) (undo-tree-id12889 . -8) (undo-tree-id12890 . -8) (undo-tree-id12891 . -8) (undo-tree-id12892 . -8) (undo-tree-id12893 . -8) (undo-tree-id12894 . -8) (undo-tree-id12895 . -8) (undo-tree-id12896 . -8) (undo-tree-id12897 . 2) (undo-tree-id12898 . 7) (undo-tree-id12899 . -14) (undo-tree-id12900 . -14) (undo-tree-id12901 . -14) (undo-tree-id12902 . -14) (undo-tree-id12903 . -14) (undo-tree-id12904 . -14) (undo-tree-id12905 . -14) (undo-tree-id12906 . -14) (undo-tree-id12907 . -14) (undo-tree-id12908 . -14) (undo-tree-id12909 . -14) (undo-tree-id12910 . -13) (undo-tree-id12911 . -13) (undo-tree-id12912 . -13) (undo-tree-id12913 . -13) (undo-tree-id12914 . -13) (undo-tree-id12915 . -13) (undo-tree-id12916 . -13) (undo-tree-id12917 . -13) (undo-tree-id12918 . -13) (undo-tree-id12919 . -13) (undo-tree-id12920 . -13) (undo-tree-id12921 . -16) (undo-tree-id12922 . -9) (undo-tree-id12923 . -10) (undo-tree-id12924 . -9) (undo-tree-id12925 . -10) (undo-tree-id12926 . -3) (undo-tree-id12927 . -9) (undo-tree-id12928 . -16) (undo-tree-id12929 . -16) (undo-tree-id12930 . -16) (undo-tree-id12931 . -16) (undo-tree-id12932 . -13) (undo-tree-id12933 . -13) (undo-tree-id12934 . -13) (undo-tree-id12935 . -13) (undo-tree-id12936 . -13) (undo-tree-id12937 . -13) (undo-tree-id12938 . -13) (undo-tree-id12939 . -13) (undo-tree-id12940 . -13) (undo-tree-id12941 . -13) (undo-tree-id12942 . -13) (undo-tree-id12943 . -13) (undo-tree-id12944 . -13) (undo-tree-id12945 . -13) (undo-tree-id12946 . -13) (undo-tree-id12947 . -13) (undo-tree-id12948 . -13) (undo-tree-id12949 . -13) (undo-tree-id12950 . -13) (undo-tree-id12951 . -13) (undo-tree-id12952 . -13) (undo-tree-id12953 . -13) (undo-tree-id12954 . -3) (undo-tree-id12955 . -3) (undo-tree-id12956 . -3) (undo-tree-id12957 . -3) (undo-tree-id12958 . -3) (undo-tree-id12959 . -3) (undo-tree-id12960 . -3) (undo-tree-id12961 . -3) (undo-tree-id12962 . -3) (undo-tree-id12963 . -3) (undo-tree-id12964 . -3) (undo-tree-id12965 . -3) (undo-tree-id12966 . -3) (undo-tree-id12967 . -3) (undo-tree-id12968 . -3) (undo-tree-id12969 . -3) (undo-tree-id12970 . -3) (undo-tree-id12971 . -3) (undo-tree-id12972 . -3) (undo-tree-id12973 . -3) (undo-tree-id12974 . -3) (undo-tree-id12975 . -3) (undo-tree-id12976 . -3) (undo-tree-id12977 . -3) (undo-tree-id12978 . -3) (undo-tree-id12979 . -3) (undo-tree-id12980 . -3) (undo-tree-id12981 . -3) (undo-tree-id12982 . -3) (undo-tree-id12983 . -3) (undo-tree-id12984 . -3) (undo-tree-id12985 . -3) (undo-tree-id12986 . -3) (undo-tree-id12987 . -3) (undo-tree-id12988 . -3) (undo-tree-id12989 . -3) (undo-tree-id12990 . -3) (undo-tree-id12991 . -3) (undo-tree-id12992 . -3) (undo-tree-id12993 . -3) (undo-tree-id12994 . -3) (undo-tree-id12995 . -3) (undo-tree-id12996 . -13) (undo-tree-id12997 . -13) (undo-tree-id12998 . -13) (undo-tree-id12999 . -13) (undo-tree-id13000 . -13) (undo-tree-id13001 . -13) (undo-tree-id13002 . -13) (undo-tree-id13003 . -13) (undo-tree-id13004 . -13) (undo-tree-id13005 . -13) (undo-tree-id13006 . -13) (undo-tree-id13007 . -13) (undo-tree-id13008 . -13) (undo-tree-id13009 . -13) (undo-tree-id13010 . -13) (undo-tree-id13011 . -13) (undo-tree-id13012 . -13) (undo-tree-id13013 . -13) (undo-tree-id13014 . -13) (undo-tree-id13015 . -15) (undo-tree-id13016 . -15) (undo-tree-id13017 . -15) (undo-tree-id13018 . -15) (undo-tree-id13019 . -15) (undo-tree-id13020 . -15) (undo-tree-id13021 . -15) (undo-tree-id13022 . -15) (undo-tree-id13023 . -15) (undo-tree-id13024 . -15) (undo-tree-id13025 . -15) (undo-tree-id13026 . -15) (undo-tree-id13027 . -15) (undo-tree-id13028 . -15) (undo-tree-id13029 . -15) (undo-tree-id13030 . -15) (undo-tree-id13031 . -15) (undo-tree-id13032 . -15) (undo-tree-id13033 . -15) (undo-tree-id13034 . -16) (undo-tree-id13035 . -15) (undo-tree-id13036 . -15) (undo-tree-id13037 . -15) (undo-tree-id13038 . -15) (undo-tree-id13039 . -15) (undo-tree-id13040 . -15) (undo-tree-id13041 . -15) (undo-tree-id13042 . -15) (undo-tree-id13043 . -15) (undo-tree-id13044 . -15) (undo-tree-id13045 . -15) (undo-tree-id13046 . -15) (undo-tree-id13047 . -10) (undo-tree-id13048 . -10) (undo-tree-id13049 . -10) (undo-tree-id13050 . -10) (undo-tree-id13051 . -10) (undo-tree-id13052 . -10) (undo-tree-id13053 . -10) (undo-tree-id13054 . -10) (undo-tree-id13055 . -10) (undo-tree-id13056 . -16)) nil (26156 44532 972968 394000) 0 nil])
([nil nil ((2136 . 2138) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -2136) (undo-tree-id13139 . -1) (undo-tree-id13140 . -1) (undo-tree-id13141 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -2137) (undo-tree-id13142 . -1) (undo-tree-id13143 . -1) 2138 (#("\"" 0 1 (fontified nil)) . -2137) (2137 . 2138) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -2137) (2137 . 2138) (2136 . 2138) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2136) (#("f" 0 1 (fontified nil)) . 2137) (2136 . 2137) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2136 2136 nil nil nil t #s(yas--exit 2137 nil))) #s(yas--exit 2137 nil) 107 nil #s(yas--field 1 2136 2136 nil nil nil t #s(yas--exit 2137 nil)) nil nil)) (2132 . 2138) (#("map(${1:f})$0" 0 13 (fontified nil)) . 2132) (2132 . 2145) (#("m" 0 1 (fontified nil)) . 2132) (2132 . 2133) (#("map(…)" 0 6 (fontified nil)) . -2132) (2132 . 2138) (#("ma" 0 2 (fontified t)) . -2132) (undo-tree-id13144 . -2) (undo-tree-id13145 . -2) 2134 (2132 . 2134) (2131 . 2132) (t 26156 44533 32817 778000)) nil (26156 44622 893662 378000) 0 nil])
([nil nil ((2137 . 2138)) nil (26156 44622 893642 538000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -2136) (undo-tree-id13130 . -1) (undo-tree-id13131 . -1) (undo-tree-id13132 . -1) (#("x" 0 1 (fontified t)) . -2137) (undo-tree-id13133 . -1) (undo-tree-id13134 . -1) (undo-tree-id13135 . -1) (#("|" 0 1 (fontified t)) . -2138) (undo-tree-id13136 . 1) (undo-tree-id13137 . -1) (undo-tree-id13138 . -1) 2139) nil (26156 44622 893638 757000) 0 nil])
([nil nil ((apply yas--snippet-revive 2132 2137 #s(yas--snippet nil (#s(yas--field 1 2136 2136 nil nil nil t #s(yas--exit 2137 nil))) #s(yas--exit 2137 nil) 107 nil #s(yas--field 1 2136 2136 nil nil nil t #s(yas--exit 2137 nil)) nil nil))) nil (26156 44622 893619 705000) 0 nil])
([nil nil ((#("map();" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-4-face)) 4 5 (fontified t face (rainbow-delimiters-depth-4-face)) 5 6 (fontified t)) . 2132) (undo-tree-id13127 . 2) (undo-tree-id13128 . -4) (undo-tree-id13129 . -4)) nil (26156 44622 893617 731000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2131) (undo-tree-id13125 . -1) (undo-tree-id13126 . -1)) nil (26156 44622 893610 784000) 0 nil])
([nil nil ((2131 . 2132)) nil (26156 44622 893605 655000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2044) (undo-tree-id13123 . -4) 2048 (2044 . 2048) (#("    " 0 4 (fontified nil)) . 2043) (undo-tree-id13124 . -4) (2042 . 2048)) nil (26156 44622 893601 879000) 0 nil])
([nil nil ((2073 . 2074) (apply yas--snippet-revive 2065 2073 #s(yas--snippet nil nil #s(yas--exit 2073 nil) 108 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2073 nil) 108 nil nil nil nil)) (2065 . 2073) (#("to_pgm()$0" 0 10 (fontified nil)) . 2065) (2065 . 2075) (#("to" 0 2 (fontified nil)) . 2065) (2065 . 2067) (#("to_pgm()" 0 8 (fontified nil)) . -2065) (2065 . 2073) (#("to" 0 2 (fontified t)) . -2065) (undo-tree-id13116 . -2) (undo-tree-id13117 . -2) (undo-tree-id13118 . -2) 2067 (2064 . 2067) (2060 . 2064) (#("ma" 0 2 (fontified nil)) . 2060) (2060 . 2062) (#("map1" 0 4 (fontified nil)) . -2060) (2060 . 2064) (#("ma" 0 2 (fontified t)) . -2060) (undo-tree-id13119 . -2) (undo-tree-id13120 . -2) (undo-tree-id13121 . -2) 2062 (2048 . 2062) (2044 . 2048) (#("    " 0 4 (fontified nil)) . 2043) (undo-tree-id13122 . -4) (2047 . 2048) (2043 . 2047)) nil (26156 44622 893589 530000) 0 nil])
([nil nil ((4523 . 4524) (#("1" 0 1 (fontified t)) . -4523) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -1) (undo-tree-id13098 . -1) (undo-tree-id13099 . -1) (undo-tree-id13100 . -1) (undo-tree-id13101 . -1) (undo-tree-id13102 . -1) (undo-tree-id13103 . -1) (undo-tree-id13104 . -1) (undo-tree-id13105 . -1) (undo-tree-id13106 . -1) (undo-tree-id13107 . -1) (undo-tree-id13108 . -1) (undo-tree-id13109 . -1) (undo-tree-id13110 . -1) (undo-tree-id13111 . -1) (undo-tree-id13112 . -1) (undo-tree-id13113 . -1) (undo-tree-id13114 . -1) (undo-tree-id13115 . -1) 4524) nil (26156 44622 893562 825000) 0 nil])
([nil nil ((4537 . 4538) (#("0" 0 1 (fontified t)) . -4537) (undo-tree-id13059 . -1) (undo-tree-id13060 . -1) (undo-tree-id13061 . -1) (undo-tree-id13062 . -1) (undo-tree-id13063 . -1) (undo-tree-id13064 . -1) (undo-tree-id13065 . -1) (undo-tree-id13066 . -1) (undo-tree-id13067 . -1) (undo-tree-id13068 . -1) (undo-tree-id13069 . -1) (undo-tree-id13070 . -1) (undo-tree-id13071 . -1) (undo-tree-id13072 . -1) (undo-tree-id13073 . -1) (undo-tree-id13074 . -1) (undo-tree-id13075 . -1) (undo-tree-id13076 . -1) (undo-tree-id13077 . -1) (undo-tree-id13078 . -1) (undo-tree-id13079 . -1) (undo-tree-id13080 . -1) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) 4538) nil (26156 44622 893504 530000) 0 nil])
([nil nil ((#("map1.to_pgm();" 0 5 (fontified t) 5 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 2060) (undo-tree-id13212 . -5) (undo-tree-id13213 . -2) (undo-tree-id13214 . -2) (undo-tree-id13215 . -2) (undo-tree-id13216 . -2) (undo-tree-id13217 . -2) (undo-tree-id13218 . -2) (undo-tree-id13219 . -2) (undo-tree-id13220 . -2) (undo-tree-id13221 . -2) (undo-tree-id13222 . -2) (undo-tree-id13223 . -2) (undo-tree-id13224 . -2) (undo-tree-id13225 . -2) (undo-tree-id13226 . -2) (undo-tree-id13227 . -2) (undo-tree-id13228 . -2) (undo-tree-id13229 . -2) (undo-tree-id13230 . -2) (undo-tree-id13231 . -2) (undo-tree-id13232 . -2) (undo-tree-id13233 . -2) (undo-tree-id13234 . -2) (undo-tree-id13235 . -2) (undo-tree-id13236 . -2) (undo-tree-id13237 . -2) (undo-tree-id13238 . -2) (undo-tree-id13239 . -2) (undo-tree-id13240 . -4) (undo-tree-id13241 . -4) (undo-tree-id13242 . -4) (undo-tree-id13243 . -4) (undo-tree-id13244 . -4) (undo-tree-id13245 . -4) (undo-tree-id13246 . -4) (undo-tree-id13247 . -4) (undo-tree-id13248 . -4) (undo-tree-id13249 . -4) (undo-tree-id13250 . -4) (undo-tree-id13251 . -4) (undo-tree-id13252 . -4) (undo-tree-id13253 . -4) (undo-tree-id13254 . -4) (undo-tree-id13255 . -4) (undo-tree-id13256 . -4) (undo-tree-id13257 . -4) (undo-tree-id13258 . -4) (undo-tree-id13259 . -4) (undo-tree-id13260 . -4) (undo-tree-id13261 . -4) (undo-tree-id13262 . -4) (undo-tree-id13263 . -4) (undo-tree-id13264 . -14) (t 26156 44622 961569 373000)) nil (26156 44639 205206 621000) 0 nil])
([nil nil ((2077 . 2078) (apply yas--snippet-revive 2065 2077 #s(yas--snippet nil nil #s(yas--exit 2077 nil) 109 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2077 nil) 109 nil nil nil nil)) (2065 . 2077) (#("get_points()$0" 0 14 (fontified nil)) . 2065) (2065 . 2079) (#("ge" 0 2 (fontified nil)) . 2065) (2065 . 2067) (#("get_points()" 0 12 (fontified nil)) . -2065) (2065 . 2077) (#("ge" 0 2 (fontified t)) . -2065) (undo-tree-id13146 . -1) (undo-tree-id13147 . -2) (undo-tree-id13148 . -2) (undo-tree-id13149 . -2) (undo-tree-id13150 . -2) (undo-tree-id13151 . -2) (undo-tree-id13152 . -2) (undo-tree-id13153 . -2) (undo-tree-id13154 . -2) (undo-tree-id13155 . -2) (undo-tree-id13156 . -2) (undo-tree-id13157 . -2) (undo-tree-id13158 . -2) (undo-tree-id13159 . -2) (undo-tree-id13160 . -2) (undo-tree-id13161 . -2) (undo-tree-id13162 . -2) (undo-tree-id13163 . -2) (undo-tree-id13164 . -2) (undo-tree-id13165 . -2) (undo-tree-id13166 . -2) (undo-tree-id13167 . -2) (undo-tree-id13168 . -2) (undo-tree-id13169 . -2) (undo-tree-id13170 . -2) (undo-tree-id13171 . -2) (undo-tree-id13172 . -2) (undo-tree-id13173 . -2) (undo-tree-id13174 . -2) (undo-tree-id13175 . -2) (undo-tree-id13176 . -2) (undo-tree-id13177 . -2) (undo-tree-id13178 . -2) (undo-tree-id13179 . -2) (undo-tree-id13180 . -2) (undo-tree-id13181 . -2) (undo-tree-id13182 . -2) (undo-tree-id13183 . -2) (undo-tree-id13184 . -2) (undo-tree-id13185 . -2) (undo-tree-id13186 . -2) (undo-tree-id13187 . -2) (undo-tree-id13188 . -2) (undo-tree-id13189 . -2) (undo-tree-id13190 . -2) (undo-tree-id13191 . -2) (undo-tree-id13192 . -2) (undo-tree-id13193 . -2) (undo-tree-id13194 . -2) (undo-tree-id13195 . -2) (undo-tree-id13196 . -2) (undo-tree-id13197 . -2) (undo-tree-id13198 . -2) (undo-tree-id13199 . -2) (undo-tree-id13200 . -2) (undo-tree-id13201 . -2) (undo-tree-id13202 . -2) 2067 (2065 . 2067) (#("t" 0 1 (fontified t)) . -2065) (undo-tree-id13203 . -1) (undo-tree-id13204 . -1) (undo-tree-id13205 . -1) (#("o" 0 1 (fontified t)) . -2066) (undo-tree-id13206 . -1) (undo-tree-id13207 . -1) (undo-tree-id13208 . -1) 2067 (2064 . 2067) (2060 . 2064) (#("ma" 0 2 (fontified nil)) . 2060) (2060 . 2062) (#("map1" 0 4 (fontified nil)) . -2060) (2060 . 2064) (#("ma" 0 2 (fontified t)) . -2060) (undo-tree-id13209 . -2) (undo-tree-id13210 . -2) (undo-tree-id13211 . -2) 2062 (2060 . 2062)) nil (26156 44639 205083 200000) 0 nil])
([nil nil ((4455 . 4463) (t 26156 44639 266400 116000)) nil (26156 44685 413603 54000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4568) (undo-tree-id13329 . -1) 4569 (4568 . 4569) (#("	" 0 1 (fontified nil)) . 4567) (undo-tree-id13330 . -1) (4566 . 4569)) nil (26156 44685 413598 776000) 0 nil])
([nil nil ((4625 . 4628) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 4625) (undo-tree-id13301 . -2) (4624 . 4625) (4609 . 4614) (#("w" 0 1 (fontified nil)) . 4609) (undo-tree-id13302 . -1) (4609 . 4610) (#("width" 0 5 (fontified nil)) . -4609) (undo-tree-id13303 . -5) (4609 . 4614) (#("w" 0 1 (fontified t)) . -4609) (undo-tree-id13304 . -1) (undo-tree-id13305 . -1) (undo-tree-id13306 . -1) (undo-tree-id13307 . -1) 4610 (4608 . 4610) (4604 . 4608) (#("sel" 0 3 (fontified nil)) . 4604) (undo-tree-id13308 . -3) (4604 . 4607) (#("self" 0 4 (fontified nil)) . -4604) (undo-tree-id13309 . -4) (4604 . 4608) (#("sel" 0 3 (fontified t)) . -4604) (undo-tree-id13310 . -3) (undo-tree-id13311 . -3) (undo-tree-id13312 . -3) 4607 (4605 . 4607) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 4605) (undo-tree-id13313 . -2) (4604 . 4605) (4589 . 4595) (#("h" 0 1 (fontified nil)) . 4589) (undo-tree-id13314 . -1) (4589 . 4590) (#("height" 0 6 (fontified nil)) . -4589) (undo-tree-id13315 . -6) (4589 . 4595) (#("h" 0 1 (fontified t)) . -4589) (undo-tree-id13316 . -1) (undo-tree-id13317 . -1) (undo-tree-id13318 . -1) (undo-tree-id13319 . -1) 4590 (4588 . 4590) (4584 . 4588) (#("sel" 0 3 (fontified nil)) . 4584) (undo-tree-id13320 . -3) (4584 . 4587) (#("self" 0 4 (fontified nil)) . -4584) (undo-tree-id13321 . -4) (4584 . 4588) (#("sel" 0 3 (fontified t)) . -4584) (undo-tree-id13322 . -3) (undo-tree-id13323 . -3) (undo-tree-id13324 . -3) 4587 (4585 . 4587) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 4585) (undo-tree-id13325 . -2) (4584 . 4585) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4584 4595 nil nil nil t #s(yas--field 2 4604 4614 nil nil nil t #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil)))) #s(yas--field 2 4604 4614 nil nil nil t #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil))) #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil))) #s(yas--exit 4630 nil) 110 nil #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil)) nil nil)) (4570 . 4611) (#("Map { height: ${1:()}, width: ${2:()}, buffer: ${3:()} }$0" 0 58 (fontified nil)) . 4570) (4570 . 4628) (#("M" 0 1 (fontified nil)) . 4570) (4570 . 4571) (#("Map {…}" 0 7 (fontified nil)) . -4570) (4570 . 4577) (#("M" 0 1 (fontified t face font-lock-type-face)) . -4570) (undo-tree-id13326 . -1) (undo-tree-id13327 . -1) 4571 (4570 . 4571) (4569 . 4570) (#("	" 0 1 (fontified nil)) . 4568) (undo-tree-id13328 . -1) (4569 . 4570) (4568 . 4569)) nil (26156 44685 413576 633000) 0 nil])
([nil nil ((4630 . 4631) (apply yas--snippet-revive 4570 4630 #s(yas--snippet nil (#s(yas--field 1 4584 4595 nil nil nil t #s(yas--field 2 4604 4614 nil nil nil t #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil)))) #s(yas--field 2 4604 4614 nil nil nil t #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil))) #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil))) #s(yas--exit 4630 nil) 110 nil #s(yas--field 3 4624 4628 nil nil nil t #s(yas--exit 4630 nil)) nil nil))) nil (26156 44685 413508 600000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -4630) (undo-tree-id13265 . -1) (undo-tree-id13266 . -1) (undo-tree-id13267 . -1) (undo-tree-id13268 . -1) (undo-tree-id13269 . -1) (undo-tree-id13270 . -1) (undo-tree-id13271 . -1) (undo-tree-id13272 . -1) (undo-tree-id13273 . -1) (undo-tree-id13274 . -1) (undo-tree-id13275 . -1) (undo-tree-id13276 . -1) (undo-tree-id13277 . -1) (undo-tree-id13278 . -1) (undo-tree-id13279 . -1) (undo-tree-id13280 . -1) (undo-tree-id13281 . -1) (undo-tree-id13282 . -1) (undo-tree-id13283 . -1) (undo-tree-id13284 . -1) (undo-tree-id13285 . -1) (undo-tree-id13286 . -1) (undo-tree-id13287 . -1) (undo-tree-id13288 . -1) (undo-tree-id13289 . -1) (undo-tree-id13290 . -1) (undo-tree-id13291 . -1) (undo-tree-id13292 . -1) (undo-tree-id13293 . -1) (undo-tree-id13294 . -1) (undo-tree-id13295 . -1) (undo-tree-id13296 . -1) (undo-tree-id13297 . -1) (undo-tree-id13298 . -1) (undo-tree-id13299 . -1) (undo-tree-id13300 . -1) 4631) nil (26156 44685 413495 533000) 0 nil])
([nil nil ((#(" let data1 = map1.get(i, j);
	    let data2 = map2.get(i, j);

	    " 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 10 (fontified t face font-lock-variable-name-face) 10 13 (fontified t) 13 18 (fontified t) 18 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-4-face)) 22 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-4-face)) 27 28 (fontified t) 28 29 (fontified t) 29 33 (fontified t) 33 34 (rear-nonsticky t fontified t) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t face font-lock-variable-name-face) 43 46 (fontified t) 46 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-4-face)) 55 56 (fontified t) 56 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-4-face)) 60 62 (fontified t) 62 63 (fontified t) 63 68 (fontified t)) . 2141) (undo-tree-id13331 . -67) (undo-tree-id13332 . -67) (undo-tree-id13333 . -67) (undo-tree-id13334 . -62) (undo-tree-id13335 . -5) (undo-tree-id13336 . -10) (undo-tree-id13337 . -5) (undo-tree-id13338 . -10) (undo-tree-id13339 . -38) (undo-tree-id13340 . -43) (undo-tree-id13341 . -38) (undo-tree-id13342 . -43) (undo-tree-id13343 . -27) (undo-tree-id13344 . -27) (undo-tree-id13345 . -27) (undo-tree-id13346 . -27) (undo-tree-id13347 . -27) (undo-tree-id13348 . -27) (undo-tree-id13349 . -27) (undo-tree-id13350 . -27) (undo-tree-id13351 . -27) (undo-tree-id13352 . -27) (undo-tree-id13353 . -27) (undo-tree-id13354 . -27) (undo-tree-id13355 . -27) (undo-tree-id13356 . -27) (undo-tree-id13357 . -27) (undo-tree-id13358 . -27) (undo-tree-id13359 . -27) (undo-tree-id13360 . -27) (undo-tree-id13361 . -60) (undo-tree-id13362 . -60) (undo-tree-id13363 . -60) (undo-tree-id13364 . -60) (undo-tree-id13365 . -60) (undo-tree-id13366 . -60) (undo-tree-id13367 . -60) (undo-tree-id13368 . -60) (undo-tree-id13369 . -60) (undo-tree-id13370 . -60) (undo-tree-id13371 . -62) (undo-tree-id13372 . -62) (undo-tree-id13373 . -62) (undo-tree-id13374 . -62) (undo-tree-id13375 . -62) (undo-tree-id13376 . -62) (undo-tree-id13377 . -62) (undo-tree-id13378 . -62) (undo-tree-id13379 . -62) (undo-tree-id13380 . -67) (undo-tree-id13381 . -67) (undo-tree-id13382 . -67) (undo-tree-id13383 . -67) (undo-tree-id13384 . -67) (undo-tree-id13385 . -67) (undo-tree-id13386 . -67) (undo-tree-id13387 . -67) (undo-tree-id13388 . -67) (undo-tree-id13389 . -68) (undo-tree-id13390 . -67) (undo-tree-id13391 . -67) (undo-tree-id13392 . -67) (undo-tree-id13393 . -67) (undo-tree-id13394 . -67) (undo-tree-id13395 . -67) (undo-tree-id13396 . -67) (undo-tree-id13397 . -67) (undo-tree-id13398 . -67) (undo-tree-id13399 . -67) (undo-tree-id13400 . -67) (undo-tree-id13401 . -67) (undo-tree-id13402 . -62) (undo-tree-id13403 . -62) (undo-tree-id13404 . -62) (undo-tree-id13405 . -62) (undo-tree-id13406 . -62) (undo-tree-id13407 . -62) (undo-tree-id13408 . -62) (undo-tree-id13409 . -62) (undo-tree-id13410 . -62) (undo-tree-id13411 . -33) (undo-tree-id13412 . -33) (undo-tree-id13413 . -33) (undo-tree-id13414 . -33) (undo-tree-id13415 . -33) (undo-tree-id13416 . -33) (undo-tree-id13417 . -33) (undo-tree-id13418 . -33) (undo-tree-id13419 . -33) (undo-tree-id13420 . -68) (t 26156 44685 496709 139000)) nil (26156 44697 671958 816000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2079) (undo-tree-id13435 . -4) 2083 (2078 . 2083) (t 26156 44697 757310 536000)) nil (26156 44713 586619 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2082 . 2083) (#("
" 0 1 (fontified nil)) . -2113) (2078 . 2114) 2044) nil (26156 44713 586614 5000) 0 nil])
([nil nil ((2091 . 2092) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -2091) (undo-tree-id13422 . -1) (undo-tree-id13423 . -1) (undo-tree-id13424 . -1) (undo-tree-id13425 . -1) (undo-tree-id13426 . -1) (undo-tree-id13427 . -1) (undo-tree-id13428 . -1) (undo-tree-id13429 . -1) (undo-tree-id13430 . -1) (undo-tree-id13431 . -1) (undo-tree-id13432 . -1) (undo-tree-id13433 . -1) (undo-tree-id13434 . -1) 2092) nil (26156 44713 586607 805000) 0 nil])
([nil nil ((2098 . 2099) (#("1" 0 1 (fontified t)) . -2098) (undo-tree-id13421 . -1) 2099) nil (26156 44713 586571 825000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -2182) (undo-tree-id13448 . -1) (undo-tree-id13449 . -1) 2183 (2182 . 2183) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2182) (undo-tree-id13450 . -1) (undo-tree-id13451 . -1) 2183 (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -2183) (undo-tree-id13452 . -1) (undo-tree-id13453 . -1) 2184 (2182 . 2184) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2182) (undo-tree-id13454 . -1) (undo-tree-id13455 . -1) (undo-tree-id13456 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -2183) (undo-tree-id13457 . -1) (undo-tree-id13458 . -1) (undo-tree-id13459 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -2184) (undo-tree-id13460 . -1) (undo-tree-id13461 . -1) (undo-tree-id13462 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -2185) (undo-tree-id13463 . -1) (undo-tree-id13464 . -1) (undo-tree-id13465 . -1) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -2186) (undo-tree-id13466 . -1) (undo-tree-id13467 . -1) (undo-tree-id13468 . -1) (#(" " 0 1 (fontified t)) . -2187) (undo-tree-id13469 . -1) (undo-tree-id13470 . -1) 2188 (2186 . 2188) (2182 . 2186) (2181 . 2182) (2178 . 2181) (2177 . 2178) 2173 (t 26156 44713 642083 178000)) nil (26156 44727 34609 521000) 0 nil])
([nil nil ((#("	    let 
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t)) . 2173) (undo-tree-id13436 . -4) (undo-tree-id13437 . -9) (undo-tree-id13438 . 1) (undo-tree-id13439 . -4) (undo-tree-id13440 . 1) (undo-tree-id13441 . -4) (undo-tree-id13442 . -4) (undo-tree-id13443 . -9) (undo-tree-id13444 . -4) (undo-tree-id13445 . -9) (undo-tree-id13446 . -8) (undo-tree-id13447 . 1) 2181) nil (26156 44727 34550 409000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2174) (undo-tree-id13726 . -5) (undo-tree-id13727 . -5) (undo-tree-id13728 . -5) (undo-tree-id13729 . -5) (undo-tree-id13730 . -5) (undo-tree-id13731 . -5) (undo-tree-id13732 . -5) (undo-tree-id13733 . -5) (undo-tree-id13734 . -5) (undo-tree-id13735 . -5) (undo-tree-id13736 . -5) (undo-tree-id13737 . -5) (undo-tree-id13738 . -5) 2179 (2174 . 2179) (#("	    " 0 5 (fontified nil)) . 2173) (undo-tree-id13739 . -5) (undo-tree-id13740 . -5) (undo-tree-id13741 . -5) (undo-tree-id13742 . -5) (undo-tree-id13743 . -5) (undo-tree-id13744 . -5) (undo-tree-id13745 . -5) (undo-tree-id13746 . -5) (undo-tree-id13747 . -5) (undo-tree-id13748 . -5) (undo-tree-id13749 . -5) (undo-tree-id13750 . -5) (undo-tree-id13751 . -5) (2172 . 2179) (t 26156 44727 90731 737000)) nil (26156 44747 170237 5000) 0 nil])
([nil nil ((2174 . 2179)) nil (26156 44747 170189 112000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -2182) (undo-tree-id13562 . -1) (undo-tree-id13563 . -1) (undo-tree-id13564 . -1) (undo-tree-id13565 . -1) (undo-tree-id13566 . -1) (undo-tree-id13567 . -1) (undo-tree-id13568 . -1) (undo-tree-id13569 . -1) (undo-tree-id13570 . -1) (undo-tree-id13571 . -1) (undo-tree-id13572 . -1) (undo-tree-id13573 . -1) (undo-tree-id13574 . -1) (undo-tree-id13575 . -1) (undo-tree-id13576 . -1) (undo-tree-id13577 . -1) (undo-tree-id13578 . -1) (undo-tree-id13579 . -1) (undo-tree-id13580 . -1) (undo-tree-id13581 . -1) (undo-tree-id13582 . -1) (undo-tree-id13583 . -1) (undo-tree-id13584 . -1) (undo-tree-id13585 . -1) (undo-tree-id13586 . -1) (undo-tree-id13587 . -1) (undo-tree-id13588 . -1) (undo-tree-id13589 . -1) (undo-tree-id13590 . -1) (undo-tree-id13591 . -1) (undo-tree-id13592 . -1) (undo-tree-id13593 . -1) (undo-tree-id13594 . -1) (undo-tree-id13595 . -1) (undo-tree-id13596 . -1) (undo-tree-id13597 . -1) (undo-tree-id13598 . -1) (undo-tree-id13599 . -1) (undo-tree-id13600 . -1) (undo-tree-id13601 . -1) (undo-tree-id13602 . -1) (undo-tree-id13603 . -1) (undo-tree-id13604 . -1) (undo-tree-id13605 . -1) (undo-tree-id13606 . -1) (undo-tree-id13607 . -1) (undo-tree-id13608 . -1) (undo-tree-id13609 . -1) (undo-tree-id13610 . -1) (undo-tree-id13611 . -1) (undo-tree-id13612 . -1) (undo-tree-id13613 . -1) (undo-tree-id13614 . -1) (undo-tree-id13615 . -1) (undo-tree-id13616 . -1) (undo-tree-id13617 . -1) (undo-tree-id13618 . -1) (undo-tree-id13619 . -1) (undo-tree-id13620 . -1) (undo-tree-id13621 . -1) (undo-tree-id13622 . -1) (undo-tree-id13623 . -1) (undo-tree-id13624 . -1) (undo-tree-id13625 . -1) (undo-tree-id13626 . -1) (undo-tree-id13627 . -1) (undo-tree-id13628 . -1) (undo-tree-id13629 . -1) (undo-tree-id13630 . -1) (undo-tree-id13631 . -1) (undo-tree-id13632 . -1) (undo-tree-id13633 . -1) (undo-tree-id13634 . -1) (undo-tree-id13635 . -1) (undo-tree-id13636 . -1) (undo-tree-id13637 . -1) (undo-tree-id13638 . -1) (undo-tree-id13639 . -1) (undo-tree-id13640 . -1) (undo-tree-id13641 . -1) (undo-tree-id13642 . -1) (undo-tree-id13643 . -1) (undo-tree-id13644 . -1) (undo-tree-id13645 . -1) (undo-tree-id13646 . -1) (undo-tree-id13647 . -1) (undo-tree-id13648 . -1) (undo-tree-id13649 . -1) (undo-tree-id13650 . -1) (undo-tree-id13651 . -1) (undo-tree-id13652 . -1) (undo-tree-id13653 . -1) (undo-tree-id13654 . -1) (undo-tree-id13655 . -1) (undo-tree-id13656 . -1) (undo-tree-id13657 . -1) (#("e" 0 1 (fontified t)) . -2183) (undo-tree-id13658 . -1) (undo-tree-id13659 . -1) (undo-tree-id13660 . -1) (undo-tree-id13661 . -1) (undo-tree-id13662 . -1) (undo-tree-id13663 . -1) (undo-tree-id13664 . -1) (undo-tree-id13665 . -1) (undo-tree-id13666 . -1) (undo-tree-id13667 . -1) (undo-tree-id13668 . -1) (undo-tree-id13669 . -1) (undo-tree-id13670 . -1) (undo-tree-id13671 . -1) (undo-tree-id13672 . -1) (undo-tree-id13673 . -1) (undo-tree-id13674 . -1) (undo-tree-id13675 . -1) (undo-tree-id13676 . -1) (undo-tree-id13677 . -1) (undo-tree-id13678 . -1) (undo-tree-id13679 . -1) (undo-tree-id13680 . -1) (undo-tree-id13681 . -1) (undo-tree-id13682 . -1) (undo-tree-id13683 . -1) (undo-tree-id13684 . -1) (undo-tree-id13685 . -1) (undo-tree-id13686 . -1) (undo-tree-id13687 . -1) (undo-tree-id13688 . -1) (undo-tree-id13689 . -1) (undo-tree-id13690 . -1) (undo-tree-id13691 . -1) (undo-tree-id13692 . -1) (undo-tree-id13693 . -1) (undo-tree-id13694 . -1) (undo-tree-id13695 . -1) (undo-tree-id13696 . -1) (undo-tree-id13697 . -1) (undo-tree-id13698 . -1) (undo-tree-id13699 . -1) (undo-tree-id13700 . -1) (undo-tree-id13701 . -1) (undo-tree-id13702 . -1) (undo-tree-id13703 . -1) (undo-tree-id13704 . -1) (undo-tree-id13705 . -1) (undo-tree-id13706 . -1) (undo-tree-id13707 . -1) (undo-tree-id13708 . -1) (undo-tree-id13709 . -1) (undo-tree-id13710 . -1) (undo-tree-id13711 . -1) (undo-tree-id13712 . -1) (undo-tree-id13713 . -1) (undo-tree-id13714 . -1) (undo-tree-id13715 . -1) (undo-tree-id13716 . -1) (undo-tree-id13717 . -1) (undo-tree-id13718 . -1) (undo-tree-id13719 . -1) (undo-tree-id13720 . -1) (undo-tree-id13721 . -1) (undo-tree-id13722 . -1) (undo-tree-id13723 . -1) 2184 (2179 . 2184) (2174 . 2179) (#("	    " 0 5 (fontified nil)) . 2173) (undo-tree-id13724 . -5) (undo-tree-id13725 . -5) (2178 . 2179) (2173 . 2178)) nil (26156 44747 170171 762000) 0 nil])
([nil nil ((#("map1" 0 4 (fontified t)) . 2133) (undo-tree-id13559 . -3) (undo-tree-id13560 . -4) (undo-tree-id13561 . -4)) nil (26156 44747 169780 764000) 0 nil])
([nil nil ((2133 . 2138) (#("bm" 0 2 (fontified nil)) . 2133) (2133 . 2135) (#("bmap1" 0 5 (fontified nil)) . -2133) (2133 . 2138) (#("bm" 0 2 (fontified t)) . -2133) (undo-tree-id13474 . -2) (undo-tree-id13475 . -2) (undo-tree-id13476 . -2) (undo-tree-id13477 . -1) (undo-tree-id13478 . -1) (undo-tree-id13479 . -1) (undo-tree-id13480 . -1) (undo-tree-id13481 . -1) (undo-tree-id13482 . -1) (undo-tree-id13483 . -1) (undo-tree-id13484 . -1) (undo-tree-id13485 . -1) (undo-tree-id13486 . -1) (undo-tree-id13487 . -1) (undo-tree-id13488 . -1) (undo-tree-id13489 . -1) (undo-tree-id13490 . -1) (undo-tree-id13491 . -1) (undo-tree-id13492 . -1) (undo-tree-id13493 . -1) (undo-tree-id13494 . -1) (undo-tree-id13495 . -1) (undo-tree-id13496 . -1) (undo-tree-id13497 . -1) (undo-tree-id13498 . -1) (undo-tree-id13499 . -1) (undo-tree-id13500 . -1) (undo-tree-id13501 . -1) (undo-tree-id13502 . -1) (undo-tree-id13503 . -1) (undo-tree-id13504 . -2) (undo-tree-id13505 . -2) (undo-tree-id13506 . -2) (undo-tree-id13507 . -2) (undo-tree-id13508 . -2) (undo-tree-id13509 . -2) (undo-tree-id13510 . -2) (undo-tree-id13511 . -2) (undo-tree-id13512 . -2) (undo-tree-id13513 . -2) (undo-tree-id13514 . -2) (undo-tree-id13515 . -2) (undo-tree-id13516 . -2) (undo-tree-id13517 . -2) (undo-tree-id13518 . -2) (undo-tree-id13519 . -2) (undo-tree-id13520 . -2) (undo-tree-id13521 . -2) (undo-tree-id13522 . -2) (undo-tree-id13523 . -2) (undo-tree-id13524 . -2) (undo-tree-id13525 . -2) (undo-tree-id13526 . -2) (undo-tree-id13527 . -2) (undo-tree-id13528 . -2) (undo-tree-id13529 . -2) (undo-tree-id13530 . -2) (undo-tree-id13531 . -2) (undo-tree-id13532 . -2) (undo-tree-id13533 . -2) (undo-tree-id13534 . -2) (undo-tree-id13535 . -2) (undo-tree-id13536 . -2) (undo-tree-id13537 . -2) (undo-tree-id13538 . -2) (undo-tree-id13539 . -2) (undo-tree-id13540 . -2) (undo-tree-id13541 . -2) (undo-tree-id13542 . -2) (undo-tree-id13543 . -2) (undo-tree-id13544 . -2) (undo-tree-id13545 . -2) (undo-tree-id13546 . -2) (undo-tree-id13547 . -2) (undo-tree-id13548 . -2) (undo-tree-id13549 . -2) (undo-tree-id13550 . -2) (undo-tree-id13551 . -2) (undo-tree-id13552 . -2) (undo-tree-id13553 . -2) (undo-tree-id13554 . -2) (undo-tree-id13555 . -2) (undo-tree-id13556 . -2) (undo-tree-id13557 . -2) (undo-tree-id13558 . -2) 2135 (2133 . 2135)) nil (26156 44747 169763 747000) 0 nil])
([nil nil ((2160 . 2161) (#("v" 0 1 (fontified t)) . -2160) (undo-tree-id13471 . -1) (undo-tree-id13472 . -1) (undo-tree-id13473 . -1) 2161 (2160 . 2161)) nil (26156 44747 169595 895000) 0 nil])
([nil nil ((2207 . 2209) (2208 . 2213) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2207) (2207 . 2209) (2206 . 2208) (2203 . 2207) (2199 . 2203) (apply yas--snippet-revive 2190 2199 #s(yas--snippet nil (#s(yas--field 1 2194 2195 nil nil nil t #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--exit 2199 nil) 111 nil #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil)) nil nil)) (#("y" 0 1 (fontified nil)) . 2198) (2197 . 2198) (#("x" 0 1 (fontified nil)) . 2195) (2194 . 2195) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2194 2195 nil nil nil t #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--exit 2199 nil) 111 nil #s(yas--field 2 2197 2198 nil nil nil t #s(yas--exit 2199 nil)) nil nil)) (2190 . 2199) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2190) (2190 . 2211) (#("ge" 0 2 (fontified nil)) . 2190) (2190 . 2192) (#("get(…)" 0 6 (fontified nil)) . -2190) (2190 . 2196) (#("ge" 0 2 (fontified t)) . -2190) (undo-tree-id14143 . -2) (undo-tree-id14144 . -2) (undo-tree-id14145 . -2) 2192 (2190 . 2192) (2189 . 2190) (2184 . 2189) (#("b" 0 1 (fontified nil)) . 2184) (2184 . 2185) (#("bmap1" 0 5 (fontified nil)) . -2184) (2184 . 2189) (#("b" 0 1 (fontified t)) . -2184) (undo-tree-id14146 . -1) (undo-tree-id14147 . -1) 2185 (2184 . 2185) (t 26156 44747 227693 545000)) nil (26156 44797 52466 216000) 0 nil])
([nil nil ((2219 . 2220) (2218 . 2220) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -2218) (2218 . 2219) (apply yas--snippet-revive 2209 2219 #s(yas--snippet nil nil #s(yas--exit 2218 nil) 112 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2218 nil) 112 nil nil nil nil)) (2209 . 2219) (#("println!($0)" 0 12 (fontified nil)) . 2209) (2209 . 2221) (#("pr" 0 2 (fontified nil)) . 2209) (2209 . 2211) (#("println!(…)" 0 11 (fontified nil)) . -2209) (2209 . 2220) (#("pr" 0 2 (fontified t)) . -2209) (undo-tree-id13926 . -2) (undo-tree-id13927 . -2) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) (undo-tree-id13936 . -1) (undo-tree-id13937 . -1) (undo-tree-id13938 . -2) (undo-tree-id13939 . -2) (undo-tree-id13940 . -2) (undo-tree-id13941 . -2) (undo-tree-id13942 . -2) (undo-tree-id13943 . -2) (undo-tree-id13944 . -2) (undo-tree-id13945 . -2) (undo-tree-id13946 . -2) (undo-tree-id13947 . -2) (undo-tree-id13948 . -2) (undo-tree-id13949 . -2) (undo-tree-id13950 . -2) (undo-tree-id13951 . -2) (undo-tree-id13952 . -2) (undo-tree-id13953 . -2) (undo-tree-id13954 . -2) (undo-tree-id13955 . -2) (undo-tree-id13956 . -2) (undo-tree-id13957 . -2) (undo-tree-id13958 . -2) (undo-tree-id13959 . -2) (undo-tree-id13960 . -2) (undo-tree-id13961 . -2) (undo-tree-id13962 . -2) (undo-tree-id13963 . -2) (undo-tree-id13964 . -2) (undo-tree-id13965 . -2) (undo-tree-id13966 . -2) (undo-tree-id13967 . -2) (undo-tree-id13968 . -2) (undo-tree-id13969 . -2) (undo-tree-id13970 . -2) (undo-tree-id13971 . -2) (undo-tree-id13972 . -2) (undo-tree-id13973 . -2) (undo-tree-id13974 . -2) (undo-tree-id13975 . -2) (undo-tree-id13976 . -2) (undo-tree-id13977 . -2) (undo-tree-id13978 . -2) (undo-tree-id13979 . -2) (undo-tree-id13980 . -2) (undo-tree-id13981 . -2) (undo-tree-id13982 . -2) (undo-tree-id13983 . -2) (undo-tree-id13984 . -2) (undo-tree-id13985 . -2) (undo-tree-id13986 . -2) (undo-tree-id13987 . -2) (undo-tree-id13988 . -2) (undo-tree-id13989 . -2) (undo-tree-id13990 . -2) (undo-tree-id13991 . -2) (undo-tree-id13992 . -2) (undo-tree-id13993 . -2) (undo-tree-id13994 . -2) (undo-tree-id13995 . -2) (undo-tree-id13996 . -2) (undo-tree-id13997 . -2) (undo-tree-id13998 . -2) (undo-tree-id13999 . -2) (undo-tree-id14000 . -2) (undo-tree-id14001 . -2) (undo-tree-id14002 . -2) (undo-tree-id14003 . -2) (undo-tree-id14004 . -2) (undo-tree-id14005 . -2) (undo-tree-id14006 . -2) (undo-tree-id14007 . -2) (undo-tree-id14008 . -2) (undo-tree-id14009 . -2) (undo-tree-id14010 . -2) (undo-tree-id14011 . -2) (undo-tree-id14012 . -2) (undo-tree-id14013 . -2) (undo-tree-id14014 . -2) (undo-tree-id14015 . -2) (undo-tree-id14016 . -2) (undo-tree-id14017 . -2) 2211 (2209 . 2211) (#("e" 0 1 (fontified t)) . -2209) (undo-tree-id14018 . -1) (undo-tree-id14019 . -1) (undo-tree-id14020 . -1) (undo-tree-id14021 . -1) (undo-tree-id14022 . -1) (undo-tree-id14023 . -1) (undo-tree-id14024 . -1) (undo-tree-id14025 . -1) (undo-tree-id14026 . -1) (undo-tree-id14027 . -1) (undo-tree-id14028 . -1) (undo-tree-id14029 . -1) (undo-tree-id14030 . -1) (undo-tree-id14031 . -1) (undo-tree-id14032 . -1) (undo-tree-id14033 . -1) (undo-tree-id14034 . -1) (undo-tree-id14035 . -1) (undo-tree-id14036 . -1) (undo-tree-id14037 . -1) (undo-tree-id14038 . -1) (undo-tree-id14039 . -1) (undo-tree-id14040 . -1) (undo-tree-id14041 . -1) (undo-tree-id14042 . -1) (undo-tree-id14043 . -1) (undo-tree-id14044 . -1) (undo-tree-id14045 . -1) (undo-tree-id14046 . -1) (undo-tree-id14047 . -1) (undo-tree-id14048 . -1) (undo-tree-id14049 . -1) (undo-tree-id14050 . -1) (undo-tree-id14051 . -1) (undo-tree-id14052 . -1) (undo-tree-id14053 . -1) (undo-tree-id14054 . -1) (undo-tree-id14055 . -1) (undo-tree-id14056 . -1) (undo-tree-id14057 . -1) (undo-tree-id14058 . -1) (undo-tree-id14059 . -1) (undo-tree-id14060 . -1) (undo-tree-id14061 . -1) (undo-tree-id14062 . -1) (#("c" 0 1 (fontified t)) . -2210) (undo-tree-id14063 . -1) (undo-tree-id14064 . -1) (undo-tree-id14065 . -1) (undo-tree-id14066 . -1) (undo-tree-id14067 . -1) (undo-tree-id14068 . -1) (undo-tree-id14069 . -1) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1) (undo-tree-id14092 . -1) (undo-tree-id14093 . -1) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (undo-tree-id14096 . -1) (undo-tree-id14097 . -1) (#("h" 0 1 (fontified t)) . -2211) (undo-tree-id14098 . -1) (undo-tree-id14099 . -1) (undo-tree-id14100 . -1) (undo-tree-id14101 . -1) (undo-tree-id14102 . -1) (undo-tree-id14103 . -1) (undo-tree-id14104 . -1) (undo-tree-id14105 . -1) (undo-tree-id14106 . -1) (undo-tree-id14107 . -1) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) (undo-tree-id14111 . -1) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1) (undo-tree-id14114 . -1) (undo-tree-id14115 . -1) (undo-tree-id14116 . -1) (undo-tree-id14117 . -1) (undo-tree-id14118 . -1) (undo-tree-id14119 . -1) (undo-tree-id14120 . -1) (undo-tree-id14121 . -1) (undo-tree-id14122 . -1) (#("o" 0 1 (fontified t)) . -2212) (undo-tree-id14123 . -1) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (#(" " 0 1 (fontified t)) . -2213) (undo-tree-id14138 . -1) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) 2214 (2209 . 2214)) nil (26156 44797 52419 820000) 0 nil])
([nil nil ((2223 . 2226) (2222 . 2223)) nil (26156 44797 50752 932000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2224) (undo-tree-id13832 . -2) (undo-tree-id13833 . 1) (undo-tree-id13834 . -1) (undo-tree-id13835 . -1) (undo-tree-id13836 . -2) (undo-tree-id13837 . -2) (undo-tree-id13838 . -2) (undo-tree-id13839 . -2) (undo-tree-id13840 . -2) (undo-tree-id13841 . -2) (undo-tree-id13842 . -2) (undo-tree-id13843 . -2) (undo-tree-id13844 . -2) (undo-tree-id13845 . -2) (undo-tree-id13846 . -2) (undo-tree-id13847 . -2) (undo-tree-id13848 . -2) (undo-tree-id13849 . -2) (undo-tree-id13850 . -2) (undo-tree-id13851 . -2) (undo-tree-id13852 . -2) (undo-tree-id13853 . -2) (undo-tree-id13854 . -2) (undo-tree-id13855 . -2) (undo-tree-id13856 . -2) (undo-tree-id13857 . -2) (undo-tree-id13858 . -2) (undo-tree-id13859 . -2) (undo-tree-id13860 . -2) (undo-tree-id13861 . -2) (undo-tree-id13862 . -2) (undo-tree-id13863 . -2) (undo-tree-id13864 . -2) (undo-tree-id13865 . -2) (undo-tree-id13866 . -2) (undo-tree-id13867 . -2) (undo-tree-id13868 . -2) (undo-tree-id13869 . -2) (undo-tree-id13870 . -2) (undo-tree-id13871 . -2) (undo-tree-id13872 . -2) (undo-tree-id13873 . -2) (undo-tree-id13874 . -2) (undo-tree-id13875 . -2) (undo-tree-id13876 . -2) (undo-tree-id13877 . -2) (undo-tree-id13878 . -2) (undo-tree-id13879 . -2) (undo-tree-id13880 . -1) (undo-tree-id13881 . -1) (undo-tree-id13882 . -1) (undo-tree-id13883 . -1) (undo-tree-id13884 . -1) (undo-tree-id13885 . -1) (undo-tree-id13886 . -1) (undo-tree-id13887 . -1) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (undo-tree-id13890 . -1) (undo-tree-id13891 . -1) (undo-tree-id13892 . -1) (undo-tree-id13893 . -1) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -3) 2225) nil (26156 44797 50741 776000) 0 nil])
([nil nil ((apply yas--snippet-revive 2240 2250 #s(yas--snippet nil nil #s(yas--exit 2249 nil) 113 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2249 nil) 113 nil nil nil nil)) (2240 . 2250) (#("println!($0)" 0 12 (fontified nil)) . 2240) (2240 . 2252) (#("pr" 0 2 (fontified nil)) . 2240) (2240 . 2242) (#("println!(…)" 0 11 (fontified nil)) . -2240) (2240 . 2251) (#("pr" 0 2 (fontified t)) . -2240) (undo-tree-id13760 . -2) (undo-tree-id13761 . -2) (undo-tree-id13762 . -2) (undo-tree-id13763 . -2) (undo-tree-id13764 . -2) (undo-tree-id13765 . -2) (undo-tree-id13766 . -2) (undo-tree-id13767 . -2) (undo-tree-id13768 . -2) (undo-tree-id13769 . -2) (undo-tree-id13770 . -2) (undo-tree-id13771 . -2) (undo-tree-id13772 . -2) (undo-tree-id13773 . -2) (undo-tree-id13774 . -2) (undo-tree-id13775 . -2) (undo-tree-id13776 . -2) (undo-tree-id13777 . -2) (undo-tree-id13778 . -2) (undo-tree-id13779 . -2) (undo-tree-id13780 . -2) (undo-tree-id13781 . -2) (undo-tree-id13782 . -2) (undo-tree-id13783 . -2) (undo-tree-id13784 . -2) (undo-tree-id13785 . -2) (undo-tree-id13786 . -2) (undo-tree-id13787 . -2) (undo-tree-id13788 . -2) (undo-tree-id13789 . -2) (undo-tree-id13790 . -2) (undo-tree-id13791 . -2) (undo-tree-id13792 . -2) (undo-tree-id13793 . -2) (undo-tree-id13794 . -2) (undo-tree-id13795 . -2) (undo-tree-id13796 . -2) (undo-tree-id13797 . -2) (undo-tree-id13798 . -2) (undo-tree-id13799 . -2) (undo-tree-id13800 . -2) (undo-tree-id13801 . -2) (undo-tree-id13802 . -2) (undo-tree-id13803 . -2) (undo-tree-id13804 . -2) (undo-tree-id13805 . -2) (undo-tree-id13806 . -2) (undo-tree-id13807 . -2) (undo-tree-id13808 . -2) (undo-tree-id13809 . -2) (undo-tree-id13810 . -2) (undo-tree-id13811 . -2) (undo-tree-id13812 . -2) (undo-tree-id13813 . -2) (undo-tree-id13814 . -2) (undo-tree-id13815 . -2) (undo-tree-id13816 . -2) (undo-tree-id13817 . -2) (undo-tree-id13818 . -2) (undo-tree-id13819 . -2) (undo-tree-id13820 . -2) (undo-tree-id13821 . -2) (undo-tree-id13822 . -2) (undo-tree-id13823 . -2) (undo-tree-id13824 . -2) (undo-tree-id13825 . -2) (undo-tree-id13826 . -2) (undo-tree-id13827 . -2) (undo-tree-id13828 . -2) (undo-tree-id13829 . -2) (undo-tree-id13830 . -2) (undo-tree-id13831 . -2) 2242 (2240 . 2242) (2238 . 2240) (2239 . 2244) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2238) (2238 . 2240) (2237 . 2239) (2230 . 2238)) nil (26156 44797 50567 121000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face rust-builtin-formatting-macro)) . 2214) (undo-tree-id13758 . -1) (undo-tree-id13759 . -1)) nil (26156 44797 50430 367000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . 2214) (undo-tree-id13756 . -1) (undo-tree-id13757 . -1)) nil (26156 44797 50424 827000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face rust-builtin-formatting-macro)) . 2243) (undo-tree-id13754 . -1) (undo-tree-id13755 . -1)) nil (26156 44797 50418 969000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . 2243) (undo-tree-id13752 . -1) (undo-tree-id13753 . -1)) nil (26156 44797 50411 724000) 0 nil])
([nil nil ((2246 . 2247) (2245 . 2247) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -2245) (2245 . 2246)) nil (26156 44797 50386 242000) 0 nil])
([nil nil ((2249 . 2250)) nil (26156 44797 50374 163000) 0 nil])
([nil nil ((2177 . 2182) (#("	    " 0 5 (fontified nil)) . 2176) (undo-tree-id14212 . -5) (undo-tree-id14213 . -5) (undo-tree-id14214 . -5) (undo-tree-id14215 . -5) (undo-tree-id14216 . -5) (undo-tree-id14217 . -5) (undo-tree-id14218 . -5) (undo-tree-id14219 . -5) (undo-tree-id14220 . -5) (undo-tree-id14221 . -5) (undo-tree-id14222 . -5) (undo-tree-id14223 . -5) (undo-tree-id14224 . -5) (undo-tree-id14225 . -5) (undo-tree-id14226 . -5) (undo-tree-id14227 . -5) (2176 . 2182) (#("	    " 0 5 (fontified nil)) . 2175) (undo-tree-id14228 . -5) (undo-tree-id14229 . -5) (undo-tree-id14230 . -5) (undo-tree-id14231 . -5) (undo-tree-id14232 . -5) (undo-tree-id14233 . -5) (undo-tree-id14234 . -5) (undo-tree-id14235 . -5) (undo-tree-id14236 . -5) (undo-tree-id14237 . -5) (undo-tree-id14238 . -5) (undo-tree-id14239 . -5) (undo-tree-id14240 . -5) (undo-tree-id14241 . -5) (undo-tree-id14242 . -5) (undo-tree-id14243 . -5) (undo-tree-id14244 . -5) (undo-tree-id14245 . -5) (undo-tree-id14246 . -5) (undo-tree-id14247 . -5) (undo-tree-id14248 . -5) (undo-tree-id14249 . -5) (undo-tree-id14250 . -5) (undo-tree-id14251 . -5) (undo-tree-id14252 . -5) (undo-tree-id14253 . -5) (undo-tree-id14254 . -5) (undo-tree-id14255 . -5) (undo-tree-id14256 . -5) (undo-tree-id14257 . -5) (undo-tree-id14258 . -5) (undo-tree-id14259 . -5) (undo-tree-id14260 . -5) (undo-tree-id14261 . -5) (2180 . 2181) (2175 . 2180) (t 26156 44797 110030 642000)) nil (26156 44812 374615 663000) 0 nil])
([nil nil ((2176 . 2181)) nil (26156 44812 374523 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 2212 2220 #s(yas--snippet nil nil #s(yas--exit 2220 nil) 114 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2220 nil) 114 nil nil nil nil)) (2212 . 2220) (#("unwrap()$0" 0 10 (fontified nil)) . 2212) (2212 . 2222) (#("un" 0 2 (fontified nil)) . 2212) (2212 . 2214) (#("unwrap()" 0 8 (fontified nil)) . -2212) (2212 . 2220) (#("un" 0 2 (fontified t)) . -2212) (undo-tree-id14148 . -1) (undo-tree-id14149 . -2) (undo-tree-id14150 . -2) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) (undo-tree-id14167 . -1) (undo-tree-id14168 . -1) (undo-tree-id14169 . -1) (undo-tree-id14170 . -1) (undo-tree-id14171 . -1) (undo-tree-id14172 . -1) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -1) (undo-tree-id14177 . -1) (undo-tree-id14178 . -1) (undo-tree-id14179 . -1) (undo-tree-id14180 . -1) (undo-tree-id14181 . -2) (undo-tree-id14182 . -2) (undo-tree-id14183 . -2) (undo-tree-id14184 . -2) (undo-tree-id14185 . -2) (undo-tree-id14186 . -2) (undo-tree-id14187 . -2) (undo-tree-id14188 . -2) (undo-tree-id14189 . -2) (undo-tree-id14190 . -2) (undo-tree-id14191 . -2) (undo-tree-id14192 . -2) (undo-tree-id14193 . -2) (undo-tree-id14194 . -2) (undo-tree-id14195 . -2) (undo-tree-id14196 . -2) (undo-tree-id14197 . -2) (undo-tree-id14198 . -2) (undo-tree-id14199 . -2) (undo-tree-id14200 . -2) (undo-tree-id14201 . -2) (undo-tree-id14202 . -2) (undo-tree-id14203 . -2) (undo-tree-id14204 . -2) (undo-tree-id14205 . -2) (undo-tree-id14206 . -2) (undo-tree-id14207 . -2) (undo-tree-id14208 . -2) (undo-tree-id14209 . -2) (undo-tree-id14210 . -2) (undo-tree-id14211 . -2) 2214 (2212 . 2214) (2211 . 2212)) nil (26156 44812 374506 403000) 0 nil])
([nil nil ((apply yas--snippet-revive 2289 2299 #s(yas--snippet nil nil #s(yas--exit 2298 nil) 115 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2298 nil) 115 nil nil nil nil)) (2289 . 2299) (#("println!($0)" 0 12 (fontified nil)) . 2289) (2289 . 2301) (#("pr" 0 2 (fontified nil)) . 2289) (2289 . 2291) (#("println!(…)" 0 11 (fontified nil)) . -2289) (2289 . 2300) (#("pr" 0 2 (fontified t)) . -2289) (undo-tree-id14262 . -2) (undo-tree-id14263 . -2) (undo-tree-id14264 . -2) (undo-tree-id14265 . -2) (undo-tree-id14266 . -2) (undo-tree-id14267 . -2) (undo-tree-id14268 . -2) (undo-tree-id14269 . -2) (undo-tree-id14270 . -2) (undo-tree-id14271 . -2) (undo-tree-id14272 . -2) (undo-tree-id14273 . -2) (undo-tree-id14274 . -2) (undo-tree-id14275 . -2) (undo-tree-id14276 . -2) (undo-tree-id14277 . -2) (undo-tree-id14278 . -2) (undo-tree-id14279 . -2) (undo-tree-id14280 . -2) (undo-tree-id14281 . -2) (undo-tree-id14282 . -2) (undo-tree-id14283 . -2) (undo-tree-id14284 . -2) (undo-tree-id14285 . -2) (undo-tree-id14286 . -2) (undo-tree-id14287 . -2) (undo-tree-id14288 . -2) (undo-tree-id14289 . -2) (undo-tree-id14290 . -2) (undo-tree-id14291 . -2) (undo-tree-id14292 . -2) (undo-tree-id14293 . -2) (undo-tree-id14294 . -2) (undo-tree-id14295 . -2) (undo-tree-id14296 . -2) (undo-tree-id14297 . -2) (undo-tree-id14298 . -2) (undo-tree-id14299 . -2) (undo-tree-id14300 . -2) (undo-tree-id14301 . -2) (undo-tree-id14302 . -2) (undo-tree-id14303 . -2) (undo-tree-id14304 . -2) (undo-tree-id14305 . -2) (undo-tree-id14306 . -2) (undo-tree-id14307 . -2) (undo-tree-id14308 . -2) (undo-tree-id14309 . -2) (undo-tree-id14310 . -2) (undo-tree-id14311 . -2) (undo-tree-id14312 . -2) (undo-tree-id14313 . -2) (undo-tree-id14314 . -2) (undo-tree-id14315 . -2) (undo-tree-id14316 . -2) (undo-tree-id14317 . -2) (undo-tree-id14318 . -2) (undo-tree-id14319 . -2) (undo-tree-id14320 . -2) (undo-tree-id14321 . -2) (undo-tree-id14322 . -2) (undo-tree-id14323 . -2) (undo-tree-id14324 . -2) (undo-tree-id14325 . -2) (undo-tree-id14326 . -2) (undo-tree-id14327 . -2) (undo-tree-id14328 . -2) (undo-tree-id14329 . -2) (undo-tree-id14330 . -2) (undo-tree-id14331 . -2) (undo-tree-id14332 . -2) (undo-tree-id14333 . -2) 2291 (2289 . 2291) (2287 . 2289) (t 26156 44812 434736 338000)) nil (26156 44818 81084 32000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2175) (undo-tree-id14358 . -1) (t 26156 44818 166998 889000)) nil (26156 44821 602907 652000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 2175) (undo-tree-id14346 . -5) (undo-tree-id14347 . -4) (undo-tree-id14348 . -4) (undo-tree-id14349 . -4) (undo-tree-id14350 . -4) (undo-tree-id14351 . -4) (undo-tree-id14352 . -4) (undo-tree-id14353 . -4) (undo-tree-id14354 . -4) (undo-tree-id14355 . -4) (undo-tree-id14356 . -5) (undo-tree-id14357 . -6)) nil (26156 44821 602900 713000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 2175) (undo-tree-id14334 . -5) (undo-tree-id14335 . -4) (undo-tree-id14336 . -4) (undo-tree-id14337 . -4) (undo-tree-id14338 . -4) (undo-tree-id14339 . -4) (undo-tree-id14340 . -4) (undo-tree-id14341 . -4) (undo-tree-id14342 . -4) (undo-tree-id14343 . -4) (undo-tree-id14344 . -5) (undo-tree-id14345 . -6)) nil (26156 44821 602870 244000) 0 nil])
([nil nil ((2266 . 2267) (#("	    	" 0 5 (fontified nil) 5 6 (fontified nil)) . 2266) (undo-tree-id14361 . -5) (undo-tree-id14362 . 1) (undo-tree-id14363 . -5) (undo-tree-id14364 . -5) (undo-tree-id14365 . -5) (#("
" 0 1 (fontified t)) . -2271) (undo-tree-id14366 . -1) (undo-tree-id14367 . -1) (undo-tree-id14368 . -1) (undo-tree-id14369 . -1) 2266 (t 26156 44821 663158 647000)) nil (26156 44891 488701 704000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4983) (undo-tree-id14359 . -4) 4987 (4983 . 4987) (#("    " 0 4 (fontified nil)) . 4982) (undo-tree-id14360 . -4) (4981 . 4987)) nil (26156 44891 488669 181000) 0 nil])
([nil nil ((1857 . 1858)) nil (26156 44891 488645 320000) 0 nil])
([nil nil ((1869 . 1870)) nil (26156 44891 488634 287000) 0 nil])
([nil nil ((4987 . 4991) (#("    " 0 4 (fontified nil)) . 4986) (undo-tree-id14385 . -4) (4986 . 4991) (#("    " 0 4 (fontified nil)) . 4985) (undo-tree-id14386 . -4) (4989 . 4990) (4985 . 4989) (t 26156 44891 550295 840000)) nil (26156 44917 840478 815000) 0 nil])
([nil nil ((5028 . 5029) (apply yas--snippet-revive 4990 5028 #s(yas--snippet nil (#s(yas--field 1 5004 5013 nil nil nil t #s(yas--field 2 5015 5024 nil nil nil t #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil)))) #s(yas--field 2 5015 5024 nil nil nil t #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil))) #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil))) #s(yas--exit 5028 nil) 116 nil #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil)) nil nil)) (#("tol" 0 3 (fontified nil)) . 5027) (undo-tree-id14370 . -3) (5026 . 5027) (5015 . 5016) (5015 . 5023) (#("ma" 0 2 (fontified nil)) . 5015) (undo-tree-id14371 . -2) (5015 . 5017) (#("&map_data" 0 9 (fontified nil)) . -5015) (undo-tree-id14372 . -9) (5015 . 5024) (#("ma" 0 2 (fontified t)) . -5015) (undo-tree-id14373 . -2) (undo-tree-id14374 . -2) (undo-tree-id14375 . -2) 5017 (5016 . 5017) (#("map2" 0 4 (fontified nil)) . 5016) (undo-tree-id14376 . -4) (5015 . 5016) (5004 . 5005) (5004 . 5012) (#("ma" 0 2 (fontified nil)) . 5004) (undo-tree-id14377 . -2) (5004 . 5006) (#("&map_data" 0 9 (fontified nil)) . -5004) (undo-tree-id14378 . -9) (5004 . 5013) (#("ma" 0 2 (fontified t)) . -5004) (undo-tree-id14379 . -2) (undo-tree-id14380 . -2) (undo-tree-id14381 . -2) 5006 (5005 . 5006) (#("map1" 0 4 (fontified nil)) . 5005) (undo-tree-id14382 . -4) (5004 . 5005) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5004 5013 nil nil nil t #s(yas--field 2 5015 5024 nil nil nil t #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil)))) #s(yas--field 2 5015 5024 nil nil nil t #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil))) #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil))) #s(yas--exit 5028 nil) 116 nil #s(yas--field 3 5026 5027 nil nil nil t #s(yas--exit 5028 nil)) nil nil)) (4990 . 5020) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol})$0" 0 47 (fontified nil)) . 4990) (4990 . 5037) (#("ja" 0 2 (fontified nil)) . 4990) (4990 . 4992) (#("jaccard_index(…)" 0 16 (fontified nil)) . -4990) (4990 . 5006) (#("ja" 0 2 (fontified t)) . -4990) (undo-tree-id14383 . -2) (undo-tree-id14384 . -2) 4992 (4990 . 4992) (4986 . 4990)) nil (26156 44917 840453 927000) 0 nil])
([nil nil ((#("width " 0 6 (fontified t)) . 2141) (undo-tree-id14569 . -5) (undo-tree-id14570 . -6) (undo-tree-id14571 . -6) (undo-tree-id14572 . -6) (undo-tree-id14573 . -6) (undo-tree-id14574 . -6) (undo-tree-id14575 . -6) (undo-tree-id14576 . -6) (undo-tree-id14577 . -6) (undo-tree-id14578 . -6) (undo-tree-id14579 . -6) (undo-tree-id14580 . -6) (undo-tree-id14581 . -6) (undo-tree-id14582 . -6) (undo-tree-id14583 . -6) (undo-tree-id14584 . -6) (undo-tree-id14585 . -6) (undo-tree-id14586 . -6) (undo-tree-id14587 . -6) (undo-tree-id14588 . -3) (undo-tree-id14589 . -3) (undo-tree-id14590 . -3) (undo-tree-id14591 . -3) (undo-tree-id14592 . -3) (undo-tree-id14593 . -3) (undo-tree-id14594 . -3) (undo-tree-id14595 . -3) (undo-tree-id14596 . -3) (undo-tree-id14597 . -6) (t 26156 44917 899452 536000)) nil (26156 44995 166363 660000) 0 nil])
([nil nil ((2141 . 2147) (#("he" 0 2 (fontified nil)) . 2141) (2141 . 2143) (#("height" 0 6 (fontified nil)) . -2141) (2141 . 2147) (#("he" 0 2 (fontified t)) . -2141) (undo-tree-id14506 . -2) (undo-tree-id14507 . -2) (undo-tree-id14508 . -2) (undo-tree-id14509 . -2) (undo-tree-id14510 . -2) (undo-tree-id14511 . -2) (undo-tree-id14512 . -2) (undo-tree-id14513 . -2) (undo-tree-id14514 . -2) (undo-tree-id14515 . -2) (undo-tree-id14516 . -2) (undo-tree-id14517 . -2) (undo-tree-id14518 . -2) (undo-tree-id14519 . -2) (undo-tree-id14520 . -2) (undo-tree-id14521 . -2) (undo-tree-id14522 . -2) (undo-tree-id14523 . -2) (undo-tree-id14524 . -2) (undo-tree-id14525 . -2) (undo-tree-id14526 . -2) (undo-tree-id14527 . -2) (undo-tree-id14528 . -2) (undo-tree-id14529 . -2) (undo-tree-id14530 . -2) (undo-tree-id14531 . -2) (undo-tree-id14532 . -2) (undo-tree-id14533 . -2) (undo-tree-id14534 . -2) (undo-tree-id14535 . -2) (undo-tree-id14536 . -2) (undo-tree-id14537 . -2) (undo-tree-id14538 . -2) (undo-tree-id14539 . -2) (undo-tree-id14540 . -2) (undo-tree-id14541 . -2) (undo-tree-id14542 . -2) (undo-tree-id14543 . -2) (undo-tree-id14544 . -2) (undo-tree-id14545 . -2) (undo-tree-id14546 . -2) (undo-tree-id14547 . -2) (undo-tree-id14548 . -2) (undo-tree-id14549 . -2) (undo-tree-id14550 . -2) (undo-tree-id14551 . -2) (undo-tree-id14552 . -2) (undo-tree-id14553 . -2) (undo-tree-id14554 . -2) (undo-tree-id14555 . -2) (undo-tree-id14556 . -2) (undo-tree-id14557 . -2) (undo-tree-id14558 . -2) (undo-tree-id14559 . -2) (undo-tree-id14560 . -2) (undo-tree-id14561 . -2) (undo-tree-id14562 . -2) (undo-tree-id14563 . -2) (undo-tree-id14564 . -2) (undo-tree-id14565 . -2) (undo-tree-id14566 . -2) (undo-tree-id14567 . -2) (undo-tree-id14568 . -2) 2143 (2141 . 2143)) nil (26156 44995 166094 700000) 0 nil])
([nil nil ((2147 . 2148)) nil (26156 44995 165502 583000) 0 nil])
([nil nil ((#("height " 0 7 (fontified t)) . 2169) (undo-tree-id14495 . -6) (undo-tree-id14496 . -2) (undo-tree-id14497 . -2) (undo-tree-id14498 . -2) (undo-tree-id14499 . -2) (undo-tree-id14500 . -2) (undo-tree-id14501 . -2) (undo-tree-id14502 . -2) (undo-tree-id14503 . -2) (undo-tree-id14504 . -2) (undo-tree-id14505 . -7)) nil (26156 44995 165499 279000) 0 nil])
([nil nil ((2174 . 2175) (2169 . 2174) (#("wi" 0 2 (fontified nil)) . 2169) (2169 . 2171) (#("width" 0 5 (fontified nil)) . -2169) (2169 . 2174) (#("wi" 0 2 (fontified t)) . -2169) (undo-tree-id14412 . -2) (undo-tree-id14413 . -2) (undo-tree-id14414 . -1) (undo-tree-id14415 . -1) (undo-tree-id14416 . -1) (undo-tree-id14417 . -1) (undo-tree-id14418 . -1) (undo-tree-id14419 . -1) (undo-tree-id14420 . -1) (undo-tree-id14421 . -1) (undo-tree-id14422 . -1) (undo-tree-id14423 . -1) (undo-tree-id14424 . -2) (undo-tree-id14425 . -2) (undo-tree-id14426 . -2) (undo-tree-id14427 . -2) (undo-tree-id14428 . -2) (undo-tree-id14429 . -2) (undo-tree-id14430 . -2) (undo-tree-id14431 . -2) (undo-tree-id14432 . -2) (undo-tree-id14433 . -2) (undo-tree-id14434 . -2) (undo-tree-id14435 . -2) (undo-tree-id14436 . -2) (undo-tree-id14437 . -2) (undo-tree-id14438 . -2) (undo-tree-id14439 . -2) (undo-tree-id14440 . -2) (undo-tree-id14441 . -2) (undo-tree-id14442 . -2) (undo-tree-id14443 . -2) (undo-tree-id14444 . -2) (undo-tree-id14445 . -2) (undo-tree-id14446 . -2) (undo-tree-id14447 . -2) (undo-tree-id14448 . -2) (undo-tree-id14449 . -2) (undo-tree-id14450 . -2) (undo-tree-id14451 . -2) (undo-tree-id14452 . -2) (undo-tree-id14453 . -2) (undo-tree-id14454 . -2) (undo-tree-id14455 . -2) (undo-tree-id14456 . -2) (undo-tree-id14457 . -2) (undo-tree-id14458 . -2) (undo-tree-id14459 . -2) (undo-tree-id14460 . -2) (undo-tree-id14461 . -2) (undo-tree-id14462 . -2) (undo-tree-id14463 . -2) (undo-tree-id14464 . -2) (undo-tree-id14465 . -2) (undo-tree-id14466 . -2) (undo-tree-id14467 . -2) (undo-tree-id14468 . -2) (undo-tree-id14469 . -2) (undo-tree-id14470 . -2) (undo-tree-id14471 . -2) (undo-tree-id14472 . -2) (undo-tree-id14473 . -2) (undo-tree-id14474 . -2) (undo-tree-id14475 . -2) (undo-tree-id14476 . -2) (undo-tree-id14477 . -2) (undo-tree-id14478 . -2) (undo-tree-id14479 . -2) (undo-tree-id14480 . -2) (undo-tree-id14481 . -2) (undo-tree-id14482 . -2) (undo-tree-id14483 . -2) (undo-tree-id14484 . -2) (undo-tree-id14485 . -2) (undo-tree-id14486 . -2) (undo-tree-id14487 . -2) (undo-tree-id14488 . -2) (undo-tree-id14489 . -2) (undo-tree-id14490 . -2) (undo-tree-id14491 . -2) (undo-tree-id14492 . -2) (undo-tree-id14493 . -2) (undo-tree-id14494 . -2) 2171 (2169 . 2171)) nil (26156 44995 165469 635000) 0 nil])
([nil nil ((2195 . 2196) (#("i" 0 1 (fontified t)) . -2195) (undo-tree-id14411 . -1) 2196) nil (26156 44995 165319 851000) 0 nil])
([nil nil ((2198 . 2199) (#("j" 0 1 (fontified t)) . -2198) (undo-tree-id14387 . -1) (undo-tree-id14388 . -1) (undo-tree-id14389 . -1) (undo-tree-id14390 . -1) (undo-tree-id14391 . -1) (undo-tree-id14392 . -1) (undo-tree-id14393 . -1) (undo-tree-id14394 . -1) (undo-tree-id14395 . -1) (undo-tree-id14396 . -1) (undo-tree-id14397 . -1) (undo-tree-id14398 . -1) (undo-tree-id14399 . -1) (undo-tree-id14400 . -1) (undo-tree-id14401 . -1) (undo-tree-id14402 . -1) (undo-tree-id14403 . -1) (undo-tree-id14404 . -1) (undo-tree-id14405 . -1) (undo-tree-id14406 . -1) (undo-tree-id14407 . -1) (undo-tree-id14408 . -1) (undo-tree-id14409 . -1) (undo-tree-id14410 . -1) 2199) nil (26156 44995 165305 437000) 0 nil])
([nil nil ((#("	println!()" 0 1 (fontified t) 1 9 (fontified t face rust-builtin-formatting-macro) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face))) . 2271) (undo-tree-id14669 . -10) (undo-tree-id14670 . -10) (undo-tree-id14671 . -10) (undo-tree-id14672 . -10) (undo-tree-id14673 . -10) (t 26156 44995 250774 373000)) nil (26156 45089 314772 378000) 0 nil])
([nil nil ((#("		print!(\"#\");
" 0 2 (fontified t) 2 8 (fontified t face rust-builtin-formatting-macro) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 12 (fontified t face font-lock-string-face) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 14 (fontified t) 14 15 (fontified t)) . 2246) (undo-tree-id14953 . -14) (undo-tree-id14954 . 13) (undo-tree-id14955 . -1) (undo-tree-id14956 . -3) (undo-tree-id14957 . -1) (undo-tree-id14958 . -1) (undo-tree-id14959 . -1) (undo-tree-id14960 . -1) (undo-tree-id14961 . -1) (undo-tree-id14962 . -1) (undo-tree-id14963 . -1) (undo-tree-id14964 . -1) (undo-tree-id14965 . -1) (undo-tree-id14966 . -1) (undo-tree-id14967 . -1) (undo-tree-id14968 . -1) (undo-tree-id14969 . -1) (undo-tree-id14970 . -1) (undo-tree-id14971 . -1) (undo-tree-id14972 . -1) (undo-tree-id14973 . -1) (undo-tree-id14974 . -1) (undo-tree-id14975 . -1) (undo-tree-id14976 . -1) (undo-tree-id14977 . -1) (undo-tree-id14978 . -1) (undo-tree-id14979 . -1) (undo-tree-id14980 . -1) (undo-tree-id14981 . -1) (undo-tree-id14982 . -1) (undo-tree-id14983 . -1) (undo-tree-id14984 . -1) (undo-tree-id14985 . -1) (undo-tree-id14986 . -1) (undo-tree-id14987 . -1) (undo-tree-id14988 . -1) (undo-tree-id14989 . -1) (undo-tree-id14990 . -1) (undo-tree-id14991 . -1) (undo-tree-id14992 . -1) (undo-tree-id14993 . -1) (undo-tree-id14994 . -1) (undo-tree-id14995 . -1) (undo-tree-id14996 . -1) (undo-tree-id14997 . -1) (undo-tree-id14998 . -1) (undo-tree-id14999 . -3) (undo-tree-id15000 . -3) (undo-tree-id15001 . -3) (undo-tree-id15002 . -3) (undo-tree-id15003 . -3) (undo-tree-id15004 . -3) (undo-tree-id15005 . -3) (undo-tree-id15006 . -3) (undo-tree-id15007 . -3) (undo-tree-id15008 . -3) (undo-tree-id15009 . -3) (undo-tree-id15010 . -3) (undo-tree-id15011 . -15) 2249 (t 26156 45080 354316 569000)) nil (26156 45097 710572 430000) 0 nil] [nil nil ((#("		print!(\" \");
	    } else {
" 0 2 (fontified t) 2 8 (fontified t face rust-builtin-formatting-macro) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 12 (fontified t face font-lock-string-face) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 15 (fontified t) 15 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-4-face)) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-4-face)) 28 29 (fontified t)) . 2217) (undo-tree-id14726 . -28) (undo-tree-id14727 . -3) (undo-tree-id14728 . -1) (undo-tree-id14729 . -20) (undo-tree-id14730 . -20) (undo-tree-id14731 . -20) (undo-tree-id14732 . -20) (undo-tree-id14733 . -20) (undo-tree-id14734 . -20) (undo-tree-id14735 . -20) (undo-tree-id14736 . -20) (undo-tree-id14737 . -20) (undo-tree-id14738 . -2) (undo-tree-id14739 . -2) (undo-tree-id14740 . -2) (undo-tree-id14741 . -2) (undo-tree-id14742 . -2) (undo-tree-id14743 . -2) (undo-tree-id14744 . -2) (undo-tree-id14745 . -2) (undo-tree-id14746 . -2) (undo-tree-id14747 . -2) (undo-tree-id14748 . -2) (undo-tree-id14749 . -2) (undo-tree-id14750 . -2) (undo-tree-id14751 . -2) (undo-tree-id14752 . -2) (undo-tree-id14753 . -2) (undo-tree-id14754 . -2) (undo-tree-id14755 . -2) (undo-tree-id14756 . -2) (undo-tree-id14757 . -2) (undo-tree-id14758 . -2) (undo-tree-id14759 . -2) (undo-tree-id14760 . -2) (undo-tree-id14761 . -2) (undo-tree-id14762 . -2) (undo-tree-id14763 . -2) (undo-tree-id14764 . -2) (undo-tree-id14765 . -2) (undo-tree-id14766 . -2) (undo-tree-id14767 . -2) (undo-tree-id14768 . -2) (undo-tree-id14769 . -2) (undo-tree-id14770 . -1) (undo-tree-id14771 . -1) (undo-tree-id14772 . -1) (undo-tree-id14773 . -1) (undo-tree-id14774 . -1) (undo-tree-id14775 . -1) (undo-tree-id14776 . -1) (undo-tree-id14777 . -1) (undo-tree-id14778 . -1) (undo-tree-id14779 . -3) (undo-tree-id14780 . -3) (undo-tree-id14781 . -3) (undo-tree-id14782 . -3) (undo-tree-id14783 . -3) (undo-tree-id14784 . -3) (undo-tree-id14785 . -3) (undo-tree-id14786 . -3) (undo-tree-id14787 . -3) (undo-tree-id14788 . -3) (undo-tree-id14789 . -3) (undo-tree-id14790 . -3) (undo-tree-id14791 . -3) (undo-tree-id14792 . -3) (undo-tree-id14793 . -3) (undo-tree-id14794 . -3) (undo-tree-id14795 . -3) (undo-tree-id14796 . -3) (undo-tree-id14797 . -3) (undo-tree-id14798 . -3) (undo-tree-id14799 . -3) (undo-tree-id14800 . -3) (undo-tree-id14801 . -3) (undo-tree-id14802 . -1) (undo-tree-id14803 . -1) (undo-tree-id14804 . -1) (undo-tree-id14805 . -1) (undo-tree-id14806 . -1) (undo-tree-id14807 . -1) (undo-tree-id14808 . -1) (undo-tree-id14809 . -1) (undo-tree-id14810 . -1) (undo-tree-id14811 . -1) (undo-tree-id14812 . -1) (undo-tree-id14813 . -1) (undo-tree-id14814 . -1) (undo-tree-id14815 . -1) (undo-tree-id14816 . -1) (undo-tree-id14817 . -1) (undo-tree-id14818 . -1) (undo-tree-id14819 . -1) (undo-tree-id14820 . -1) (undo-tree-id14821 . -1) (undo-tree-id14822 . -1) (undo-tree-id14823 . -1) (undo-tree-id14824 . -1) (undo-tree-id14825 . -1) (undo-tree-id14826 . -1) (undo-tree-id14827 . -1) (undo-tree-id14828 . -1) (undo-tree-id14829 . -1) (undo-tree-id14830 . -1) (undo-tree-id14831 . -1) (undo-tree-id14832 . -1) (undo-tree-id14833 . -1) (undo-tree-id14834 . -1) (undo-tree-id14835 . -1) (undo-tree-id14836 . -1) (undo-tree-id14837 . -1) (undo-tree-id14838 . -1) (undo-tree-id14839 . -1) (undo-tree-id14840 . -1) (undo-tree-id14841 . -1) (undo-tree-id14842 . -1) (undo-tree-id14843 . -1) (undo-tree-id14844 . -1) (undo-tree-id14845 . -29) 2218 (t 26156 45080 354316 569000)) ((2217 . 2246)) (26156 45089 312753 955000) 0 nil] [nil nil ((#("		print!(\" \");
	    } else {
		print!(\"#\");
	    }
" 0 2 (fontified t) 2 8 (fontified t face rust-builtin-formatting-macro) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 12 (fontified t face font-lock-string-face) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 15 (fontified t) 15 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-4-face)) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-4-face)) 28 29 (fontified t) 29 31 (fontified t) 31 37 (fontified t face rust-builtin-formatting-macro) 37 38 (fontified t face (rainbow-delimiters-depth-5-face)) 38 41 (fontified t face font-lock-string-face) 41 42 (fontified t face (rainbow-delimiters-depth-5-face)) 42 43 (fontified t) 43 44 (fontified t) 44 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 51 (fontified t)) . 2217) (undo-tree-id14663 . -50) (undo-tree-id14664 . -50) (undo-tree-id14665 . -50) (undo-tree-id14666 . -51) (undo-tree-id14667 . -50) (undo-tree-id14668 . -50) 2267) ((2217 . 2268)) (26156 45078 614524 768000) 0 nil])
([nil nil ((#(" else {
	    }
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 8 (fontified t) 8 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-4-face)) 14 15 (fontified t)) . 2238) (undo-tree-id14846 . -14) (undo-tree-id14847 . -14) (undo-tree-id14848 . -14) (undo-tree-id14849 . -15) (undo-tree-id14850 . -14) (undo-tree-id14851 . -8) (undo-tree-id14852 . -8) (undo-tree-id14853 . -8) (undo-tree-id14854 . -8) (undo-tree-id14855 . -8) (undo-tree-id14856 . -8) (undo-tree-id14857 . -8) (undo-tree-id14858 . -8) (undo-tree-id14859 . -8) (undo-tree-id14860 . -8) (undo-tree-id14861 . -8) (undo-tree-id14862 . -8) (undo-tree-id14863 . -8) (undo-tree-id14864 . -8) (undo-tree-id14865 . -8) (undo-tree-id14866 . -8) (undo-tree-id14867 . -8) (undo-tree-id14868 . -8) (undo-tree-id14869 . -8) (undo-tree-id14870 . -8) (undo-tree-id14871 . -8) (undo-tree-id14872 . -8) (undo-tree-id14873 . -8) (undo-tree-id14874 . -8) (undo-tree-id14875 . -8) (undo-tree-id14876 . -8) (undo-tree-id14877 . -8) (undo-tree-id14878 . -8) (undo-tree-id14879 . -8) (undo-tree-id14880 . -8) (undo-tree-id14881 . -8) (undo-tree-id14882 . -8) (undo-tree-id14883 . -8) (undo-tree-id14884 . -8) (undo-tree-id14885 . -8) (undo-tree-id14886 . -8) (undo-tree-id14887 . -8) (undo-tree-id14888 . -8) (undo-tree-id14889 . -8) (undo-tree-id14890 . -8) (undo-tree-id14891 . -8) (undo-tree-id14892 . -8) (undo-tree-id14893 . -8) (undo-tree-id14894 . -8) (undo-tree-id14895 . -8) (undo-tree-id14896 . -8) (undo-tree-id14897 . -8) (undo-tree-id14898 . -8) (undo-tree-id14899 . -8) (undo-tree-id14900 . -8) (undo-tree-id14901 . -8) (undo-tree-id14902 . -8) (undo-tree-id14903 . -8) (undo-tree-id14904 . -8) (undo-tree-id14905 . -14) (undo-tree-id14906 . -13) (undo-tree-id14907 . -13) (undo-tree-id14908 . -13) (undo-tree-id14909 . -13) (undo-tree-id14910 . -13) (undo-tree-id14911 . -13) (undo-tree-id14912 . -13) (undo-tree-id14913 . -13) (undo-tree-id14914 . -13) (undo-tree-id14915 . -13) (undo-tree-id14916 . -13) (undo-tree-id14917 . -15) (undo-tree-id14918 . -14) (undo-tree-id14919 . -8) (undo-tree-id14920 . -14) (undo-tree-id14921 . -14) (undo-tree-id14922 . -14) (undo-tree-id14923 . -14) (undo-tree-id14924 . -14) (undo-tree-id14925 . -14) (undo-tree-id14926 . -14) (undo-tree-id14927 . -14) (undo-tree-id14928 . -14) (undo-tree-id14929 . -14) (undo-tree-id14930 . -14) (undo-tree-id14931 . -14) (undo-tree-id14932 . -14) (undo-tree-id14933 . -14) (undo-tree-id14934 . -14) (undo-tree-id14935 . -14) (undo-tree-id14936 . -14) (undo-tree-id14937 . -14) (undo-tree-id14938 . -14) (undo-tree-id14939 . -14) (undo-tree-id14940 . -14) (undo-tree-id14941 . -14) (undo-tree-id14942 . -14) (undo-tree-id14943 . -14) (undo-tree-id14944 . -14) (undo-tree-id14945 . -14) (undo-tree-id14946 . -14) (undo-tree-id14947 . -14) (undo-tree-id14948 . -14) (undo-tree-id14949 . -14) (undo-tree-id14950 . -14) (undo-tree-id14951 . -14) (undo-tree-id14952 . -15) 2252) nil (26156 45097 709883 682000) 0 nil])
nil
([nil nil ((2218 . 2222) 2217) ((#("    " 0 4 (fontified t)) . 2218) (undo-tree-id14715 . -4) (undo-tree-id14716 . -4) (undo-tree-id14717 . -4) (undo-tree-id14718 . -4) (undo-tree-id14719 . -4) (undo-tree-id14720 . -4) (undo-tree-id14721 . -4) (undo-tree-id14722 . -4) (undo-tree-id14723 . -4) (undo-tree-id14724 . -4) (undo-tree-id14725 . -4)) (26156 45078 163823 66000) 0 nil])
([nil nil ((2238 . 2239)) nil (26156 45097 709659 858000) 0 nil])
([nil nil ((#("	    if bmap1.get(j, i).unwrap() == 0 {
" 0 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t) 14 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-4-face)) 18 19 (fontified t) 19 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-4-face)) 23 24 (fontified t) 24 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-4-face)) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-4-face)) 39 40 (fontified t)) . 2177) (undo-tree-id14629 . -40) (undo-tree-id14630 . -39) (undo-tree-id14631 . 18) (undo-tree-id14632 . -40) (undo-tree-id14633 . -40) (undo-tree-id14634 . -40) (undo-tree-id14635 . -40) (undo-tree-id14636 . 21) (undo-tree-id14637 . -5) (undo-tree-id14638 . -5) (undo-tree-id14640 . -5) (undo-tree-id14642 . -5) (undo-tree-id14644 . -5) (undo-tree-id14646 . -5) (undo-tree-id14648 . -5) (undo-tree-id14650 . -5) (undo-tree-id14652 . -5) (undo-tree-id14654 . -5) (undo-tree-id14656 . -5) (undo-tree-id14658 . -5) (undo-tree-id14660 . -5) (undo-tree-id14662 . -40) 2182) ((2177 . 2217)) (26156 45077 868094 132000) 0 nil])
([nil nil ((#("		print!(\" \");
" 0 2 (fontified t) 2 8 (fontified t face rust-builtin-formatting-macro) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 12 (fontified t face font-lock-string-face) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 15 (fontified t)) . 2217) (undo-tree-id15012 . -14) (undo-tree-id15013 . -9) (undo-tree-id15014 . -9) (undo-tree-id15015 . -15) (undo-tree-id15016 . -15) (undo-tree-id15017 . -15) (undo-tree-id15018 . -15) (undo-tree-id15019 . -15) (undo-tree-id15020 . -15) (undo-tree-id15021 . -15) (undo-tree-id15022 . -15) (undo-tree-id15023 . -15) (undo-tree-id15024 . -9) (undo-tree-id15025 . -9) (undo-tree-id15026 . -9) (undo-tree-id15027 . -9) (undo-tree-id15028 . -9) (undo-tree-id15029 . -9) (undo-tree-id15030 . -9) (undo-tree-id15031 . -9) (undo-tree-id15032 . -9) (undo-tree-id15033 . -9) (undo-tree-id15034 . -9) (undo-tree-id15035 . -9) (undo-tree-id15036 . -9) (undo-tree-id15037 . -9) (undo-tree-id15038 . -9) (undo-tree-id15039 . -9) (undo-tree-id15040 . -9) (undo-tree-id15041 . -9) (undo-tree-id15042 . -9) (undo-tree-id15043 . -9) (undo-tree-id15044 . -9) (undo-tree-id15045 . -9) (undo-tree-id15046 . -9) (undo-tree-id15047 . -9) (undo-tree-id15048 . -9) (undo-tree-id15049 . -9) (undo-tree-id15050 . -9) (undo-tree-id15051 . -9) (undo-tree-id15052 . -9) (undo-tree-id15053 . -9) (undo-tree-id15054 . -9) (undo-tree-id15055 . -9) (undo-tree-id15056 . -9) (undo-tree-id15057 . -9) (undo-tree-id15058 . -9) (undo-tree-id15059 . -9) (undo-tree-id15060 . -9) (undo-tree-id15061 . -9) (undo-tree-id15062 . -9) (undo-tree-id15063 . -9) (undo-tree-id15064 . -9) (undo-tree-id15065 . -9) (undo-tree-id15066 . -9) (undo-tree-id15067 . -9) (undo-tree-id15068 . -9) (undo-tree-id15069 . -9) (undo-tree-id15070 . -9) (undo-tree-id15071 . -9) (undo-tree-id15072 . -9) (undo-tree-id15073 . -9) (undo-tree-id15074 . -9) (undo-tree-id15075 . -9) (undo-tree-id15076 . -9) (undo-tree-id15077 . -9) (undo-tree-id15078 . -9) (undo-tree-id15079 . -9) (undo-tree-id15080 . -9) (undo-tree-id15081 . -9) (undo-tree-id15082 . -9) (undo-tree-id15083 . -9) (undo-tree-id15084 . -9) (undo-tree-id15085 . -9) (undo-tree-id15086 . -9) (undo-tree-id15087 . -9) (undo-tree-id15088 . -9) (undo-tree-id15089 . -9) (undo-tree-id15090 . -15) 2226 (t 26156 45097 799029 716000)) nil (26156 45103 433537 780000) 0 nil])
([nil nil ((#("	    }
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t)) . 2177) (undo-tree-id14598 . -6) (undo-tree-id14599 . 7) (undo-tree-id14600 . 7) (undo-tree-id14601 . -1) (undo-tree-id14602 . 7) (undo-tree-id14603 . -5) (undo-tree-id14605 . -5) (undo-tree-id14607 . -5) (undo-tree-id14609 . -5) (undo-tree-id14611 . -5) (undo-tree-id14613 . -5) (undo-tree-id14615 . -5) (undo-tree-id14617 . -5) (undo-tree-id14619 . -5) (undo-tree-id14621 . -5) (undo-tree-id14623 . -5) (undo-tree-id14625 . -5) (undo-tree-id14627 . -5) 2182) ((2177 . 2184)) (26156 45077 547932 506000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2218) (undo-tree-id15938 . -2) (undo-tree-id15939 . -2) (undo-tree-id15940 . -2) (undo-tree-id15941 . -2) (undo-tree-id15942 . -2) (undo-tree-id15943 . -2) (undo-tree-id15944 . -2) (undo-tree-id15945 . -2) (undo-tree-id15946 . -2) (undo-tree-id15947 . -2) (undo-tree-id15948 . -2) (undo-tree-id15949 . -2) (undo-tree-id15950 . -2) 2220 (2218 . 2220) (#("		" 0 2 (fontified nil)) . 2217) (undo-tree-id15951 . -2) (undo-tree-id15952 . -2) (undo-tree-id15953 . -2) (undo-tree-id15954 . -2) (undo-tree-id15955 . -2) (undo-tree-id15956 . -2) (undo-tree-id15957 . -2) (undo-tree-id15958 . -2) (undo-tree-id15959 . -2) (undo-tree-id15960 . -2) (undo-tree-id15961 . -2) (undo-tree-id15962 . -2) (undo-tree-id15963 . -2) (2216 . 2220) (t 26156 45103 483261 204000)) nil (26156 45149 991680 997000) 0 nil])
([nil nil ((2178 . 2179) (#("    " 0 4 (fontified t)) . 2178) (t 26156 45053 57192 146000)) ((2178 . 2182) (#("	" 0 1 (fontified t)) . 2178)) (26156 45077 289029 819000) 0 nil])
([nil nil ((2217 . 2219)) nil (26156 45149 991635 204000) 0 nil])
([nil nil ((2186 . 2187)) ((#("	" 0 1 (fontified t)) . 2186) (undo-tree-id14714 . -1)) (26156 45076 888222 478000) 0 nil])
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 2182) (undo-tree-id15936 . -2) (undo-tree-id15937 . -3)) nil (26156 45149 991632 993000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2190) (2190 . 2191) (#("	" 0 1 (fontified nil)) . 2190) (undo-tree-id14674 . -1) (undo-tree-id14676 . -1) (undo-tree-id14678 . -1) (undo-tree-id14680 . -1) (undo-tree-id14682 . -1) (undo-tree-id14684 . -1) (undo-tree-id14686 . -1) (undo-tree-id14688 . -1) (undo-tree-id14690 . -1) (undo-tree-id14692 . -1) (undo-tree-id14694 . -1) (undo-tree-id14696 . -1) (undo-tree-id14698 . -1) (undo-tree-id14700 . -1) (undo-tree-id14702 . -1) (undo-tree-id14704 . -1) (undo-tree-id14706 . -1) (undo-tree-id14708 . -1) (2186 . 2190) (2187 . 2188) (#("}" 0 1 (fontified nil)) . -2187) (2187 . 2188)) ((#("}" 0 1 (fontified nil)) . 2187) (2187 . 2188) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2187) (#("    " 0 4 (fontified nil)) . 2186) (2190 . 2191) (#("	" 0 1 (fontified nil)) . 2190) (2190 . 2191) (t 26156 45066 497747 106000)) (26156 45076 554904 465000) 0 nil])
([nil nil ((#("	    }
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t)) . 2218) (undo-tree-id15876 . -6) (undo-tree-id15877 . -6) (undo-tree-id15878 . -6) (undo-tree-id15879 . -6) (undo-tree-id15880 . -6) (undo-tree-id15881 . -6) (undo-tree-id15882 . -4) (undo-tree-id15883 . -1) (undo-tree-id15884 . -1) (undo-tree-id15885 . -1) (undo-tree-id15886 . -1) (undo-tree-id15887 . -1) (undo-tree-id15888 . -1) (undo-tree-id15889 . -1) (undo-tree-id15890 . -1) (undo-tree-id15891 . -1) (undo-tree-id15892 . -1) (undo-tree-id15893 . -1) (undo-tree-id15894 . -1) (undo-tree-id15895 . -1) (undo-tree-id15896 . -1) (undo-tree-id15897 . -1) (undo-tree-id15898 . -1) (undo-tree-id15899 . -1) (undo-tree-id15900 . -1) (undo-tree-id15901 . -1) (undo-tree-id15902 . -1) (undo-tree-id15903 . -1) (undo-tree-id15904 . -1) (undo-tree-id15905 . -1) (undo-tree-id15906 . -1) (undo-tree-id15907 . -1) (undo-tree-id15908 . -1) (undo-tree-id15909 . -1) (undo-tree-id15910 . -1) (undo-tree-id15911 . -1) (undo-tree-id15912 . -1) (undo-tree-id15913 . -1) (undo-tree-id15914 . -4) (undo-tree-id15915 . -4) (undo-tree-id15916 . -4) (undo-tree-id15917 . -4) (undo-tree-id15918 . -4) (undo-tree-id15919 . -4) (undo-tree-id15920 . -4) (undo-tree-id15921 . -4) (undo-tree-id15922 . -4) (undo-tree-id15923 . -4) (undo-tree-id15924 . -4) (undo-tree-id15925 . -4) (undo-tree-id15926 . -4) (undo-tree-id15927 . -4) (undo-tree-id15928 . -4) (undo-tree-id15929 . -4) (undo-tree-id15930 . -4) (undo-tree-id15931 . -4) (undo-tree-id15932 . -4) (undo-tree-id15933 . -4) (undo-tree-id15934 . -4) (undo-tree-id15935 . -7) 2222) nil (26156 45149 991623 16000) 0 nil])
([nil nil ((2177 . 2182) (t 26156 45066 497747 106000)) ((#("	    " 0 5 (fontified t)) . 2177) (undo-tree-id14711 . -5) (undo-tree-id14712 . -4) (undo-tree-id14713 . -4)) (26156 45076 553815 347000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2206) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) (undo-tree-id15527 . -1) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -1) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) (undo-tree-id15567 . -1) (undo-tree-id15568 . -1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1) (undo-tree-id15571 . -1) (undo-tree-id15572 . -1) (undo-tree-id15573 . -1) (undo-tree-id15574 . -1) (undo-tree-id15575 . -1) (undo-tree-id15576 . -1) (undo-tree-id15577 . -1) (undo-tree-id15578 . -1) (undo-tree-id15579 . -1) (undo-tree-id15580 . -1) (undo-tree-id15581 . -1) (undo-tree-id15582 . -1) (undo-tree-id15583 . -1) (undo-tree-id15584 . -1) (#("=" 0 1 (fontified t)) . -2207) (undo-tree-id15585 . -1) (undo-tree-id15586 . -1) (undo-tree-id15587 . -1) (undo-tree-id15588 . -1) (undo-tree-id15589 . -1) (undo-tree-id15590 . -1) (undo-tree-id15591 . -1) (undo-tree-id15592 . -1) (undo-tree-id15593 . -1) (undo-tree-id15594 . -1) (undo-tree-id15595 . -1) (undo-tree-id15596 . -1) (undo-tree-id15597 . -1) (undo-tree-id15598 . -1) (undo-tree-id15599 . -1) (undo-tree-id15600 . -1) (undo-tree-id15601 . -1) (undo-tree-id15602 . -1) (undo-tree-id15603 . -1) (undo-tree-id15604 . -1) (undo-tree-id15605 . -1) (undo-tree-id15606 . -1) (undo-tree-id15607 . -1) (undo-tree-id15608 . -1) (undo-tree-id15609 . -1) (undo-tree-id15610 . -1) (undo-tree-id15611 . -1) (undo-tree-id15612 . -1) (undo-tree-id15613 . -1) (undo-tree-id15614 . -1) (undo-tree-id15615 . -1) (undo-tree-id15616 . -1) (undo-tree-id15617 . -1) (undo-tree-id15618 . -1) (undo-tree-id15619 . -1) (undo-tree-id15620 . -1) (undo-tree-id15621 . -1) (undo-tree-id15622 . -1) (undo-tree-id15623 . -1) (undo-tree-id15624 . -1) (undo-tree-id15625 . -1) (undo-tree-id15626 . -1) (undo-tree-id15627 . -1) (undo-tree-id15628 . -1) (undo-tree-id15629 . -1) (undo-tree-id15630 . -1) (undo-tree-id15631 . -1) (undo-tree-id15632 . -1) (undo-tree-id15633 . -1) (undo-tree-id15634 . -1) (undo-tree-id15635 . -1) (undo-tree-id15636 . -1) (undo-tree-id15637 . -1) (undo-tree-id15638 . -1) (undo-tree-id15639 . -1) (undo-tree-id15640 . -1) (undo-tree-id15641 . -1) (undo-tree-id15642 . -1) (undo-tree-id15643 . -1) (undo-tree-id15644 . -1) (undo-tree-id15645 . -1) (undo-tree-id15646 . -1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1) (undo-tree-id15653 . -1) (undo-tree-id15654 . -1) (undo-tree-id15655 . -1) (undo-tree-id15656 . -1) (undo-tree-id15657 . -1) (undo-tree-id15658 . -1) (#("=" 0 1 (fontified t)) . -2208) (undo-tree-id15659 . -1) (undo-tree-id15660 . -1) (undo-tree-id15661 . -1) (undo-tree-id15662 . -1) (undo-tree-id15663 . -1) (undo-tree-id15664 . -1) (undo-tree-id15665 . -1) (undo-tree-id15666 . -1) (undo-tree-id15667 . -1) (undo-tree-id15668 . -1) (undo-tree-id15669 . -1) (undo-tree-id15670 . -1) (undo-tree-id15671 . -1) (undo-tree-id15672 . -1) (undo-tree-id15673 . -1) (undo-tree-id15674 . -1) (undo-tree-id15675 . -1) (undo-tree-id15676 . -1) (undo-tree-id15677 . -1) (undo-tree-id15678 . -1) (undo-tree-id15679 . -1) (undo-tree-id15680 . -1) (undo-tree-id15681 . -1) (undo-tree-id15682 . -1) (undo-tree-id15683 . -1) (undo-tree-id15684 . -1) (undo-tree-id15685 . -1) (undo-tree-id15686 . -1) (undo-tree-id15687 . -1) (undo-tree-id15688 . -1) (undo-tree-id15689 . -1) (undo-tree-id15690 . -1) (undo-tree-id15691 . -1) (undo-tree-id15692 . -1) (undo-tree-id15693 . -1) (undo-tree-id15694 . -1) (undo-tree-id15695 . -1) (undo-tree-id15696 . -1) (undo-tree-id15697 . -1) (undo-tree-id15698 . -1) (undo-tree-id15699 . -1) (undo-tree-id15700 . -1) (undo-tree-id15701 . -1) (undo-tree-id15702 . -1) (undo-tree-id15703 . -1) (undo-tree-id15704 . -1) (undo-tree-id15705 . -1) (undo-tree-id15706 . -1) (undo-tree-id15707 . -1) (undo-tree-id15708 . -1) (undo-tree-id15709 . -1) (undo-tree-id15710 . -1) (undo-tree-id15711 . -1) (undo-tree-id15712 . -1) (undo-tree-id15713 . -1) (undo-tree-id15714 . -1) (undo-tree-id15715 . -1) (undo-tree-id15716 . -1) (undo-tree-id15717 . -1) (undo-tree-id15718 . -1) (undo-tree-id15719 . -1) (undo-tree-id15720 . -1) (undo-tree-id15721 . -1) (undo-tree-id15722 . -1) (#(" " 0 1 (fontified t)) . -2209) (undo-tree-id15723 . -1) (undo-tree-id15724 . -1) (undo-tree-id15725 . -1) (undo-tree-id15726 . -1) (undo-tree-id15727 . -1) (undo-tree-id15728 . -1) (undo-tree-id15729 . -1) (undo-tree-id15730 . -1) (undo-tree-id15731 . -1) (undo-tree-id15732 . -1) (undo-tree-id15733 . -1) (undo-tree-id15734 . -1) (undo-tree-id15735 . -1) (undo-tree-id15736 . -1) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1) (undo-tree-id15739 . -1) (undo-tree-id15740 . -1) (undo-tree-id15741 . -1) (undo-tree-id15742 . -1) (undo-tree-id15743 . -1) (undo-tree-id15744 . -1) (undo-tree-id15745 . -1) (undo-tree-id15746 . -1) (undo-tree-id15747 . -1) (undo-tree-id15748 . -1) (undo-tree-id15749 . -1) (undo-tree-id15750 . -1) (undo-tree-id15751 . -1) (undo-tree-id15752 . -1) (undo-tree-id15753 . -1) (undo-tree-id15754 . -1) (undo-tree-id15755 . -1) (undo-tree-id15756 . -1) (undo-tree-id15757 . -1) (undo-tree-id15758 . -1) (undo-tree-id15759 . -1) (undo-tree-id15760 . -1) (undo-tree-id15761 . -1) (undo-tree-id15762 . -1) (undo-tree-id15763 . -1) (undo-tree-id15764 . -1) (undo-tree-id15765 . -1) (undo-tree-id15766 . -1) (undo-tree-id15767 . -1) (undo-tree-id15768 . -1) (undo-tree-id15769 . -1) (undo-tree-id15770 . -1) (undo-tree-id15771 . -1) (undo-tree-id15772 . -1) (undo-tree-id15773 . -1) (undo-tree-id15774 . -1) (undo-tree-id15775 . -1) (undo-tree-id15776 . -1) (#("0" 0 1 (fontified t)) . -2210) (undo-tree-id15777 . -1) (undo-tree-id15778 . -1) (undo-tree-id15779 . -1) (undo-tree-id15780 . -1) (undo-tree-id15781 . -1) (undo-tree-id15782 . -1) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1) (undo-tree-id15787 . -1) (undo-tree-id15788 . -1) (undo-tree-id15789 . -1) (undo-tree-id15790 . -1) (undo-tree-id15791 . -1) (undo-tree-id15792 . -1) (undo-tree-id15793 . -1) (undo-tree-id15794 . -1) (undo-tree-id15795 . -1) (undo-tree-id15796 . -1) (undo-tree-id15797 . -1) (undo-tree-id15798 . -1) (undo-tree-id15799 . -1) (undo-tree-id15800 . -1) (undo-tree-id15801 . -1) (undo-tree-id15802 . -1) (undo-tree-id15803 . -1) (undo-tree-id15804 . -1) (undo-tree-id15805 . -1) (undo-tree-id15806 . -1) (undo-tree-id15807 . -1) (undo-tree-id15808 . -1) (undo-tree-id15809 . -1) (undo-tree-id15810 . -1) (undo-tree-id15811 . -1) (undo-tree-id15812 . -1) (undo-tree-id15813 . -1) (undo-tree-id15814 . -1) (undo-tree-id15815 . -1) (undo-tree-id15816 . -1) (undo-tree-id15817 . -1) (undo-tree-id15818 . -1) (undo-tree-id15819 . -1) (undo-tree-id15820 . -1) (#(" " 0 1 (fontified t)) . -2211) (undo-tree-id15821 . -1) (undo-tree-id15822 . -1) (undo-tree-id15823 . -1) (undo-tree-id15824 . -1) (undo-tree-id15825 . -1) (undo-tree-id15826 . -1) (undo-tree-id15827 . -1) (undo-tree-id15828 . -1) (undo-tree-id15829 . -1) (undo-tree-id15830 . -1) (undo-tree-id15831 . -1) (undo-tree-id15832 . -1) (undo-tree-id15833 . -1) (undo-tree-id15834 . -1) (undo-tree-id15835 . -1) (undo-tree-id15836 . -1) (undo-tree-id15837 . -1) (undo-tree-id15838 . -1) (undo-tree-id15839 . -1) (undo-tree-id15840 . -1) (undo-tree-id15841 . -1) (undo-tree-id15842 . -1) (undo-tree-id15843 . -1) (undo-tree-id15844 . -1) (undo-tree-id15845 . -1) (undo-tree-id15846 . -1) (undo-tree-id15847 . -1) (undo-tree-id15848 . -1) (undo-tree-id15849 . -1) (undo-tree-id15850 . -1) (undo-tree-id15851 . -1) (undo-tree-id15852 . -1) (undo-tree-id15853 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2212) (undo-tree-id15854 . -1) (undo-tree-id15855 . -1) (undo-tree-id15856 . -1) (undo-tree-id15857 . -1) (undo-tree-id15858 . -1) (undo-tree-id15859 . -1) (undo-tree-id15860 . -1) (undo-tree-id15861 . -1) (undo-tree-id15862 . -1) (undo-tree-id15863 . -1) (undo-tree-id15864 . -1) (undo-tree-id15865 . -1) (undo-tree-id15866 . -1) (undo-tree-id15867 . -1) (undo-tree-id15868 . -1) (undo-tree-id15869 . -1) (undo-tree-id15870 . -1) (undo-tree-id15871 . -1) (undo-tree-id15872 . -1) (undo-tree-id15873 . -1) (undo-tree-id15874 . -1) (undo-tree-id15875 . -1) 2213) nil (26156 45149 991483 27000) 0 nil])
nil
([nil nil ((2182 . 2189) (#("f" 0 1 (fontified t)) . -2182) (undo-tree-id15487 . -1) (undo-tree-id15488 . -1) (#("o" 0 1 (fontified t)) . -2183) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (#(" " 0 1 (fontified t)) . -2184) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (#("l" 0 1 (fontified t)) . -2185) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (#("e" 0 1 (fontified t)) . -2186) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (#("t" 0 1 (fontified t)) . -2187) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (#(" " 0 1 (fontified t)) . -2188) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) 2189 (2182 . 2189)) nil (26156 45149 990856 331000) 0 nil])
([nil nil ((2211 . 2213) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2211) (undo-tree-id15325 . -1) (undo-tree-id15326 . -1) (undo-tree-id15327 . -1) (undo-tree-id15328 . -1) (undo-tree-id15329 . -1) (undo-tree-id15330 . -1) (undo-tree-id15331 . -1) (undo-tree-id15332 . -1) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . -1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) (undo-tree-id15342 . -1) (undo-tree-id15343 . -1) (undo-tree-id15344 . -1) (undo-tree-id15345 . -1) (undo-tree-id15346 . -1) (undo-tree-id15347 . -1) (undo-tree-id15348 . -1) (undo-tree-id15349 . -1) (undo-tree-id15350 . -1) (undo-tree-id15351 . -1) (undo-tree-id15352 . -1) (undo-tree-id15353 . -1) (undo-tree-id15354 . -1) (undo-tree-id15355 . -1) (undo-tree-id15356 . -1) (undo-tree-id15357 . -1) (undo-tree-id15358 . -1) (undo-tree-id15359 . -1) (undo-tree-id15360 . -1) (undo-tree-id15361 . -1) (undo-tree-id15362 . -1) (undo-tree-id15363 . -1) (undo-tree-id15364 . -1) (undo-tree-id15365 . -1) (undo-tree-id15366 . -1) (undo-tree-id15367 . -1) (undo-tree-id15368 . -1) (undo-tree-id15369 . -1) (undo-tree-id15370 . -1) (undo-tree-id15371 . -1) (undo-tree-id15372 . -1) (undo-tree-id15373 . -1) (undo-tree-id15374 . -1) (undo-tree-id15375 . -1) (undo-tree-id15376 . -1) (undo-tree-id15377 . -1) (undo-tree-id15378 . -1) (undo-tree-id15379 . -1) (undo-tree-id15380 . -1) (undo-tree-id15381 . -1) (undo-tree-id15382 . -1) (undo-tree-id15383 . -1) (undo-tree-id15384 . -1) (undo-tree-id15385 . -1) (undo-tree-id15386 . -1) (undo-tree-id15387 . -1) (undo-tree-id15388 . -1) (undo-tree-id15389 . -1) (undo-tree-id15390 . -1) (undo-tree-id15391 . -1) (undo-tree-id15392 . -1) (undo-tree-id15393 . -1) (undo-tree-id15394 . -1) (undo-tree-id15395 . -1) (undo-tree-id15396 . -1) (undo-tree-id15397 . -1) (undo-tree-id15398 . -1) (undo-tree-id15399 . -1) (undo-tree-id15400 . -1) (undo-tree-id15401 . -1) (undo-tree-id15402 . -1) (undo-tree-id15403 . -1) (undo-tree-id15404 . -1) (undo-tree-id15405 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2212) (undo-tree-id15406 . -1) (undo-tree-id15407 . -1) (undo-tree-id15408 . -1) (undo-tree-id15409 . -1) (undo-tree-id15410 . -1) (undo-tree-id15411 . -1) (undo-tree-id15412 . -1) (undo-tree-id15413 . -1) (undo-tree-id15414 . -1) (undo-tree-id15415 . -1) (undo-tree-id15416 . -1) (undo-tree-id15417 . -1) (undo-tree-id15418 . -1) (undo-tree-id15419 . -1) (undo-tree-id15420 . -1) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) (undo-tree-id15460 . -1) (undo-tree-id15461 . -1) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) (undo-tree-id15470 . -1) (undo-tree-id15471 . -1) (undo-tree-id15472 . -1) (undo-tree-id15473 . -1) (undo-tree-id15474 . -1) (undo-tree-id15475 . -1) (undo-tree-id15476 . -1) (undo-tree-id15477 . -1) (undo-tree-id15478 . -1) (undo-tree-id15479 . -1) (undo-tree-id15480 . -1) (undo-tree-id15481 . -1) (undo-tree-id15482 . -1) (undo-tree-id15483 . -1) (undo-tree-id15484 . -1) (undo-tree-id15485 . -1) (undo-tree-id15486 . -1) 2213) nil (26156 45149 990813 901000) 0 nil])
([nil nil ((2198 . 2199) (2194 . 2198) (#("c" 0 1 (fontified t)) . -2194) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (#("a" 0 1 (fontified t)) . -2195) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) (#("l" 0 1 (fontified t)) . -2196) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) 2197 (2194 . 2197) (2193 . 2195) (#(" " 0 1 (fontified t)) . -2193) (undo-tree-id15323 . -1) (undo-tree-id15324 . -1) 2194 (2189 . 2194)) nil (26156 45149 990546 228000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2198) (undo-tree-id15283 . -1) (undo-tree-id15284 . -1) (undo-tree-id15285 . -1) (undo-tree-id15286 . -1) (undo-tree-id15287 . -1) (undo-tree-id15288 . -1) (undo-tree-id15289 . -1) (undo-tree-id15290 . -1) (undo-tree-id15291 . -1) (undo-tree-id15292 . -1) (undo-tree-id15293 . -1) (undo-tree-id15294 . -1) (undo-tree-id15295 . -1) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) (undo-tree-id15304 . -1) (undo-tree-id15305 . -1) (undo-tree-id15306 . -1) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) 2199) nil (26156 45149 990525 447000) 0 nil])
([nil nil ((2199 . 2202)) nil (26156 45149 990377 456000) 0 nil])
([nil nil ((2229 . 2231) (2230 . 2235) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2229) (2229 . 2231) (2228 . 2230) (2226 . 2229)) nil (26156 45149 990375 26000) 0 nil])
([nil nil ((#("unwrap" 0 6 (fontified t)) . 2218) (undo-tree-id15201 . -5) (undo-tree-id15202 . -6) (undo-tree-id15203 . -6) (undo-tree-id15204 . -6) (undo-tree-id15205 . -6) (undo-tree-id15206 . -6) (undo-tree-id15207 . -6) (undo-tree-id15208 . -6) (undo-tree-id15209 . -6) (undo-tree-id15210 . -6) (undo-tree-id15211 . -6) (undo-tree-id15212 . -6) (undo-tree-id15213 . -6) (undo-tree-id15214 . -6) (undo-tree-id15215 . -6) (undo-tree-id15216 . -6) (undo-tree-id15217 . -6) (undo-tree-id15218 . -6) (undo-tree-id15219 . -6) (undo-tree-id15220 . -6) (undo-tree-id15221 . -6) (undo-tree-id15222 . -6) (undo-tree-id15223 . -6) (undo-tree-id15224 . -6) (undo-tree-id15225 . -6) (undo-tree-id15226 . -6) (undo-tree-id15227 . -6) (undo-tree-id15228 . -6) (undo-tree-id15229 . -6) (undo-tree-id15230 . -6) (undo-tree-id15231 . -6) (undo-tree-id15232 . -6) (undo-tree-id15233 . -6) (undo-tree-id15234 . -6) (undo-tree-id15235 . -6) (undo-tree-id15236 . -6) (undo-tree-id15237 . -6) (undo-tree-id15238 . -6) (undo-tree-id15239 . -6) (undo-tree-id15240 . -6) (undo-tree-id15241 . -6) (undo-tree-id15242 . -6) (undo-tree-id15243 . -6) (undo-tree-id15244 . -6) (undo-tree-id15245 . -6) (undo-tree-id15246 . -6) (undo-tree-id15247 . -6) (undo-tree-id15248 . -6) (undo-tree-id15249 . -6) (undo-tree-id15250 . -6) (undo-tree-id15251 . -6) (undo-tree-id15252 . -6) (undo-tree-id15253 . -6) (undo-tree-id15254 . -6) (undo-tree-id15255 . -6) (undo-tree-id15256 . -6) (undo-tree-id15257 . -6) (undo-tree-id15258 . -6) (undo-tree-id15259 . -6) (undo-tree-id15260 . -6) (undo-tree-id15261 . -6) (undo-tree-id15262 . -6) (undo-tree-id15263 . -6) (undo-tree-id15264 . -6) (undo-tree-id15265 . -6) (undo-tree-id15266 . -6) (undo-tree-id15267 . -6) (undo-tree-id15268 . -6) (undo-tree-id15269 . -6) (undo-tree-id15270 . -6) (undo-tree-id15271 . -6) (undo-tree-id15272 . -6) (undo-tree-id15273 . -6) (undo-tree-id15274 . -6) (undo-tree-id15275 . -6) (undo-tree-id15276 . -6) (undo-tree-id15277 . -6) (undo-tree-id15278 . -6) (undo-tree-id15279 . -6) (undo-tree-id15280 . -6) (undo-tree-id15281 . -6) (undo-tree-id15282 . -6)) nil (26156 45149 990363 597000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2217) (undo-tree-id15096 . -1) (undo-tree-id15097 . -1) (undo-tree-id15098 . -1) (undo-tree-id15099 . -1) (undo-tree-id15100 . -1) (undo-tree-id15101 . -1) (undo-tree-id15102 . -1) (undo-tree-id15103 . -1) (undo-tree-id15104 . -1) (undo-tree-id15105 . -1) (undo-tree-id15106 . -1) (undo-tree-id15107 . -1) (undo-tree-id15108 . -1) (undo-tree-id15109 . -1) (undo-tree-id15110 . -1) (undo-tree-id15111 . -1) (undo-tree-id15112 . -1) (undo-tree-id15113 . -1) (undo-tree-id15114 . -1) (undo-tree-id15115 . -1) (undo-tree-id15116 . -1) (undo-tree-id15117 . -1) (undo-tree-id15118 . -1) (undo-tree-id15119 . -1) (undo-tree-id15120 . -1) (undo-tree-id15121 . -1) (undo-tree-id15122 . -1) (undo-tree-id15123 . -1) (undo-tree-id15124 . -1) (undo-tree-id15125 . -1) (undo-tree-id15126 . -1) (undo-tree-id15127 . -1) (undo-tree-id15128 . -1) (undo-tree-id15129 . -1) (undo-tree-id15130 . -1) (undo-tree-id15131 . -1) (undo-tree-id15132 . -1) (undo-tree-id15133 . -1) (undo-tree-id15134 . -1) (undo-tree-id15135 . -1) (undo-tree-id15136 . -1) (undo-tree-id15137 . -1) (undo-tree-id15138 . -1) (undo-tree-id15139 . -1) (undo-tree-id15140 . -1) (undo-tree-id15141 . -1) (undo-tree-id15142 . -1) (undo-tree-id15143 . -1) (undo-tree-id15144 . -1) (undo-tree-id15145 . -1) (undo-tree-id15146 . -1) (undo-tree-id15147 . -1) (undo-tree-id15148 . -1) (undo-tree-id15149 . -1) (undo-tree-id15150 . -1) (undo-tree-id15151 . -1) (undo-tree-id15152 . -1) (undo-tree-id15153 . -1) (undo-tree-id15154 . -1) (undo-tree-id15155 . -1) (undo-tree-id15156 . -1) (undo-tree-id15157 . -1) (undo-tree-id15158 . -1) (undo-tree-id15159 . -1) (undo-tree-id15160 . -1) (undo-tree-id15161 . -1) (undo-tree-id15162 . -1) (undo-tree-id15163 . -1) (undo-tree-id15164 . -1) (undo-tree-id15165 . -1) (undo-tree-id15166 . -1) (undo-tree-id15167 . -1) (undo-tree-id15168 . -1) (undo-tree-id15169 . -1) (undo-tree-id15170 . -1) (undo-tree-id15171 . -1) (undo-tree-id15172 . -1) (undo-tree-id15173 . -1) (undo-tree-id15174 . -1) (undo-tree-id15175 . -1) (undo-tree-id15176 . -1) (undo-tree-id15177 . -1) (undo-tree-id15178 . -1) (undo-tree-id15179 . -1) (undo-tree-id15180 . -1) (undo-tree-id15181 . -1) (undo-tree-id15182 . -1) (undo-tree-id15183 . -1) (undo-tree-id15184 . -1) (undo-tree-id15185 . -1) (undo-tree-id15186 . -1) (undo-tree-id15187 . -1) (undo-tree-id15188 . -1) (undo-tree-id15189 . -1) (undo-tree-id15190 . -1) (undo-tree-id15191 . -1) (undo-tree-id15192 . -1) (undo-tree-id15193 . -1) (undo-tree-id15194 . -1) (undo-tree-id15195 . -1) (undo-tree-id15196 . -1) (undo-tree-id15197 . -1) (undo-tree-id15198 . -1) (undo-tree-id15199 . -1) (undo-tree-id15200 . -1)) nil (26156 45149 990225 523000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2217) (undo-tree-id15093 . -1) (undo-tree-id15094 . -1) (undo-tree-id15095 . -1)) nil (26156 45149 989775 185000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 2217) (undo-tree-id15091 . -1) (undo-tree-id15092 . -1)) nil (26156 45149 989761 730000) 0 nil])
([nil nil ((2238 . 2239) (2235 . 2238) (2234 . 2236) (2230 . 2234) (2229 . 2230) (2226 . 2229) (2223 . 2226) (#("o" 0 1 (fontified t)) . -2223) (undo-tree-id16047 . -1) (undo-tree-id16048 . -1) (#("f" 0 1 (fontified t)) . -2224) (undo-tree-id16049 . -1) (undo-tree-id16050 . -1) (#(" " 0 1 (fontified t)) . -2225) (undo-tree-id16051 . -1) (undo-tree-id16052 . -1) 2226 (2223 . 2226) (2221 . 2223) (#("		" 0 2 (fontified nil)) . 2220) (undo-tree-id16053 . -2) (2219 . 2223) (t 26156 45150 53142 81000)) nil (26156 45181 343344 376000) 0 nil])
([nil nil ((2261 . 2267) (2262 . 2264) (#("		    " 0 6 (fontified nil face (rainbow-delimiters-depth-5-face))) . 2261) (2261 . 2267) (2260 . 2262) (2258 . 2261) (apply yas--snippet-revive 2249 2258 #s(yas--snippet nil (#s(yas--field 1 2253 2254 nil nil nil t #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil))) #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil))) #s(yas--exit 2258 nil) 117 nil #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil)) nil nil)) (2256 . 2257) (#("i" 0 1 (fontified nil)) . 2256) (undo-tree-id15964 . -1) (2256 . 2257) (#("i" 0 1 (fontified t)) . -2256) (undo-tree-id15965 . -1) (undo-tree-id15966 . -1) (undo-tree-id15967 . -1) (undo-tree-id15968 . -1) (undo-tree-id15969 . -1) (undo-tree-id15970 . -1) (undo-tree-id15971 . -1) (undo-tree-id15972 . -1) (undo-tree-id15973 . -1) (undo-tree-id15974 . -1) (undo-tree-id15975 . -1) (undo-tree-id15976 . -1) (undo-tree-id15977 . -1) (undo-tree-id15978 . -1) (undo-tree-id15979 . -1) (undo-tree-id15980 . -1) (undo-tree-id15981 . -1) (undo-tree-id15982 . -1) (undo-tree-id15983 . -1) (undo-tree-id15984 . -1) (undo-tree-id15985 . -1) (undo-tree-id15986 . -1) (undo-tree-id15987 . -1) (undo-tree-id15988 . -1) (undo-tree-id15989 . -1) (undo-tree-id15990 . -1) (undo-tree-id15991 . -1) (undo-tree-id15992 . -1) (undo-tree-id15993 . -1) (undo-tree-id15994 . -1) (undo-tree-id15995 . -1) (undo-tree-id15996 . -1) (undo-tree-id15997 . -1) (undo-tree-id15998 . -1) (undo-tree-id15999 . -1) (undo-tree-id16000 . -1) (undo-tree-id16001 . -1) (undo-tree-id16002 . -1) (undo-tree-id16003 . -1) (undo-tree-id16004 . -1) (undo-tree-id16005 . -1) (undo-tree-id16006 . -1) (undo-tree-id16007 . -1) (undo-tree-id16008 . -1) (undo-tree-id16009 . -1) (undo-tree-id16010 . -1) (undo-tree-id16011 . -1) (undo-tree-id16012 . -1) (undo-tree-id16013 . -1) (undo-tree-id16014 . -1) (undo-tree-id16015 . -1) (undo-tree-id16016 . -1) (undo-tree-id16017 . -1) (undo-tree-id16018 . -1) (undo-tree-id16019 . -1) (undo-tree-id16020 . -1) (undo-tree-id16021 . -1) (undo-tree-id16022 . -1) (undo-tree-id16023 . -1) (undo-tree-id16024 . -1) (undo-tree-id16025 . -1) (undo-tree-id16026 . -1) (undo-tree-id16027 . -1) (undo-tree-id16028 . -1) (undo-tree-id16029 . -1) (undo-tree-id16030 . -1) (undo-tree-id16031 . -1) (undo-tree-id16032 . -1) (undo-tree-id16033 . -1) (undo-tree-id16034 . -1) (undo-tree-id16035 . -1) 2257 (#("y" 0 1 (fontified nil)) . 2257) (undo-tree-id16036 . -1) (2256 . 2257) (2253 . 2254) (#("j" 0 1 (fontified nil)) . 2253) (undo-tree-id16037 . -1) (2253 . 2254) (#("j" 0 1 (fontified t)) . -2253) (undo-tree-id16038 . -1) (undo-tree-id16039 . -1) (undo-tree-id16040 . -1) 2254 (#("x" 0 1 (fontified nil)) . 2254) (undo-tree-id16041 . -1) (2253 . 2254) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2253 2254 nil nil nil t #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil))) #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil))) #s(yas--exit 2258 nil) 117 nil #s(yas--field 2 2256 2257 nil nil nil t #s(yas--exit 2258 nil)) nil nil)) (2249 . 2258) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 2249) (2249 . 2270) (#("ge" 0 2 (fontified nil)) . 2249) (2249 . 2251) (#("get(…)" 0 6 (fontified nil)) . -2249) (2249 . 2255) (#("ge" 0 2 (fontified t)) . -2249) (undo-tree-id16042 . -2) (undo-tree-id16043 . -2) 2251 (2248 . 2251) (2243 . 2248) (#("bma" 0 3 (fontified nil)) . 2243) (2243 . 2246) (#("bmap2" 0 5 (fontified nil)) . -2243) (2243 . 2248) (#("bma" 0 3 (fontified t)) . -2243) (undo-tree-id16044 . -3) (undo-tree-id16045 . -3) (undo-tree-id16046 . -3) 2246 (2240 . 2246)) nil (26156 45181 343301 156000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 2272) (undo-tree-id16084 . -2) (undo-tree-id16085 . -1) (undo-tree-id16086 . -1) (undo-tree-id16087 . -1) (undo-tree-id16088 . -1) (undo-tree-id16089 . -1) (undo-tree-id16090 . -1) (undo-tree-id16091 . -1) (undo-tree-id16092 . -1) (undo-tree-id16093 . -1) (undo-tree-id16094 . -1) (undo-tree-id16095 . -1) (undo-tree-id16096 . -1) (undo-tree-id16097 . -1) (undo-tree-id16098 . -1) (undo-tree-id16099 . -1) (undo-tree-id16100 . -1) (undo-tree-id16101 . -1) (undo-tree-id16102 . -1) (undo-tree-id16103 . -1) (undo-tree-id16104 . -1) (undo-tree-id16105 . -1) (undo-tree-id16106 . -1) (undo-tree-id16107 . -3) 2273 (t 26156 45181 402393 324000)) nil (26156 45185 133910 134000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2279) (undo-tree-id16060 . -2) (undo-tree-id16061 . -1) (undo-tree-id16062 . -1) (undo-tree-id16063 . -1) (undo-tree-id16064 . -1) (undo-tree-id16065 . -1) (undo-tree-id16066 . -1) (undo-tree-id16067 . -1) (undo-tree-id16068 . -1) (undo-tree-id16069 . -1) (undo-tree-id16070 . -1) (undo-tree-id16071 . -1) (undo-tree-id16072 . -1) (undo-tree-id16073 . -1) (undo-tree-id16074 . -1) (undo-tree-id16075 . -1) (undo-tree-id16076 . -1) (undo-tree-id16077 . -1) (undo-tree-id16078 . -1) (undo-tree-id16079 . -1) (undo-tree-id16080 . -1) (undo-tree-id16081 . -1) (undo-tree-id16082 . -1) (undo-tree-id16083 . -3) 2280) nil (26156 45185 133858 214000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2279) (undo-tree-id16054 . -1) (undo-tree-id16055 . -1) (undo-tree-id16056 . -1) (undo-tree-id16057 . -1) (undo-tree-id16058 . -1) (undo-tree-id16059 . -1)) nil (26156 45185 133809 194000) 0 nil])
([nil nil ((2220 . 2222) (t 26156 45185 194543 912000)) nil (26156 45191 463901 35000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2284)) nil (26156 45191 463887 675000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified t)) . -2264) (undo-tree-id16122 . -6) (undo-tree-id16123 . -6) (undo-tree-id16124 . -6) (undo-tree-id16125 . -6) (undo-tree-id16126 . -6) (undo-tree-id16127 . -6) (undo-tree-id16128 . -6) (undo-tree-id16129 . -6) (undo-tree-id16130 . -6) (undo-tree-id16131 . -6) (undo-tree-id16132 . -6) (undo-tree-id16133 . -6) (undo-tree-id16134 . -6) 2270 (2264 . 2270) (#("		    " 0 6 (fontified nil)) . 2263) (undo-tree-id16135 . -6) (undo-tree-id16136 . -6) (undo-tree-id16137 . -6) (undo-tree-id16138 . -6) (undo-tree-id16139 . -6) (undo-tree-id16140 . -6) (undo-tree-id16141 . -6) (undo-tree-id16142 . -6) (undo-tree-id16143 . -6) (undo-tree-id16144 . -6) (undo-tree-id16145 . -6) (undo-tree-id16146 . -6) (undo-tree-id16147 . -6) (2262 . 2270) (t 26156 45191 554796 114000)) nil (26156 45246 107249 25000) 0 nil])
([nil nil ((2310 . 2312) (2307 . 2310) (2306 . 2307) (2301 . 2306) (#("un" 0 2 (fontified nil)) . 2301) (2301 . 2303) (#("union" 0 5 (fontified nil)) . -2301) (2301 . 2306) (#("un" 0 2 (fontified t)) . -2301) (undo-tree-id16116 . -2) (undo-tree-id16117 . -2) 2303 (2302 . 2303) (2301 . 2302) (2298 . 2301) (2299 . 2305) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-6-face))) . 2298) (2298 . 2301) (2297 . 2299) (2293 . 2298) (2290 . 2293) (2286 . 2290) (#("val" 0 3 (fontified nil)) . 2286) (2286 . 2289) (#("val2" 0 4 (fontified nil)) . -2286) (2286 . 2290) (#("val" 0 3 (fontified t)) . -2286) (undo-tree-id16118 . -3) (undo-tree-id16119 . -3) 2289 (2281 . 2289) (2280 . 2281) (2277 . 2280) (2273 . 2277) (#("val" 0 3 (fontified nil)) . 2273) (2273 . 2276) (#("val1" 0 4 (fontified nil)) . -2273) (2273 . 2277) (#("val" 0 3 (fontified t)) . -2273) (undo-tree-id16120 . -3) (undo-tree-id16121 . -3) 2276 (2270 . 2276) (2264 . 2270)) nil (26156 45246 106811 790000) 0 nil])
([nil nil ((2371 . 2377) (2359 . 2371) (#("in" 0 2 (fontified nil)) . 2359) (2359 . 2361) (#("intersection" 0 12 (fontified nil)) . -2359) (2359 . 2371) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -2359) (undo-tree-id16108 . -2) (undo-tree-id16109 . -2) (undo-tree-id16110 . -1) 2361 (2359 . 2361) (2356 . 2359) (2357 . 2363) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-6-face))) . 2356) (2356 . 2359) (2355 . 2357) (2348 . 2356) (2344 . 2348) (#("val" 0 3 (fontified nil)) . 2344) (2344 . 2347) (#("val2" 0 4 (fontified nil)) . -2344) (2344 . 2348) (#("val" 0 3 (fontified t)) . -2344) (undo-tree-id16111 . -3) (undo-tree-id16112 . -3) 2347 (2335 . 2347) (2331 . 2335) (#("val" 0 3 (fontified nil)) . 2331) (2331 . 2334) (#("val1" 0 4 (fontified nil)) . -2331) (2331 . 2335) (#("val" 0 3 (fontified t)) . -2331) (undo-tree-id16113 . -3) (undo-tree-id16114 . -3) 2334 (2328 . 2334) (2322 . 2328) (#("		    " 0 6 (fontified nil)) . 2321) (undo-tree-id16115 . -6) (2320 . 2328)) nil (26156 45246 106770 370000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified t)) . -2387) (undo-tree-id16148 . -6) (undo-tree-id16149 . -6) (undo-tree-id16150 . -6) (undo-tree-id16151 . -6) (undo-tree-id16152 . -6) (undo-tree-id16153 . -6) (undo-tree-id16154 . -6) (undo-tree-id16155 . -6) (undo-tree-id16156 . -6) (undo-tree-id16157 . -6) (undo-tree-id16158 . -6) (undo-tree-id16159 . -6) (undo-tree-id16160 . -6) 2393 (2387 . 2393) (#("		    " 0 6 (fontified nil)) . 2386) (undo-tree-id16161 . -6) (undo-tree-id16162 . -6) (undo-tree-id16163 . -6) (undo-tree-id16164 . -6) (undo-tree-id16165 . -6) (undo-tree-id16166 . -6) (undo-tree-id16167 . -6) (undo-tree-id16168 . -6) (undo-tree-id16169 . -6) (undo-tree-id16170 . -6) (undo-tree-id16171 . -6) (undo-tree-id16172 . -6) (undo-tree-id16173 . -6) (2385 . 2393) (t 26156 45246 196944 865000)) nil (26156 45264 707079 523000) 0 nil])
([nil nil ((2387 . 2393) (t 26156 45264 797669 341000)) nil (26156 45494 354233 584000) 0 nil])
([nil nil ((2393 . 2396) (2394 . 2400) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-6-face))) . 2393) (2393 . 2396) (2392 . 2394) (2385 . 2393)) nil (26156 45494 354228 299000) 0 nil])
([nil nil ((2412 . 2416) (2404 . 2412) (2396 . 2404)) nil (26156 45494 354216 356000) 0 nil])
([nil nil ((2476 . 2479) (#(" " 0 1 (fontified t)) . -2476) (undo-tree-id16272 . -1) (undo-tree-id16273 . -1) (#("=" 0 1 (fontified t)) . -2477) (undo-tree-id16274 . -1) (undo-tree-id16275 . -1) 2478 (2474 . 2478) (2469 . 2474) (#("un" 0 2 (fontified nil)) . 2469) (2469 . 2471) (#("union" 0 5 (fontified nil)) . -2469) (2469 . 2474) (#("un" 0 2 (fontified t)) . -2469) (undo-tree-id16276 . -2) (undo-tree-id16277 . -2) (undo-tree-id16278 . -2) 2471 (2469 . 2471) (2465 . 2470) (2461 . 2465) (#("    " 0 4 (fontified nil)) . 2460) (undo-tree-id16279 . -4) (2464 . 2465) (t 26156 45494 410371 616000)) nil (26156 45546 483998 107000) 0 nil])
([nil nil ((2483 . 2484) (2484 . 2488) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2483) (2483 . 2484) (2482 . 2484) (2480 . 2483)) nil (26156 45546 483976 771000) 0 nil])
([nil nil ((2515 . 2518) (#("f" 0 1 (fontified nil)) . 2515) (2515 . 2516) (#("f64" 0 3 (fontified nil)) . -2515) (2515 . 2518) (#("f" 0 1 (fontified t)) . -2515) (undo-tree-id16180 . -1) (undo-tree-id16181 . -1) (undo-tree-id16182 . -1) (undo-tree-id16183 . -1) (undo-tree-id16184 . -1) (undo-tree-id16185 . -1) (undo-tree-id16186 . -1) (undo-tree-id16187 . -1) (undo-tree-id16188 . -1) (undo-tree-id16189 . -1) (undo-tree-id16190 . -1) (undo-tree-id16191 . -1) (undo-tree-id16192 . -1) (undo-tree-id16193 . -1) (undo-tree-id16194 . -1) (undo-tree-id16195 . -1) (undo-tree-id16196 . -1) (undo-tree-id16197 . -1) (undo-tree-id16198 . -1) (undo-tree-id16199 . -1) (undo-tree-id16200 . -1) (undo-tree-id16201 . -1) (undo-tree-id16202 . -1) (undo-tree-id16203 . -1) (undo-tree-id16204 . -1) (undo-tree-id16205 . -1) (undo-tree-id16206 . -1) (undo-tree-id16207 . -1) (undo-tree-id16208 . -1) (undo-tree-id16209 . -1) (undo-tree-id16210 . -1) (undo-tree-id16211 . -1) (undo-tree-id16212 . -1) (undo-tree-id16213 . -1) (undo-tree-id16214 . -1) (undo-tree-id16215 . -1) (undo-tree-id16216 . -1) (undo-tree-id16217 . -1) (undo-tree-id16218 . -1) (undo-tree-id16219 . -1) (undo-tree-id16220 . -1) (undo-tree-id16221 . -1) (undo-tree-id16222 . -1) (undo-tree-id16223 . -1) (undo-tree-id16224 . -1) (undo-tree-id16225 . -1) (undo-tree-id16226 . -1) (undo-tree-id16227 . -1) (undo-tree-id16228 . -1) (undo-tree-id16229 . -1) (undo-tree-id16230 . -1) (undo-tree-id16231 . -1) (undo-tree-id16232 . -1) (undo-tree-id16233 . -1) (undo-tree-id16234 . -1) (undo-tree-id16235 . -1) (undo-tree-id16236 . -1) (undo-tree-id16237 . -1) (undo-tree-id16238 . -1) (undo-tree-id16239 . -1) (undo-tree-id16240 . -1) (undo-tree-id16241 . -1) (undo-tree-id16242 . -1) (undo-tree-id16243 . -1) (undo-tree-id16244 . -1) (undo-tree-id16245 . -1) (undo-tree-id16246 . -1) (undo-tree-id16247 . -1) (undo-tree-id16248 . -1) (undo-tree-id16249 . -1) (undo-tree-id16250 . -1) (undo-tree-id16251 . -1) (undo-tree-id16252 . -1) (undo-tree-id16253 . -1) (undo-tree-id16254 . -1) (undo-tree-id16255 . -1) (undo-tree-id16256 . -1) (undo-tree-id16257 . -1) (undo-tree-id16258 . -1) (undo-tree-id16259 . -1) (undo-tree-id16260 . -1) (undo-tree-id16261 . -1) (undo-tree-id16262 . -1) (undo-tree-id16263 . -1) (undo-tree-id16264 . -1) 2516 (2515 . 2516) (2514 . 2515) (2513 . 2514) (2511 . 2513) (2506 . 2511) (#("un" 0 2 (fontified nil)) . 2506) (2506 . 2508) (#("union" 0 5 (fontified nil)) . -2506) (2506 . 2511) (#("un" 0 2 (fontified t)) . -2506) (undo-tree-id16265 . -2) (undo-tree-id16266 . -2) (undo-tree-id16267 . -2) 2508 (2503 . 2508) (2500 . 2503) (#("f" 0 1 (fontified nil)) . 2500) (2500 . 2501) (#("f64" 0 3 (fontified nil)) . -2500) (2500 . 2503) (#("f" 0 1 (fontified t)) . -2500) (undo-tree-id16268 . -1) (undo-tree-id16269 . -1) 2501 (2496 . 2501) (2484 . 2496) (#("i" 0 1 (fontified nil)) . 2484) (2484 . 2485) (#("intersection" 0 12 (fontified nil)) . -2484) (2484 . 2496) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -2484) (undo-tree-id16270 . -2) (undo-tree-id16271 . -2) 2486 (2484 . 2486)) nil (26156 45546 483959 128000) 0 nil])
([nil nil ((2524 . 2525)) nil (26156 45546 483779 831000) 0 nil])
([nil nil ((2484 . 2490)) nil (26156 45546 483777 889000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2489) (undo-tree-id16174 . 1) (undo-tree-id16175 . 1) (undo-tree-id16176 . -1) (undo-tree-id16177 . -1) (undo-tree-id16178 . -1) (undo-tree-id16179 . -1)) nil (26156 45546 483773 683000) 0 nil])
([nil nil ((2523 . 2524) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -2523) (2523 . 2524)) nil (26156 45546 483735 741000) 0 nil])
([nil nil ((2531 . 2536) (t 26156 45546 548296 512000)) nil (26156 45554 103348 404000) 0 nil])
([nil nil ((#("    todo!()
" 0 4 (fontified t) 4 9 (fontified t face font-lock-preprocessor-face) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t)) . 2538) (undo-tree-id16280 . -11) (undo-tree-id16281 . -10) 2548) nil (26156 45554 103338 362000) 0 nil])
([nil nil ((apply yas--snippet-revive 2540 2544 #s(yas--snippet nil nil #s(yas--exit 2544 nil) 118 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2544 nil) 118 nil nil nil nil)) (2540 . 2544) (#("None$0" 0 6 (fontified nil)) . 2540) (2540 . 2546) (#("N" 0 1 (fontified nil)) . 2540) (2540 . 2541) (#("None" 0 4 (fontified nil)) . -2540) (2540 . 2544) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2540) (undo-tree-id16282 . -1) (undo-tree-id16283 . -1) (undo-tree-id16284 . -1) (undo-tree-id16285 . -1) (undo-tree-id16286 . -1) (undo-tree-id16287 . -1) (undo-tree-id16288 . -1) (undo-tree-id16289 . -1) (undo-tree-id16290 . -1) (undo-tree-id16291 . -1) (undo-tree-id16292 . -1) (undo-tree-id16293 . -1) (undo-tree-id16294 . -1) (undo-tree-id16295 . -1) (undo-tree-id16296 . -1) (undo-tree-id16297 . -1) (undo-tree-id16298 . -1) (undo-tree-id16299 . -1) (undo-tree-id16300 . -1) (undo-tree-id16301 . -1) (undo-tree-id16302 . -1) (undo-tree-id16303 . -1) (undo-tree-id16304 . -1) (undo-tree-id16305 . -1) (undo-tree-id16306 . -1) (undo-tree-id16307 . -1) (undo-tree-id16308 . -1) (undo-tree-id16309 . -1) (undo-tree-id16310 . -1) (undo-tree-id16311 . -1) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . -1) (undo-tree-id16321 . -1) (undo-tree-id16322 . -1) (undo-tree-id16323 . -1) (undo-tree-id16324 . -1) (undo-tree-id16325 . -1) (undo-tree-id16326 . -1) (undo-tree-id16327 . -1) (undo-tree-id16328 . -1) (undo-tree-id16329 . -1) (undo-tree-id16330 . -1) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (undo-tree-id16348 . -1) (undo-tree-id16349 . -1) (undo-tree-id16350 . -1) (undo-tree-id16351 . -1) (undo-tree-id16352 . -1) (undo-tree-id16353 . -1) 2541 (2540 . 2541) (2539 . 2540) (2540 . 2544) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2539) (2539 . 2540) (2538 . 2540) (2536 . 2539) (t 26156 45554 192577 428000)) nil (26156 45561 526426 859000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 2468) (undo-tree-id16359 . -1) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (t 26156 45561 588848 922000)) nil (26156 45566 431188 121000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 2478) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1)) nil (26156 45566 431169 111000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2425) (undo-tree-id16427 . -1) (t 26156 45566 497028 924000)) nil (26156 45605 284143 790000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 2425) (undo-tree-id16384 . -6) (undo-tree-id16385 . -3) (undo-tree-id16386 . -3) (undo-tree-id16387 . -3) (undo-tree-id16388 . -3) (undo-tree-id16389 . -3) (undo-tree-id16390 . -3) (undo-tree-id16391 . -3) (undo-tree-id16392 . -3) (undo-tree-id16393 . -3) (undo-tree-id16394 . -3) (undo-tree-id16395 . -3) (undo-tree-id16396 . -3) (undo-tree-id16397 . -3) (undo-tree-id16398 . -3) (undo-tree-id16399 . -3) (undo-tree-id16400 . -3) (undo-tree-id16401 . -3) (undo-tree-id16402 . -3) (undo-tree-id16403 . -3) (undo-tree-id16404 . -3) (undo-tree-id16405 . -3) (undo-tree-id16406 . -3) (undo-tree-id16407 . -3) (undo-tree-id16408 . -3) (undo-tree-id16409 . -3) (undo-tree-id16410 . -3) (undo-tree-id16411 . -3) (undo-tree-id16412 . -3) (undo-tree-id16413 . -3) (undo-tree-id16414 . -3) (undo-tree-id16415 . -3) (undo-tree-id16416 . -3) (undo-tree-id16417 . -3) (undo-tree-id16418 . -3) (undo-tree-id16419 . -3) (undo-tree-id16420 . -3) (undo-tree-id16421 . -3) (undo-tree-id16422 . -3) (undo-tree-id16423 . -3) (undo-tree-id16424 . -3) (undo-tree-id16425 . -6) (undo-tree-id16426 . -7)) nil (26156 45605 284134 693000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 2425) (undo-tree-id16363 . -6) (undo-tree-id16364 . -3) (undo-tree-id16365 . -3) (undo-tree-id16366 . -3) (undo-tree-id16367 . -3) (undo-tree-id16368 . -3) (undo-tree-id16369 . -3) (undo-tree-id16370 . -3) (undo-tree-id16371 . -3) (undo-tree-id16372 . -3) (undo-tree-id16373 . -3) (undo-tree-id16374 . -3) (undo-tree-id16375 . -3) (undo-tree-id16376 . -3) (undo-tree-id16377 . -3) (undo-tree-id16378 . -3) (undo-tree-id16379 . -3) (undo-tree-id16380 . -3) (undo-tree-id16381 . -3) (undo-tree-id16382 . -6) (undo-tree-id16383 . -7)) nil (26156 45605 284049 575000) 0 nil])
([nil nil ((1854 . 1856) (#(" " 0 1 (fontified t)) . -1854) (undo-tree-id16586 . -1) (undo-tree-id16587 . -1) (undo-tree-id16588 . -1) (undo-tree-id16589 . -1) (undo-tree-id16590 . -1) (undo-tree-id16591 . -1) (undo-tree-id16592 . -1) (undo-tree-id16593 . -1) (undo-tree-id16594 . -1) (undo-tree-id16595 . -1) (undo-tree-id16596 . -1) (undo-tree-id16597 . -1) 1855 (1844 . 1855) (#("f" 0 1 (fontified t face font-lock-function-name-face)) . -1844) (undo-tree-id16598 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -1845) (undo-tree-id16599 . -1) 1846 (1844 . 1846) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -1844) (undo-tree-id16600 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -1845) (undo-tree-id16601 . -1) 1846 (1837 . 1846) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -1837) (undo-tree-id16602 . -1) 1838 (1834 . 1838) (1831 . 1834) (t 26156 45605 346449 238000)) nil (26156 45676 566046 64000) 0 nil])
([nil nil ((1906 . 1916) (#("to" 0 2 (fontified nil)) . 1906) (1906 . 1908) (#("tol: usize" 0 10 (fontified nil)) . -1906) (1906 . 1916) (#("tol" 0 3 (fontified t)) . -1906) (undo-tree-id16516 . -3) (undo-tree-id16517 . -3) (undo-tree-id16518 . -3) (undo-tree-id16519 . -3) (undo-tree-id16520 . -3) (undo-tree-id16521 . -3) (undo-tree-id16522 . -3) (undo-tree-id16523 . -3) (undo-tree-id16524 . -3) (undo-tree-id16525 . -3) (undo-tree-id16526 . -3) (undo-tree-id16527 . -3) (undo-tree-id16528 . -3) (undo-tree-id16529 . -3) (undo-tree-id16530 . -3) (undo-tree-id16531 . -3) (undo-tree-id16532 . -3) (undo-tree-id16533 . -3) (undo-tree-id16534 . -3) (undo-tree-id16535 . -3) (undo-tree-id16536 . -3) (undo-tree-id16537 . -3) (undo-tree-id16538 . -3) (undo-tree-id16539 . -3) (undo-tree-id16540 . -3) (undo-tree-id16541 . -3) (undo-tree-id16542 . -3) (undo-tree-id16543 . -3) (undo-tree-id16544 . -3) (undo-tree-id16545 . -3) (undo-tree-id16546 . -3) (undo-tree-id16547 . -3) (undo-tree-id16548 . -3) (undo-tree-id16549 . -3) (undo-tree-id16550 . -3) (undo-tree-id16551 . -3) (undo-tree-id16552 . -3) (undo-tree-id16553 . -3) (undo-tree-id16554 . -3) (undo-tree-id16555 . -3) (undo-tree-id16556 . -3) (undo-tree-id16557 . -3) (undo-tree-id16558 . -3) (undo-tree-id16559 . -3) (undo-tree-id16560 . -3) (undo-tree-id16561 . -3) (undo-tree-id16562 . -3) (undo-tree-id16563 . -3) (undo-tree-id16564 . -3) (undo-tree-id16565 . -3) (undo-tree-id16566 . -3) (undo-tree-id16567 . -3) (undo-tree-id16568 . -3) (undo-tree-id16569 . -3) (undo-tree-id16570 . -3) (undo-tree-id16571 . -3) (undo-tree-id16572 . -3) (undo-tree-id16573 . -3) (undo-tree-id16574 . -3) (undo-tree-id16575 . -3) 1909 (1906 . 1909) (#("/" 0 1 (fontified t)) . -1906) (undo-tree-id16576 . -1) (#("t" 0 1 (fontified t)) . -1907) (undo-tree-id16577 . -1) 1908 (1906 . 1908) (1904 . 1906) (#(" " 0 1 (fontified t)) . -1904) (undo-tree-id16578 . -1) 1905 (1904 . 1905) (1894 . 1904) (#("C" 0 1 (fontified nil)) . 1894) (1894 . 1895) (#("Coordinate" 0 10 (fontified nil)) . -1894) (1894 . 1904) (#("C" 0 1 (fontified t face font-lock-type-face)) . -1894) (undo-tree-id16579 . -1) (undo-tree-id16580 . -1) 1895 (1892 . 1895) (#(" " 0 1 (fontified t)) . -1892) (undo-tree-id16581 . -1) 1893 (1879 . 1893) (1877 . 1879) (1867 . 1877) (#("ma" 0 2 (fontified nil)) . 1867) (1867 . 1869) (#("map2: &Map" 0 10 (fontified nil)) . -1867) (1867 . 1877) (#("ma" 0 2 (fontified t)) . -1867) (undo-tree-id16582 . -2) (undo-tree-id16583 . -2) 1869 (1865 . 1869) (1855 . 1865) (#("map1" 0 4 (fontified nil)) . 1855) (1855 . 1859) (#("map1: &Map" 0 10 (fontified nil)) . -1855) (1855 . 1865) (#("map1" 0 4 (fontified t)) . -1855) (undo-tree-id16584 . -4) (undo-tree-id16585 . -4) 1859 (1855 . 1859)) nil (26156 45676 565994 342000) 0 nil])
([nil nil ((apply yas--snippet-revive 1933 1940 #s(yas--snippet nil nil #s(yas--exit 1939 nil) 119 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1939 nil) 119 nil nil nil nil)) (1933 . 1940) (#("todo!($0)" 0 9 (fontified nil)) . 1933) (1933 . 1942) (#("todo" 0 4 (fontified nil)) . 1933) (1933 . 1937) (#("todo!(…)" 0 8 (fontified nil)) . -1933) (1933 . 1941) (#("todo" 0 4 (fontified t)) . -1933) (undo-tree-id16428 . -4) (undo-tree-id16429 . -4) (undo-tree-id16430 . -4) (undo-tree-id16431 . -3) (undo-tree-id16432 . -3) (undo-tree-id16433 . -3) (undo-tree-id16434 . -3) (undo-tree-id16435 . -3) (undo-tree-id16436 . -3) (undo-tree-id16437 . -3) (undo-tree-id16438 . -3) (undo-tree-id16439 . -3) (undo-tree-id16440 . -3) (undo-tree-id16441 . -3) (undo-tree-id16442 . -3) (undo-tree-id16443 . -3) (undo-tree-id16444 . -3) (undo-tree-id16445 . -3) (undo-tree-id16446 . -3) (undo-tree-id16447 . -3) (undo-tree-id16448 . -3) (undo-tree-id16449 . -3) (undo-tree-id16450 . -4) (undo-tree-id16451 . -4) (undo-tree-id16452 . -4) (undo-tree-id16453 . -4) (undo-tree-id16454 . -4) (undo-tree-id16455 . -4) (undo-tree-id16456 . -4) (undo-tree-id16457 . -4) (undo-tree-id16458 . -4) (undo-tree-id16459 . -4) (undo-tree-id16460 . -4) (undo-tree-id16461 . -4) (undo-tree-id16462 . -4) (undo-tree-id16463 . -4) (undo-tree-id16464 . -4) (undo-tree-id16465 . -4) (undo-tree-id16466 . -4) (undo-tree-id16467 . -4) (undo-tree-id16468 . -4) (undo-tree-id16469 . -4) (undo-tree-id16470 . -4) (undo-tree-id16471 . -4) (undo-tree-id16472 . -4) (undo-tree-id16473 . -4) (undo-tree-id16474 . -4) (undo-tree-id16475 . -4) (undo-tree-id16476 . -4) (undo-tree-id16477 . -4) (undo-tree-id16478 . -4) (undo-tree-id16479 . -4) (undo-tree-id16480 . -4) (undo-tree-id16481 . -4) (undo-tree-id16482 . -4) (undo-tree-id16483 . -4) (undo-tree-id16484 . -4) (undo-tree-id16485 . -4) (undo-tree-id16486 . -4) (undo-tree-id16487 . -4) (undo-tree-id16488 . -4) (undo-tree-id16489 . -4) (undo-tree-id16490 . -4) (undo-tree-id16491 . -4) (undo-tree-id16492 . -4) (undo-tree-id16493 . -4) (undo-tree-id16494 . -4) (undo-tree-id16495 . -4) (undo-tree-id16496 . -4) (undo-tree-id16497 . -4) (undo-tree-id16498 . -4) (undo-tree-id16499 . -4) (undo-tree-id16500 . -4) (undo-tree-id16501 . -4) (undo-tree-id16502 . -4) (undo-tree-id16503 . -4) (undo-tree-id16504 . -4) (undo-tree-id16505 . -4) (undo-tree-id16506 . -4) (undo-tree-id16507 . -4) (undo-tree-id16508 . -4) (undo-tree-id16509 . -4) (undo-tree-id16510 . -4) (undo-tree-id16511 . -4) (undo-tree-id16512 . -4) (undo-tree-id16513 . -4) 1937 (1935 . 1937) (1933 . 1935) (1929 . 1933) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1929) (1929 . 1933) (1928 . 1930) (1926 . 1929) (1921 . 1926) (#("us" 0 2 (fontified nil)) . 1921) (1921 . 1923) (#("usize" 0 5 (fontified nil)) . -1921) (1921 . 1926) (#("us" 0 2 (fontified t)) . -1921) (undo-tree-id16514 . -2) (undo-tree-id16515 . -2) 1923 (1921 . 1923) (1917 . 1921)) nil (26156 45676 565788 519000) 0 nil])
([nil nil ((2042 . 2045) (#("f" 0 1 (fontified nil)) . 2042) (2042 . 2043) (#("f64" 0 3 (fontified nil)) . -2042) (2042 . 2045) (#("f" 0 1 (fontified t)) . -2042) (undo-tree-id16603 . -1) (undo-tree-id16604 . -1) (undo-tree-id16605 . -1) (undo-tree-id16606 . -1) (undo-tree-id16607 . -1) (undo-tree-id16608 . -1) (undo-tree-id16609 . -1) (undo-tree-id16610 . -1) (undo-tree-id16611 . -1) (undo-tree-id16612 . -1) (undo-tree-id16613 . -1) (undo-tree-id16614 . -1) (undo-tree-id16615 . -1) (undo-tree-id16616 . -1) (undo-tree-id16617 . -1) (undo-tree-id16618 . -1) (undo-tree-id16619 . -1) (undo-tree-id16620 . -1) (undo-tree-id16621 . -1) (undo-tree-id16622 . -1) (undo-tree-id16623 . -1) (undo-tree-id16624 . -1) (undo-tree-id16625 . -1) (undo-tree-id16626 . -1) (undo-tree-id16627 . -1) (undo-tree-id16628 . -1) (undo-tree-id16629 . -1) (undo-tree-id16630 . -1) (undo-tree-id16631 . -1) (undo-tree-id16632 . -1) (undo-tree-id16633 . -1) (undo-tree-id16634 . -1) (undo-tree-id16635 . -1) (undo-tree-id16636 . -1) (undo-tree-id16637 . -1) (undo-tree-id16638 . -1) (undo-tree-id16639 . -1) (undo-tree-id16640 . -1) (undo-tree-id16641 . -1) (undo-tree-id16642 . -1) (undo-tree-id16643 . -1) (undo-tree-id16644 . -1) (undo-tree-id16645 . -1) (undo-tree-id16646 . -1) (undo-tree-id16647 . -1) (undo-tree-id16648 . -1) (undo-tree-id16649 . -1) (undo-tree-id16650 . -1) (undo-tree-id16651 . -1) (undo-tree-id16652 . -1) (undo-tree-id16653 . -1) (undo-tree-id16654 . -1) (undo-tree-id16655 . -1) (undo-tree-id16656 . -1) (undo-tree-id16657 . -1) (undo-tree-id16658 . -1) (undo-tree-id16659 . -1) (undo-tree-id16660 . -1) (undo-tree-id16661 . -1) (undo-tree-id16662 . -1) (undo-tree-id16663 . -1) (undo-tree-id16664 . -1) (undo-tree-id16665 . -1) (undo-tree-id16666 . -1) (undo-tree-id16667 . -1) (undo-tree-id16668 . -1) (undo-tree-id16669 . -1) (undo-tree-id16670 . -1) (undo-tree-id16671 . -1) (undo-tree-id16672 . -1) (undo-tree-id16673 . -1) (undo-tree-id16674 . -1) (undo-tree-id16675 . -1) (undo-tree-id16676 . -1) (undo-tree-id16677 . -1) (undo-tree-id16678 . -1) (undo-tree-id16679 . -1) (undo-tree-id16680 . -1) (undo-tree-id16681 . -1) (undo-tree-id16682 . -1) (undo-tree-id16683 . -1) (undo-tree-id16684 . -1) (undo-tree-id16685 . -1) (undo-tree-id16686 . -1) (undo-tree-id16687 . -1) (undo-tree-id16688 . -1) (undo-tree-id16689 . -1) (undo-tree-id16690 . -1) (undo-tree-id16691 . -1) (undo-tree-id16692 . -1) (undo-tree-id16693 . -1) (undo-tree-id16694 . -1) (undo-tree-id16695 . -1) (undo-tree-id16696 . -1) 2043 (2041 . 2043) (#("f" 0 1 (fontified t)) . -2041) (undo-tree-id16697 . -1) (undo-tree-id16698 . -1) (undo-tree-id16699 . -1) (undo-tree-id16700 . -1) (undo-tree-id16701 . -1) (undo-tree-id16702 . -1) (undo-tree-id16703 . -1) (undo-tree-id16704 . -1) (undo-tree-id16705 . -1) (undo-tree-id16706 . -1) (undo-tree-id16707 . -1) (undo-tree-id16708 . -1) (undo-tree-id16709 . -1) (undo-tree-id16710 . -1) (undo-tree-id16711 . -1) (undo-tree-id16712 . -1) (undo-tree-id16713 . -1) (undo-tree-id16714 . -1) (undo-tree-id16715 . -1) (undo-tree-id16716 . -1) (undo-tree-id16717 . -1) (undo-tree-id16718 . -1) (undo-tree-id16719 . -1) (undo-tree-id16720 . -1) (undo-tree-id16721 . -1) (undo-tree-id16722 . -1) (undo-tree-id16723 . -1) (undo-tree-id16724 . -1) (undo-tree-id16725 . -1) (undo-tree-id16726 . -1) (undo-tree-id16727 . -1) (undo-tree-id16728 . -1) (undo-tree-id16729 . -1) (undo-tree-id16730 . -1) (undo-tree-id16731 . -1) (undo-tree-id16732 . -1) (undo-tree-id16733 . -1) (undo-tree-id16734 . -1) (undo-tree-id16735 . -1) (undo-tree-id16736 . -1) (undo-tree-id16737 . -1) (undo-tree-id16738 . -1) (undo-tree-id16739 . -1) (undo-tree-id16740 . -1) (undo-tree-id16741 . -1) (undo-tree-id16742 . -1) (undo-tree-id16743 . -1) (undo-tree-id16744 . -1) (undo-tree-id16745 . -1) (undo-tree-id16746 . -1) (undo-tree-id16747 . -1) (undo-tree-id16748 . -1) (undo-tree-id16749 . -1) (undo-tree-id16750 . -1) (undo-tree-id16751 . -1) (undo-tree-id16752 . -1) (undo-tree-id16753 . -1) (undo-tree-id16754 . -1) (undo-tree-id16755 . -1) (undo-tree-id16756 . -1) (undo-tree-id16757 . -1) (undo-tree-id16758 . -1) (undo-tree-id16759 . -1) (undo-tree-id16760 . -1) (undo-tree-id16761 . -1) (undo-tree-id16762 . -1) (undo-tree-id16763 . -1) (undo-tree-id16764 . -1) (undo-tree-id16765 . -1) (undo-tree-id16766 . -1) (undo-tree-id16767 . -1) (undo-tree-id16768 . -1) (undo-tree-id16769 . -1) 2042 (2040 . 2042) (t 26156 45676 631002 349000)) nil (26156 46658 153292 375000) 0 nil])
([nil nil ((2049 . 2051)) nil (26156 46658 152804 15000) 0 nil])
([nil nil ((2494 . 2496) (t 26156 46658 237696 195000)) nil (26156 46665 529089 457000) 0 nil])
([nil nil ((2579 . 2584) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -2579) (undo-tree-id16770 . -1) (undo-tree-id16771 . -1) (undo-tree-id16772 . -1) (undo-tree-id16773 . -1) (undo-tree-id16774 . -1) (undo-tree-id16775 . -1) (undo-tree-id16776 . -1) (undo-tree-id16777 . -1) (undo-tree-id16778 . -1) (undo-tree-id16779 . -1) (undo-tree-id16780 . -1) (undo-tree-id16781 . -1) (undo-tree-id16782 . -1) (undo-tree-id16783 . -1) (undo-tree-id16784 . -1) (undo-tree-id16785 . -1) (undo-tree-id16786 . -1) (undo-tree-id16787 . -1) (undo-tree-id16788 . -1) (undo-tree-id16789 . -1) (undo-tree-id16790 . -1) (undo-tree-id16791 . -1) (undo-tree-id16792 . -1) (undo-tree-id16793 . -1) (undo-tree-id16794 . -1) (undo-tree-id16795 . -1) (undo-tree-id16796 . -1) (undo-tree-id16797 . -1) (undo-tree-id16798 . -1) (undo-tree-id16799 . -1) (undo-tree-id16800 . -1) (undo-tree-id16801 . -1) (undo-tree-id16802 . -1) (undo-tree-id16803 . -1) (undo-tree-id16804 . -1) (undo-tree-id16805 . -1) (undo-tree-id16806 . -1) (undo-tree-id16807 . -1) (undo-tree-id16808 . -1) (undo-tree-id16809 . -1) (undo-tree-id16810 . -1) (undo-tree-id16811 . -1) (undo-tree-id16812 . -1) (undo-tree-id16813 . -1) (undo-tree-id16814 . -1) (undo-tree-id16815 . -1) (undo-tree-id16816 . -1) (undo-tree-id16817 . -1) (undo-tree-id16818 . -1) (undo-tree-id16819 . -1) (undo-tree-id16820 . -1) (undo-tree-id16821 . -1) (undo-tree-id16822 . -1) (undo-tree-id16823 . -1) (undo-tree-id16824 . -1) (undo-tree-id16825 . -1) (undo-tree-id16826 . -1) (undo-tree-id16827 . -1) (undo-tree-id16828 . -1) (undo-tree-id16829 . -1) (undo-tree-id16830 . -1) (undo-tree-id16831 . -1) (undo-tree-id16832 . -1) (undo-tree-id16833 . -1) (undo-tree-id16834 . -1) (undo-tree-id16835 . -1) (undo-tree-id16836 . -1) (undo-tree-id16837 . -1) (undo-tree-id16838 . -1) (undo-tree-id16839 . -1) (undo-tree-id16840 . -1) (undo-tree-id16841 . -1) (undo-tree-id16842 . -1) (undo-tree-id16843 . -1) (undo-tree-id16844 . -1) (undo-tree-id16845 . -1) (undo-tree-id16846 . -1) (undo-tree-id16847 . -1) (undo-tree-id16848 . -1) (undo-tree-id16849 . -1) (undo-tree-id16850 . -1) (undo-tree-id16851 . -1) (undo-tree-id16852 . -1) (undo-tree-id16853 . -1) (undo-tree-id16854 . -1) (undo-tree-id16855 . -1) (undo-tree-id16856 . -1) (undo-tree-id16857 . -1) (undo-tree-id16858 . -1) (undo-tree-id16859 . -1) (undo-tree-id16860 . -1) (undo-tree-id16861 . -1) (undo-tree-id16862 . -1) (undo-tree-id16863 . -1) (undo-tree-id16864 . -1) (undo-tree-id16865 . -1) (undo-tree-id16866 . -1) (undo-tree-id16867 . -1) (undo-tree-id16868 . -1) (undo-tree-id16869 . -1) (undo-tree-id16870 . -1) (undo-tree-id16871 . -1) (undo-tree-id16872 . -1) (undo-tree-id16873 . -1) (undo-tree-id16874 . -1) (undo-tree-id16875 . -1) (undo-tree-id16876 . -1) (undo-tree-id16877 . -1) (undo-tree-id16878 . -1) (undo-tree-id16879 . -1) (undo-tree-id16880 . -1) (undo-tree-id16881 . -1) (undo-tree-id16882 . -1) (undo-tree-id16883 . -1) (undo-tree-id16884 . -1) (undo-tree-id16885 . -1) (undo-tree-id16886 . -1) (undo-tree-id16887 . -1) (undo-tree-id16888 . -1) (undo-tree-id16889 . -1) (undo-tree-id16890 . -1) (undo-tree-id16891 . -1) (undo-tree-id16892 . -1) (undo-tree-id16893 . -1) (undo-tree-id16894 . -1) (undo-tree-id16895 . -1) (undo-tree-id16896 . -1) (undo-tree-id16897 . -1) (undo-tree-id16898 . -1) (undo-tree-id16899 . -1) (undo-tree-id16900 . -1) (undo-tree-id16901 . -1) (undo-tree-id16902 . -1) (undo-tree-id16903 . -1) (undo-tree-id16904 . -1) (undo-tree-id16905 . -1) (undo-tree-id16906 . -1) (undo-tree-id16907 . -1) (undo-tree-id16908 . -1) (undo-tree-id16909 . -1) (undo-tree-id16910 . -1) (undo-tree-id16911 . -1) (undo-tree-id16912 . -1) (undo-tree-id16913 . -1) (undo-tree-id16914 . -1) (undo-tree-id16915 . -1) (undo-tree-id16916 . -1) (undo-tree-id16917 . -1) (undo-tree-id16918 . -1) (undo-tree-id16919 . -1) (undo-tree-id16920 . -1) (undo-tree-id16921 . -1) (undo-tree-id16922 . -1) (undo-tree-id16923 . -1) (undo-tree-id16924 . -1) (undo-tree-id16925 . -1) (undo-tree-id16926 . -1) (undo-tree-id16927 . -1) (undo-tree-id16928 . -1) (undo-tree-id16929 . -1) (undo-tree-id16930 . -1) (undo-tree-id16931 . -1) (undo-tree-id16932 . -1) (undo-tree-id16933 . -1) (undo-tree-id16934 . -1) (undo-tree-id16935 . -1) (undo-tree-id16936 . -1) (undo-tree-id16937 . -1) (undo-tree-id16938 . -1) (undo-tree-id16939 . -1) (undo-tree-id16940 . -1) (undo-tree-id16941 . -1) (undo-tree-id16942 . -1) (undo-tree-id16943 . -1) (undo-tree-id16944 . -1) (undo-tree-id16945 . -1) (undo-tree-id16946 . -1) (undo-tree-id16947 . -1) (undo-tree-id16948 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -2580) (undo-tree-id16949 . -1) (undo-tree-id16950 . -1) (undo-tree-id16951 . -1) (undo-tree-id16952 . -1) (undo-tree-id16953 . -1) (undo-tree-id16954 . -1) (undo-tree-id16955 . -1) (undo-tree-id16956 . -1) (undo-tree-id16957 . -1) (undo-tree-id16958 . -1) (undo-tree-id16959 . -1) (undo-tree-id16960 . -1) (undo-tree-id16961 . -1) (undo-tree-id16962 . -1) (undo-tree-id16963 . -1) (undo-tree-id16964 . -1) (undo-tree-id16965 . -1) (undo-tree-id16966 . -1) (undo-tree-id16967 . -1) (undo-tree-id16968 . -1) (undo-tree-id16969 . -1) (undo-tree-id16970 . -1) (undo-tree-id16971 . -1) (undo-tree-id16972 . -1) (undo-tree-id16973 . -1) (undo-tree-id16974 . -1) (undo-tree-id16975 . -1) (undo-tree-id16976 . -1) (undo-tree-id16977 . -1) (undo-tree-id16978 . -1) (undo-tree-id16979 . -1) (undo-tree-id16980 . -1) (undo-tree-id16981 . -1) (undo-tree-id16982 . -1) (undo-tree-id16983 . -1) (undo-tree-id16984 . -1) (undo-tree-id16985 . -1) (undo-tree-id16986 . -1) (undo-tree-id16987 . -1) (undo-tree-id16988 . -1) (undo-tree-id16989 . -1) (undo-tree-id16990 . -1) (undo-tree-id16991 . -1) (undo-tree-id16992 . -1) (undo-tree-id16993 . -1) (undo-tree-id16994 . -1) (undo-tree-id16995 . -1) (undo-tree-id16996 . -1) (undo-tree-id16997 . -1) (undo-tree-id16998 . -1) (undo-tree-id16999 . -1) (undo-tree-id17000 . -1) (undo-tree-id17001 . -1) (undo-tree-id17002 . -1) (undo-tree-id17003 . -1) (undo-tree-id17004 . -1) (undo-tree-id17005 . -1) (undo-tree-id17006 . -1) (undo-tree-id17007 . -1) (undo-tree-id17008 . -1) (undo-tree-id17009 . -1) (undo-tree-id17010 . -1) (undo-tree-id17011 . -1) (undo-tree-id17012 . -1) (undo-tree-id17013 . -1) (undo-tree-id17014 . -1) (undo-tree-id17015 . -1) (undo-tree-id17016 . -1) (undo-tree-id17017 . -1) (undo-tree-id17018 . -1) (undo-tree-id17019 . -1) (undo-tree-id17020 . -1) (undo-tree-id17021 . -1) (undo-tree-id17022 . -1) (undo-tree-id17023 . -1) (undo-tree-id17024 . -1) (undo-tree-id17025 . -1) (undo-tree-id17026 . -1) (undo-tree-id17027 . -1) (undo-tree-id17028 . -1) (undo-tree-id17029 . -1) (undo-tree-id17030 . -1) (undo-tree-id17031 . -1) (undo-tree-id17032 . -1) (undo-tree-id17033 . -1) (undo-tree-id17034 . -1) (undo-tree-id17035 . -1) (undo-tree-id17036 . -1) (undo-tree-id17037 . -1) (undo-tree-id17038 . -1) (undo-tree-id17039 . -1) (undo-tree-id17040 . -1) (undo-tree-id17041 . -1) (undo-tree-id17042 . -1) (undo-tree-id17043 . -1) (undo-tree-id17044 . -1) (undo-tree-id17045 . -1) (undo-tree-id17046 . -1) (undo-tree-id17047 . -1) (undo-tree-id17048 . -1) (undo-tree-id17049 . -1) (undo-tree-id17050 . -1) (undo-tree-id17051 . -1) (undo-tree-id17052 . -1) (undo-tree-id17053 . -1) (undo-tree-id17054 . -1) (undo-tree-id17055 . -1) (undo-tree-id17056 . -1) (undo-tree-id17057 . -1) (undo-tree-id17058 . -1) (undo-tree-id17059 . -1) (undo-tree-id17060 . -1) (undo-tree-id17061 . -1) (undo-tree-id17062 . -1) (undo-tree-id17063 . -1) (undo-tree-id17064 . -1) (undo-tree-id17065 . -1) (undo-tree-id17066 . -1) (undo-tree-id17067 . -1) (undo-tree-id17068 . -1) (undo-tree-id17069 . -1) (undo-tree-id17070 . -1) (undo-tree-id17071 . -1) (undo-tree-id17072 . -1) (undo-tree-id17073 . -1) (undo-tree-id17074 . -1) (undo-tree-id17075 . -1) (undo-tree-id17076 . -1) (undo-tree-id17077 . -1) (undo-tree-id17078 . -1) (undo-tree-id17079 . -1) (undo-tree-id17080 . -1) (undo-tree-id17081 . -1) (undo-tree-id17082 . -1) (undo-tree-id17083 . -1) (undo-tree-id17084 . -1) (undo-tree-id17085 . -1) (undo-tree-id17086 . -1) (undo-tree-id17087 . -1) (undo-tree-id17088 . -1) (undo-tree-id17089 . -1) (undo-tree-id17090 . -1) (undo-tree-id17091 . -1) (undo-tree-id17092 . -1) (undo-tree-id17093 . -1) (undo-tree-id17094 . -1) (undo-tree-id17095 . -1) (undo-tree-id17096 . -1) (undo-tree-id17097 . -1) (undo-tree-id17098 . -1) (undo-tree-id17099 . -1) (undo-tree-id17100 . -1) (undo-tree-id17101 . -1) (undo-tree-id17102 . -1) (undo-tree-id17103 . -1) (undo-tree-id17104 . -1) (undo-tree-id17105 . -1) (undo-tree-id17106 . -1) (undo-tree-id17107 . -1) (undo-tree-id17108 . -1) (undo-tree-id17109 . -1) (undo-tree-id17110 . -1) (undo-tree-id17111 . -1) (undo-tree-id17112 . -1) (undo-tree-id17113 . -1) (undo-tree-id17114 . -1) (undo-tree-id17115 . -1) (undo-tree-id17116 . -1) (undo-tree-id17117 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -2581) (undo-tree-id17118 . -1) (undo-tree-id17119 . -1) (undo-tree-id17120 . -1) (undo-tree-id17121 . -1) (undo-tree-id17122 . -1) (undo-tree-id17123 . -1) (undo-tree-id17124 . -1) (undo-tree-id17125 . -1) (undo-tree-id17126 . -1) (undo-tree-id17127 . -1) (undo-tree-id17128 . -1) (undo-tree-id17129 . -1) (undo-tree-id17130 . -1) (undo-tree-id17131 . -1) (undo-tree-id17132 . -1) (undo-tree-id17133 . -1) (undo-tree-id17134 . -1) (undo-tree-id17135 . -1) (undo-tree-id17136 . -1) (undo-tree-id17137 . -1) (undo-tree-id17138 . -1) (undo-tree-id17139 . -1) (undo-tree-id17140 . -1) (undo-tree-id17141 . -1) (undo-tree-id17142 . -1) (undo-tree-id17143 . -1) (undo-tree-id17144 . -1) (undo-tree-id17145 . -1) (undo-tree-id17146 . -1) (undo-tree-id17147 . -1) (undo-tree-id17148 . -1) (undo-tree-id17149 . -1) (undo-tree-id17150 . -1) (undo-tree-id17151 . -1) (undo-tree-id17152 . -1) (undo-tree-id17153 . -1) (undo-tree-id17154 . -1) (undo-tree-id17155 . -1) (undo-tree-id17156 . -1) (undo-tree-id17157 . -1) (undo-tree-id17158 . -1) (undo-tree-id17159 . -1) (undo-tree-id17160 . -1) (undo-tree-id17161 . -1) (undo-tree-id17162 . -1) (undo-tree-id17163 . -1) (undo-tree-id17164 . -1) (undo-tree-id17165 . -1) (undo-tree-id17166 . -1) (undo-tree-id17167 . -1) (undo-tree-id17168 . -1) (undo-tree-id17169 . -1) (undo-tree-id17170 . -1) (undo-tree-id17171 . -1) (undo-tree-id17172 . -1) (undo-tree-id17173 . -1) (undo-tree-id17174 . -1) (undo-tree-id17175 . -1) (undo-tree-id17176 . -1) (undo-tree-id17177 . -1) (undo-tree-id17178 . -1) (undo-tree-id17179 . -1) (undo-tree-id17180 . -1) (undo-tree-id17181 . -1) (undo-tree-id17182 . -1) (undo-tree-id17183 . -1) (undo-tree-id17184 . -1) (undo-tree-id17185 . -1) (undo-tree-id17186 . -1) (undo-tree-id17187 . -1) (undo-tree-id17188 . -1) (undo-tree-id17189 . -1) (undo-tree-id17190 . -1) (undo-tree-id17191 . -1) (undo-tree-id17192 . -1) (undo-tree-id17193 . -1) (undo-tree-id17194 . -1) (undo-tree-id17195 . -1) (undo-tree-id17196 . -1) (undo-tree-id17197 . -1) (undo-tree-id17198 . -1) (undo-tree-id17199 . -1) (undo-tree-id17200 . -1) (undo-tree-id17201 . -1) (undo-tree-id17202 . -1) (undo-tree-id17203 . -1) (undo-tree-id17204 . -1) (undo-tree-id17205 . -1) (undo-tree-id17206 . -1) (undo-tree-id17207 . -1) (undo-tree-id17208 . -1) (undo-tree-id17209 . -1) (undo-tree-id17210 . -1) (undo-tree-id17211 . -1) (undo-tree-id17212 . -1) (undo-tree-id17213 . -1) (undo-tree-id17214 . -1) (undo-tree-id17215 . -1) (undo-tree-id17216 . -1) (undo-tree-id17217 . -1) (undo-tree-id17218 . -1) (undo-tree-id17219 . -1) (undo-tree-id17220 . -1) (undo-tree-id17221 . -1) (undo-tree-id17222 . -1) (undo-tree-id17223 . -1) (undo-tree-id17224 . -1) (undo-tree-id17225 . -1) (undo-tree-id17226 . -1) (undo-tree-id17227 . -1) (undo-tree-id17228 . -1) (undo-tree-id17229 . -1) (undo-tree-id17230 . -1) (undo-tree-id17231 . -1) (undo-tree-id17232 . -1) (undo-tree-id17233 . -1) (undo-tree-id17234 . -1) (undo-tree-id17235 . -1) (undo-tree-id17236 . -1) (undo-tree-id17237 . -1) (undo-tree-id17238 . -1) (undo-tree-id17239 . -1) (undo-tree-id17240 . -1) (undo-tree-id17241 . -1) (undo-tree-id17242 . -1) (undo-tree-id17243 . -1) (undo-tree-id17244 . -1) (undo-tree-id17245 . -1) (undo-tree-id17246 . -1) (undo-tree-id17247 . -1) (undo-tree-id17248 . -1) (undo-tree-id17249 . -1) (undo-tree-id17250 . -1) (undo-tree-id17251 . -1) (undo-tree-id17252 . -1) (undo-tree-id17253 . -1) (undo-tree-id17254 . -1) (undo-tree-id17255 . -1) (undo-tree-id17256 . -1) (undo-tree-id17257 . -1) (undo-tree-id17258 . -1) (undo-tree-id17259 . -1) (undo-tree-id17260 . -1) (undo-tree-id17261 . -1) (undo-tree-id17262 . -1) (undo-tree-id17263 . -1) (undo-tree-id17264 . -1) (undo-tree-id17265 . -1) (undo-tree-id17266 . -1) (undo-tree-id17267 . -1) (undo-tree-id17268 . -1) (undo-tree-id17269 . -1) (undo-tree-id17270 . -1) (undo-tree-id17271 . -1) (undo-tree-id17272 . -1) (undo-tree-id17273 . -1) (undo-tree-id17274 . -1) (undo-tree-id17275 . -1) (undo-tree-id17276 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2582) (undo-tree-id17277 . -1) (undo-tree-id17278 . -1) (undo-tree-id17279 . -1) (undo-tree-id17280 . -1) (undo-tree-id17281 . -1) (undo-tree-id17282 . -1) (undo-tree-id17283 . -1) (undo-tree-id17284 . -1) (undo-tree-id17285 . -1) (undo-tree-id17286 . -1) (undo-tree-id17287 . -1) (undo-tree-id17288 . -1) (undo-tree-id17289 . -1) (undo-tree-id17290 . -1) (undo-tree-id17291 . -1) (undo-tree-id17292 . -1) (undo-tree-id17293 . -1) (undo-tree-id17294 . -1) (undo-tree-id17295 . -1) (undo-tree-id17296 . -1) (undo-tree-id17297 . -1) (undo-tree-id17298 . -1) (undo-tree-id17299 . -1) (undo-tree-id17300 . -1) (undo-tree-id17301 . -1) (undo-tree-id17302 . -1) (undo-tree-id17303 . -1) (undo-tree-id17304 . -1) (undo-tree-id17305 . -1) (undo-tree-id17306 . -1) (undo-tree-id17307 . -1) (undo-tree-id17308 . -1) (undo-tree-id17309 . -1) (undo-tree-id17310 . -1) (undo-tree-id17311 . -1) (undo-tree-id17312 . -1) (undo-tree-id17313 . -1) (undo-tree-id17314 . -1) (undo-tree-id17315 . -1) (undo-tree-id17316 . -1) (undo-tree-id17317 . -1) (undo-tree-id17318 . -1) (undo-tree-id17319 . -1) (undo-tree-id17320 . -1) (undo-tree-id17321 . -1) (undo-tree-id17322 . -1) (undo-tree-id17323 . -1) (undo-tree-id17324 . -1) (undo-tree-id17325 . -1) (undo-tree-id17326 . -1) (undo-tree-id17327 . -1) (undo-tree-id17328 . -1) (undo-tree-id17329 . -1) (undo-tree-id17330 . -1) (undo-tree-id17331 . -1) (undo-tree-id17332 . -1) (undo-tree-id17333 . -1) (undo-tree-id17334 . -1) (undo-tree-id17335 . -1) (undo-tree-id17336 . -1) (undo-tree-id17337 . -1) (undo-tree-id17338 . -1) (undo-tree-id17339 . -1) (undo-tree-id17340 . -1) (undo-tree-id17341 . -1) (undo-tree-id17342 . -1) (undo-tree-id17343 . -1) (undo-tree-id17344 . -1) (undo-tree-id17345 . -1) (undo-tree-id17346 . -1) (undo-tree-id17347 . -1) (undo-tree-id17348 . -1) (undo-tree-id17349 . -1) (undo-tree-id17350 . -1) (undo-tree-id17351 . -1) (undo-tree-id17352 . -1) (undo-tree-id17353 . -1) (undo-tree-id17354 . -1) (undo-tree-id17355 . -1) (undo-tree-id17356 . -1) (undo-tree-id17357 . -1) (undo-tree-id17358 . -1) (undo-tree-id17359 . -1) (undo-tree-id17360 . -1) (undo-tree-id17361 . -1) (undo-tree-id17362 . -1) (undo-tree-id17363 . -1) (undo-tree-id17364 . -1) (undo-tree-id17365 . -1) (undo-tree-id17366 . -1) (undo-tree-id17367 . -1) (undo-tree-id17368 . -1) (undo-tree-id17369 . -1) (undo-tree-id17370 . -1) (undo-tree-id17371 . -1) (undo-tree-id17372 . -1) (undo-tree-id17373 . -1) (undo-tree-id17374 . -1) (undo-tree-id17375 . -1) (undo-tree-id17376 . -1) (undo-tree-id17377 . -1) (undo-tree-id17378 . -1) (undo-tree-id17379 . -1) (undo-tree-id17380 . -1) (undo-tree-id17381 . -1) (undo-tree-id17382 . -1) (undo-tree-id17383 . -1) (undo-tree-id17384 . -1) (undo-tree-id17385 . -1) (undo-tree-id17386 . -1) (undo-tree-id17387 . -1) (undo-tree-id17388 . -1) (undo-tree-id17389 . -1) (undo-tree-id17390 . -1) (undo-tree-id17391 . -1) (undo-tree-id17392 . -1) (undo-tree-id17393 . -1) (undo-tree-id17394 . -1) (undo-tree-id17395 . -1) (undo-tree-id17396 . -1) (undo-tree-id17397 . -1) (undo-tree-id17398 . -1) (undo-tree-id17399 . -1) (undo-tree-id17400 . -1) (undo-tree-id17401 . -1) (undo-tree-id17402 . -1) (undo-tree-id17403 . -1) (undo-tree-id17404 . -1) (undo-tree-id17405 . -1) (undo-tree-id17406 . -1) (undo-tree-id17407 . -1) (undo-tree-id17408 . -1) (undo-tree-id17409 . -1) (undo-tree-id17410 . -1) (undo-tree-id17411 . -1) (undo-tree-id17412 . -1) (undo-tree-id17413 . -1) (undo-tree-id17414 . -1) (undo-tree-id17415 . -1) (undo-tree-id17416 . -1) (undo-tree-id17417 . -1) (undo-tree-id17418 . -1) (undo-tree-id17419 . -1) (undo-tree-id17420 . -1) (undo-tree-id17421 . -1) (undo-tree-id17422 . -1) (undo-tree-id17423 . -1) (undo-tree-id17424 . -1) (undo-tree-id17425 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -2583) (undo-tree-id17426 . -1) (undo-tree-id17427 . -1) (undo-tree-id17428 . -1) (undo-tree-id17429 . -1) (undo-tree-id17430 . -1) (undo-tree-id17431 . -1) (undo-tree-id17432 . -1) (undo-tree-id17433 . -1) (undo-tree-id17434 . -1) (undo-tree-id17435 . -1) (undo-tree-id17436 . -1) (undo-tree-id17437 . -1) (undo-tree-id17438 . -1) (undo-tree-id17439 . -1) (undo-tree-id17440 . -1) (undo-tree-id17441 . -1) (undo-tree-id17442 . -1) (undo-tree-id17443 . -1) (undo-tree-id17444 . -1) (undo-tree-id17445 . -1) (undo-tree-id17446 . -1) (undo-tree-id17447 . -1) (undo-tree-id17448 . -1) (undo-tree-id17449 . -1) (undo-tree-id17450 . -1) (undo-tree-id17451 . -1) (undo-tree-id17452 . -1) (undo-tree-id17453 . -1) (undo-tree-id17454 . -1) (undo-tree-id17455 . -1) (undo-tree-id17456 . -1) (undo-tree-id17457 . -1) (undo-tree-id17458 . -1) (undo-tree-id17459 . -1) (undo-tree-id17460 . -1) (undo-tree-id17461 . -1) (undo-tree-id17462 . -1) (undo-tree-id17463 . -1) (undo-tree-id17464 . -1) (undo-tree-id17465 . -1) (undo-tree-id17466 . -1) (undo-tree-id17467 . -1) (undo-tree-id17468 . -1) (undo-tree-id17469 . -1) (undo-tree-id17470 . -1) (undo-tree-id17471 . -1) (undo-tree-id17472 . -1) (undo-tree-id17473 . -1) (undo-tree-id17474 . -1) (undo-tree-id17475 . -1) (undo-tree-id17476 . -1) (undo-tree-id17477 . -1) (undo-tree-id17478 . -1) (undo-tree-id17479 . -1) (undo-tree-id17480 . -1) (undo-tree-id17481 . -1) (undo-tree-id17482 . -1) (undo-tree-id17483 . -1) (undo-tree-id17484 . -1) (undo-tree-id17485 . -1) (undo-tree-id17486 . -1) (undo-tree-id17487 . -1) (undo-tree-id17488 . -1) (undo-tree-id17489 . -1) (undo-tree-id17490 . -1) (undo-tree-id17491 . -1) (undo-tree-id17492 . -1) (undo-tree-id17493 . -1) (undo-tree-id17494 . -1) (undo-tree-id17495 . -1) (undo-tree-id17496 . -1) (undo-tree-id17497 . -1) (undo-tree-id17498 . -1) (undo-tree-id17499 . -1) (undo-tree-id17500 . -1) (undo-tree-id17501 . -1) (undo-tree-id17502 . -1) (undo-tree-id17503 . -1) (undo-tree-id17504 . -1) (undo-tree-id17505 . -1) (undo-tree-id17506 . -1) (undo-tree-id17507 . -1) (undo-tree-id17508 . -1) (undo-tree-id17509 . -1) (undo-tree-id17510 . -1) (undo-tree-id17511 . -1) (undo-tree-id17512 . -1) (undo-tree-id17513 . -1) (undo-tree-id17514 . -1) (undo-tree-id17515 . -1) (undo-tree-id17516 . -1) (undo-tree-id17517 . -1) (undo-tree-id17518 . -1) (undo-tree-id17519 . -1) (undo-tree-id17520 . -1) (undo-tree-id17521 . -1) (undo-tree-id17522 . -1) (undo-tree-id17523 . -1) (undo-tree-id17524 . -1) (undo-tree-id17525 . -1) (undo-tree-id17526 . -1) (undo-tree-id17527 . -1) (undo-tree-id17528 . -1) (undo-tree-id17529 . -1) (undo-tree-id17530 . -1) (undo-tree-id17531 . -1) (undo-tree-id17532 . -1) (undo-tree-id17533 . -1) (undo-tree-id17534 . -1) (undo-tree-id17535 . -1) (undo-tree-id17536 . -1) (undo-tree-id17537 . -1) (undo-tree-id17538 . -1) (undo-tree-id17539 . -1) (undo-tree-id17540 . -1) (undo-tree-id17541 . -1) (undo-tree-id17542 . -1) (undo-tree-id17543 . -1) (undo-tree-id17544 . -1) (undo-tree-id17545 . -1) (undo-tree-id17546 . -1) (undo-tree-id17547 . -1) (undo-tree-id17548 . -1) (undo-tree-id17549 . -1) (undo-tree-id17550 . -1) (undo-tree-id17551 . -1) (undo-tree-id17552 . -1) (undo-tree-id17553 . -1) (undo-tree-id17554 . -1) (undo-tree-id17555 . -1) (undo-tree-id17556 . -1) (undo-tree-id17557 . -1) (undo-tree-id17558 . -1) (undo-tree-id17559 . -1) (undo-tree-id17560 . -1) (undo-tree-id17561 . -1) (undo-tree-id17562 . -1) (undo-tree-id17563 . -1) (undo-tree-id17564 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -2584) (undo-tree-id17565 . -1) (undo-tree-id17566 . -1) (undo-tree-id17567 . -1) (undo-tree-id17568 . -1) (undo-tree-id17569 . -1) (undo-tree-id17570 . -1) (undo-tree-id17571 . -1) (undo-tree-id17572 . -1) (undo-tree-id17573 . -1) (undo-tree-id17574 . -1) (undo-tree-id17575 . -1) (undo-tree-id17576 . -1) (undo-tree-id17577 . -1) (undo-tree-id17578 . -1) (undo-tree-id17579 . -1) (undo-tree-id17580 . -1) (undo-tree-id17581 . -1) (undo-tree-id17582 . -1) (undo-tree-id17583 . -1) (undo-tree-id17584 . -1) (undo-tree-id17585 . -1) (undo-tree-id17586 . -1) (undo-tree-id17587 . -1) (undo-tree-id17588 . -1) (undo-tree-id17589 . -1) (undo-tree-id17590 . -1) (undo-tree-id17591 . -1) (undo-tree-id17592 . -1) (undo-tree-id17593 . -1) (undo-tree-id17594 . -1) (undo-tree-id17595 . -1) (undo-tree-id17596 . -1) (undo-tree-id17597 . -1) (undo-tree-id17598 . -1) (undo-tree-id17599 . -1) (undo-tree-id17600 . -1) (undo-tree-id17601 . -1) (undo-tree-id17602 . -1) (undo-tree-id17603 . -1) (undo-tree-id17604 . -1) (undo-tree-id17605 . -1) (undo-tree-id17606 . -1) (undo-tree-id17607 . -1) (undo-tree-id17608 . -1) (undo-tree-id17609 . -1) (undo-tree-id17610 . -1) (undo-tree-id17611 . -1) (undo-tree-id17612 . -1) (undo-tree-id17613 . -1) (undo-tree-id17614 . -1) (undo-tree-id17615 . -1) (undo-tree-id17616 . -1) (undo-tree-id17617 . -1) (undo-tree-id17618 . -1) (undo-tree-id17619 . -1) (undo-tree-id17620 . -1) (undo-tree-id17621 . -1) (undo-tree-id17622 . -1) (undo-tree-id17623 . -1) (undo-tree-id17624 . -1) (undo-tree-id17625 . -1) (undo-tree-id17626 . -1) (undo-tree-id17627 . -1) (undo-tree-id17628 . -1) (undo-tree-id17629 . -1) (undo-tree-id17630 . -1) (undo-tree-id17631 . -1) (undo-tree-id17632 . -1) (undo-tree-id17633 . -1) (undo-tree-id17634 . -1) (undo-tree-id17635 . -1) (undo-tree-id17636 . -1) (undo-tree-id17637 . -1) (undo-tree-id17638 . -1) (undo-tree-id17639 . -1) (undo-tree-id17640 . -1) (undo-tree-id17641 . -1) (undo-tree-id17642 . -1) (undo-tree-id17643 . -1) (undo-tree-id17644 . -1) (undo-tree-id17645 . -1) (undo-tree-id17646 . -1) (undo-tree-id17647 . -1) (undo-tree-id17648 . -1) (undo-tree-id17649 . -1) (undo-tree-id17650 . -1) (undo-tree-id17651 . -1) (undo-tree-id17652 . -1) (undo-tree-id17653 . -1) (undo-tree-id17654 . -1) (undo-tree-id17655 . -1) (undo-tree-id17656 . -1) (undo-tree-id17657 . -1) (undo-tree-id17658 . -1) (undo-tree-id17659 . -1) (undo-tree-id17660 . -1) (undo-tree-id17661 . -1) (undo-tree-id17662 . -1) (undo-tree-id17663 . -1) (undo-tree-id17664 . -1) (undo-tree-id17665 . -1) (undo-tree-id17666 . -1) (undo-tree-id17667 . -1) (undo-tree-id17668 . -1) (undo-tree-id17669 . -1) (undo-tree-id17670 . -1) (undo-tree-id17671 . -1) (undo-tree-id17672 . -1) (undo-tree-id17673 . -1) (undo-tree-id17674 . -1) (undo-tree-id17675 . -1) (undo-tree-id17676 . -1) (undo-tree-id17677 . -1) (undo-tree-id17678 . -1) (undo-tree-id17679 . -1) (undo-tree-id17680 . -1) (undo-tree-id17681 . -1) (undo-tree-id17682 . -1) (undo-tree-id17683 . -1) (undo-tree-id17684 . -1) (undo-tree-id17685 . -1) (undo-tree-id17686 . -1) (undo-tree-id17687 . -1) (undo-tree-id17688 . -1) (undo-tree-id17689 . -1) (undo-tree-id17690 . -1) (undo-tree-id17691 . -1) (undo-tree-id17692 . -1) (undo-tree-id17693 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -2585) (undo-tree-id17694 . -1) (undo-tree-id17695 . -1) (undo-tree-id17696 . -1) (undo-tree-id17697 . -1) (undo-tree-id17698 . -1) (undo-tree-id17699 . -1) (undo-tree-id17700 . -1) (undo-tree-id17701 . -1) (undo-tree-id17702 . -1) (undo-tree-id17703 . -1) (undo-tree-id17704 . -1) (undo-tree-id17705 . -1) (undo-tree-id17706 . -1) (undo-tree-id17707 . -1) (undo-tree-id17708 . -1) (undo-tree-id17709 . -1) (undo-tree-id17710 . -1) (undo-tree-id17711 . -1) (undo-tree-id17712 . -1) (undo-tree-id17713 . -1) (undo-tree-id17714 . -1) (undo-tree-id17715 . -1) (undo-tree-id17716 . -1) (undo-tree-id17717 . -1) (undo-tree-id17718 . -1) (undo-tree-id17719 . -1) (undo-tree-id17720 . -1) (undo-tree-id17721 . -1) (undo-tree-id17722 . -1) (undo-tree-id17723 . -1) (undo-tree-id17724 . -1) (undo-tree-id17725 . -1) (undo-tree-id17726 . -1) (undo-tree-id17727 . -1) (undo-tree-id17728 . -1) (undo-tree-id17729 . -1) (undo-tree-id17730 . -1) (undo-tree-id17731 . -1) (undo-tree-id17732 . -1) (undo-tree-id17733 . -1) (undo-tree-id17734 . -1) (undo-tree-id17735 . -1) (undo-tree-id17736 . -1) (undo-tree-id17737 . -1) (undo-tree-id17738 . -1) (undo-tree-id17739 . -1) (undo-tree-id17740 . -1) (undo-tree-id17741 . -1) (undo-tree-id17742 . -1) (undo-tree-id17743 . -1) (undo-tree-id17744 . -1) (undo-tree-id17745 . -1) (undo-tree-id17746 . -1) (undo-tree-id17747 . -1) (undo-tree-id17748 . -1) (undo-tree-id17749 . -1) (undo-tree-id17750 . -1) (undo-tree-id17751 . -1) (undo-tree-id17752 . -1) (undo-tree-id17753 . -1) (undo-tree-id17754 . -1) (undo-tree-id17755 . -1) (undo-tree-id17756 . -1) (undo-tree-id17757 . -1) (undo-tree-id17758 . -1) (undo-tree-id17759 . -1) (undo-tree-id17760 . -1) (undo-tree-id17761 . -1) (undo-tree-id17762 . -1) (undo-tree-id17763 . -1) (undo-tree-id17764 . -1) (undo-tree-id17765 . -1) (undo-tree-id17766 . -1) (undo-tree-id17767 . -1) (undo-tree-id17768 . -1) (undo-tree-id17769 . -1) (undo-tree-id17770 . -1) (undo-tree-id17771 . -1) (undo-tree-id17772 . -1) (undo-tree-id17773 . -1) (undo-tree-id17774 . -1) (undo-tree-id17775 . -1) (undo-tree-id17776 . -1) (undo-tree-id17777 . -1) (undo-tree-id17778 . -1) (undo-tree-id17779 . -1) (undo-tree-id17780 . -1) (undo-tree-id17781 . -1) (undo-tree-id17782 . -1) (undo-tree-id17783 . -1) (undo-tree-id17784 . -1) (undo-tree-id17785 . -1) (undo-tree-id17786 . -1) (undo-tree-id17787 . -1) (undo-tree-id17788 . -1) (undo-tree-id17789 . -1) (undo-tree-id17790 . -1) (undo-tree-id17791 . -1) (undo-tree-id17792 . -1) (undo-tree-id17793 . -1) (undo-tree-id17794 . -1) (undo-tree-id17795 . -1) (undo-tree-id17796 . -1) (undo-tree-id17797 . -1) (undo-tree-id17798 . -1) (undo-tree-id17799 . -1) (undo-tree-id17800 . -1) (undo-tree-id17801 . -1) (undo-tree-id17802 . -1) (undo-tree-id17803 . -1) (undo-tree-id17804 . -1) (undo-tree-id17805 . -1) (undo-tree-id17806 . -1) (undo-tree-id17807 . -1) (undo-tree-id17808 . -1) (undo-tree-id17809 . -1) (undo-tree-id17810 . -1) (undo-tree-id17811 . -1) (undo-tree-id17812 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -2586) (undo-tree-id17813 . -1) (undo-tree-id17814 . -1) (undo-tree-id17815 . -1) (undo-tree-id17816 . -1) (undo-tree-id17817 . -1) (undo-tree-id17818 . -1) (undo-tree-id17819 . -1) (undo-tree-id17820 . -1) (undo-tree-id17821 . -1) (undo-tree-id17822 . -1) (undo-tree-id17823 . -1) (undo-tree-id17824 . -1) (undo-tree-id17825 . -1) (undo-tree-id17826 . -1) (undo-tree-id17827 . -1) (undo-tree-id17828 . -1) (undo-tree-id17829 . -1) (undo-tree-id17830 . -1) (undo-tree-id17831 . -1) (undo-tree-id17832 . -1) (undo-tree-id17833 . -1) (undo-tree-id17834 . -1) (undo-tree-id17835 . -1) (undo-tree-id17836 . -1) (undo-tree-id17837 . -1) (undo-tree-id17838 . -1) (undo-tree-id17839 . -1) (undo-tree-id17840 . -1) (undo-tree-id17841 . -1) (undo-tree-id17842 . -1) (undo-tree-id17843 . -1) (undo-tree-id17844 . -1) (undo-tree-id17845 . -1) (undo-tree-id17846 . -1) (undo-tree-id17847 . -1) (undo-tree-id17848 . -1) (undo-tree-id17849 . -1) (undo-tree-id17850 . -1) (undo-tree-id17851 . -1) (undo-tree-id17852 . -1) (undo-tree-id17853 . -1) (undo-tree-id17854 . -1) (undo-tree-id17855 . -1) (undo-tree-id17856 . -1) (undo-tree-id17857 . -1) (undo-tree-id17858 . -1) (undo-tree-id17859 . -1) (undo-tree-id17860 . -1) (undo-tree-id17861 . -1) (undo-tree-id17862 . -1) (undo-tree-id17863 . -1) (undo-tree-id17864 . -1) (undo-tree-id17865 . -1) (undo-tree-id17866 . -1) (undo-tree-id17867 . -1) (undo-tree-id17868 . -1) (undo-tree-id17869 . -1) (undo-tree-id17870 . -1) (undo-tree-id17871 . -1) (undo-tree-id17872 . -1) (undo-tree-id17873 . -1) (undo-tree-id17874 . -1) (undo-tree-id17875 . -1) (undo-tree-id17876 . -1) (undo-tree-id17877 . -1) (undo-tree-id17878 . -1) (undo-tree-id17879 . -1) (undo-tree-id17880 . -1) (undo-tree-id17881 . -1) (undo-tree-id17882 . -1) (undo-tree-id17883 . -1) (undo-tree-id17884 . -1) (undo-tree-id17885 . -1) (undo-tree-id17886 . -1) (undo-tree-id17887 . -1) (undo-tree-id17888 . -1) (undo-tree-id17889 . -1) (undo-tree-id17890 . -1) (undo-tree-id17891 . -1) (undo-tree-id17892 . -1) (undo-tree-id17893 . -1) (undo-tree-id17894 . -1) (undo-tree-id17895 . -1) (undo-tree-id17896 . -1) (undo-tree-id17897 . -1) (undo-tree-id17898 . -1) (undo-tree-id17899 . -1) (undo-tree-id17900 . -1) (undo-tree-id17901 . -1) (undo-tree-id17902 . -1) (undo-tree-id17903 . -1) (undo-tree-id17904 . -1) (undo-tree-id17905 . -1) (undo-tree-id17906 . -1) (undo-tree-id17907 . -1) (undo-tree-id17908 . -1) (undo-tree-id17909 . -1) (undo-tree-id17910 . -1) (undo-tree-id17911 . -1) (undo-tree-id17912 . -1) (undo-tree-id17913 . -1) (undo-tree-id17914 . -1) (undo-tree-id17915 . -1) (undo-tree-id17916 . -1) (undo-tree-id17917 . -1) (undo-tree-id17918 . -1) (undo-tree-id17919 . -1) (undo-tree-id17920 . -1) (undo-tree-id17921 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2587) (undo-tree-id17922 . -1) (undo-tree-id17923 . -1) (undo-tree-id17924 . -1) (undo-tree-id17925 . -1) (undo-tree-id17926 . -1) (undo-tree-id17927 . -1) (undo-tree-id17928 . -1) (undo-tree-id17929 . -1) (undo-tree-id17930 . -1) (undo-tree-id17931 . -1) (undo-tree-id17932 . -1) (undo-tree-id17933 . -1) (undo-tree-id17934 . -1) (undo-tree-id17935 . -1) (undo-tree-id17936 . -1) (undo-tree-id17937 . -1) (undo-tree-id17938 . -1) (undo-tree-id17939 . -1) (undo-tree-id17940 . -1) (undo-tree-id17941 . -1) (undo-tree-id17942 . -1) (undo-tree-id17943 . -1) (undo-tree-id17944 . -1) (undo-tree-id17945 . -1) (undo-tree-id17946 . -1) (undo-tree-id17947 . -1) (undo-tree-id17948 . -1) (undo-tree-id17949 . -1) (undo-tree-id17950 . -1) (undo-tree-id17951 . -1) (undo-tree-id17952 . -1) (undo-tree-id17953 . -1) (undo-tree-id17954 . -1) (undo-tree-id17955 . -1) (undo-tree-id17956 . -1) (undo-tree-id17957 . -1) (undo-tree-id17958 . -1) (undo-tree-id17959 . -1) (undo-tree-id17960 . -1) (undo-tree-id17961 . -1) (undo-tree-id17962 . -1) (undo-tree-id17963 . -1) (undo-tree-id17964 . -1) (undo-tree-id17965 . -1) (undo-tree-id17966 . -1) (undo-tree-id17967 . -1) (undo-tree-id17968 . -1) (undo-tree-id17969 . -1) (undo-tree-id17970 . -1) (undo-tree-id17971 . -1) (undo-tree-id17972 . -1) (undo-tree-id17973 . -1) (undo-tree-id17974 . -1) (undo-tree-id17975 . -1) (undo-tree-id17976 . -1) (undo-tree-id17977 . -1) (undo-tree-id17978 . -1) (undo-tree-id17979 . -1) (undo-tree-id17980 . -1) (undo-tree-id17981 . -1) (undo-tree-id17982 . -1) (undo-tree-id17983 . -1) (undo-tree-id17984 . -1) (undo-tree-id17985 . -1) (undo-tree-id17986 . -1) (undo-tree-id17987 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2588) (undo-tree-id17988 . -1) (undo-tree-id17989 . -1) (undo-tree-id17990 . -1) (undo-tree-id17991 . -1) (undo-tree-id17992 . -1) (undo-tree-id17993 . -1) (undo-tree-id17994 . -1) (undo-tree-id17995 . -1) (undo-tree-id17996 . -1) (undo-tree-id17997 . -1) (undo-tree-id17998 . -1) (undo-tree-id17999 . -1) (undo-tree-id18000 . -1) (undo-tree-id18001 . -1) 2589 (2575 . 2589) (2557 . 2575) (2536 . 2557) (t 26156 46665 613717 984000)) nil (26156 46697 712796 594000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1996) (undo-tree-id18002 . -1) (undo-tree-id18003 . -1) (undo-tree-id18004 . -1) (undo-tree-id18005 . -1) (undo-tree-id18006 . -1) (undo-tree-id18007 . -1) (undo-tree-id18008 . -1) (undo-tree-id18009 . -1) (undo-tree-id18010 . -1) (undo-tree-id18011 . -1) (undo-tree-id18012 . -1) (undo-tree-id18013 . -1) (undo-tree-id18014 . -1) (undo-tree-id18015 . -1) (undo-tree-id18016 . -1) (undo-tree-id18017 . -1) (undo-tree-id18018 . -1) (undo-tree-id18019 . -1) (undo-tree-id18020 . -1) (undo-tree-id18021 . -1) (undo-tree-id18022 . -1) (undo-tree-id18023 . -1) (undo-tree-id18024 . -1) (undo-tree-id18025 . -1) (undo-tree-id18026 . -1) (undo-tree-id18027 . -1) (undo-tree-id18028 . -1) (undo-tree-id18029 . -1) (undo-tree-id18030 . -1) (undo-tree-id18031 . -1) (undo-tree-id18032 . -1) (undo-tree-id18033 . -1) (undo-tree-id18034 . -1) (undo-tree-id18035 . -1) (undo-tree-id18036 . -1) (undo-tree-id18037 . -1) (undo-tree-id18038 . -1) (undo-tree-id18039 . -1) (undo-tree-id18040 . -1) (undo-tree-id18041 . -1) (undo-tree-id18042 . -1) (undo-tree-id18043 . -1) (undo-tree-id18044 . -1) (undo-tree-id18045 . -1) (undo-tree-id18046 . -1) (undo-tree-id18047 . -1) (undo-tree-id18048 . -1) (undo-tree-id18049 . -1) (undo-tree-id18050 . -1) (undo-tree-id18051 . -1) (undo-tree-id18052 . -1) (undo-tree-id18053 . -1) (undo-tree-id18054 . -1) (undo-tree-id18055 . -1) (undo-tree-id18056 . -1) (undo-tree-id18057 . -1) (undo-tree-id18058 . -1) (undo-tree-id18059 . -1) (undo-tree-id18060 . -1) (undo-tree-id18061 . -1) (undo-tree-id18062 . -1) (undo-tree-id18063 . -1) (undo-tree-id18064 . -1) (undo-tree-id18065 . -1) (undo-tree-id18066 . -1) (undo-tree-id18067 . -1) (undo-tree-id18068 . -1) (undo-tree-id18069 . -1) (#(" " 0 1 (fontified t)) . -1997) (undo-tree-id18070 . -1) (undo-tree-id18071 . -1) (undo-tree-id18072 . -1) (undo-tree-id18073 . -1) (undo-tree-id18074 . -1) (undo-tree-id18075 . -1) (undo-tree-id18076 . -1) (undo-tree-id18077 . -1) (undo-tree-id18078 . -1) (undo-tree-id18079 . -1) (undo-tree-id18080 . -1) (undo-tree-id18081 . -1) (undo-tree-id18082 . -1) (undo-tree-id18083 . -1) (undo-tree-id18084 . -1) (undo-tree-id18085 . -1) (undo-tree-id18086 . -1) (undo-tree-id18087 . -1) (undo-tree-id18088 . -1) (undo-tree-id18089 . -1) (undo-tree-id18090 . -1) (undo-tree-id18091 . -1) (undo-tree-id18092 . -1) (undo-tree-id18093 . -1) (undo-tree-id18094 . -1) (undo-tree-id18095 . -1) (undo-tree-id18096 . -1) (undo-tree-id18097 . -1) (undo-tree-id18098 . -1) (undo-tree-id18099 . -1) (undo-tree-id18100 . -1) (undo-tree-id18101 . -1) (undo-tree-id18102 . -1) (undo-tree-id18103 . -1) (undo-tree-id18104 . -1) (undo-tree-id18105 . -1) (undo-tree-id18106 . -1) (undo-tree-id18107 . -1) (undo-tree-id18108 . -1) (undo-tree-id18109 . -1) (undo-tree-id18110 . -1) (undo-tree-id18111 . -1) (undo-tree-id18112 . -1) (undo-tree-id18113 . -1) (undo-tree-id18114 . -1) (undo-tree-id18115 . -1) (undo-tree-id18116 . -1) (undo-tree-id18117 . -1) (undo-tree-id18118 . -1) (undo-tree-id18119 . -1) (undo-tree-id18120 . -1) (undo-tree-id18121 . -1) (undo-tree-id18122 . -1) (undo-tree-id18123 . -1) (undo-tree-id18124 . -1) (undo-tree-id18125 . -1) (undo-tree-id18126 . -1) (undo-tree-id18127 . -1) 1998 (1996 . 1998) (t 26156 46697 769832 374000)) nil (26156 46707 24393 300000) 0 nil])
([nil nil ((2008 . 2012) (#("bo" 0 2 (fontified nil)) . 2008) (2008 . 2010) (#("bool" 0 4 (fontified nil)) . -2008) (2008 . 2012) (#("bo" 0 2 (fontified t)) . -2008) (undo-tree-id18128 . -2) (undo-tree-id18129 . -2) (undo-tree-id18130 . -1) (undo-tree-id18131 . -1) (undo-tree-id18132 . -1) (undo-tree-id18133 . -1) (undo-tree-id18134 . -1) (undo-tree-id18135 . -1) (undo-tree-id18136 . -1) (undo-tree-id18137 . -1) (undo-tree-id18138 . -1) (undo-tree-id18139 . -1) (undo-tree-id18140 . -2) (undo-tree-id18141 . -2) (undo-tree-id18142 . -2) (undo-tree-id18143 . -2) (undo-tree-id18144 . -2) (undo-tree-id18145 . -2) (undo-tree-id18146 . -2) (undo-tree-id18147 . -2) (undo-tree-id18148 . -2) (undo-tree-id18149 . -2) (undo-tree-id18150 . -2) (undo-tree-id18151 . -2) (undo-tree-id18152 . -2) (undo-tree-id18153 . -2) (undo-tree-id18154 . -2) (undo-tree-id18155 . -2) (undo-tree-id18156 . -2) (undo-tree-id18157 . -2) (undo-tree-id18158 . -2) (undo-tree-id18159 . -2) (undo-tree-id18160 . -2) (undo-tree-id18161 . -2) (undo-tree-id18162 . -2) (undo-tree-id18163 . -2) (undo-tree-id18164 . -2) (undo-tree-id18165 . -2) (undo-tree-id18166 . -2) (undo-tree-id18167 . -2) (undo-tree-id18168 . -2) (undo-tree-id18169 . -2) (undo-tree-id18170 . -2) (undo-tree-id18171 . -2) (undo-tree-id18172 . -2) (undo-tree-id18173 . -2) (undo-tree-id18174 . -2) (undo-tree-id18175 . -2) (undo-tree-id18176 . -2) (undo-tree-id18177 . -2) (undo-tree-id18178 . -2) (undo-tree-id18179 . -2) (undo-tree-id18180 . -2) (undo-tree-id18181 . -2) (undo-tree-id18182 . -2) (undo-tree-id18183 . -2) (undo-tree-id18184 . -2) (undo-tree-id18185 . -2) (undo-tree-id18186 . -2) (undo-tree-id18187 . -2) (undo-tree-id18188 . -2) (undo-tree-id18189 . -2) (undo-tree-id18190 . -2) (undo-tree-id18191 . -2) (undo-tree-id18192 . -2) (undo-tree-id18193 . -2) (undo-tree-id18194 . -2) (undo-tree-id18195 . -2) (undo-tree-id18196 . -2) (undo-tree-id18197 . -2) (undo-tree-id18198 . -2) (undo-tree-id18199 . -2) (undo-tree-id18200 . -2) (undo-tree-id18201 . -2) (undo-tree-id18202 . -2) (undo-tree-id18203 . -2) (undo-tree-id18204 . -2) (undo-tree-id18205 . -2) (undo-tree-id18206 . -2) (undo-tree-id18207 . -2) (undo-tree-id18208 . -2) 2010 (1996 . 2010) (t 26156 46707 109871 332000)) nil (26156 46713 258410 197000) 0 nil])
([nil nil ((#("			" 0 3 (fontified t)) . -2530) (undo-tree-id18329 . -3) (undo-tree-id18330 . -3) (undo-tree-id18331 . -3) (undo-tree-id18332 . -3) (undo-tree-id18333 . -3) (undo-tree-id18334 . -3) (undo-tree-id18335 . -3) (undo-tree-id18336 . -3) (undo-tree-id18337 . -3) (undo-tree-id18338 . -3) (undo-tree-id18339 . -3) (undo-tree-id18340 . -3) (undo-tree-id18341 . -3) 2533 (2530 . 2533) (#("			" 0 3 (fontified nil)) . 2529) (undo-tree-id18342 . -3) (undo-tree-id18343 . -3) (undo-tree-id18344 . -3) (undo-tree-id18345 . -3) (undo-tree-id18346 . -3) (undo-tree-id18347 . -3) (undo-tree-id18348 . -3) (undo-tree-id18349 . -3) (undo-tree-id18350 . -3) (undo-tree-id18351 . -3) (undo-tree-id18352 . -3) (undo-tree-id18353 . -3) (undo-tree-id18354 . -3) (2528 . 2533) (t 26156 46713 349898 756000)) nil (26156 46724 84104 165000) 0 nil])
([nil nil ((#("			" 0 3 (fontified t)) . -2604) (undo-tree-id18314 . -3) (undo-tree-id18315 . -3) (undo-tree-id18316 . -3) (undo-tree-id18317 . -3) (undo-tree-id18318 . -3) (undo-tree-id18319 . -3) (undo-tree-id18320 . -3) (undo-tree-id18321 . -3) (undo-tree-id18322 . -3) (undo-tree-id18323 . -3) (undo-tree-id18324 . -3) (undo-tree-id18325 . -3) (undo-tree-id18326 . -3) 2607 (2604 . 2607) (#("			" 0 3 (fontified nil)) . 2603) (undo-tree-id18327 . -3) (undo-tree-id18328 . -3) (2602 . 2607)) nil (26156 46724 84049 898000) 0 nil])
([nil nil ((2620 . 2627) (2621 . 2624) (#("			    " 0 7 (fontified nil face (rainbow-delimiters-depth-7-face))) . 2620) (2620 . 2627) (2619 . 2621) (2617 . 2620) (2609 . 2617) (#("to" 0 2 (fontified nil)) . 2609) (2609 . 2611) (#("tolerate" 0 8 (fontified nil)) . -2609) (2609 . 2617) (#("to" 0 2 (fontified t)) . -2609) (undo-tree-id18209 . -2) (undo-tree-id18210 . -2) (undo-tree-id18211 . -1) (undo-tree-id18212 . -1) (undo-tree-id18213 . -1) (undo-tree-id18214 . -1) (undo-tree-id18215 . -1) (undo-tree-id18216 . -1) (undo-tree-id18217 . -1) (undo-tree-id18218 . -1) (undo-tree-id18219 . -1) (undo-tree-id18220 . -1) (undo-tree-id18221 . -2) (undo-tree-id18222 . -2) (undo-tree-id18223 . -2) (undo-tree-id18224 . -2) (undo-tree-id18225 . -2) (undo-tree-id18226 . -2) (undo-tree-id18227 . -2) (undo-tree-id18228 . -2) (undo-tree-id18229 . -2) (undo-tree-id18230 . -2) (undo-tree-id18231 . -2) (undo-tree-id18232 . -2) (undo-tree-id18233 . -2) (undo-tree-id18234 . -2) (undo-tree-id18235 . -2) (undo-tree-id18236 . -2) (undo-tree-id18237 . -2) (undo-tree-id18238 . -2) (undo-tree-id18239 . -2) (undo-tree-id18240 . -2) (undo-tree-id18241 . -2) (undo-tree-id18242 . -2) (undo-tree-id18243 . -2) (undo-tree-id18244 . -2) (undo-tree-id18245 . -2) (undo-tree-id18246 . -2) (undo-tree-id18247 . -2) (undo-tree-id18248 . -2) (undo-tree-id18249 . -2) (undo-tree-id18250 . -2) (undo-tree-id18251 . -2) (undo-tree-id18252 . -2) (undo-tree-id18253 . -2) (undo-tree-id18254 . -2) (undo-tree-id18255 . -2) (undo-tree-id18256 . -2) (undo-tree-id18257 . -2) (undo-tree-id18258 . -2) (undo-tree-id18259 . -2) (undo-tree-id18260 . -2) (undo-tree-id18261 . -2) (undo-tree-id18262 . -2) (undo-tree-id18263 . -2) (undo-tree-id18264 . -2) (undo-tree-id18265 . -2) (undo-tree-id18266 . -2) (undo-tree-id18267 . -2) (undo-tree-id18268 . -2) (undo-tree-id18269 . -2) (undo-tree-id18270 . -2) (undo-tree-id18271 . -2) (undo-tree-id18272 . -2) (undo-tree-id18273 . -2) (undo-tree-id18274 . -2) (undo-tree-id18275 . -2) (undo-tree-id18276 . -2) (undo-tree-id18277 . -2) (undo-tree-id18278 . -2) (undo-tree-id18279 . -2) (undo-tree-id18280 . -2) (undo-tree-id18281 . -2) (undo-tree-id18282 . -2) (undo-tree-id18283 . -2) (undo-tree-id18284 . -2) (undo-tree-id18285 . -2) (undo-tree-id18286 . -2) (undo-tree-id18287 . -2) (undo-tree-id18288 . -2) (undo-tree-id18289 . -2) (undo-tree-id18290 . -2) (undo-tree-id18291 . -2) (undo-tree-id18292 . -2) (undo-tree-id18293 . -2) (undo-tree-id18294 . -2) (undo-tree-id18295 . -2) (undo-tree-id18296 . -2) (undo-tree-id18297 . -2) (undo-tree-id18298 . -2) (undo-tree-id18299 . -2) (undo-tree-id18300 . -2) (undo-tree-id18301 . -2) (undo-tree-id18302 . -2) (undo-tree-id18303 . -2) (undo-tree-id18304 . -2) (undo-tree-id18305 . -2) (undo-tree-id18306 . -2) (undo-tree-id18307 . -2) (undo-tree-id18308 . -2) (undo-tree-id18309 . -2) (undo-tree-id18310 . -2) (undo-tree-id18311 . -2) (undo-tree-id18312 . -2) (undo-tree-id18313 . -2) 2611 (2606 . 2611) (2603 . 2606)) nil (26156 46724 83940 801000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2530) (undo-tree-id18444 . -1) (t 26156 46724 137948 746000)) nil (26156 46731 437966 115000) 0 nil])
([nil nil ((#("			// use tolerance
" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face)) . 2530) (undo-tree-id18432 . -19) (undo-tree-id18433 . -6) (undo-tree-id18434 . -6) (undo-tree-id18435 . -6) (undo-tree-id18436 . -6) (undo-tree-id18437 . -6) (undo-tree-id18438 . -6) (undo-tree-id18439 . -6) (undo-tree-id18440 . -6) (undo-tree-id18441 . -6) (undo-tree-id18442 . -19) (undo-tree-id18443 . -20)) nil (26156 46731 437960 353000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2529) (undo-tree-id18355 . -1) (undo-tree-id18356 . -1) (undo-tree-id18357 . -1) (undo-tree-id18358 . -1) (undo-tree-id18359 . -1) (undo-tree-id18360 . -1) (undo-tree-id18361 . -1) (undo-tree-id18362 . -1) (undo-tree-id18363 . -1) (undo-tree-id18364 . -1) (undo-tree-id18365 . -1) (undo-tree-id18366 . -1) (undo-tree-id18367 . -1) (undo-tree-id18368 . -1) (undo-tree-id18369 . -1) (undo-tree-id18370 . -1) (undo-tree-id18371 . -1) (undo-tree-id18372 . -1) (undo-tree-id18373 . -1) (undo-tree-id18374 . -1) (undo-tree-id18375 . -1) (undo-tree-id18376 . -1) (undo-tree-id18377 . -1) (undo-tree-id18378 . -1) (undo-tree-id18379 . -1) (undo-tree-id18380 . -1) (undo-tree-id18381 . -1) (undo-tree-id18382 . -1) (undo-tree-id18383 . -1) (undo-tree-id18384 . -1) (undo-tree-id18385 . -1) (undo-tree-id18386 . -1) (undo-tree-id18387 . -1) (undo-tree-id18388 . -1) (undo-tree-id18389 . -1) (undo-tree-id18390 . -1) (undo-tree-id18391 . -1) (undo-tree-id18392 . -1) (undo-tree-id18393 . -1) (undo-tree-id18394 . -1) (undo-tree-id18395 . -1) (undo-tree-id18396 . -1) (undo-tree-id18397 . -1) (undo-tree-id18398 . -1) (undo-tree-id18399 . -1) (undo-tree-id18400 . -1) (undo-tree-id18401 . -1) (undo-tree-id18402 . -1) (undo-tree-id18403 . -1) (undo-tree-id18404 . -1) (undo-tree-id18405 . -1) (undo-tree-id18406 . -1) (undo-tree-id18407 . -1) (undo-tree-id18408 . -1) (undo-tree-id18409 . -1) (undo-tree-id18410 . -1) (undo-tree-id18411 . -1) (undo-tree-id18412 . -1) (undo-tree-id18413 . -1) (undo-tree-id18414 . -1) (undo-tree-id18415 . -1) (undo-tree-id18416 . -1) (undo-tree-id18417 . -1) (undo-tree-id18418 . -1) (undo-tree-id18419 . -1) (undo-tree-id18420 . -1) (undo-tree-id18421 . -1) (undo-tree-id18422 . -1) (undo-tree-id18423 . -1) (undo-tree-id18424 . -1) (undo-tree-id18425 . -1) (undo-tree-id18426 . -1) (undo-tree-id18427 . -1) (undo-tree-id18428 . -1) (undo-tree-id18429 . -1) (undo-tree-id18430 . -1) (undo-tree-id18431 . -1)) nil (26156 46731 437926 908000) 0 nil])
([nil nil ((2584 . 2596) (2580 . 2584)) nil (26156 46731 437673 921000) 0 nil])
([nil nil ((2618 . 2625) (#("			    " 0 7 (fontified nil)) . 2617) (undo-tree-id18512 . -7) (undo-tree-id18513 . -7) (undo-tree-id18514 . -7) (undo-tree-id18515 . -7) (undo-tree-id18516 . -7) (undo-tree-id18517 . -7) (undo-tree-id18518 . -7) (undo-tree-id18519 . -7) (undo-tree-id18520 . -7) (undo-tree-id18521 . -7) (undo-tree-id18522 . -7) (undo-tree-id18523 . -7) (undo-tree-id18524 . -7) (2617 . 2625) (#("			    " 0 7 (fontified nil)) . 2616) (undo-tree-id18525 . -7) (undo-tree-id18526 . -7) (undo-tree-id18527 . -7) (undo-tree-id18528 . -7) (undo-tree-id18529 . -7) (undo-tree-id18530 . -7) (undo-tree-id18531 . -7) (undo-tree-id18532 . -7) (undo-tree-id18533 . -7) (undo-tree-id18534 . -7) (undo-tree-id18535 . -7) (undo-tree-id18536 . -7) (undo-tree-id18537 . -7) (2616 . 2624) (#("			    " 0 7 (fontified nil)) . 2615) (undo-tree-id18538 . -7) (undo-tree-id18539 . -7) (undo-tree-id18540 . -7) (undo-tree-id18541 . -7) (undo-tree-id18542 . -7) (undo-tree-id18543 . -7) (undo-tree-id18544 . -7) (undo-tree-id18545 . -7) (undo-tree-id18546 . -7) (undo-tree-id18547 . -7) (undo-tree-id18548 . -7) (undo-tree-id18549 . -7) (undo-tree-id18550 . -7) (2615 . 2623) (#("			    " 0 7 (fontified nil)) . 2614) (undo-tree-id18551 . -7) (undo-tree-id18552 . -7) (undo-tree-id18553 . -7) (undo-tree-id18554 . -7) (undo-tree-id18555 . -7) (undo-tree-id18556 . -7) (undo-tree-id18557 . -7) (undo-tree-id18558 . -7) (undo-tree-id18559 . -7) (undo-tree-id18560 . -7) (undo-tree-id18561 . -7) (undo-tree-id18562 . -7) (undo-tree-id18563 . -7) (undo-tree-id18564 . -6) (undo-tree-id18565 . -6) (undo-tree-id18566 . -6) (undo-tree-id18567 . -6) (undo-tree-id18568 . -6) (undo-tree-id18569 . -6) (undo-tree-id18570 . -6) (undo-tree-id18571 . -6) (undo-tree-id18572 . -6) (undo-tree-id18573 . -6) (undo-tree-id18574 . -6) (undo-tree-id18575 . -6) (undo-tree-id18576 . -6) (undo-tree-id18577 . -6) (undo-tree-id18578 . -6) (undo-tree-id18579 . -6) (undo-tree-id18580 . -6) (undo-tree-id18581 . -6) (undo-tree-id18582 . -6) (undo-tree-id18583 . -6) (undo-tree-id18584 . -6) (undo-tree-id18585 . -6) (undo-tree-id18586 . -6) (undo-tree-id18587 . -6) (undo-tree-id18588 . -6) (undo-tree-id18589 . -6) (undo-tree-id18590 . -6) (undo-tree-id18591 . -6) (undo-tree-id18592 . -6) (undo-tree-id18593 . -6) (undo-tree-id18594 . -6) (undo-tree-id18595 . -6) (undo-tree-id18596 . -6) (undo-tree-id18597 . -6) (undo-tree-id18598 . -6) (undo-tree-id18599 . -6) (undo-tree-id18600 . -6) (undo-tree-id18601 . -6) (undo-tree-id18602 . -6) (undo-tree-id18603 . -6) (undo-tree-id18604 . -6) (undo-tree-id18605 . -6) (undo-tree-id18606 . -6) (undo-tree-id18607 . -6) (undo-tree-id18608 . -7) (undo-tree-id18609 . -7) (undo-tree-id18610 . -7) (undo-tree-id18611 . -7) (undo-tree-id18612 . -7) (undo-tree-id18613 . -7) (undo-tree-id18614 . -7) (undo-tree-id18615 . -7) (undo-tree-id18616 . -7) (undo-tree-id18617 . -7) (undo-tree-id18618 . -7) (undo-tree-id18619 . -7) (undo-tree-id18620 . -7) (undo-tree-id18621 . -7) (undo-tree-id18622 . -7) (undo-tree-id18623 . -7) (undo-tree-id18624 . -7) (undo-tree-id18625 . -7) (undo-tree-id18626 . -7) (undo-tree-id18627 . -7) (undo-tree-id18628 . -7) (undo-tree-id18629 . -7) (undo-tree-id18630 . -7) (2621 . 2622) (t 26156 46731 525984 848000)) nil (26156 46781 907501 898000) 0 nil])
([nil nil ((2616 . 2623)) nil (26156 46781 907266 425000) 0 nil])
([nil nil ((2615 . 2622)) nil (26156 46781 907264 607000) 0 nil])
([nil nil ((2644 . 2651) (#("			    " 0 7 (fontified nil)) . 2643) (undo-tree-id18451 . -7) (undo-tree-id18452 . -7) (undo-tree-id18453 . -7) (undo-tree-id18454 . -7) (undo-tree-id18455 . -7) (undo-tree-id18456 . -7) (undo-tree-id18457 . -7) (undo-tree-id18458 . -7) (undo-tree-id18459 . -7) (undo-tree-id18460 . -7) (undo-tree-id18461 . -7) (undo-tree-id18462 . -7) (undo-tree-id18463 . -7) (2642 . 2651) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2642) (undo-tree-id18464 . -1) (undo-tree-id18465 . -1) (undo-tree-id18466 . -1) (undo-tree-id18467 . -1) (undo-tree-id18468 . -1) (undo-tree-id18469 . -1) (undo-tree-id18470 . -1) (undo-tree-id18471 . -1) (undo-tree-id18472 . -1) (undo-tree-id18473 . -1) (undo-tree-id18474 . -1) (undo-tree-id18475 . -1) (undo-tree-id18476 . -1) (undo-tree-id18477 . -1) 2643 (2641 . 2643) (2635 . 2641) (#("b" 0 1 (fontified t face font-lock-comment-face)) . -2635) (undo-tree-id18478 . -1) (undo-tree-id18479 . -1) (undo-tree-id18480 . -1) (undo-tree-id18481 . -1) (undo-tree-id18482 . -1) (undo-tree-id18483 . -1) (undo-tree-id18484 . -1) (undo-tree-id18485 . -1) (undo-tree-id18486 . -1) (undo-tree-id18487 . -1) (undo-tree-id18488 . -1) (undo-tree-id18489 . -1) (undo-tree-id18490 . -1) (undo-tree-id18491 . -1) (undo-tree-id18492 . -1) (undo-tree-id18493 . -1) (undo-tree-id18494 . -1) (undo-tree-id18495 . -1) (undo-tree-id18496 . -1) (undo-tree-id18497 . -1) (undo-tree-id18498 . -1) (undo-tree-id18499 . -1) (undo-tree-id18500 . -1) (undo-tree-id18501 . -1) (undo-tree-id18502 . -1) (undo-tree-id18503 . -1) (undo-tree-id18504 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2636) (undo-tree-id18505 . -1) (undo-tree-id18506 . -1) (undo-tree-id18507 . -1) (undo-tree-id18508 . -1) (undo-tree-id18509 . -1) (undo-tree-id18510 . -1) (undo-tree-id18511 . -1) 2637 (2621 . 2637) (2614 . 2621)) nil (26156 46781 907255 313000) 0 nil])
([nil nil ((2655 . 2660) (2653 . 2655) (2650 . 2653) (2643 . 2650)) nil (26156 46781 907136 711000) 0 nil])
([nil nil ((2650 . 2654)) nil (26156 46781 907134 110000) 0 nil])
([nil nil ((2672 . 2674) (2669 . 2672) (#("ne" 0 2 (fontified nil)) . 2669) (2669 . 2671) (#("new" 0 3 (fontified nil)) . -2669) (2669 . 2672) (#("ne" 0 2 (fontified t)) . -2669) (undo-tree-id18447 . -2) (undo-tree-id18448 . -2) 2671 (2667 . 2671) (2664 . 2667) (#("Vec" 0 3 (fontified nil)) . 2664) (2664 . 2667) (#("Vec" 0 3 (fontified t face font-lock-type-face)) . -2664) (undo-tree-id18449 . -3) (undo-tree-id18450 . -3) 2667 (2664 . 2667)) nil (26156 46781 907127 991000) 0 nil])
([nil nil ((2674 . 2675)) nil (26156 46781 907112 92000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2682 . 2683) (#("
" 0 1 (fontified nil)) . -2708) (2675 . 2709) 2674) nil (26156 46781 907107 872000) 0 nil])
([nil nil ((2693 . 2694) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . 2693) (undo-tree-id18445 . -1) (undo-tree-id18446 . -1)) nil (26156 46781 907094 851000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2669) (undo-tree-id18857 . -1) (undo-tree-id18858 . -1) (undo-tree-id18859 . -1) (undo-tree-id18860 . -1) (undo-tree-id18861 . -1) (undo-tree-id18862 . -1) (undo-tree-id18863 . -1) (undo-tree-id18864 . -1) (undo-tree-id18865 . -1) (undo-tree-id18866 . -1) (undo-tree-id18867 . -1) (undo-tree-id18868 . -1) (undo-tree-id18869 . -1) (undo-tree-id18870 . -1) (undo-tree-id18871 . -1) (undo-tree-id18872 . -1) (undo-tree-id18873 . -1) (undo-tree-id18874 . -1) (undo-tree-id18875 . -1) (undo-tree-id18876 . -1) (undo-tree-id18877 . -1) (undo-tree-id18878 . -1) (undo-tree-id18879 . -1) (undo-tree-id18880 . -1) (undo-tree-id18881 . -1) (undo-tree-id18882 . -1) (undo-tree-id18883 . -1) (undo-tree-id18884 . -1) (undo-tree-id18885 . -1) (undo-tree-id18886 . -1) (undo-tree-id18887 . -1) (undo-tree-id18888 . -1) (undo-tree-id18889 . -1) (undo-tree-id18890 . -1) (undo-tree-id18891 . -1) (undo-tree-id18892 . -1) (undo-tree-id18893 . -1) (undo-tree-id18894 . -1) (undo-tree-id18895 . -1) (undo-tree-id18896 . -1) (undo-tree-id18897 . -1) (undo-tree-id18898 . -1) (undo-tree-id18899 . -1) (undo-tree-id18900 . -1) (undo-tree-id18901 . -1) (undo-tree-id18902 . -1) (undo-tree-id18903 . -1) (undo-tree-id18904 . -1) (undo-tree-id18905 . -1) (undo-tree-id18906 . -1) (undo-tree-id18907 . -1) (undo-tree-id18908 . -1) (undo-tree-id18909 . -1) (undo-tree-id18910 . -1) (undo-tree-id18911 . -1) (undo-tree-id18912 . -1) (undo-tree-id18913 . -1) (undo-tree-id18914 . -1) (undo-tree-id18915 . -1) (undo-tree-id18916 . -1) (undo-tree-id18917 . -1) (undo-tree-id18918 . -1) 2670 (2669 . 2670) (2663 . 2669) (#("V" 0 1 (fontified nil)) . 2663) (2663 . 2664) (#("Vec<_>" 0 6 (fontified nil)) . -2663) (2663 . 2669) (#("V" 0 1 (fontified t face font-lock-type-face)) . -2663) (undo-tree-id18919 . -1) (undo-tree-id18920 . -1) (undo-tree-id18921 . -1) (undo-tree-id18922 . -1) (undo-tree-id18923 . -1) (undo-tree-id18924 . -1) (undo-tree-id18925 . -1) (undo-tree-id18926 . -1) (undo-tree-id18927 . -1) (undo-tree-id18928 . -1) (undo-tree-id18929 . -1) (undo-tree-id18930 . -1) (undo-tree-id18931 . -1) (undo-tree-id18932 . -1) (undo-tree-id18933 . -1) (undo-tree-id18934 . -1) (undo-tree-id18935 . -1) (undo-tree-id18936 . -1) (undo-tree-id18937 . -1) (undo-tree-id18938 . -1) (undo-tree-id18939 . -1) (undo-tree-id18940 . -1) (undo-tree-id18941 . -1) (undo-tree-id18942 . -1) (undo-tree-id18943 . -1) (undo-tree-id18944 . -1) (undo-tree-id18945 . -1) (undo-tree-id18946 . -1) (undo-tree-id18947 . -1) (undo-tree-id18948 . -1) (undo-tree-id18949 . -1) (undo-tree-id18950 . -1) (undo-tree-id18951 . -1) (undo-tree-id18952 . -1) (undo-tree-id18953 . -1) (undo-tree-id18954 . -1) (undo-tree-id18955 . -1) (undo-tree-id18956 . -1) (undo-tree-id18957 . -1) (undo-tree-id18958 . -1) (undo-tree-id18959 . -1) (undo-tree-id18960 . -1) 2664 (2661 . 2664) (t 26156 46781 998270 250000)) nil (26156 46803 627343 308000) 0 nil])
([nil nil ((2667 . 2669) (#("u" 0 1 (fontified nil)) . 2667) (2667 . 2668) (#("u8" 0 2 (fontified nil)) . -2667) (2667 . 2669) (#("u" 0 1 (fontified t)) . -2667) (undo-tree-id18854 . -1) (undo-tree-id18855 . -1) 2668 (2667 . 2668) (#("_" 0 1 (fontified t)) . -2667) (undo-tree-id18856 . -1) 2668) nil (26156 46803 627155 733000) 0 nil])
([nil nil ((2705 . 2711) (#("Ve" 0 2 (fontified nil)) . 2705) (2705 . 2707) (#("Vec<_>" 0 6 (fontified nil)) . -2705) (2705 . 2711) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -2705) (undo-tree-id18772 . -1) (undo-tree-id18773 . -2) (undo-tree-id18774 . -2) (undo-tree-id18775 . -1) (undo-tree-id18776 . -1) (undo-tree-id18777 . -1) (undo-tree-id18778 . -1) (undo-tree-id18779 . -1) (undo-tree-id18780 . -1) (undo-tree-id18781 . -1) (undo-tree-id18782 . -1) (undo-tree-id18783 . -1) (undo-tree-id18784 . -1) (undo-tree-id18785 . -1) (undo-tree-id18786 . -1) (undo-tree-id18787 . -1) (undo-tree-id18788 . -1) (undo-tree-id18789 . -1) (undo-tree-id18790 . -1) (undo-tree-id18791 . -1) (undo-tree-id18792 . -1) (undo-tree-id18793 . -1) (undo-tree-id18794 . -1) (undo-tree-id18795 . -1) (undo-tree-id18796 . -1) (undo-tree-id18797 . -1) (undo-tree-id18798 . -1) (undo-tree-id18799 . -1) (undo-tree-id18800 . -1) (undo-tree-id18801 . -1) (undo-tree-id18802 . -1) (undo-tree-id18803 . -1) (undo-tree-id18804 . -1) (undo-tree-id18805 . -1) (undo-tree-id18806 . -1) (undo-tree-id18807 . -1) (undo-tree-id18808 . -1) (undo-tree-id18809 . -1) (undo-tree-id18810 . -1) (undo-tree-id18811 . -1) (undo-tree-id18812 . -1) (undo-tree-id18813 . -1) (undo-tree-id18814 . -1) (undo-tree-id18815 . -1) (undo-tree-id18816 . -1) (undo-tree-id18817 . -1) (undo-tree-id18818 . -1) (undo-tree-id18819 . -1) (undo-tree-id18820 . -1) (undo-tree-id18821 . -1) (undo-tree-id18822 . -1) (undo-tree-id18823 . -2) (undo-tree-id18824 . -2) (undo-tree-id18825 . -2) (undo-tree-id18826 . -2) (undo-tree-id18827 . -2) (undo-tree-id18828 . -2) (undo-tree-id18829 . -2) (undo-tree-id18830 . -2) (undo-tree-id18831 . -2) (undo-tree-id18832 . -2) (undo-tree-id18833 . -2) (undo-tree-id18834 . -2) (undo-tree-id18835 . -2) (undo-tree-id18836 . -2) (undo-tree-id18837 . -2) (undo-tree-id18838 . -2) (undo-tree-id18839 . -2) (undo-tree-id18840 . -2) (undo-tree-id18841 . -2) (undo-tree-id18842 . -2) (undo-tree-id18843 . -2) (undo-tree-id18844 . -2) (undo-tree-id18845 . -2) (undo-tree-id18846 . -2) (undo-tree-id18847 . -2) (undo-tree-id18848 . -2) (undo-tree-id18849 . -2) (undo-tree-id18850 . -2) (undo-tree-id18851 . -2) (undo-tree-id18852 . -2) (undo-tree-id18853 . -2) 2707 (2703 . 2707)) nil (26156 46803 627137 719000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2709) (undo-tree-id18759 . -1) (undo-tree-id18760 . -1) (undo-tree-id18761 . -1) (undo-tree-id18762 . -1) (undo-tree-id18763 . -1) (undo-tree-id18764 . -1) (undo-tree-id18765 . -1) (undo-tree-id18766 . -1) (undo-tree-id18767 . -1) (undo-tree-id18768 . -1) (undo-tree-id18769 . -1) (undo-tree-id18770 . -1) (undo-tree-id18771 . -1)) nil (26156 46803 626877 300000) 0 nil])
([nil nil ((2709 . 2711) (#("u" 0 1 (fontified nil)) . 2709) (2709 . 2710) (#("u8" 0 2 (fontified nil)) . -2709) (2709 . 2711) (#("u" 0 1 (fontified t)) . -2709) (undo-tree-id18631 . -1) (undo-tree-id18632 . -1) (undo-tree-id18633 . -1) (undo-tree-id18634 . -1) (undo-tree-id18635 . -1) (undo-tree-id18636 . -1) (undo-tree-id18637 . -1) (undo-tree-id18638 . -1) (undo-tree-id18639 . -1) (undo-tree-id18640 . -1) (undo-tree-id18641 . -1) (undo-tree-id18642 . -1) (undo-tree-id18643 . -1) (undo-tree-id18644 . -1) (undo-tree-id18645 . -1) (undo-tree-id18646 . -1) (undo-tree-id18647 . -1) (undo-tree-id18648 . -1) (undo-tree-id18649 . -1) (undo-tree-id18650 . -1) (undo-tree-id18651 . -1) (undo-tree-id18652 . -1) (undo-tree-id18653 . -1) (undo-tree-id18654 . -1) (undo-tree-id18655 . -1) (undo-tree-id18656 . -1) (undo-tree-id18657 . -1) (undo-tree-id18658 . -1) (undo-tree-id18659 . -1) (undo-tree-id18660 . -1) (undo-tree-id18661 . -1) (undo-tree-id18662 . -1) (undo-tree-id18663 . -1) (undo-tree-id18664 . -1) (undo-tree-id18665 . -1) (undo-tree-id18666 . -1) (undo-tree-id18667 . -1) (undo-tree-id18668 . -1) (undo-tree-id18669 . -1) (undo-tree-id18670 . -1) (undo-tree-id18671 . -1) (undo-tree-id18672 . -1) (undo-tree-id18673 . -1) (undo-tree-id18674 . -1) (undo-tree-id18675 . -1) (undo-tree-id18676 . -1) (undo-tree-id18677 . -1) (undo-tree-id18678 . -1) (undo-tree-id18679 . -1) (undo-tree-id18680 . -1) (undo-tree-id18681 . -1) (undo-tree-id18682 . -1) (undo-tree-id18683 . -1) (undo-tree-id18684 . -1) (undo-tree-id18685 . -1) (undo-tree-id18686 . -1) (undo-tree-id18687 . -1) (undo-tree-id18688 . -1) (undo-tree-id18689 . -1) (undo-tree-id18690 . -1) (undo-tree-id18691 . -1) (undo-tree-id18692 . -1) (undo-tree-id18693 . -1) (undo-tree-id18694 . -1) (undo-tree-id18695 . -1) (undo-tree-id18696 . -1) (undo-tree-id18697 . -1) (undo-tree-id18698 . -1) (undo-tree-id18699 . -1) (undo-tree-id18700 . -1) (undo-tree-id18701 . -1) (undo-tree-id18702 . -1) (undo-tree-id18703 . -1) (undo-tree-id18704 . -1) (undo-tree-id18705 . -1) (undo-tree-id18706 . -1) (undo-tree-id18707 . -1) (undo-tree-id18708 . -1) (undo-tree-id18709 . -1) (undo-tree-id18710 . -1) (undo-tree-id18711 . -1) (undo-tree-id18712 . -1) (undo-tree-id18713 . -1) (undo-tree-id18714 . -1) (undo-tree-id18715 . -1) (undo-tree-id18716 . -1) (undo-tree-id18717 . -1) (undo-tree-id18718 . -1) (undo-tree-id18719 . -1) (undo-tree-id18720 . -1) (undo-tree-id18721 . -1) (undo-tree-id18722 . -1) (undo-tree-id18723 . -1) (undo-tree-id18724 . -1) (undo-tree-id18725 . -1) (undo-tree-id18726 . -1) (undo-tree-id18727 . -1) (undo-tree-id18728 . -1) (undo-tree-id18729 . -1) (undo-tree-id18730 . -1) (undo-tree-id18731 . -1) (undo-tree-id18732 . -1) (undo-tree-id18733 . -1) (undo-tree-id18734 . -1) (undo-tree-id18735 . -1) (undo-tree-id18736 . -1) (undo-tree-id18737 . -1) (undo-tree-id18738 . -1) (undo-tree-id18739 . -1) (undo-tree-id18740 . -1) (undo-tree-id18741 . -1) (undo-tree-id18742 . -1) (undo-tree-id18743 . -1) (undo-tree-id18744 . -1) (undo-tree-id18745 . -1) (undo-tree-id18746 . -1) (undo-tree-id18747 . -1) (undo-tree-id18748 . -1) (undo-tree-id18749 . -1) (undo-tree-id18750 . -1) (undo-tree-id18751 . -1) (undo-tree-id18752 . -1) (undo-tree-id18753 . -1) (undo-tree-id18754 . -1) (undo-tree-id18755 . -1) (undo-tree-id18756 . -1) (undo-tree-id18757 . -1) (undo-tree-id18758 . -1) 2710 (2709 . 2710)) nil (26156 46803 626833 299000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -2768) (undo-tree-id19314 . -1) 2769 (2766 . 2769) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -2766) (undo-tree-id19315 . -1) (undo-tree-id19316 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -2767) (undo-tree-id19317 . -1) 2768 (2756 . 2768) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -2756) (undo-tree-id19318 . -1) (undo-tree-id19319 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -2757) (undo-tree-id19320 . -1) (undo-tree-id19321 . -1) 2758 (2748 . 2758) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2748) (undo-tree-id19322 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -2749) (undo-tree-id19323 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -2750) (undo-tree-id19324 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -2751) (undo-tree-id19325 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2752) (undo-tree-id19326 . -1) 2753 (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2753) (undo-tree-id19327 . -1) 2754 (2742 . 2754) (t 26156 46803 690412 628000)) nil (26156 46888 809775 417000) 0 nil])
([nil nil ((#("Vec<u8> = Vec::new();" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t face (rainbow-delimiters-depth-8-face)) 4 6 (fontified t face font-lock-type-face) 6 7 (fontified t face (rainbow-delimiters-depth-8-face)) 7 10 (fontified t) 10 13 (fontified t face font-lock-type-face) 13 15 (fontified t) 15 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-8-face)) 19 20 (fontified t face (rainbow-delimiters-depth-8-face)) 20 21 (fontified t)) . 2663) (undo-tree-id19307 . -19) (undo-tree-id19308 . -12) (undo-tree-id19309 . -12) (undo-tree-id19310 . -12) (undo-tree-id19311 . -12) (undo-tree-id19312 . -12) (undo-tree-id19313 . -21)) nil (26156 46888 809740 408000) 0 nil])
([nil nil ((#(" Vec<u8> = Vec::new();" 0 1 (fontified t) 1 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-8-face)) 5 7 (fontified t face font-lock-type-face) 7 8 (fontified t face (rainbow-delimiters-depth-8-face)) 8 11 (fontified t) 11 14 (fontified t face font-lock-type-face) 14 16 (fontified t) 16 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-8-face)) 20 21 (fontified t face (rainbow-delimiters-depth-8-face)) 21 22 (fontified t)) . 2683) (undo-tree-id19302 . -9) (undo-tree-id19303 . -10) (undo-tree-id19304 . -10) (undo-tree-id19305 . -11) (undo-tree-id19306 . -22)) nil (26156 46888 809724 950000) 0 nil])
([nil nil ((2657 . 2661) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -2657) (undo-tree-id19289 . -1) (undo-tree-id19290 . -1) (undo-tree-id19291 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -2658) (undo-tree-id19292 . -1) (undo-tree-id19293 . -1) (undo-tree-id19294 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -2659) (undo-tree-id19295 . -1) (undo-tree-id19296 . -1) (undo-tree-id19297 . -1) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -2660) (undo-tree-id19298 . -1) (undo-tree-id19299 . -1) (undo-tree-id19300 . -1) (#(":" 0 1 (fontified t)) . -2661) (undo-tree-id19301 . -1) 2662) nil (26156 46888 809675 247000) 0 nil])
([nil nil ((2676 . 2681) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -2676) (undo-tree-id19275 . -1) (undo-tree-id19276 . -1) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -2677) (undo-tree-id19277 . -1) (undo-tree-id19278 . -1) (#("e" 0 1 (fontified nil face font-lock-variable-name-face)) . -2678) (undo-tree-id19279 . -1) (undo-tree-id19280 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -2679) (undo-tree-id19281 . -1) (undo-tree-id19282 . -1) (#("2" 0 1 (fontified t face font-lock-variable-name-face)) . -2680) (undo-tree-id19283 . -1) (undo-tree-id19284 . -1) (#("=" 0 1 (fontified t)) . -2681) (undo-tree-id19285 . -1) (undo-tree-id19286 . -1) 2682 (2681 . 2682) (#(":" 0 1 (fontified t)) . -2681) (undo-tree-id19287 . 1) (undo-tree-id19288 . -1) 2682) nil (26156 46888 809645 965000) 0 nil])
([nil nil ((2662 . 2663) (#(" " 0 1 (fontified t)) . -2662) (undo-tree-id19213 . -1) (undo-tree-id19214 . -1) (undo-tree-id19215 . -1) (undo-tree-id19216 . -1) (undo-tree-id19217 . -1) (undo-tree-id19218 . -1) (undo-tree-id19219 . -1) (undo-tree-id19220 . -1) (undo-tree-id19221 . -1) (undo-tree-id19222 . -1) (undo-tree-id19223 . -1) (undo-tree-id19224 . -1) (undo-tree-id19225 . -1) (undo-tree-id19226 . -1) (undo-tree-id19227 . -1) (undo-tree-id19228 . -1) (undo-tree-id19229 . -1) (undo-tree-id19230 . -1) (undo-tree-id19231 . -1) (undo-tree-id19232 . -1) (undo-tree-id19233 . -1) (undo-tree-id19234 . -1) (undo-tree-id19235 . -1) (undo-tree-id19236 . -1) (undo-tree-id19237 . -1) (undo-tree-id19238 . -1) (undo-tree-id19239 . -1) (undo-tree-id19240 . -1) (undo-tree-id19241 . -1) (undo-tree-id19242 . -1) (undo-tree-id19243 . -1) (undo-tree-id19244 . -1) (undo-tree-id19245 . -1) (undo-tree-id19246 . -1) (undo-tree-id19247 . -1) (undo-tree-id19248 . -1) (undo-tree-id19249 . -1) (undo-tree-id19250 . -1) (undo-tree-id19251 . -1) (undo-tree-id19252 . -1) (undo-tree-id19253 . -1) (#("-" 0 1 (fontified t)) . -2663) (undo-tree-id19254 . -1) (undo-tree-id19255 . -1) (undo-tree-id19256 . -1) (undo-tree-id19257 . -1) (undo-tree-id19258 . -1) (undo-tree-id19259 . -1) (undo-tree-id19260 . -1) (undo-tree-id19261 . -1) (undo-tree-id19262 . -1) (undo-tree-id19263 . -1) (undo-tree-id19264 . -1) (undo-tree-id19265 . -1) (undo-tree-id19266 . -1) (undo-tree-id19267 . -1) (undo-tree-id19268 . -1) (undo-tree-id19269 . -1) (undo-tree-id19270 . -1) (undo-tree-id19271 . -1) (undo-tree-id19272 . -1) (undo-tree-id19273 . -1) (undo-tree-id19274 . -1) 2664 (2662 . 2664)) nil (26156 46888 809609 20000) 0 nil])
([nil nil ((2663 . 2664)) nil (26156 46888 809497 748000) 0 nil])
([nil nil ((#("			    let tolmap2
			    
" 0 6 (fontified t) 6 7 (rear-nonsticky t fontified t) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t) 19 26 (fontified t) 26 27 (fontified t)) . 2665) (undo-tree-id19129 . -26) (undo-tree-id19130 . -14) (undo-tree-id19131 . -25) (undo-tree-id19132 . -17) (undo-tree-id19133 . -17) (undo-tree-id19134 . -17) (undo-tree-id19135 . -17) (undo-tree-id19136 . -17) (undo-tree-id19137 . -17) (undo-tree-id19138 . -17) (undo-tree-id19139 . -17) (undo-tree-id19140 . -17) (undo-tree-id19141 . -17) (undo-tree-id19142 . -17) (undo-tree-id19143 . -17) (undo-tree-id19144 . -17) (undo-tree-id19145 . -17) (undo-tree-id19146 . -17) (undo-tree-id19147 . -17) (undo-tree-id19148 . -17) (undo-tree-id19149 . -17) (undo-tree-id19150 . -17) (undo-tree-id19151 . -17) (undo-tree-id19152 . -17) (undo-tree-id19153 . -17) (undo-tree-id19154 . -17) (undo-tree-id19155 . -17) (undo-tree-id19156 . -17) (undo-tree-id19157 . -17) (undo-tree-id19158 . -17) (undo-tree-id19159 . -17) (undo-tree-id19160 . -17) (undo-tree-id19161 . -17) (undo-tree-id19162 . -17) (undo-tree-id19163 . -17) (undo-tree-id19164 . -17) (undo-tree-id19165 . -17) (undo-tree-id19166 . -17) (undo-tree-id19167 . -17) (undo-tree-id19168 . -17) (undo-tree-id19169 . -17) (undo-tree-id19170 . -18) (undo-tree-id19171 . -19) (undo-tree-id19172 . -18) (undo-tree-id19173 . -19) (undo-tree-id19174 . -18) (undo-tree-id19175 . -19) (undo-tree-id19176 . -7) (undo-tree-id19177 . -18) (undo-tree-id19178 . -17) (undo-tree-id19179 . -17) (undo-tree-id19180 . -17) (undo-tree-id19181 . -17) (undo-tree-id19182 . -17) (undo-tree-id19183 . -17) (undo-tree-id19184 . -17) (undo-tree-id19185 . -17) (undo-tree-id19186 . -17) (undo-tree-id19187 . -17) (undo-tree-id19188 . -17) (undo-tree-id19189 . -19) (undo-tree-id19190 . -25) (undo-tree-id19191 . -25) (undo-tree-id19192 . -25) (undo-tree-id19193 . -25) (undo-tree-id19194 . -25) (undo-tree-id19195 . -25) (undo-tree-id19196 . -25) (undo-tree-id19197 . -25) (undo-tree-id19198 . -25) (undo-tree-id19199 . -25) (undo-tree-id19200 . -25) (undo-tree-id19201 . -25) (undo-tree-id19202 . -25) (undo-tree-id19203 . -25) (undo-tree-id19204 . -25) (undo-tree-id19205 . -25) (undo-tree-id19206 . -25) (undo-tree-id19207 . -25) (undo-tree-id19208 . -25) (undo-tree-id19209 . -25) (undo-tree-id19210 . -25) (undo-tree-id19211 . -25) (undo-tree-id19212 . -27) 2690) nil (26156 46888 809487 761000) 0 nil])
([nil nil ((2706 . 2707) (apply yas--snippet-revive 2670 2706 #s(yas--snippet nil (#s(yas--field 1 2696 2697 nil nil nil t #s(yas--field 2 2699 2700 nil nil nil t #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil)))) #s(yas--field 2 2699 2700 nil nil nil t #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil))) #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil))) #s(yas--exit 2706 nil) 120 nil #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil)) nil nil)) (2702 . 2705) (#("to" 0 2 (fontified nil)) . 2702) (undo-tree-id18976 . -2) (2702 . 2704) (#("tol" 0 3 (fontified nil)) . -2702) (undo-tree-id18977 . -3) (2702 . 2705) (#("to" 0 2 (fontified t)) . -2702) (undo-tree-id18978 . -2) (undo-tree-id18979 . -2) (undo-tree-id18980 . -2) (undo-tree-id18981 . -1) (undo-tree-id18982 . -1) (undo-tree-id18983 . -1) (undo-tree-id18984 . -1) (undo-tree-id18985 . -1) (undo-tree-id18986 . -1) (undo-tree-id18987 . -1) (undo-tree-id18988 . -1) (undo-tree-id18989 . -1) (undo-tree-id18990 . -1) (undo-tree-id18991 . -1) (undo-tree-id18992 . -1) (undo-tree-id18993 . -1) (undo-tree-id18994 . -1) (undo-tree-id18995 . -1) (undo-tree-id18996 . -1) (undo-tree-id18997 . -1) (undo-tree-id18998 . -1) (undo-tree-id18999 . -1) (undo-tree-id19000 . -2) (undo-tree-id19001 . -2) (undo-tree-id19002 . -2) (undo-tree-id19003 . -2) (undo-tree-id19004 . -2) (undo-tree-id19005 . -2) (undo-tree-id19006 . -2) (undo-tree-id19007 . -2) (undo-tree-id19008 . -2) (undo-tree-id19009 . -2) (undo-tree-id19010 . -2) (undo-tree-id19011 . -2) (undo-tree-id19012 . -2) (undo-tree-id19013 . -2) (undo-tree-id19014 . -2) (undo-tree-id19015 . -2) (undo-tree-id19016 . -2) (undo-tree-id19017 . -2) (undo-tree-id19018 . -2) (undo-tree-id19019 . -2) (undo-tree-id19020 . -2) (undo-tree-id19021 . -2) (undo-tree-id19022 . -2) (undo-tree-id19023 . -2) (undo-tree-id19024 . -2) (undo-tree-id19025 . -2) (undo-tree-id19026 . -2) (undo-tree-id19027 . -2) (undo-tree-id19028 . -2) (undo-tree-id19029 . -2) (undo-tree-id19030 . -2) (undo-tree-id19031 . -2) (undo-tree-id19032 . -2) (undo-tree-id19033 . -2) (undo-tree-id19034 . -2) (undo-tree-id19035 . -2) (undo-tree-id19036 . -2) (undo-tree-id19037 . -2) (undo-tree-id19038 . -2) (undo-tree-id19039 . -2) (undo-tree-id19040 . -2) (undo-tree-id19041 . -2) (undo-tree-id19042 . -2) (undo-tree-id19043 . -2) (undo-tree-id19044 . -2) (undo-tree-id19045 . -2) (undo-tree-id19046 . -2) (undo-tree-id19047 . -2) (undo-tree-id19048 . -2) (undo-tree-id19049 . -2) (undo-tree-id19050 . -2) (undo-tree-id19051 . -2) (undo-tree-id19052 . -2) (undo-tree-id19053 . -2) (undo-tree-id19054 . -2) (undo-tree-id19055 . -2) (undo-tree-id19056 . -2) (undo-tree-id19057 . -2) (undo-tree-id19058 . -2) (undo-tree-id19059 . -2) (undo-tree-id19060 . -2) (undo-tree-id19061 . -2) (undo-tree-id19062 . -2) (undo-tree-id19063 . -2) (undo-tree-id19064 . -2) (undo-tree-id19065 . -2) (undo-tree-id19066 . -2) (undo-tree-id19067 . -2) (undo-tree-id19068 . -2) (undo-tree-id19069 . -2) (undo-tree-id19070 . -2) (undo-tree-id19071 . -2) (undo-tree-id19072 . -2) (undo-tree-id19073 . -2) (undo-tree-id19074 . -2) (undo-tree-id19075 . -2) (undo-tree-id19076 . -2) (undo-tree-id19077 . -2) (undo-tree-id19078 . -2) (undo-tree-id19079 . -2) (undo-tree-id19080 . -2) (undo-tree-id19081 . -2) (undo-tree-id19082 . -2) (undo-tree-id19083 . -2) (undo-tree-id19084 . -2) (undo-tree-id19085 . -2) (undo-tree-id19086 . -2) (undo-tree-id19087 . -2) (undo-tree-id19088 . -2) (undo-tree-id19089 . -2) (undo-tree-id19090 . -2) (undo-tree-id19091 . -2) (undo-tree-id19092 . -2) (undo-tree-id19093 . -2) (undo-tree-id19094 . -2) (undo-tree-id19095 . -2) (undo-tree-id19096 . -2) (undo-tree-id19097 . -2) (undo-tree-id19098 . -2) (undo-tree-id19099 . -2) (undo-tree-id19100 . -2) (undo-tree-id19101 . -2) 2704 (2703 . 2704) (#("rad" 0 3 (fontified nil)) . 2703) (undo-tree-id19102 . -3) (2702 . 2703) (2699 . 2700) (#("i" 0 1 (fontified nil)) . 2699) (undo-tree-id19103 . -1) (2699 . 2700) (#("i" 0 1 (fontified t)) . -2699) (undo-tree-id19104 . -1) (undo-tree-id19105 . -1) (undo-tree-id19106 . -1) (undo-tree-id19107 . -1) (undo-tree-id19108 . -1) (undo-tree-id19109 . -1) (undo-tree-id19110 . -1) (undo-tree-id19111 . -1) (undo-tree-id19112 . -1) (undo-tree-id19113 . -1) (undo-tree-id19114 . -1) (undo-tree-id19115 . -1) (undo-tree-id19116 . -1) (undo-tree-id19117 . -1) (undo-tree-id19118 . -1) 2700 (#("y" 0 1 (fontified nil)) . 2700) (undo-tree-id19119 . -1) (2699 . 2700) (2696 . 2697) (#("j" 0 1 (fontified nil)) . 2696) (undo-tree-id19120 . -1) (2696 . 2697) (#("j" 0 1 (fontified t)) . -2696) (undo-tree-id19121 . -1) (undo-tree-id19122 . -1) (undo-tree-id19123 . -1) (undo-tree-id19124 . -1) 2697 (#("x" 0 1 (fontified nil)) . 2697) (undo-tree-id19125 . -1) (2696 . 2697) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2696 2697 nil nil nil t #s(yas--field 2 2699 2700 nil nil nil t #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil)))) #s(yas--field 2 2699 2700 nil nil nil t #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil))) #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil))) #s(yas--exit 2706 nil) 120 nil #s(yas--field 3 2702 2705 nil nil nil t #s(yas--exit 2706 nil)) nil nil)) (2670 . 2706) (#("lidar_reading_no_rotation(${1:x}, ${2:y}, ${3:rad})$0" 0 53 (fontified nil)) . 2670) (2670 . 2723) (#("lidar_reading_no_rotation(…)" 0 28 (fontified nil)) . -2670) (2670 . 2698) (2669 . 2670) (2664 . 2669) (#("bm" 0 2 (fontified nil)) . 2664) (2664 . 2666) (#("bmap1" 0 5 (fontified nil)) . -2664) (2664 . 2669) (#("bm" 0 2 (fontified t)) . -2664) (undo-tree-id19126 . -2) (undo-tree-id19127 . -2) (undo-tree-id19128 . -2) 2666 (2664 . 2666)) nil (26156 46888 809149 889000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified t)) . -2708) (undo-tree-id18963 . -7) (undo-tree-id18964 . -7) (undo-tree-id18965 . -7) (undo-tree-id18966 . -7) (undo-tree-id18967 . -7) (undo-tree-id18968 . -7) (undo-tree-id18969 . -7) (undo-tree-id18970 . -7) (undo-tree-id18971 . -7) (undo-tree-id18972 . -7) (undo-tree-id18973 . -7) (undo-tree-id18974 . -7) (undo-tree-id18975 . -7) 2715 (2707 . 2715)) nil (26156 46888 808518 343000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2714 . 2715) (#("
" 0 1 (fontified nil)) . -2772) (2707 . 2773) 2643) nil (26156 46888 808492 986000) 0 nil])
([nil nil ((2725 . 2726) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . 2725) (undo-tree-id18962 . -1)) nil (26156 46888 808487 970000) 0 nil])
([nil nil ((2733 . 2734) (#("1" 0 1 (fontified t)) . 2733) (undo-tree-id18961 . -1)) nil (26156 46888 808475 987000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified t)) . -2774) (undo-tree-id19875 . -7) 2781 (2774 . 2781) (#("			    " 0 7 (fontified nil)) . 2773) (undo-tree-id19876 . -7) (2772 . 2781) (t 26156 46888 899075 550000)) nil (26156 46917 689141 21000) 0 nil])
([nil nil ((2786 . 2793) (2782 . 2786) (#("l" 0 1 (fontified t)) . -2782) (undo-tree-id19865 . -1) (undo-tree-id19866 . -1) (#("e" 0 1 (fontified t)) . -2783) (undo-tree-id19867 . -1) (undo-tree-id19868 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -2784) (undo-tree-id19869 . -1) (undo-tree-id19870 . -1) (#(" " 0 1 (fontified t)) . -2785) (undo-tree-id19871 . -1) (undo-tree-id19872 . -1) 2786 (2782 . 2786) (2775 . 2782) (#("			    " 0 7 (fontified nil)) . 2774) (undo-tree-id19873 . -7) (2774 . 2782) (#("			    " 0 7 (fontified nil)) . 2773) (undo-tree-id19874 . -7) (2780 . 2781) (2773 . 2780)) nil (26156 46917 689130 678000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2807) (undo-tree-id19654 . -1) (undo-tree-id19655 . -1) (undo-tree-id19656 . -1) (undo-tree-id19657 . -1) (undo-tree-id19658 . -1) (undo-tree-id19659 . -1) (undo-tree-id19660 . -1) (undo-tree-id19661 . -1) (undo-tree-id19662 . -1) (undo-tree-id19663 . -1) (undo-tree-id19664 . -1) (undo-tree-id19665 . -1) (undo-tree-id19666 . -1) (undo-tree-id19667 . -1) (undo-tree-id19668 . -1) (undo-tree-id19669 . -1) (undo-tree-id19670 . -1) (undo-tree-id19671 . -1) (undo-tree-id19672 . -1) (undo-tree-id19673 . -1) (undo-tree-id19674 . -1) (undo-tree-id19675 . -1) (undo-tree-id19676 . -1) (undo-tree-id19677 . -1) (undo-tree-id19678 . -1) (undo-tree-id19679 . -1) (undo-tree-id19680 . -1) (undo-tree-id19681 . -1) (undo-tree-id19682 . -1) (undo-tree-id19683 . -1) (undo-tree-id19684 . -1) (undo-tree-id19685 . -1) (undo-tree-id19686 . -1) (undo-tree-id19687 . -1) (undo-tree-id19688 . -1) (undo-tree-id19689 . -1) (undo-tree-id19690 . -1) (undo-tree-id19691 . -1) (undo-tree-id19692 . -1) (undo-tree-id19693 . -1) (undo-tree-id19694 . -1) (undo-tree-id19695 . -1) (undo-tree-id19696 . -1) (undo-tree-id19697 . -1) (undo-tree-id19698 . -1) (undo-tree-id19699 . -1) (undo-tree-id19700 . -1) (undo-tree-id19701 . -1) (undo-tree-id19702 . -1) (undo-tree-id19703 . -1) (undo-tree-id19704 . -1) (undo-tree-id19705 . -1) (undo-tree-id19706 . -1) (undo-tree-id19707 . -1) (undo-tree-id19708 . -1) (undo-tree-id19709 . -1) (undo-tree-id19710 . -1) (undo-tree-id19711 . -1) (undo-tree-id19712 . -1) (undo-tree-id19713 . -1) (undo-tree-id19714 . -1) (undo-tree-id19715 . -1) (undo-tree-id19716 . -1) (undo-tree-id19717 . -1) (undo-tree-id19718 . -1) (undo-tree-id19719 . -1) (undo-tree-id19720 . -1) (undo-tree-id19721 . -1) (undo-tree-id19722 . -1) (undo-tree-id19723 . -1) (undo-tree-id19724 . -1) (undo-tree-id19725 . -1) (undo-tree-id19726 . -1) (undo-tree-id19727 . -1) (undo-tree-id19728 . -1) (undo-tree-id19729 . -1) (undo-tree-id19730 . -1) (undo-tree-id19731 . -1) (undo-tree-id19732 . -1) (undo-tree-id19733 . -1) (undo-tree-id19734 . -1) (undo-tree-id19735 . -1) (undo-tree-id19736 . -1) (undo-tree-id19737 . -1) (undo-tree-id19738 . -1) (undo-tree-id19739 . -1) (undo-tree-id19740 . -1) (undo-tree-id19741 . -1) (undo-tree-id19742 . -1) (undo-tree-id19743 . -1) (undo-tree-id19744 . -1) (undo-tree-id19745 . -1) (undo-tree-id19746 . -1) (undo-tree-id19747 . -1) (undo-tree-id19748 . -1) (undo-tree-id19749 . -1) (undo-tree-id19750 . -1) (undo-tree-id19751 . -1) (undo-tree-id19752 . -1) (undo-tree-id19753 . -1) (undo-tree-id19754 . -1) (undo-tree-id19755 . -1) (undo-tree-id19756 . -1) (undo-tree-id19757 . -1) (undo-tree-id19758 . -1) (undo-tree-id19759 . -1) (undo-tree-id19760 . -1) (undo-tree-id19761 . -1) (undo-tree-id19762 . -1) (undo-tree-id19763 . -1) (undo-tree-id19764 . -1) (undo-tree-id19765 . -1) (undo-tree-id19766 . -1) (undo-tree-id19767 . -1) (undo-tree-id19768 . -1) (undo-tree-id19769 . -1) (undo-tree-id19770 . -1) (undo-tree-id19771 . -1) (undo-tree-id19772 . -1) (undo-tree-id19773 . -1) (undo-tree-id19774 . -1) (undo-tree-id19775 . -1) (undo-tree-id19776 . -1) (#("o" 0 1 (fontified t)) . -2808) (undo-tree-id19777 . -1) (undo-tree-id19778 . -1) (undo-tree-id19779 . -1) (undo-tree-id19780 . -1) (undo-tree-id19781 . -1) (undo-tree-id19782 . -1) (undo-tree-id19783 . -1) (undo-tree-id19784 . -1) (undo-tree-id19785 . -1) (undo-tree-id19786 . -1) (undo-tree-id19787 . -1) (undo-tree-id19788 . -1) (undo-tree-id19789 . -1) (undo-tree-id19790 . -1) (undo-tree-id19791 . -1) (undo-tree-id19792 . -1) (undo-tree-id19793 . -1) (undo-tree-id19794 . -1) (undo-tree-id19795 . -1) (undo-tree-id19796 . -1) (undo-tree-id19797 . -1) (undo-tree-id19798 . -1) (undo-tree-id19799 . -1) (undo-tree-id19800 . -1) (undo-tree-id19801 . -1) (undo-tree-id19802 . -1) (undo-tree-id19803 . -1) (undo-tree-id19804 . -1) (undo-tree-id19805 . -1) (undo-tree-id19806 . -1) (undo-tree-id19807 . -1) (undo-tree-id19808 . -1) (undo-tree-id19809 . -1) (undo-tree-id19810 . -1) (undo-tree-id19811 . -1) (undo-tree-id19812 . -1) (undo-tree-id19813 . -1) (undo-tree-id19814 . -1) (undo-tree-id19815 . -1) (undo-tree-id19816 . -1) (undo-tree-id19817 . -1) (undo-tree-id19818 . -1) (undo-tree-id19819 . -1) (undo-tree-id19820 . -1) (undo-tree-id19821 . -1) (undo-tree-id19822 . -1) (undo-tree-id19823 . -1) (undo-tree-id19824 . -1) (undo-tree-id19825 . -1) (undo-tree-id19826 . -1) (undo-tree-id19827 . -1) (undo-tree-id19828 . -1) (undo-tree-id19829 . -1) (undo-tree-id19830 . -1) (undo-tree-id19831 . -1) (undo-tree-id19832 . -1) (undo-tree-id19833 . -1) (undo-tree-id19834 . -1) (undo-tree-id19835 . -1) (undo-tree-id19836 . -1) (undo-tree-id19837 . -1) (undo-tree-id19838 . -1) (undo-tree-id19839 . -1) (undo-tree-id19840 . -1) (undo-tree-id19841 . -1) (undo-tree-id19842 . -1) (undo-tree-id19843 . -1) (undo-tree-id19844 . -1) (undo-tree-id19845 . -1) (undo-tree-id19846 . -1) (undo-tree-id19847 . -1) (undo-tree-id19848 . -1) (undo-tree-id19849 . -1) (undo-tree-id19850 . -1) (undo-tree-id19851 . -1) (undo-tree-id19852 . -1) (undo-tree-id19853 . -1) (undo-tree-id19854 . -1) (undo-tree-id19855 . -1) (undo-tree-id19856 . -1) (undo-tree-id19857 . -1) (undo-tree-id19858 . -1) (undo-tree-id19859 . -1) (undo-tree-id19860 . -1) 2809 (2808 . 2809) (#("map1" 0 4 (fontified nil)) . 2808) (undo-tree-id19861 . -4) (2807 . 2808) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2807 2807 nil nil nil t #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))))) #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil)))) #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))) #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))) #s(yas--exit 2829 nil) 121 nil #s(yas--field 1 2807 2807 nil nil nil t #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))))) nil nil)) (2793 . 2833) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol}, ${4:tolerate})$0" 0 62 (fontified nil)) . 2793) (2793 . 2855) (#("j" 0 1 (fontified nil)) . 2793) (2793 . 2794) (#("jaccard_index(…)" 0 16 (fontified nil)) . -2793) (2793 . 2809) (#("j" 0 1 (fontified t)) . -2793) (undo-tree-id19862 . -1) (undo-tree-id19863 . -1) (undo-tree-id19864 . -1) 2794 (2793 . 2794)) nil (26156 46917 689084 873000) 0 nil])
([nil nil ((apply yas--snippet-revive 2793 2829 #s(yas--snippet nil (#s(yas--field 1 2807 2807 nil nil nil t #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))))) #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil)))) #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))) #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))) #s(yas--exit 2829 nil) 121 nil #s(yas--field 1 2807 2807 nil nil nil t #s(yas--field 2 2809 2813 nil nil nil nil #s(yas--field 3 2815 2818 nil nil nil nil #s(yas--field 4 2820 2828 nil nil nil nil #s(yas--exit 2829 nil))))) nil nil))) nil (26156 46917 688740 798000) 0 nil])
([nil nil ((#("			    let data = jaccard_index(, map2, tol, tolerate)
" 0 7 (fontified t) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-8-face)) 32 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-8-face)) 54 55 (fontified t)) . 2775) (undo-tree-id19328 . -54) (undo-tree-id19329 . 23) (undo-tree-id19330 . -31) (undo-tree-id19331 . -31) (undo-tree-id19332 . -31) (undo-tree-id19333 . -32) (undo-tree-id19334 . -32) (undo-tree-id19335 . -32) (undo-tree-id19336 . -32) (undo-tree-id19337 . -32) (undo-tree-id19338 . -32) (undo-tree-id19339 . -32) (undo-tree-id19340 . -32) (undo-tree-id19341 . -32) (undo-tree-id19342 . -32) (undo-tree-id19343 . -32) (undo-tree-id19344 . -32) (undo-tree-id19345 . -32) (undo-tree-id19346 . -32) (undo-tree-id19347 . -32) (undo-tree-id19348 . -32) (undo-tree-id19349 . -32) (undo-tree-id19350 . -32) (undo-tree-id19351 . -32) (undo-tree-id19352 . -32) (undo-tree-id19353 . -32) (undo-tree-id19354 . -32) (undo-tree-id19355 . -32) (undo-tree-id19356 . -32) (undo-tree-id19357 . -32) (undo-tree-id19358 . -32) (undo-tree-id19359 . -32) (undo-tree-id19360 . -32) (undo-tree-id19361 . -32) (undo-tree-id19362 . -32) (undo-tree-id19363 . -32) (undo-tree-id19364 . -32) (undo-tree-id19365 . -32) (undo-tree-id19366 . -32) (undo-tree-id19367 . -32) (undo-tree-id19368 . -32) (undo-tree-id19369 . -32) (undo-tree-id19370 . -32) (undo-tree-id19371 . -32) (undo-tree-id19372 . -32) (undo-tree-id19373 . -32) (undo-tree-id19374 . -32) (undo-tree-id19375 . -32) (undo-tree-id19376 . -32) (undo-tree-id19377 . -32) (undo-tree-id19378 . -32) (undo-tree-id19379 . -32) (undo-tree-id19380 . -32) (undo-tree-id19381 . -32) (undo-tree-id19382 . -32) (undo-tree-id19383 . -32) (undo-tree-id19384 . -32) (undo-tree-id19385 . -32) (undo-tree-id19386 . -32) (undo-tree-id19387 . -32) (undo-tree-id19388 . -32) (undo-tree-id19389 . -32) (undo-tree-id19390 . -32) (undo-tree-id19391 . -32) (undo-tree-id19392 . -32) (undo-tree-id19393 . -32) (undo-tree-id19394 . -32) (undo-tree-id19395 . -32) (undo-tree-id19396 . -32) (undo-tree-id19397 . -32) (undo-tree-id19398 . -32) (undo-tree-id19399 . -32) (undo-tree-id19400 . -32) (undo-tree-id19401 . -32) (undo-tree-id19402 . -32) (undo-tree-id19403 . -32) (undo-tree-id19404 . -32) (undo-tree-id19405 . -32) (undo-tree-id19406 . -32) (undo-tree-id19407 . -32) (undo-tree-id19408 . -32) (undo-tree-id19409 . -32) (undo-tree-id19410 . -32) (undo-tree-id19411 . -32) (undo-tree-id19412 . -32) (undo-tree-id19413 . -32) (undo-tree-id19414 . -32) (undo-tree-id19415 . -32) (undo-tree-id19416 . -32) (undo-tree-id19417 . -32) (undo-tree-id19418 . -32) (undo-tree-id19419 . -32) (undo-tree-id19420 . -32) (undo-tree-id19421 . -32) (undo-tree-id19422 . -32) (undo-tree-id19423 . -32) (undo-tree-id19424 . -32) (undo-tree-id19425 . -32) (undo-tree-id19426 . -32) (undo-tree-id19427 . -32) (undo-tree-id19428 . -32) (undo-tree-id19429 . -32) (undo-tree-id19430 . -32) (undo-tree-id19431 . -32) (undo-tree-id19432 . -32) (undo-tree-id19433 . -32) (undo-tree-id19434 . -32) (undo-tree-id19435 . -32) (undo-tree-id19436 . -32) (undo-tree-id19437 . -32) (undo-tree-id19438 . -32) (undo-tree-id19439 . -32) (undo-tree-id19440 . -32) (undo-tree-id19441 . -32) (undo-tree-id19442 . -32) (undo-tree-id19443 . -32) (undo-tree-id19444 . -32) (undo-tree-id19445 . -32) (undo-tree-id19446 . -32) (undo-tree-id19447 . -32) (undo-tree-id19448 . -32) (undo-tree-id19449 . -32) (undo-tree-id19450 . -32) (undo-tree-id19451 . -32) (undo-tree-id19452 . -32) (undo-tree-id19453 . -32) (undo-tree-id19454 . -32) (undo-tree-id19455 . -32) (undo-tree-id19456 . -32) (undo-tree-id19457 . -32) (undo-tree-id19458 . -32) (undo-tree-id19459 . -32) (undo-tree-id19460 . -32) (undo-tree-id19461 . -32) (undo-tree-id19462 . -32) (undo-tree-id19463 . 23) (undo-tree-id19464 . -32) (undo-tree-id19465 . -32) (undo-tree-id19466 . -32) (undo-tree-id19467 . -32) (undo-tree-id19468 . -32) (undo-tree-id19469 . -32) (undo-tree-id19470 . -32) (undo-tree-id19471 . -32) (undo-tree-id19472 . -32) (undo-tree-id19473 . -32) (undo-tree-id19474 . -32) (undo-tree-id19475 . -32) (undo-tree-id19476 . -32) (undo-tree-id19477 . -32) (undo-tree-id19478 . -32) (undo-tree-id19479 . -32) (undo-tree-id19480 . -32) (undo-tree-id19481 . -32) (undo-tree-id19482 . -32) (undo-tree-id19483 . -32) (undo-tree-id19484 . -32) (undo-tree-id19485 . -33) (undo-tree-id19486 . -33) (undo-tree-id19487 . -34) (undo-tree-id19488 . -33) (undo-tree-id19489 . -34) (undo-tree-id19490 . -38) (undo-tree-id19491 . -39) (undo-tree-id19492 . -38) (undo-tree-id19493 . -39) (undo-tree-id19494 . -43) (undo-tree-id19495 . -44) (undo-tree-id19496 . -43) (undo-tree-id19497 . -44) (undo-tree-id19498 . -53) (undo-tree-id19499 . -54) (undo-tree-id19500 . -53) (undo-tree-id19501 . -54) (undo-tree-id19502 . -31) (undo-tree-id19503 . -33) (undo-tree-id19504 . -32) (undo-tree-id19505 . -32) (undo-tree-id19506 . -32) (undo-tree-id19507 . -32) (undo-tree-id19508 . -32) (undo-tree-id19509 . -32) (undo-tree-id19510 . -32) (undo-tree-id19511 . -32) (undo-tree-id19512 . -32) (undo-tree-id19513 . -32) (undo-tree-id19514 . -32) (undo-tree-id19515 . -31) (undo-tree-id19516 . -31) (undo-tree-id19517 . -31) (undo-tree-id19518 . -31) (undo-tree-id19519 . -31) (undo-tree-id19520 . -31) (undo-tree-id19521 . -31) (undo-tree-id19522 . -31) (undo-tree-id19523 . -31) (undo-tree-id19524 . -31) (undo-tree-id19525 . -31) (undo-tree-id19526 . -31) (undo-tree-id19527 . -31) (undo-tree-id19528 . -31) (undo-tree-id19529 . -31) (undo-tree-id19530 . -31) (undo-tree-id19531 . -31) (undo-tree-id19532 . -31) (undo-tree-id19533 . -31) (undo-tree-id19534 . -31) (undo-tree-id19535 . -31) (undo-tree-id19536 . -31) (undo-tree-id19537 . -31) (undo-tree-id19538 . -31) (undo-tree-id19539 . -31) (undo-tree-id19540 . -31) (undo-tree-id19541 . -31) (undo-tree-id19542 . -31) (undo-tree-id19543 . -31) (undo-tree-id19544 . -31) (undo-tree-id19545 . -31) (undo-tree-id19546 . -31) (undo-tree-id19547 . -31) (undo-tree-id19548 . -31) (undo-tree-id19549 . -31) (undo-tree-id19550 . -31) (undo-tree-id19551 . -31) (undo-tree-id19552 . -31) (undo-tree-id19553 . -31) (undo-tree-id19554 . -31) (undo-tree-id19555 . -31) (undo-tree-id19556 . -31) (undo-tree-id19557 . -31) (undo-tree-id19558 . -31) (undo-tree-id19559 . -31) (undo-tree-id19560 . -31) (undo-tree-id19561 . -31) (undo-tree-id19562 . -31) (undo-tree-id19563 . -31) (undo-tree-id19564 . -31) (undo-tree-id19565 . -31) (undo-tree-id19566 . -31) (undo-tree-id19567 . -31) (undo-tree-id19568 . -31) (undo-tree-id19569 . -31) (undo-tree-id19570 . -31) (undo-tree-id19571 . -32) (undo-tree-id19572 . -32) (undo-tree-id19573 . -32) (undo-tree-id19574 . -32) (undo-tree-id19575 . -32) (undo-tree-id19576 . -32) (undo-tree-id19577 . -32) (undo-tree-id19578 . -32) (undo-tree-id19579 . -32) (undo-tree-id19580 . -32) (undo-tree-id19581 . -32) (undo-tree-id19582 . -32) (undo-tree-id19583 . -32) (undo-tree-id19584 . -32) (undo-tree-id19585 . -32) (undo-tree-id19586 . -32) (undo-tree-id19587 . -32) (undo-tree-id19588 . -32) (undo-tree-id19589 . -32) (undo-tree-id19590 . -32) (undo-tree-id19591 . -32) (undo-tree-id19592 . -32) (undo-tree-id19593 . -32) (undo-tree-id19594 . -32) (undo-tree-id19595 . -32) (undo-tree-id19596 . -32) (undo-tree-id19597 . -32) (undo-tree-id19598 . -32) (undo-tree-id19599 . -32) (undo-tree-id19600 . -32) (undo-tree-id19601 . -32) (undo-tree-id19602 . -32) (undo-tree-id19603 . -32) (undo-tree-id19604 . -32) (undo-tree-id19605 . -31) (undo-tree-id19606 . -31) (undo-tree-id19607 . -31) (undo-tree-id19608 . -31) (undo-tree-id19609 . -31) (undo-tree-id19610 . -31) (undo-tree-id19611 . -31) (undo-tree-id19612 . -31) (undo-tree-id19613 . -31) (undo-tree-id19614 . -31) (undo-tree-id19615 . -31) (undo-tree-id19616 . -31) (undo-tree-id19617 . -31) (undo-tree-id19618 . -31) (undo-tree-id19619 . -31) (undo-tree-id19620 . -31) (undo-tree-id19621 . -31) (undo-tree-id19622 . -31) (undo-tree-id19623 . -31) (undo-tree-id19624 . -31) (undo-tree-id19625 . -31) (undo-tree-id19626 . -31) (undo-tree-id19627 . -31) (undo-tree-id19628 . -18) (undo-tree-id19629 . -31) (undo-tree-id19630 . -31) (undo-tree-id19631 . -31) (undo-tree-id19632 . -31) (undo-tree-id19633 . -31) (undo-tree-id19634 . -31) (undo-tree-id19635 . -31) (undo-tree-id19636 . -31) (undo-tree-id19637 . -31) (undo-tree-id19638 . -31) (undo-tree-id19639 . -31) (undo-tree-id19640 . -31) (undo-tree-id19641 . -31) (undo-tree-id19642 . -31) (undo-tree-id19643 . -31) (undo-tree-id19644 . -31) (undo-tree-id19645 . -31) (undo-tree-id19646 . -31) (undo-tree-id19647 . -31) (undo-tree-id19648 . -31) (undo-tree-id19649 . -31) (undo-tree-id19650 . -31) (undo-tree-id19651 . -31) (undo-tree-id19652 . -31) (undo-tree-id19653 . -55) 2806) nil (26156 46917 688695 248000) 0 nil])
([nil nil ((2775 . 2782) (t 26156 46917 743334 213000)) nil (26156 46945 907847 214000) 0 nil])
([nil nil ((2838 . 2839) (apply yas--snippet-revive 2795 2838 #s(yas--snippet nil (#s(yas--field 1 2809 2817 nil nil nil t #s(yas--field 2 2819 2827 nil nil nil t #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))))) #s(yas--field 2 2819 2827 nil nil nil t #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)))) #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))) #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))) #s(yas--exit 2838 nil) 122 nil #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)) nil nil)) (apply yas--snippet-revive 2832 2837 #s(yas--snippet nil nil nil 123 nil nil #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 123 nil nil #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)) nil)) (2832 . 2837) (#("false" 0 5 (fontified nil)) . 2832) (undo-tree-id19877 . -5) (2832 . 2837) (#("fal" 0 3 (fontified nil)) . 2832) (undo-tree-id19878 . -3) (2832 . 2835) (#("false" 0 5 (fontified nil)) . -2832) (undo-tree-id19879 . -5) (2832 . 2837) (#("fal" 0 3 (fontified t)) . -2832) (undo-tree-id19880 . -2) (undo-tree-id19881 . -3) (undo-tree-id19882 . -3) (undo-tree-id19883 . -3) (undo-tree-id19884 . -2) (undo-tree-id19885 . -2) (undo-tree-id19886 . -2) (undo-tree-id19887 . -2) (undo-tree-id19888 . -2) (undo-tree-id19889 . -2) (undo-tree-id19890 . -2) (undo-tree-id19891 . -2) (undo-tree-id19892 . -2) (undo-tree-id19893 . -2) (undo-tree-id19894 . -2) (undo-tree-id19895 . -2) (undo-tree-id19896 . -2) (undo-tree-id19897 . -2) (undo-tree-id19898 . -2) (undo-tree-id19899 . -2) (undo-tree-id19900 . -2) (undo-tree-id19901 . -2) (undo-tree-id19902 . -2) (undo-tree-id19903 . -2) (undo-tree-id19904 . -2) (undo-tree-id19905 . -2) (undo-tree-id19906 . -2) (undo-tree-id19907 . -2) (undo-tree-id19908 . -2) (undo-tree-id19909 . -2) (undo-tree-id19910 . -2) (undo-tree-id19911 . -2) (undo-tree-id19912 . -2) (undo-tree-id19913 . -2) (undo-tree-id19914 . -2) (undo-tree-id19915 . -2) (undo-tree-id19916 . -2) (undo-tree-id19917 . -2) (undo-tree-id19918 . -2) (undo-tree-id19919 . -2) (undo-tree-id19920 . -2) (undo-tree-id19921 . -2) (undo-tree-id19922 . -2) (undo-tree-id19923 . -2) (undo-tree-id19924 . -2) (undo-tree-id19925 . -2) (undo-tree-id19926 . -2) (undo-tree-id19927 . -2) (undo-tree-id19928 . -2) (undo-tree-id19929 . -2) (undo-tree-id19930 . -3) (undo-tree-id19931 . -3) (undo-tree-id19932 . -3) (undo-tree-id19933 . -3) (undo-tree-id19934 . -3) (undo-tree-id19935 . -3) (undo-tree-id19936 . -3) (undo-tree-id19937 . -3) (undo-tree-id19938 . -3) (undo-tree-id19939 . -3) (undo-tree-id19940 . -3) (undo-tree-id19941 . -3) (undo-tree-id19942 . -3) (undo-tree-id19943 . -3) (undo-tree-id19944 . -3) (undo-tree-id19945 . -3) (undo-tree-id19946 . -3) (undo-tree-id19947 . -3) (undo-tree-id19948 . -3) (undo-tree-id19949 . -3) (undo-tree-id19950 . -3) (undo-tree-id19951 . -3) (undo-tree-id19952 . -3) (undo-tree-id19953 . -3) (undo-tree-id19954 . -3) (undo-tree-id19955 . -3) (undo-tree-id19956 . -3) (undo-tree-id19957 . -3) (undo-tree-id19958 . -3) (undo-tree-id19959 . -3) (undo-tree-id19960 . -3) (undo-tree-id19961 . -3) (undo-tree-id19962 . -3) (undo-tree-id19963 . -3) (undo-tree-id19964 . -3) (undo-tree-id19965 . -3) (undo-tree-id19966 . -3) (undo-tree-id19967 . -3) (undo-tree-id19968 . -3) (undo-tree-id19969 . -3) (undo-tree-id19970 . -3) (undo-tree-id19971 . -3) (undo-tree-id19972 . -3) (undo-tree-id19973 . -3) (undo-tree-id19974 . -3) (undo-tree-id19975 . -3) (undo-tree-id19976 . -3) (undo-tree-id19977 . -3) (undo-tree-id19978 . -3) (undo-tree-id19979 . -3) (undo-tree-id19980 . -3) (undo-tree-id19981 . -3) 2835 (2833 . 2835) (#("tolerate" 0 8 (fontified nil)) . 2833) (undo-tree-id19982 . -8) (2832 . 2833) (#("tol" 0 3 (fontified nil)) . 2830) (undo-tree-id19983 . -3) (2829 . 2830) (2819 . 2820) (2819 . 2826) (#("tl" 0 2 (fontified nil)) . 2819) (undo-tree-id19984 . -2) (2819 . 2821) (#("&tolmap2" 0 8 (fontified nil)) . -2819) (undo-tree-id19985 . -8) (2819 . 2827) (#("tl" 0 2 (fontified t)) . -2819) (undo-tree-id19986 . -2) (undo-tree-id19987 . -2) (undo-tree-id19988 . -2) 2821 (2820 . 2821) (#("map2" 0 4 (fontified nil)) . 2820) (undo-tree-id19989 . -4) (2819 . 2820) (2809 . 2810) (2809 . 2816) (#("tol" 0 3 (fontified nil)) . 2809) (undo-tree-id19990 . -3) (2809 . 2812) (#("&tolmap1" 0 8 (fontified nil)) . -2809) (undo-tree-id19991 . -8) (2809 . 2817) (#("tol" 0 3 (fontified t)) . -2809) (undo-tree-id19992 . -3) (undo-tree-id19993 . -3) (undo-tree-id19994 . -3) 2812 (2810 . 2812) (#("map1" 0 4 (fontified nil)) . 2810) (undo-tree-id19995 . -4) (2809 . 2810) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2809 2817 nil nil nil t #s(yas--field 2 2819 2827 nil nil nil t #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))))) #s(yas--field 2 2819 2827 nil nil nil t #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)))) #s(yas--field 3 2829 2830 nil nil nil t #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))) #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil))) #s(yas--exit 2838 nil) 122 nil #s(yas--field 4 2832 2837 nil nil nil t #s(yas--exit 2838 nil)) nil nil)) (2795 . 2835) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol}, ${4:tolerate})$0" 0 62 (fontified nil)) . 2795) (2795 . 2857) (#("j" 0 1 (fontified nil)) . 2795) (2795 . 2796) (#("jaccard_index(…)" 0 16 (fontified nil)) . -2795) (2795 . 2811) (#("j" 0 1 (fontified t)) . -2795) (undo-tree-id19996 . -1) (undo-tree-id19997 . -1) 2796 (2786 . 2796) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -2786) (undo-tree-id19998 . -1) (undo-tree-id19999 . -1) 2787 (2782 . 2787) (#("j" 0 1 (fontified t)) . -2782) (undo-tree-id20000 . -1) (undo-tree-id20001 . -1) (undo-tree-id20002 . -1) 2783 (2782 . 2783) (#("i" 0 1 (fontified t)) . -2782) (undo-tree-id20003 . -1) (undo-tree-id20004 . -1) 2783 (2782 . 2783)) nil (26156 46945 907814 784000) 0 nil])
([nil nil ((#("tolerate" 0 8 (fontified t face font-lock-variable-name-face)) . 1998) (undo-tree-id20108 . -7) (undo-tree-id20109 . -8) (t 26156 46945 999602 911000)) nil (26156 46968 528803 694000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 1998) (undo-tree-id20106 . -1) (undo-tree-id20107 . -2)) nil (26156 46968 528798 179000) 0 nil])
([nil nil ((#("bool" 0 4 (fontified t face font-lock-type-face)) . 1998) (undo-tree-id20104 . -3) (undo-tree-id20105 . -4)) nil (26156 46968 528792 399000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1996) (undo-tree-id20102 . -1) (undo-tree-id20103 . -1)) nil (26156 46968 528786 624000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1996) (undo-tree-id20034 . -1) (undo-tree-id20035 . -1) (undo-tree-id20036 . -1) (undo-tree-id20037 . -1) (undo-tree-id20038 . -1) (undo-tree-id20039 . -1) (undo-tree-id20040 . -1) (undo-tree-id20041 . -1) (undo-tree-id20042 . -1) (undo-tree-id20043 . -1) (undo-tree-id20044 . -1) (undo-tree-id20045 . -1) (undo-tree-id20046 . -1) (undo-tree-id20047 . -1) (undo-tree-id20048 . -1) (undo-tree-id20049 . -1) (undo-tree-id20050 . -1) (undo-tree-id20051 . -1) (undo-tree-id20052 . -1) (undo-tree-id20053 . -1) (undo-tree-id20054 . -1) (undo-tree-id20055 . -1) (undo-tree-id20056 . -1) (undo-tree-id20057 . -1) (undo-tree-id20058 . -1) (undo-tree-id20059 . -1) (undo-tree-id20060 . -1) (undo-tree-id20061 . -1) (undo-tree-id20062 . -1) (undo-tree-id20063 . -1) (undo-tree-id20064 . -1) (undo-tree-id20065 . -1) (undo-tree-id20066 . -1) (undo-tree-id20067 . -1) (undo-tree-id20068 . -1) (undo-tree-id20069 . -1) (undo-tree-id20070 . -1) (undo-tree-id20071 . -1) (undo-tree-id20072 . -1) (undo-tree-id20073 . -1) (undo-tree-id20074 . -1) (undo-tree-id20075 . -1) (undo-tree-id20076 . -1) (undo-tree-id20077 . -1) (undo-tree-id20078 . -1) (undo-tree-id20079 . -1) (undo-tree-id20080 . -1) (undo-tree-id20081 . -1) (undo-tree-id20082 . -1) (undo-tree-id20083 . -1) (undo-tree-id20084 . -1) (undo-tree-id20085 . -1) (undo-tree-id20086 . -1) (undo-tree-id20087 . -1) (undo-tree-id20088 . -1) (undo-tree-id20089 . -1) (undo-tree-id20090 . -1) (undo-tree-id20091 . -1) (undo-tree-id20092 . -1) (undo-tree-id20093 . -1) (undo-tree-id20094 . -1) (undo-tree-id20095 . -1) (undo-tree-id20096 . -1) (undo-tree-id20097 . -1) (undo-tree-id20098 . -1) (undo-tree-id20099 . -1) (undo-tree-id20100 . -1) (undo-tree-id20101 . -1)) nil (26156 46968 528771 832000) 0 nil])
([nil nil ((#("tolerate " 0 9 (fontified t)) . 2587) (undo-tree-id20005 . -8) (undo-tree-id20006 . -9) (undo-tree-id20007 . -9) (undo-tree-id20008 . -9) (undo-tree-id20009 . -9) (undo-tree-id20010 . -9) (undo-tree-id20011 . -9) (undo-tree-id20012 . -9) (undo-tree-id20013 . -9) (undo-tree-id20014 . -9) (undo-tree-id20015 . -9) (undo-tree-id20016 . -9) (undo-tree-id20017 . -9) (undo-tree-id20018 . -9) (undo-tree-id20019 . -9) (undo-tree-id20020 . -9) (undo-tree-id20021 . -9) (undo-tree-id20022 . -9) (undo-tree-id20023 . -9) (undo-tree-id20024 . -9) (undo-tree-id20025 . -9) (undo-tree-id20026 . -9) (undo-tree-id20027 . -9) (undo-tree-id20028 . -9) (undo-tree-id20029 . -9) (undo-tree-id20030 . -9) (undo-tree-id20031 . -9) (undo-tree-id20032 . -9) (undo-tree-id20033 . -9)) nil (26156 46968 528434 482000) 0 nil])
([nil nil ((2594 . 2595) (2591 . 2594) (2588 . 2591) (2587 . 2588)) nil (26156 46968 528354 403000) 0 nil])
([nil nil ((2595 . 2596) (t 26156 46968 583828 13000)) nil (26156 46975 303386 519000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2815)) nil (26156 46975 303383 820000) 0 nil])
([nil nil ((#("false" 0 5 (fontified t face font-lock-keyword-face)) . 2815) (undo-tree-id20111 . -4)) nil (26156 46975 303379 272000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2814) (undo-tree-id20110 . -1)) nil (26156 46975 303367 313000) 0 nil])
([nil nil ((2817 . 2821) (#("				" 0 4 (fontified nil)) . 2816) (undo-tree-id20252 . -4) (undo-tree-id20253 . -4) (undo-tree-id20254 . -4) (undo-tree-id20255 . -4) (undo-tree-id20256 . -4) (undo-tree-id20257 . -4) (undo-tree-id20258 . -4) (undo-tree-id20259 . -4) (undo-tree-id20260 . -4) (undo-tree-id20261 . -4) (undo-tree-id20262 . -4) (undo-tree-id20263 . -4) (undo-tree-id20264 . -4) (2815 . 2821) (t 26156 46975 391897 605000)) nil (26156 46992 282235 96000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2816) (undo-tree-id20250 . 1) (undo-tree-id20251 . -1)) nil (26156 46992 282211 947000) 0 nil])
([nil nil ((#("				;
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2816) (undo-tree-id20223 . -5) (undo-tree-id20224 . 2) (undo-tree-id20225 . 6) (undo-tree-id20226 . -4) (undo-tree-id20227 . -4) (undo-tree-id20228 . -4) (undo-tree-id20229 . -4) (undo-tree-id20230 . -4) (undo-tree-id20231 . -4) (undo-tree-id20232 . -4) (undo-tree-id20233 . -4) (undo-tree-id20234 . -4) (undo-tree-id20235 . -4) (undo-tree-id20236 . -4) (undo-tree-id20237 . -3) (undo-tree-id20238 . -3) (undo-tree-id20239 . -3) (undo-tree-id20240 . -3) (undo-tree-id20241 . -3) (undo-tree-id20242 . -3) (undo-tree-id20243 . -3) (undo-tree-id20244 . -3) (undo-tree-id20245 . -3) (undo-tree-id20246 . -3) (undo-tree-id20247 . -3) (undo-tree-id20248 . -5) (undo-tree-id20249 . -6)) nil (26156 46992 282203 781000) 0 nil])
([nil nil ((2815 . 2816)) nil (26156 46992 282152 878000) 0 nil])
([nil nil ((2847 . 2848) (2841 . 2847) (#("tol" 0 3 (fontified nil)) . 2841) (2841 . 2844) (#("tolval" 0 6 (fontified nil)) . -2841) (2841 . 2847) (#("tol" 0 3 (fontified t)) . -2841) (undo-tree-id20112 . -3) (undo-tree-id20113 . -3) (undo-tree-id20114 . -3) (undo-tree-id20115 . -3) (undo-tree-id20116 . -3) (undo-tree-id20117 . -3) (undo-tree-id20118 . -3) (undo-tree-id20119 . -3) (undo-tree-id20120 . -3) (undo-tree-id20121 . -3) (undo-tree-id20122 . -3) (undo-tree-id20123 . -3) (undo-tree-id20124 . -3) (undo-tree-id20125 . -3) (undo-tree-id20126 . -3) (undo-tree-id20127 . -3) (undo-tree-id20128 . -3) (undo-tree-id20129 . -3) (undo-tree-id20130 . -3) (undo-tree-id20131 . -3) (undo-tree-id20132 . -3) (undo-tree-id20133 . -3) (undo-tree-id20134 . -3) (undo-tree-id20135 . -3) (undo-tree-id20136 . -3) (undo-tree-id20137 . -3) (undo-tree-id20138 . -3) (undo-tree-id20139 . -3) (undo-tree-id20140 . -3) (undo-tree-id20141 . -3) (undo-tree-id20142 . -3) (undo-tree-id20143 . -3) (undo-tree-id20144 . -3) (undo-tree-id20145 . -3) (undo-tree-id20146 . -3) (undo-tree-id20147 . -3) (undo-tree-id20148 . -3) (undo-tree-id20149 . -3) (undo-tree-id20150 . -3) (undo-tree-id20151 . -3) (undo-tree-id20152 . -3) (undo-tree-id20153 . -3) (undo-tree-id20154 . -3) (undo-tree-id20155 . -3) (undo-tree-id20156 . -3) (undo-tree-id20157 . -3) (undo-tree-id20158 . -3) (undo-tree-id20159 . -3) (undo-tree-id20160 . -3) (undo-tree-id20161 . -3) (undo-tree-id20162 . -3) (undo-tree-id20163 . -3) (undo-tree-id20164 . -3) (undo-tree-id20165 . -3) (undo-tree-id20166 . -3) (undo-tree-id20167 . -3) (undo-tree-id20168 . -3) (undo-tree-id20169 . -3) (undo-tree-id20170 . -3) (undo-tree-id20171 . -3) (undo-tree-id20172 . -3) (undo-tree-id20173 . -3) (undo-tree-id20174 . -3) (undo-tree-id20175 . -3) (undo-tree-id20176 . -3) (undo-tree-id20177 . -3) (undo-tree-id20178 . -3) (undo-tree-id20179 . -3) (undo-tree-id20180 . -3) (undo-tree-id20181 . -3) (undo-tree-id20182 . -3) (undo-tree-id20183 . -3) (undo-tree-id20184 . -3) (undo-tree-id20185 . -3) (undo-tree-id20186 . -3) (undo-tree-id20187 . -3) (undo-tree-id20188 . -3) (undo-tree-id20189 . -3) (undo-tree-id20190 . -3) (undo-tree-id20191 . -3) (undo-tree-id20192 . -3) (undo-tree-id20193 . -3) (undo-tree-id20194 . -3) (undo-tree-id20195 . -3) (undo-tree-id20196 . -3) (undo-tree-id20197 . -3) (undo-tree-id20198 . -3) (undo-tree-id20199 . -3) (undo-tree-id20200 . -3) (undo-tree-id20201 . -3) (undo-tree-id20202 . -3) (undo-tree-id20203 . -3) (undo-tree-id20204 . -3) (undo-tree-id20205 . -3) (undo-tree-id20206 . -3) (undo-tree-id20207 . -3) (undo-tree-id20208 . -3) (undo-tree-id20209 . -3) (undo-tree-id20210 . -3) (undo-tree-id20211 . -3) (undo-tree-id20212 . -3) (undo-tree-id20213 . -3) (undo-tree-id20214 . -3) (undo-tree-id20215 . -3) (undo-tree-id20216 . -3) (undo-tree-id20217 . -3) 2844 (2837 . 2844) (2825 . 2837) (#("in" 0 2 (fontified nil)) . 2825) (2825 . 2827) (#("intersection" 0 12 (fontified nil)) . -2825) (2825 . 2837) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -2825) (undo-tree-id20218 . -2) (undo-tree-id20219 . -2) 2827 (2826 . 2827) (2825 . 2826) (#("t" 0 1 (fontified t)) . -2825) (undo-tree-id20220 . -1) (undo-tree-id20221 . -1) 2826 (2825 . 2826) (2818 . 2825) (#("			    " 0 7 (fontified nil)) . 2817) (undo-tree-id20222 . -7) (2816 . 2825)) nil (26156 46992 282129 724000) 0 nil])
([nil nil ((apply yas--snippet-revive 2816 2824 #s(yas--snippet nil nil #s(yas--exit 2824 nil) 124 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2824 nil) 124 nil nil nil nil)) (2816 . 2824) (#("unwrap()$0" 0 10 (fontified nil)) . 2816) (2816 . 2826) (#("un" 0 2 (fontified nil)) . 2816) (2816 . 2818) (#("unwrap()" 0 8 (fontified nil)) . -2816) (2816 . 2824) (#("un" 0 2 (fontified t)) . -2816) (undo-tree-id20265 . -2) (undo-tree-id20266 . -2) (undo-tree-id20267 . -2) (undo-tree-id20268 . -1) (undo-tree-id20269 . -1) (undo-tree-id20270 . -1) (undo-tree-id20271 . -1) (undo-tree-id20272 . -1) (undo-tree-id20273 . -1) (undo-tree-id20274 . -1) (undo-tree-id20275 . -1) (undo-tree-id20276 . -1) (undo-tree-id20277 . -1) (undo-tree-id20278 . -1) (undo-tree-id20279 . -1) (undo-tree-id20280 . -1) (undo-tree-id20281 . -1) (undo-tree-id20282 . -1) (undo-tree-id20283 . -1) (undo-tree-id20284 . -1) (undo-tree-id20285 . -1) (undo-tree-id20286 . -1) (undo-tree-id20287 . -1) (undo-tree-id20288 . -2) (undo-tree-id20289 . -2) (undo-tree-id20290 . -2) (undo-tree-id20291 . -2) (undo-tree-id20292 . -2) (undo-tree-id20293 . -2) (undo-tree-id20294 . -2) (undo-tree-id20295 . -2) (undo-tree-id20296 . -2) (undo-tree-id20297 . -2) (undo-tree-id20298 . -2) (undo-tree-id20299 . -2) (undo-tree-id20300 . -2) (undo-tree-id20301 . -2) (undo-tree-id20302 . -2) (undo-tree-id20303 . -2) (undo-tree-id20304 . -2) (undo-tree-id20305 . -2) (undo-tree-id20306 . -2) (undo-tree-id20307 . -2) (undo-tree-id20308 . -2) (undo-tree-id20309 . -2) (undo-tree-id20310 . -2) (undo-tree-id20311 . -2) (undo-tree-id20312 . -2) (undo-tree-id20313 . -2) (undo-tree-id20314 . -2) (undo-tree-id20315 . -2) (undo-tree-id20316 . -2) (undo-tree-id20317 . -2) (undo-tree-id20318 . -2) (undo-tree-id20319 . -2) (undo-tree-id20320 . -2) (undo-tree-id20321 . -2) (undo-tree-id20322 . -2) (undo-tree-id20323 . -2) (undo-tree-id20324 . -2) (undo-tree-id20325 . -2) (undo-tree-id20326 . -2) (undo-tree-id20327 . -2) (undo-tree-id20328 . -2) (undo-tree-id20329 . -2) 2818 (2815 . 2818) (t 26156 46992 340074 236000)) nil (26156 47000 811274 632000) 0 nil])
([nil nil ((#("			    // populate toerate vector
" 0 7 (fontified t) 7 10 (fontified t face font-lock-comment-delimiter-face) 10 33 (fontified t face font-lock-comment-face) 33 34 (fontified t face font-lock-comment-face)) . 2859) (undo-tree-id20334 . -33) (undo-tree-id20335 . -32) 2891 (t 26156 47000 880165 29000)) nil (26156 47008 113674 459000) 0 nil])
([nil nil ((#("			    
" 0 7 (fontified t) 7 8 (fontified t)) . 2859) (undo-tree-id20332 . -7) (undo-tree-id20333 . -6) 2865) nil (26156 47008 113667 259000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2859)) nil (26156 47008 113659 212000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2858)) nil (26156 47008 114670 846000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2826)) nil (26156 47114 440914 943000) 0 nil] [nil nil ((#("			    intersection += tolval;
" 0 7 (fontified t) 7 23 (fontified t) 23 30 (fontified t) 30 31 (fontified t)) . 2827) (undo-tree-id20330 . -30) (undo-tree-id20331 . -31)) ((2827 . 2858)) (26156 47008 113645 953000) 0 nil])
([nil nil ((#("
    jaccard_index(&map_data, &map_data, 0);
    " 0 1 (fontified t) 1 5 (fontified t) 5 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t face rust-ampersand-face) 20 28 (fontified t) 28 30 (fontified t) 30 31 (fontified t face rust-ampersand-face) 31 39 (fontified t) 39 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t) 45 49 (fontified t)) . 5667) (undo-tree-id20336 . -48) (undo-tree-id20337 . -48) (undo-tree-id20338 . 5) (undo-tree-id20339 . -48) (undo-tree-id20340 . -48) (undo-tree-id20341 . -48) (undo-tree-id20342 . -48) (undo-tree-id20343 . -48) (undo-tree-id20344 . -48) (undo-tree-id20345 . -48) (undo-tree-id20346 . -48) (undo-tree-id20347 . -48) (undo-tree-id20348 . -48) (undo-tree-id20349 . -27) (undo-tree-id20350 . -27) (undo-tree-id20351 . -27) (undo-tree-id20352 . -27) (undo-tree-id20353 . -27) (undo-tree-id20354 . -27) (undo-tree-id20355 . -27) (undo-tree-id20356 . -27) (undo-tree-id20357 . -27) (undo-tree-id20358 . -27) (undo-tree-id20359 . -27) (undo-tree-id20360 . -27) (undo-tree-id20361 . -27) (undo-tree-id20362 . -27) (undo-tree-id20363 . -27) (undo-tree-id20364 . -27) (undo-tree-id20365 . -27) (undo-tree-id20366 . -27) (undo-tree-id20367 . -48) (undo-tree-id20368 . -48) (undo-tree-id20369 . -48) (undo-tree-id20370 . -48) (undo-tree-id20371 . -48) (undo-tree-id20372 . -48) (undo-tree-id20373 . -48) (undo-tree-id20374 . -48) (undo-tree-id20375 . -48) (undo-tree-id20376 . -27) (undo-tree-id20377 . -27) (undo-tree-id20378 . -27) (undo-tree-id20379 . -27) (undo-tree-id20380 . -27) (undo-tree-id20381 . -27) (undo-tree-id20382 . -27) (undo-tree-id20383 . -27) (undo-tree-id20384 . -27) (undo-tree-id20385 . -44) (undo-tree-id20386 . -44) (undo-tree-id20387 . -44) (undo-tree-id20388 . -44) (undo-tree-id20389 . -44) (undo-tree-id20390 . -44) (undo-tree-id20391 . -44) (undo-tree-id20392 . -44) (undo-tree-id20393 . -44) (undo-tree-id20394 . -44) (undo-tree-id20395 . -44) (undo-tree-id20396 . -43) (undo-tree-id20397 . -43) (undo-tree-id20398 . -43) (undo-tree-id20399 . -43) (undo-tree-id20400 . -43) (undo-tree-id20401 . -43) (undo-tree-id20402 . -43) (undo-tree-id20403 . -43) (undo-tree-id20404 . -43) (undo-tree-id20405 . -43) (undo-tree-id20406 . -43) (undo-tree-id20407 . -44) (undo-tree-id20408 . -44) (undo-tree-id20409 . -44) (undo-tree-id20410 . -44) (undo-tree-id20411 . -44) (undo-tree-id20412 . -44) (undo-tree-id20413 . -44) (undo-tree-id20414 . -44) (undo-tree-id20415 . -44) (undo-tree-id20416 . -44) (undo-tree-id20417 . -44) (undo-tree-id20418 . -43) (undo-tree-id20419 . -43) (undo-tree-id20420 . -43) (undo-tree-id20421 . -43) (undo-tree-id20422 . -43) (undo-tree-id20423 . -43) (undo-tree-id20424 . -43) (undo-tree-id20425 . -43) (undo-tree-id20426 . -43) (undo-tree-id20427 . -43) (undo-tree-id20428 . -43) (undo-tree-id20429 . -48) (undo-tree-id20430 . -48) (undo-tree-id20431 . -48) (undo-tree-id20432 . -48) (undo-tree-id20433 . -48) (undo-tree-id20434 . -48) (undo-tree-id20435 . -48) (undo-tree-id20436 . -48) (undo-tree-id20437 . -48) (undo-tree-id20438 . -49) (undo-tree-id20439 . -48) (undo-tree-id20440 . -48) (undo-tree-id20441 . -48) (undo-tree-id20442 . -48) (undo-tree-id20443 . -48) (undo-tree-id20444 . -48) (undo-tree-id20445 . -48) (undo-tree-id20446 . -48) (undo-tree-id20447 . -48) (undo-tree-id20448 . -48) (undo-tree-id20449 . -48) (undo-tree-id20450 . -48) (undo-tree-id20451 . -4) (undo-tree-id20452 . -4) (undo-tree-id20453 . -4) (undo-tree-id20454 . -4) (undo-tree-id20455 . -4) (undo-tree-id20456 . -4) (undo-tree-id20457 . -4) (undo-tree-id20458 . -4) (undo-tree-id20459 . -4) (undo-tree-id20460 . -49) (t 26156 47114 513477 761000)) nil (26156 47251 773902 355000) 0 nil])
nil
([nil nil ((5668 . 5672) (#("    " 0 4 (fontified nil)) . 5667) (undo-tree-id20674 . -4) (5667 . 5672) (#("    " 0 4 (fontified nil)) . 5666) (undo-tree-id20675 . -4) (5670 . 5671) (5666 . 5670) (t 26156 47251 843284 272000)) nil (26156 47294 450233 2000) 0 nil])
([nil nil ((5667 . 5671)) nil (26156 47294 450225 526000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5898 . 5899) (#("
" 0 1 (fontified nil)) . -6001) (5894 . 6002) 5791) nil (26156 47294 450223 149000) 0 nil])
([nil nil ((5908 . 5909)) nil (26156 47294 450220 33000) 0 nil])
([nil nil ((6051 . 6052) (apply yas--snippet-revive 6020 6051 #s(yas--snippet nil (#s(yas--field 1 6034 6039 nil nil nil t #s(yas--field 2 6041 6047 nil nil nil t #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil)))) #s(yas--field 2 6041 6047 nil nil nil t #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil))) #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil))) #s(yas--exit 6051 nil) 125 nil #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil)) nil nil)) (#("tol" 0 3 (fontified nil)) . 6050) (undo-tree-id20567 . -3) (6049 . 6050) (6041 . 6047) (#("thing2" 0 6 (fontified nil)) . 6041) (undo-tree-id20568 . -6) (6041 . 6047) (#("thing2" 0 6 (fontified t)) . -6041) (undo-tree-id20569 . -6) (undo-tree-id20570 . -6) (undo-tree-id20571 . -6) (undo-tree-id20572 . -6) (undo-tree-id20573 . -6) (undo-tree-id20574 . -6) (undo-tree-id20575 . -6) (undo-tree-id20576 . -6) (undo-tree-id20577 . -6) (undo-tree-id20578 . -6) (undo-tree-id20579 . -6) (undo-tree-id20580 . -6) (undo-tree-id20581 . -6) (undo-tree-id20582 . -6) (undo-tree-id20583 . -6) (undo-tree-id20584 . -6) (undo-tree-id20585 . -6) (undo-tree-id20586 . -6) (undo-tree-id20587 . -6) (undo-tree-id20588 . -6) (undo-tree-id20589 . -6) (undo-tree-id20590 . -6) (undo-tree-id20591 . -6) (undo-tree-id20592 . -6) (undo-tree-id20593 . -6) (undo-tree-id20594 . -6) (undo-tree-id20595 . -6) (undo-tree-id20596 . -6) (undo-tree-id20597 . -6) (undo-tree-id20598 . -6) (undo-tree-id20599 . -6) (undo-tree-id20600 . -6) (undo-tree-id20601 . -6) (undo-tree-id20602 . -6) (undo-tree-id20603 . -6) (undo-tree-id20604 . -6) (undo-tree-id20605 . -6) (undo-tree-id20606 . -6) (undo-tree-id20607 . -6) (undo-tree-id20608 . -6) (undo-tree-id20609 . -6) (undo-tree-id20610 . -6) (undo-tree-id20611 . -6) (undo-tree-id20612 . -6) (undo-tree-id20613 . -6) (undo-tree-id20614 . -6) (undo-tree-id20615 . -6) (undo-tree-id20616 . -6) (undo-tree-id20617 . -6) (undo-tree-id20618 . -6) (undo-tree-id20619 . -6) (undo-tree-id20620 . -6) (undo-tree-id20621 . -6) (undo-tree-id20622 . -6) (undo-tree-id20623 . -6) (undo-tree-id20624 . -6) (undo-tree-id20625 . -6) (undo-tree-id20626 . -6) (undo-tree-id20627 . -6) (undo-tree-id20628 . -6) (undo-tree-id20629 . -6) (undo-tree-id20630 . -6) (undo-tree-id20631 . -6) (undo-tree-id20632 . -6) (undo-tree-id20633 . -6) (undo-tree-id20634 . -6) (undo-tree-id20635 . -6) (undo-tree-id20636 . -6) (undo-tree-id20637 . -6) (undo-tree-id20638 . -6) (undo-tree-id20639 . -6) (undo-tree-id20640 . -6) (undo-tree-id20641 . -6) (undo-tree-id20642 . -6) (undo-tree-id20643 . -6) (undo-tree-id20644 . -6) (undo-tree-id20645 . -6) (undo-tree-id20646 . -6) (undo-tree-id20647 . -6) (undo-tree-id20648 . -6) (undo-tree-id20649 . -6) (undo-tree-id20650 . -6) (undo-tree-id20651 . -6) (undo-tree-id20652 . -6) (undo-tree-id20653 . -6) 6047 (6046 . 6047) (6041 . 6046) (#("th" 0 2 (fontified nil)) . 6041) (undo-tree-id20654 . -2) (6041 . 6043) (#("thing" 0 5 (fontified nil)) . -6041) (undo-tree-id20655 . -5) (6041 . 6046) (#("th" 0 2 (fontified t)) . -6041) (undo-tree-id20656 . -2) (undo-tree-id20657 . -2) (undo-tree-id20658 . -2) 6043 (6042 . 6043) (#("map2" 0 4 (fontified nil)) . 6042) (undo-tree-id20659 . -4) (6041 . 6042) (6034 . 6039) (#("th" 0 2 (fontified nil)) . 6034) (undo-tree-id20660 . -2) (6034 . 6036) (#("thing" 0 5 (fontified nil)) . -6034) (undo-tree-id20661 . -5) (6034 . 6039) (#("th" 0 2 (fontified t)) . -6034) (undo-tree-id20662 . -2) (undo-tree-id20663 . -2) (undo-tree-id20664 . -2) 6036 (6035 . 6036) (#("map1" 0 4 (fontified nil)) . 6035) (undo-tree-id20665 . -4) (6034 . 6035) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6034 6039 nil nil nil t #s(yas--field 2 6041 6047 nil nil nil t #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil)))) #s(yas--field 2 6041 6047 nil nil nil t #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil))) #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil))) #s(yas--exit 6051 nil) 125 nil #s(yas--field 3 6049 6050 nil nil nil t #s(yas--exit 6051 nil)) nil nil)) (6020 . 6050) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol})$0" 0 47 (fontified nil)) . 6020) (6020 . 6067) (#("j" 0 1 (fontified nil)) . 6020) (6020 . 6021) (#("jaccard_index(…)" 0 16 (fontified nil)) . -6020) (6020 . 6036) (#("j" 0 1 (fontified t)) . -6020) (undo-tree-id20666 . -1) (undo-tree-id20667 . -1) 6021 (6020 . 6021) (#("j" 0 1 (fontified t)) . -6020) (undo-tree-id20668 . -1) (undo-tree-id20669 . -1) (undo-tree-id20670 . -1) 6021 (#("e" 0 1 (fontified t)) . -6021) (undo-tree-id20671 . -1) (undo-tree-id20672 . -1) 6022 (6020 . 6022) (6016 . 6020) (6015 . 6016) (6014 . 6015) (6008 . 6014) (6004 . 6008) (#("    " 0 4 (fontified nil)) . 6003) (undo-tree-id20673 . -4) (6002 . 6008)) nil (26156 47294 450196 543000) 0 nil])
([nil nil ((6061 . 6063) (#(" " 0 1 (fontified t)) . -6061) (undo-tree-id20524 . -1) (undo-tree-id20525 . -1) (undo-tree-id20526 . -1) (undo-tree-id20527 . -1) (undo-tree-id20528 . -1) (undo-tree-id20529 . -1) (undo-tree-id20530 . -1) (undo-tree-id20531 . -1) (undo-tree-id20532 . -1) (undo-tree-id20533 . -1) (undo-tree-id20534 . -1) (undo-tree-id20535 . -1) (undo-tree-id20536 . -1) (undo-tree-id20537 . -1) (undo-tree-id20538 . -1) (undo-tree-id20539 . -1) (undo-tree-id20540 . -1) (undo-tree-id20541 . -1) (undo-tree-id20542 . -1) (undo-tree-id20543 . -1) (undo-tree-id20544 . -1) (undo-tree-id20545 . -1) (undo-tree-id20546 . -1) (undo-tree-id20547 . -1) (undo-tree-id20548 . -1) (undo-tree-id20549 . -1) (undo-tree-id20550 . -1) (undo-tree-id20551 . -1) (undo-tree-id20552 . -1) (undo-tree-id20553 . -1) (undo-tree-id20554 . -1) (undo-tree-id20555 . -1) (undo-tree-id20556 . -1) (undo-tree-id20557 . -1) (undo-tree-id20558 . -1) (undo-tree-id20559 . -1) (undo-tree-id20560 . -1) 6062 (6059 . 6062) (6058 . 6059) (#("e" 0 1 (fontified t)) . -6058) (undo-tree-id20561 . -1) (#("c" 0 1 (fontified t)) . -6059) (undo-tree-id20562 . -1) (#("h" 0 1 (fontified t)) . -6060) (undo-tree-id20563 . -1) (#("o" 0 1 (fontified t)) . -6061) (undo-tree-id20564 . -1) (#(" " 0 1 (fontified t)) . -6062) (undo-tree-id20565 . -1) 6063 (6058 . 6063) (6054 . 6058) (#("    " 0 4 (fontified nil)) . 6053) (undo-tree-id20566 . -4) (6052 . 6058)) nil (26156 47294 449335 389000) 0 nil])
([nil nil ((6061 . 6062)) nil (26156 47294 449251 239000) 0 nil])
([nil nil ((6063 . 6068) (#("in" 0 2 (fontified nil)) . 6063) (6063 . 6065) (#("index" 0 5 (fontified nil)) . -6063) (6063 . 6068) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -6063) (undo-tree-id20461 . -2) (undo-tree-id20462 . -2) (undo-tree-id20463 . -2) (undo-tree-id20464 . -2) (undo-tree-id20465 . -2) (undo-tree-id20466 . -2) (undo-tree-id20467 . -2) (undo-tree-id20468 . -2) (undo-tree-id20469 . -2) (undo-tree-id20470 . -2) (undo-tree-id20471 . -2) (undo-tree-id20472 . -2) (undo-tree-id20473 . -2) (undo-tree-id20474 . -2) (undo-tree-id20475 . -2) (undo-tree-id20476 . -2) (undo-tree-id20477 . -2) (undo-tree-id20478 . -2) (undo-tree-id20479 . -2) (undo-tree-id20480 . -2) (undo-tree-id20481 . -2) (undo-tree-id20482 . -2) (undo-tree-id20483 . -2) (undo-tree-id20484 . -2) (undo-tree-id20485 . -2) (undo-tree-id20486 . -2) (undo-tree-id20487 . -2) (undo-tree-id20488 . -2) (undo-tree-id20489 . -2) (undo-tree-id20490 . -2) (undo-tree-id20491 . -2) (undo-tree-id20492 . -2) (undo-tree-id20493 . -2) (undo-tree-id20494 . -2) (undo-tree-id20495 . -2) (undo-tree-id20496 . -2) (undo-tree-id20497 . -2) (undo-tree-id20498 . -2) (undo-tree-id20499 . -2) (undo-tree-id20500 . -2) (undo-tree-id20501 . -2) (undo-tree-id20502 . -2) (undo-tree-id20503 . -2) (undo-tree-id20504 . -2) (undo-tree-id20505 . -2) (undo-tree-id20506 . -2) (undo-tree-id20507 . -2) (undo-tree-id20508 . -2) (undo-tree-id20509 . -2) (undo-tree-id20510 . -2) (undo-tree-id20511 . -2) (undo-tree-id20512 . -2) (undo-tree-id20513 . -2) (undo-tree-id20514 . -2) (undo-tree-id20515 . -2) (undo-tree-id20516 . -2) (undo-tree-id20517 . -2) (undo-tree-id20518 . -2) (undo-tree-id20519 . -2) (undo-tree-id20520 . -2) (undo-tree-id20521 . -2) (undo-tree-id20522 . -2) (undo-tree-id20523 . -2) 6065 (6063 . 6065)) nil (26156 47294 449240 82000) 0 nil])
([nil nil ((6069 . 6070)) nil (26156 47294 449103 336000) 0 nil])
([nil nil ((6034 . 6035) (t 26156 47294 539886 368000)) nil (26156 47329 110064 157000) 0 nil])
([nil nil ((6042 . 6043)) nil (26156 47329 110052 533000) 0 nil])
([nil nil ((#(".to_pgm();" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t)) . 5884) (t 26156 47329 180387 95000)) nil (26156 47349 592693 724000) 0 nil])
([nil nil ((5983 . 5984)) nil (26156 47349 592691 453000) 0 nil])
([nil nil ((#(".kto_pgm();" 0 2 (fontified t) 2 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t)) . 5982) (undo-tree-id20677 . 9) (undo-tree-id20678 . 9) (undo-tree-id20679 . -2) (undo-tree-id20680 . -1)) nil (26156 47349 592688 753000) 0 nil])
([nil nil ((5884 . 5885)) nil (26156 47349 592678 830000) 0 nil])
([nil nil ((5884 . 5885) (#("l" 0 1 (fontified t)) . -5884) (undo-tree-id20676 . -1) 5885) nil (26156 47349 592674 206000) 0 nil])
([nil nil ((5983 . 5984)) nil (26156 47349 592646 697000) 0 nil])
([nil nil ((6340 . 6342) (t 26156 47349 688688 386000)) nil (26156 47356 958442 737000) 0 nil])
([nil nil ((5956 . 5961) (t 26156 47357 52797 411000)) nil (26156 47382 90280 518000) 0 nil])
([nil nil ((5960 . 5961) (#("9" 0 1 (fontified t)) . -5960) (undo-tree-id20681 . -1) 5961) nil (26156 47382 90274 766000) 0 nil])
([nil nil ((5982 . 5987)) nil (26156 47382 90246 657000) 0 nil])
([nil nil ((#("200" 0 3 (fontified t)) . 5880) (undo-tree-id20686 . -2) (undo-tree-id20687 . -2) (undo-tree-id20688 . -3) (undo-tree-id20689 . -3) (undo-tree-id20690 . -3) (undo-tree-id20691 . -3) (undo-tree-id20692 . -3) (undo-tree-id20693 . -3) (undo-tree-id20694 . -3) (undo-tree-id20695 . -3) (undo-tree-id20696 . -3) (undo-tree-id20697 . -3) (undo-tree-id20698 . -3) (undo-tree-id20699 . -3) (undo-tree-id20700 . -3) (t 26156 47382 185172 747000)) nil (26156 47392 424010 976000) 0 nil])
([nil nil ((5880 . 5883)) nil (26156 47392 423983 112000) 0 nil])
([nil nil ((5882 . 5883) (#("-" 0 1 (fontified t)) . -5882) (undo-tree-id20684 . -1) (undo-tree-id20685 . -1) 5883) nil (26156 47392 423980 214000) 0 nil])
([nil nil ((#("200" 0 3 (fontified t)) . 5989) (undo-tree-id20682 . -2) (undo-tree-id20683 . -3)) nil (26156 47392 423971 67000) 0 nil])
([nil nil ((5989 . 5992)) nil (26156 47392 423942 769000) 0 nil])
([nil nil ((6043 . 6045) (#("0" 0 1 (fontified t)) . -6043) (undo-tree-id20824 . -1) 6044 (t 26156 47392 493328 99000)) nil (26156 47409 642633 748000) 0 nil])
([nil nil ((6043 . 6045) (#("5" 0 1 (fontified t)) . -6043) (undo-tree-id20701 . -1) (undo-tree-id20702 . -1) (undo-tree-id20703 . -1) (undo-tree-id20704 . -1) (undo-tree-id20705 . -1) (undo-tree-id20706 . -1) (undo-tree-id20707 . -1) (undo-tree-id20708 . -1) (undo-tree-id20709 . -1) (undo-tree-id20710 . -1) (undo-tree-id20711 . -1) (undo-tree-id20712 . -1) (undo-tree-id20713 . -1) (undo-tree-id20714 . -1) (undo-tree-id20715 . -1) (undo-tree-id20716 . -1) (undo-tree-id20717 . -1) (undo-tree-id20718 . -1) (undo-tree-id20719 . -1) (undo-tree-id20720 . -1) (undo-tree-id20721 . -1) (undo-tree-id20722 . -1) (undo-tree-id20723 . -1) (undo-tree-id20724 . -1) (undo-tree-id20725 . -1) (undo-tree-id20726 . -1) (undo-tree-id20727 . -1) (undo-tree-id20728 . -1) (undo-tree-id20729 . -1) (undo-tree-id20730 . -1) (undo-tree-id20731 . -1) (undo-tree-id20732 . -1) (undo-tree-id20733 . -1) (undo-tree-id20734 . -1) (undo-tree-id20735 . -1) (undo-tree-id20736 . -1) (undo-tree-id20737 . -1) (undo-tree-id20738 . -1) (undo-tree-id20739 . -1) (undo-tree-id20740 . -1) (undo-tree-id20741 . -1) (undo-tree-id20742 . -1) (undo-tree-id20743 . -1) (undo-tree-id20744 . -1) (undo-tree-id20745 . -1) (undo-tree-id20746 . -1) (undo-tree-id20747 . -1) (undo-tree-id20748 . -1) (undo-tree-id20749 . -1) (undo-tree-id20750 . -1) (undo-tree-id20751 . -1) (undo-tree-id20752 . -1) (undo-tree-id20753 . -1) (undo-tree-id20754 . -1) (undo-tree-id20755 . -1) (undo-tree-id20756 . -1) (undo-tree-id20757 . -1) (undo-tree-id20758 . -1) (undo-tree-id20759 . -1) (undo-tree-id20760 . -1) (undo-tree-id20761 . -1) (undo-tree-id20762 . -1) (undo-tree-id20763 . -1) (undo-tree-id20764 . -1) (undo-tree-id20765 . -1) (undo-tree-id20766 . -1) (undo-tree-id20767 . -1) (undo-tree-id20768 . -1) (undo-tree-id20769 . -1) (undo-tree-id20770 . -1) (undo-tree-id20771 . -1) (undo-tree-id20772 . -1) (undo-tree-id20773 . -1) (undo-tree-id20774 . -1) (undo-tree-id20775 . -1) (undo-tree-id20776 . -1) (undo-tree-id20777 . -1) (undo-tree-id20778 . -1) (undo-tree-id20779 . -1) (undo-tree-id20780 . -1) (undo-tree-id20781 . -1) (undo-tree-id20782 . -1) (undo-tree-id20783 . -1) (undo-tree-id20784 . -1) (undo-tree-id20785 . -1) (undo-tree-id20786 . -1) (undo-tree-id20787 . -1) (undo-tree-id20788 . -1) (undo-tree-id20789 . -1) (undo-tree-id20790 . -1) (undo-tree-id20791 . -1) (undo-tree-id20792 . -1) (undo-tree-id20793 . -1) (undo-tree-id20794 . -1) (undo-tree-id20795 . -1) (undo-tree-id20796 . -1) (undo-tree-id20797 . -1) (undo-tree-id20798 . -1) (undo-tree-id20799 . -1) (undo-tree-id20800 . -1) (#("0" 0 1 (fontified t)) . -6044) (undo-tree-id20801 . -1) (undo-tree-id20802 . -1) (undo-tree-id20803 . -1) (undo-tree-id20804 . -1) (undo-tree-id20805 . -1) (undo-tree-id20806 . -1) (undo-tree-id20807 . -1) (undo-tree-id20808 . -1) (undo-tree-id20809 . -1) (undo-tree-id20810 . -1) (undo-tree-id20811 . -1) (undo-tree-id20812 . -1) (undo-tree-id20813 . -1) (undo-tree-id20814 . -1) (undo-tree-id20815 . -1) (undo-tree-id20816 . -1) (undo-tree-id20817 . -1) (undo-tree-id20818 . -1) (undo-tree-id20819 . -1) (undo-tree-id20820 . -1) (undo-tree-id20821 . -1) (undo-tree-id20822 . -1) (undo-tree-id20823 . -1) 6045) nil (26156 47409 642609 908000) 0 nil])
([nil nil ((2775 . 2791) (2774 . 2776) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . -2774) (2774 . 2775) (apply yas--snippet-revive 2765 2775 #s(yas--snippet nil nil #s(yas--exit 2774 nil) 126 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2774 nil) 126 nil nil nil nil)) (2765 . 2775) (#("println!($0)" 0 12 (fontified nil)) . 2765) (2765 . 2777) (#("pr" 0 2 (fontified nil)) . 2765) (2765 . 2767) (#("println!(…)" 0 11 (fontified nil)) . -2765) (2765 . 2776) (#("pr" 0 2 (fontified t)) . -2765) (undo-tree-id20825 . -2) (undo-tree-id20826 . -2) (undo-tree-id20827 . -2) (undo-tree-id20828 . -2) 2767 (2765 . 2767) (2758 . 2765) (t 26156 47409 737589 768000)) nil (26156 47486 16373 253000) 0 nil])
([nil nil ((2793 . 2794)) nil (26156 47486 16331 524000) 0 nil])
([nil nil ((4395 . 4400) (#("is" 0 2 (fontified nil)) . 4395) (4395 . 4397) (#("isize" 0 5 (fontified nil)) . -4395) (4395 . 4400) (#("is" 0 2 (fontified t)) . -4395) (undo-tree-id20832 . -2) (undo-tree-id20833 . -2) (undo-tree-id20834 . -2) 4397 (4391 . 4397) (t 26156 47486 110773 584000)) nil (26156 47537 114521 18000) 0 nil])
([nil nil ((4465 . 4470) (#("is" 0 2 (fontified nil)) . 4465) (4465 . 4467) (#("isize" 0 5 (fontified nil)) . -4465) (4465 . 4470) (#("is" 0 2 (fontified t)) . -4465) (undo-tree-id20829 . -2) (undo-tree-id20830 . -2) (undo-tree-id20831 . -2) 4467 (4461 . 4467)) nil (26156 47537 114502 743000) 0 nil])
([nil nil ((4538 . 4543) (#("is" 0 2 (fontified nil)) . 4538) (4538 . 4540) (#("isize" 0 5 (fontified nil)) . -4538) (4538 . 4543) (#("is" 0 2 (fontified t)) . -4538) (undo-tree-id20874 . -2) (undo-tree-id20875 . -2) (undo-tree-id20876 . -2) (undo-tree-id20877 . -1) (undo-tree-id20878 . -1) (undo-tree-id20879 . -1) (undo-tree-id20880 . -1) (undo-tree-id20881 . -1) (undo-tree-id20882 . -1) (undo-tree-id20883 . -1) (undo-tree-id20884 . -1) (undo-tree-id20885 . -1) (undo-tree-id20886 . -1) (undo-tree-id20887 . -1) (undo-tree-id20888 . -1) (undo-tree-id20889 . -1) (undo-tree-id20890 . -1) (undo-tree-id20891 . -1) (undo-tree-id20892 . -1) (undo-tree-id20893 . -1) (undo-tree-id20894 . -1) (undo-tree-id20895 . -1) (undo-tree-id20896 . -1) (undo-tree-id20897 . -1) (undo-tree-id20898 . -1) (undo-tree-id20899 . -1) (undo-tree-id20900 . -1) (undo-tree-id20901 . -1) (undo-tree-id20902 . -1) (undo-tree-id20903 . -1) (undo-tree-id20904 . -1) (undo-tree-id20905 . -1) (undo-tree-id20906 . -1) (undo-tree-id20907 . -1) (undo-tree-id20908 . -1) (undo-tree-id20909 . -1) (undo-tree-id20910 . -1) (undo-tree-id20911 . -1) (undo-tree-id20912 . -1) (undo-tree-id20913 . -1) (undo-tree-id20914 . -1) (undo-tree-id20915 . -1) (undo-tree-id20916 . -1) (undo-tree-id20917 . -1) (undo-tree-id20918 . -1) (undo-tree-id20919 . -1) (undo-tree-id20920 . -1) (undo-tree-id20921 . -1) (undo-tree-id20922 . -1) (undo-tree-id20923 . -1) (undo-tree-id20924 . -1) (undo-tree-id20925 . -1) (undo-tree-id20926 . -1) (undo-tree-id20927 . -1) (undo-tree-id20928 . -1) (undo-tree-id20929 . -1) (undo-tree-id20930 . -1) (undo-tree-id20931 . -1) (undo-tree-id20932 . -1) (undo-tree-id20933 . -1) (undo-tree-id20934 . -1) (undo-tree-id20935 . -1) (undo-tree-id20936 . -1) (undo-tree-id20937 . -1) (undo-tree-id20938 . -1) (undo-tree-id20939 . -1) (undo-tree-id20940 . -1) (undo-tree-id20941 . -1) (undo-tree-id20942 . -1) (undo-tree-id20943 . -1) (undo-tree-id20944 . -1) (undo-tree-id20945 . -1) (undo-tree-id20946 . -1) (undo-tree-id20947 . -2) (undo-tree-id20948 . -2) (undo-tree-id20949 . -2) (undo-tree-id20950 . -2) (undo-tree-id20951 . -2) (undo-tree-id20952 . -2) (undo-tree-id20953 . -2) (undo-tree-id20954 . -2) (undo-tree-id20955 . -2) (undo-tree-id20956 . -2) (undo-tree-id20957 . -2) (undo-tree-id20958 . -2) (undo-tree-id20959 . -2) (undo-tree-id20960 . -2) (undo-tree-id20961 . -2) (undo-tree-id20962 . -2) (undo-tree-id20963 . -2) (undo-tree-id20964 . -2) (undo-tree-id20965 . -2) (undo-tree-id20966 . -2) (undo-tree-id20967 . -2) (undo-tree-id20968 . -2) (undo-tree-id20969 . -2) (undo-tree-id20970 . -2) (undo-tree-id20971 . -2) (undo-tree-id20972 . -2) (undo-tree-id20973 . -2) (undo-tree-id20974 . -2) (undo-tree-id20975 . -2) (undo-tree-id20976 . -2) (undo-tree-id20977 . -2) (undo-tree-id20978 . -2) (undo-tree-id20979 . -2) (undo-tree-id20980 . -2) (undo-tree-id20981 . -2) (undo-tree-id20982 . -2) (undo-tree-id20983 . -2) (undo-tree-id20984 . -2) (undo-tree-id20985 . -2) (undo-tree-id20986 . -2) (undo-tree-id20987 . -2) (undo-tree-id20988 . -2) (undo-tree-id20989 . -2) (undo-tree-id20990 . -2) (undo-tree-id20991 . -2) (undo-tree-id20992 . -2) (undo-tree-id20993 . -2) (undo-tree-id20994 . -2) (undo-tree-id20995 . -2) (undo-tree-id20996 . -2) (undo-tree-id20997 . -2) (undo-tree-id20998 . -2) (undo-tree-id20999 . -2) (undo-tree-id21000 . -2) (undo-tree-id21001 . -2) (undo-tree-id21002 . -2) (undo-tree-id21003 . -2) (undo-tree-id21004 . -2) (undo-tree-id21005 . -2) (undo-tree-id21006 . -2) (undo-tree-id21007 . -2) (undo-tree-id21008 . -2) (undo-tree-id21009 . -2) (undo-tree-id21010 . -2) (undo-tree-id21011 . -2) (undo-tree-id21012 . -2) (undo-tree-id21013 . -2) (undo-tree-id21014 . -2) (undo-tree-id21015 . -2) (undo-tree-id21016 . -2) (undo-tree-id21017 . -2) (undo-tree-id21018 . -2) (undo-tree-id21019 . -2) (undo-tree-id21020 . -2) 4540 (4534 . 4540) (t 26156 47537 211586 357000)) nil (26156 47552 844935 493000) 0 nil])
([nil nil ((4613 . 4614) (4608 . 4613) (#("is" 0 2 (fontified nil)) . 4608) (4608 . 4610) (#("isize" 0 5 (fontified nil)) . -4608) (4608 . 4613) (#("is" 0 2 (fontified t)) . -4608) (undo-tree-id20835 . -2) (undo-tree-id20836 . -2) (undo-tree-id20837 . -2) (undo-tree-id20838 . -2) (undo-tree-id20839 . -2) (undo-tree-id20840 . -2) (undo-tree-id20841 . -2) (undo-tree-id20842 . -2) (undo-tree-id20843 . -2) (undo-tree-id20844 . -2) (undo-tree-id20845 . -2) (undo-tree-id20846 . -2) (undo-tree-id20847 . -2) (undo-tree-id20848 . -2) (undo-tree-id20849 . -2) (undo-tree-id20850 . -2) (undo-tree-id20851 . -2) (undo-tree-id20852 . -2) (undo-tree-id20853 . -2) (undo-tree-id20854 . -2) (undo-tree-id20855 . -2) (undo-tree-id20856 . -2) (undo-tree-id20857 . -2) (undo-tree-id20858 . -2) (undo-tree-id20859 . -2) (undo-tree-id20860 . -2) (undo-tree-id20861 . -2) (undo-tree-id20862 . -2) (undo-tree-id20863 . -2) (undo-tree-id20864 . -2) (undo-tree-id20865 . -2) (undo-tree-id20866 . -2) (undo-tree-id20867 . -2) (undo-tree-id20868 . -2) (undo-tree-id20869 . -2) (undo-tree-id20870 . -2) (undo-tree-id20871 . -2) (undo-tree-id20872 . -2) (undo-tree-id20873 . -2) 4610 (4609 . 4610) (4605 . 4609)) nil (26156 47552 844504 23000) 0 nil])
([nil nil ((#("as " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 4392) (undo-tree-id21038 . -2) (t 26156 47552 911839 106000)) nil (26156 47578 799173 997000) 0 nil])
([nil nil ((#("isize " 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t)) . 4392) (undo-tree-id21037 . -5)) nil (26156 47578 799169 296000) 0 nil])
([nil nil ((#("as " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 4453) (undo-tree-id21035 . -2) (undo-tree-id21036 . -3)) nil (26156 47578 799165 552000) 0 nil])
([nil nil ((#("isize " 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t)) . 4453) (undo-tree-id21032 . -5) (undo-tree-id21033 . -6) (undo-tree-id21034 . -6)) nil (26156 47578 799159 499000) 0 nil])
([nil nil ((#("as " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 4517) (undo-tree-id21030 . -2) (undo-tree-id21031 . -3)) nil (26156 47578 799151 766000) 0 nil])
([nil nil ((#("isize " 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t)) . 4517) (undo-tree-id21027 . -5) (undo-tree-id21028 . -6) (undo-tree-id21029 . -6)) nil (26156 47578 799145 709000) 0 nil])
([nil nil ((#("as " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 4578) (undo-tree-id21024 . -2) (undo-tree-id21025 . -3) (undo-tree-id21026 . -3)) nil (26156 47578 799136 126000) 0 nil])
([nil nil ((#("isize " 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t)) . 4578) (undo-tree-id21021 . -5) (undo-tree-id21022 . -6) (undo-tree-id21023 . -6)) nil (26156 47578 799119 482000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4355) (undo-tree-id21201 . -1) (undo-tree-id21202 . -1) (undo-tree-id21203 . -1) (undo-tree-id21204 . -1) (undo-tree-id21205 . -1) (undo-tree-id21206 . -1) (undo-tree-id21207 . -1) (undo-tree-id21208 . -1) (undo-tree-id21209 . -1) (undo-tree-id21210 . -1) (undo-tree-id21211 . -1) (undo-tree-id21212 . -1) (undo-tree-id21213 . -1) 4356 (4355 . 4356) (#("	" 0 1 (fontified nil)) . 4354) (undo-tree-id21214 . -1) (undo-tree-id21215 . -1) (undo-tree-id21216 . -1) (undo-tree-id21217 . -1) (undo-tree-id21218 . -1) (undo-tree-id21219 . -1) (undo-tree-id21220 . -1) (undo-tree-id21221 . -1) (undo-tree-id21222 . -1) (undo-tree-id21223 . -1) (undo-tree-id21224 . -1) (undo-tree-id21225 . -1) (undo-tree-id21226 . -1) (4354 . 4356) (#("	" 0 1 (fontified nil)) . 4353) (4353 . 4354) (4353 . 4354) (t 26156 47578 892260 291000)) nil (26156 47610 156481 127000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -4355) (undo-tree-id21039 . -1) (undo-tree-id21040 . -1) (undo-tree-id21041 . -1) (undo-tree-id21042 . -1) (undo-tree-id21043 . -1) (undo-tree-id21044 . -1) (undo-tree-id21045 . -1) (undo-tree-id21046 . -1) (undo-tree-id21047 . -1) (undo-tree-id21048 . -1) (undo-tree-id21049 . -1) (undo-tree-id21050 . -1) (undo-tree-id21051 . -1) (undo-tree-id21052 . -1) (undo-tree-id21053 . -1) (undo-tree-id21054 . -1) (undo-tree-id21055 . -1) (undo-tree-id21056 . -1) (undo-tree-id21057 . -1) (undo-tree-id21058 . -1) (undo-tree-id21059 . -1) (undo-tree-id21060 . -1) (undo-tree-id21061 . -1) (undo-tree-id21062 . -1) (undo-tree-id21063 . -1) (undo-tree-id21064 . -1) (undo-tree-id21065 . -1) (undo-tree-id21066 . -1) (undo-tree-id21067 . -1) (undo-tree-id21068 . -1) (undo-tree-id21069 . -1) (undo-tree-id21070 . -1) (undo-tree-id21071 . -1) (undo-tree-id21072 . -1) (undo-tree-id21073 . -1) (undo-tree-id21074 . -1) (undo-tree-id21075 . -1) (undo-tree-id21076 . -1) (undo-tree-id21077 . -1) (undo-tree-id21078 . -1) (undo-tree-id21079 . -1) (undo-tree-id21080 . -1) (undo-tree-id21081 . -1) (undo-tree-id21082 . -1) (undo-tree-id21083 . -1) (undo-tree-id21084 . -1) (undo-tree-id21085 . -1) (undo-tree-id21086 . -1) (undo-tree-id21087 . -1) (undo-tree-id21088 . -1) (undo-tree-id21089 . -1) (undo-tree-id21090 . -1) (undo-tree-id21091 . -1) (undo-tree-id21092 . -1) (undo-tree-id21093 . -1) (undo-tree-id21094 . -1) (undo-tree-id21095 . -1) (undo-tree-id21096 . -1) (undo-tree-id21097 . -1) (undo-tree-id21098 . -1) (undo-tree-id21099 . -1) (undo-tree-id21100 . -1) (undo-tree-id21101 . -1) (undo-tree-id21102 . -1) (undo-tree-id21103 . -1) (undo-tree-id21104 . -1) (undo-tree-id21105 . -1) (undo-tree-id21106 . -1) (undo-tree-id21107 . -1) (undo-tree-id21108 . -1) (undo-tree-id21109 . -1) (undo-tree-id21110 . -1) (undo-tree-id21111 . -1) (undo-tree-id21112 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4356) (undo-tree-id21113 . -1) (undo-tree-id21114 . -1) (undo-tree-id21115 . -1) (undo-tree-id21116 . -1) (undo-tree-id21117 . -1) (undo-tree-id21118 . -1) (undo-tree-id21119 . -1) (undo-tree-id21120 . -1) (undo-tree-id21121 . -1) (undo-tree-id21122 . -1) (undo-tree-id21123 . -1) (undo-tree-id21124 . -1) (undo-tree-id21125 . -1) (undo-tree-id21126 . -1) (undo-tree-id21127 . -1) (undo-tree-id21128 . -1) (undo-tree-id21129 . -1) (undo-tree-id21130 . -1) (undo-tree-id21131 . -1) (undo-tree-id21132 . -1) (undo-tree-id21133 . -1) (undo-tree-id21134 . -1) (undo-tree-id21135 . -1) (undo-tree-id21136 . -1) (undo-tree-id21137 . -1) (undo-tree-id21138 . -1) (undo-tree-id21139 . -1) (undo-tree-id21140 . -1) (undo-tree-id21141 . -1) (undo-tree-id21142 . -1) (undo-tree-id21143 . -1) (undo-tree-id21144 . -1) (undo-tree-id21145 . -1) (undo-tree-id21146 . -1) (undo-tree-id21147 . -1) (undo-tree-id21148 . -1) (undo-tree-id21149 . -1) (undo-tree-id21150 . -1) (undo-tree-id21151 . -1) (undo-tree-id21152 . -1) (undo-tree-id21153 . -1) (undo-tree-id21154 . -1) (undo-tree-id21155 . -1) (undo-tree-id21156 . -1) (undo-tree-id21157 . -1) (undo-tree-id21158 . -1) (undo-tree-id21159 . -1) (undo-tree-id21160 . -1) (undo-tree-id21161 . -1) (undo-tree-id21162 . -1) (undo-tree-id21163 . -1) (undo-tree-id21164 . -1) (undo-tree-id21165 . -1) (undo-tree-id21166 . -1) (#(" " 0 1 (fontified t)) . -4357) (undo-tree-id21167 . -1) (undo-tree-id21168 . -1) (undo-tree-id21169 . -1) (undo-tree-id21170 . -1) (undo-tree-id21171 . -1) (undo-tree-id21172 . -1) (undo-tree-id21173 . -1) (undo-tree-id21174 . -1) (undo-tree-id21175 . -1) (undo-tree-id21176 . -1) (undo-tree-id21177 . -1) (undo-tree-id21178 . -1) (undo-tree-id21179 . -1) (undo-tree-id21180 . -1) (undo-tree-id21181 . -1) (undo-tree-id21182 . -1) (undo-tree-id21183 . -1) (undo-tree-id21184 . -1) (undo-tree-id21185 . -1) (undo-tree-id21186 . -1) (undo-tree-id21187 . -1) (undo-tree-id21188 . -1) (undo-tree-id21189 . -1) (undo-tree-id21190 . -1) (undo-tree-id21191 . -1) (undo-tree-id21192 . -1) (undo-tree-id21193 . -1) (undo-tree-id21194 . -1) (undo-tree-id21195 . -1) (undo-tree-id21196 . -1) (undo-tree-id21197 . -1) (undo-tree-id21198 . -1) (undo-tree-id21199 . -1) (undo-tree-id21200 . -1) 4358 (4355 . 4358) (4354 . 4355)) nil (26156 47610 156410 676000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3797) (undo-tree-id21248 . -1) 3798 (3797 . 3798) (#("	" 0 1 (fontified nil)) . 3796) (undo-tree-id21249 . -1) (3795 . 3798) (t 26156 47610 224772 908000)) nil (26156 47704 325973 103000) 0 nil])
([nil nil ((3798 . 3803) (3797 . 3798)) nil (26156 47704 325965 680000) 0 nil])
([nil nil ((3802 . 3809) (#(" " 0 1 (fontified t)) . -3802) (undo-tree-id21247 . -1) 3803 (3802 . 3803)) nil (26156 47704 325962 951000) 0 nil])
([nil nil ((3813 . 3818) (3814 . 3815) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 3813) (3813 . 3818) (3812 . 3814) (3810 . 3813)) nil (26156 47704 325957 652000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -3818) (undo-tree-id21238 . -1) (undo-tree-id21239 . -1) (undo-tree-id21240 . -1) (#("i" 0 1 (fontified t)) . -3819) (undo-tree-id21241 . -1) (undo-tree-id21242 . -1) (undo-tree-id21243 . -1) (#("n" 0 1 (fontified t)) . -3820) (undo-tree-id21244 . -1) (undo-tree-id21245 . -1) 3821 (3818 . 3821) (#(" " 0 1 (fontified t)) . -3818) (undo-tree-id21246 . -1) 3819 (3818 . 3819)) nil (26156 47704 325951 674000) 0 nil])
([nil nil ((3818 . 3820)) nil (26156 47704 325932 933000) 0 nil])
([nil nil ((#("	if (rad > x) {
	    mi
	}

" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 9 (fontified t) 9 10 (fontified t syntax-table (1)) 10 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-3-face)) 15 16 (fontified t) 16 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t) 27 28 (fontified t)) . 3797) (undo-tree-id21231 . -27) (undo-tree-id21232 . -27) (undo-tree-id21233 . 5) (undo-tree-id21234 . -27) (undo-tree-id21235 . -23) (undo-tree-id21236 . -27) (undo-tree-id21237 . -27)) nil (26156 47704 325930 257000) 0 nil])
([nil nil ((3815 . 3816)) nil (26156 47704 325914 174000) 0 nil])
([nil nil ((3820 . 3827) (#("x" 0 1 (fontified t)) . -3820) (undo-tree-id21229 . -1) (undo-tree-id21230 . -1) 3821 (3820 . 3821) (3815 . 3821)) nil (26156 47704 325911 27000) 0 nil])
([nil nil ((3831 . 3836) (3832 . 3833) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 3831) (3831 . 3836) (3830 . 3832) (3828 . 3831)) nil (26156 47704 325902 102000) 0 nil])
([nil nil (("get_within_range(x - rad, 0, self.width);" . 3841)) nil (26156 47704 325898 81000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3875 . 3876) (nil fontified nil 3835 . 3876) (3835 . 3876) 3834) nil (26156 47704 325895 704000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t rear-nonsticky t)) . -3875) (undo-tree-id21228 . -1) 3876) nil (26156 47704 325891 710000) 0 nil])
([nil nil ((3836 . 3837) (3830 . 3836)) nil (26156 47704 325886 860000) 0 nil])
([nil nil ((3840 . 3845) (#("	" 0 1 (fontified nil)) . -3839) (undo-tree-id21227 . -1) (3840 . 3841) (#("}" 0 1 (fontified nil)) . -3840) (3840 . 3841) (3837 . 3840)) nil (26156 47704 325880 693000) 0 nil])
([nil nil ((3896 . 3897)) nil (26156 47704 325852 670000) 0 nil])
([nil nil ((3840 . 3841) (t 26156 47704 396696 522000)) nil (26156 47729 416810 414000) 0 nil])
([nil nil ((apply -15 3796 3913 undo--wrap-and-run-primitive-undo 3796 3913 ((3906 . 3909) (3857 . 3860) (3845 . 3848) (3835 . 3838) (3798 . 3801) 3796))) nil (26156 47735 792071 77000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -3903) (undo-tree-id21250 . -4) (undo-tree-id21252 . -2) (undo-tree-id21254 . -4) (undo-tree-id21256 . -4) (undo-tree-id21258 . -4) (undo-tree-id21260 . -4) (undo-tree-id21262 . -4) (undo-tree-id21264 . -4) (undo-tree-id21266 . -4) (undo-tree-id21268 . -4) 3907 (3903 . 3907) (#("    " 0 4 (fontified nil)) . 3902) (undo-tree-id21270 . -4) (undo-tree-id21272 . -2) (undo-tree-id21274 . -4) (undo-tree-id21276 . -4) (undo-tree-id21278 . -4) (undo-tree-id21280 . -4) (undo-tree-id21282 . -4) (undo-tree-id21284 . -4) (undo-tree-id21286 . -4) (undo-tree-id21288 . -4) (3902 . 3907) (#("	" 0 1 (fontified nil)) . -3897) (3897 . 3898) (#("	" 0 1 (fontified nil)) . 3897) (3893 . 3897) (3898 . 3899) (t 26156 47707 888534 981000)) ((#("
" 0 1 (fontified nil)) . 3898) (undo-tree-id21297 . -1) (undo-tree-id21298 . -1) (undo-tree-id21299 . -1) (undo-tree-id21300 . -1) (undo-tree-id21301 . -1) (undo-tree-id21302 . -1) (undo-tree-id21303 . -1) (undo-tree-id21304 . -1) (undo-tree-id21305 . -1) (undo-tree-id21306 . -1) (undo-tree-id21307 . -1) (undo-tree-id21308 . -1) (undo-tree-id21309 . -1) (undo-tree-id21310 . -1) (undo-tree-id21311 . -1) (undo-tree-id21312 . -1) (undo-tree-id21313 . -1) (undo-tree-id21314 . -1) (undo-tree-id21315 . -1) (undo-tree-id21316 . -1) (undo-tree-id21317 . -1) (undo-tree-id21318 . -1) (undo-tree-id21319 . -1) (undo-tree-id21320 . -1) (undo-tree-id21321 . -1) (#("    " 0 4 (fontified nil)) . 3893) (3897 . 3898) (#("	" 0 1 (fontified nil)) . 3897) (3897 . 3898) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 3902) (undo-tree-id21322 . -5) (undo-tree-id21323 . -5) (undo-tree-id21324 . -5) (undo-tree-id21325 . -5) (undo-tree-id21326 . -5) (undo-tree-id21327 . -5) (undo-tree-id21328 . -5) (undo-tree-id21329 . -5) (undo-tree-id21330 . -5) (undo-tree-id21331 . -5) (undo-tree-id21332 . -5) (undo-tree-id21333 . -5) (undo-tree-id21334 . -5) (undo-tree-id21335 . -5) (undo-tree-id21336 . -5) (undo-tree-id21337 . -5) (undo-tree-id21338 . -5) (undo-tree-id21339 . -5) (undo-tree-id21340 . -5) (undo-tree-id21341 . -5) (undo-tree-id21342 . -5) (undo-tree-id21343 . -5) (undo-tree-id21344 . -5) (undo-tree-id21345 . -5) (undo-tree-id21346 . -5) (3902 . 3906) (#("    " 0 4 (fontified nil)) . 3903) (3903 . 3907)) (26156 47728 995830 900000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3916) (undo-tree-id21466 . -1) (undo-tree-id21467 . -1) (undo-tree-id21468 . -1) (undo-tree-id21469 . -1) (undo-tree-id21470 . -1) (undo-tree-id21471 . -1) (undo-tree-id21472 . -1) (undo-tree-id21473 . -1) (undo-tree-id21474 . -1) (undo-tree-id21475 . -1) (undo-tree-id21476 . -1) (undo-tree-id21477 . -1) (undo-tree-id21478 . -1) 3917 (3916 . 3917) (#("	" 0 1 (fontified nil)) . 3915) (undo-tree-id21479 . -1) (undo-tree-id21480 . -1) (undo-tree-id21481 . -1) (undo-tree-id21482 . -1) (undo-tree-id21483 . -1) (undo-tree-id21484 . -1) (undo-tree-id21485 . -1) (undo-tree-id21486 . -1) (undo-tree-id21487 . -1) (undo-tree-id21488 . -1) (undo-tree-id21489 . -1) (undo-tree-id21490 . -1) (undo-tree-id21491 . -1) (3915 . 3917) (#("	" 0 1 (fontified nil)) . 3914) (undo-tree-id21492 . -1) (undo-tree-id21493 . -1) (undo-tree-id21494 . -1) (undo-tree-id21495 . -1) (undo-tree-id21496 . -1) (undo-tree-id21497 . -1) (undo-tree-id21498 . -1) (undo-tree-id21499 . -1) (undo-tree-id21500 . -1) (undo-tree-id21501 . -1) (undo-tree-id21502 . -1) (undo-tree-id21503 . -1) (undo-tree-id21504 . -1) (3915 . 3916) (3913 . 3915) (t 26156 47735 883288 629000)) nil (26156 47785 172577 702000) 0 nil])
([nil nil ((3796 . 3797) (t 26156 47713 252289 521000)) ((#("	" 0 1 (fontified t)) . 3796)) (26156 47728 359306 542000) 0 nil])
([nil nil ((3952 . 3953) (3947 . 3952) (3948 . 3949) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 3947) (3947 . 3952) (3946 . 3948) (3937 . 3947) (#("t" 0 1 (fontified t)) . -3937) (undo-tree-id21455 . -1) (undo-tree-id21456 . -1) (#("a" 0 1 (fontified t)) . -3938) (undo-tree-id21457 . -1) (undo-tree-id21458 . -1) (#("d" 0 1 (fontified t)) . -3939) (undo-tree-id21459 . -1) (undo-tree-id21460 . -1) (#(" " 0 1 (fontified t)) . -3940) (undo-tree-id21461 . -1) (undo-tree-id21462 . -1) 3941 (3937 . 3941) (3925 . 3937) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -3925) (undo-tree-id21463 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -3926) (undo-tree-id21464 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -3927) (undo-tree-id21465 . -1) 3928 (3916 . 3928) (3915 . 3916)) nil (26156 47785 172503 201000) 0 nil])
([nil nil ((3852 . 3853) 3853) ((#(" " 0 1 (fontified t)) . 3852)) (26156 47727 954955 808000) 0 nil])
([nil nil ((4003 . 4008) (#("w" 0 1 (fontified nil)) . 4003) (undo-tree-id21430 . -1) (4003 . 4004) (#("width" 0 5 (fontified nil)) . -4003) (undo-tree-id21431 . -5) (4003 . 4008) (#("w" 0 1 (fontified t)) . -4003) (undo-tree-id21432 . -1) (undo-tree-id21433 . -1) (undo-tree-id21434 . -1) (undo-tree-id21435 . -1) 4004 (4002 . 4004) (3998 . 4002) (#("sel" 0 3 (fontified nil)) . 3998) (undo-tree-id21436 . -3) (3998 . 4001) (#("self" 0 4 (fontified nil)) . -3998) (undo-tree-id21437 . -4) (3998 . 4002) (#("sel" 0 3 (fontified t)) . -3998) (undo-tree-id21438 . -3) (undo-tree-id21439 . -3) (undo-tree-id21440 . -3) 4001 (3999 . 4001) (#("max" 0 3 (fontified nil)) . 3999) (undo-tree-id21441 . -3) (3998 . 3999) (#("min" 0 3 (fontified nil)) . 3996) (undo-tree-id21442 . -3) (3995 . 3996) (3990 . 3993) (#("r" 0 1 (fontified nil)) . 3990) (undo-tree-id21443 . -1) (3990 . 3991) (#("rad" 0 3 (fontified nil)) . -3990) (undo-tree-id21444 . -3) (3990 . 3993) (#("r" 0 1 (fontified t)) . -3990) (undo-tree-id21445 . -1) (undo-tree-id21446 . -1) (undo-tree-id21447 . -1) 3991 (3988 . 3991) (#("=" 0 1 (fontified t)) . -3988) (undo-tree-id21448 . -1) (undo-tree-id21449 . -1) (undo-tree-id21450 . -1) 3989 (3987 . 3989) (#("value" 0 5 (fontified nil)) . 3987) (undo-tree-id21451 . -5) (3986 . 3987) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3986 3993 nil nil nil t #s(yas--field 2 3995 3996 nil nil nil t #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil)))) #s(yas--field 2 3995 3996 nil nil nil t #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil))) #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil))) #s(yas--exit 4009 nil) 127 nil #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil)) nil nil)) (3969 . 4002) (#("get_within_range(${1:value}, ${2:min}, ${3:max})$0" 0 50 (fontified nil)) . 3969) (3969 . 4019) (#("get" 0 3 (fontified nil)) . 3969) (3969 . 3972) (#("get_within_range(…)" 0 19 (fontified nil)) . -3969) (3969 . 3988) (#("get" 0 3 (fontified t)) . -3969) (undo-tree-id21452 . -2) (undo-tree-id21453 . -3) (undo-tree-id21454 . -3) 3972 (3969 . 3972) (3964 . 3969) (3965 . 3966) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 3964) (3964 . 3969) (3963 . 3965) (3957 . 3964) (3956 . 3957)) nil (26156 47785 172465 819000) 0 nil])
([nil nil ((3904 . 3908)) ((#("    " 0 4 (fontified t)) . 3904)) (26156 47727 146512 314000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -4009) (undo-tree-id21347 . -1) (undo-tree-id21348 . -1) (undo-tree-id21349 . -1) (undo-tree-id21350 . -1) (undo-tree-id21351 . -1) (undo-tree-id21352 . -1) (undo-tree-id21353 . -1) (undo-tree-id21354 . -1) (undo-tree-id21355 . -1) (undo-tree-id21356 . -1) (undo-tree-id21357 . -1) (undo-tree-id21358 . -1) (undo-tree-id21359 . -1) (undo-tree-id21360 . -1) (undo-tree-id21361 . -1) (undo-tree-id21362 . -1) (undo-tree-id21363 . -1) (undo-tree-id21364 . -1) (undo-tree-id21365 . -1) (undo-tree-id21366 . -1) (undo-tree-id21367 . -1) (undo-tree-id21368 . -1) (undo-tree-id21369 . -1) (undo-tree-id21370 . -1) (undo-tree-id21371 . -1) (undo-tree-id21372 . -1) (undo-tree-id21373 . -1) (undo-tree-id21374 . -1) (undo-tree-id21375 . -1) (undo-tree-id21376 . -1) (undo-tree-id21377 . -1) (undo-tree-id21378 . -1) (undo-tree-id21379 . -1) (undo-tree-id21380 . -1) (undo-tree-id21381 . -1) (undo-tree-id21382 . -1) (undo-tree-id21383 . -1) (undo-tree-id21384 . -1) (undo-tree-id21385 . -1) (undo-tree-id21386 . -1) (undo-tree-id21387 . -1) (undo-tree-id21388 . -1) (undo-tree-id21389 . -1) (undo-tree-id21390 . -1) (undo-tree-id21391 . -1) (undo-tree-id21392 . -1) (undo-tree-id21393 . -1) (undo-tree-id21394 . -1) (undo-tree-id21395 . -1) (undo-tree-id21396 . -1) (undo-tree-id21397 . -1) (undo-tree-id21398 . -1) (undo-tree-id21399 . -1) (undo-tree-id21400 . -1) (undo-tree-id21401 . -1) (undo-tree-id21402 . -1) (undo-tree-id21403 . -1) (undo-tree-id21404 . -1) (undo-tree-id21405 . -1) (undo-tree-id21406 . -1) (undo-tree-id21407 . -1) (undo-tree-id21408 . -1) (undo-tree-id21409 . -1) (undo-tree-id21410 . -1) (undo-tree-id21411 . -1) (undo-tree-id21412 . -1) (undo-tree-id21413 . -1) (undo-tree-id21414 . -1) (undo-tree-id21415 . -1) (undo-tree-id21416 . -1) (undo-tree-id21417 . -1) (undo-tree-id21418 . -1) (undo-tree-id21419 . -1) (undo-tree-id21420 . -1) (undo-tree-id21421 . -1) (undo-tree-id21422 . -1) (undo-tree-id21423 . -1) (undo-tree-id21424 . -1) (undo-tree-id21425 . -1) (undo-tree-id21426 . -1) (undo-tree-id21427 . -1) (undo-tree-id21428 . -1) (undo-tree-id21429 . -1) 4010 (4009 . 4010) (apply yas--snippet-revive 3969 4009 #s(yas--snippet nil (#s(yas--field 1 3986 3993 nil nil nil t #s(yas--field 2 3995 3996 nil nil nil t #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil)))) #s(yas--field 2 3995 3996 nil nil nil t #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil))) #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil))) #s(yas--exit 4009 nil) 127 nil #s(yas--field 3 3998 4008 nil nil nil t #s(yas--exit 4009 nil)) nil nil))) nil (26156 47785 172393 352000) 0 nil])
([nil nil ((3909 . 3913)) ((#("    " 0 4 (fontified t)) . 3909) (undo-tree-id21295 . -4) (undo-tree-id21296 . -4)) (26156 47726 824466 896000) 0 nil])
([nil nil ((4012 . 4013)) nil (26156 47785 171797 933000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3918) (3918 . 3919) (#("	" 0 1 (fontified nil)) . 3918) (undo-tree-id21291 . -1) (3914 . 3918) 3915) ((#("    " 0 4 (fontified nil)) . 3914) (undo-tree-id21294 . -4) (3918 . 3919) (#("	" 0 1 (fontified nil)) . 3918) (3918 . 3919)) (26156 47726 466721 156000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4015) (undo-tree-id21505 . -1) (undo-tree-id21506 . -1) (undo-tree-id21507 . -1) (undo-tree-id21508 . -1) (undo-tree-id21509 . -1) (undo-tree-id21510 . -1) (undo-tree-id21511 . -1) (undo-tree-id21512 . -1) (undo-tree-id21513 . -1) (undo-tree-id21514 . -1) (undo-tree-id21515 . -1) (undo-tree-id21516 . -1) (undo-tree-id21517 . -1) 4016 (4015 . 4016) (#("	" 0 1 (fontified nil)) . 4014) (undo-tree-id21518 . -1) (undo-tree-id21519 . -1) (undo-tree-id21520 . -1) (undo-tree-id21521 . -1) (undo-tree-id21522 . -1) (undo-tree-id21523 . -1) (undo-tree-id21524 . -1) (undo-tree-id21525 . -1) (4013 . 4016) (t 26156 47785 269290 304000)) nil (26156 47798 398654 253000) 0 nil])
([nil nil ((3838 . 3839)) ((#(";" 0 1 (fontified t)) . 3838)) (26156 47726 56204 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4114 . 4115) (nil fontified nil 4015 . 4115) (4015 . 4115)) nil (26156 47798 398427 175000) 0 nil])
([nil nil ((3895 . 3896)) ((#(";" 0 1 (fontified t)) . 3895) (undo-tree-id21292 . -1) (undo-tree-id21293 . -1) (t 26156 47724 151800 529000)) (26156 47724 55530 764000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4214 . 4215) (nil fontified nil 4115 . 4215) (4115 . 4215)) nil (26156 47798 398423 76000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 4314 . 4315) (nil fontified nil 4215 . 4315) (4215 . 4315)) nil (26156 47798 398411 514000) 0 nil])
([nil nil ((4030 . 4031) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -4030) (undo-tree-id21552 . -1) (undo-tree-id21553 . -1) (undo-tree-id21554 . -1) 4031 (t 26156 47798 468797 36000)) nil (26156 47822 247675 989000) 0 nil])
([nil nil ((4086 . 4087) (#("x" 0 1 (fontified t)) . -4086) (undo-tree-id21539 . -1) (undo-tree-id21540 . -1) (undo-tree-id21541 . -1) (undo-tree-id21542 . -1) (undo-tree-id21543 . -1) (undo-tree-id21544 . -1) (undo-tree-id21545 . -1) (undo-tree-id21546 . -1) (undo-tree-id21547 . -1) (undo-tree-id21548 . -1) (undo-tree-id21549 . -1) (undo-tree-id21550 . -1) (undo-tree-id21551 . -1) 4087) nil (26156 47822 247664 460000) 0 nil])
([nil nil ((4043 . 4044) (#("x" 0 1 (fontified t)) . -4043) (undo-tree-id21526 . -1) (undo-tree-id21527 . -1) (undo-tree-id21528 . -1) (undo-tree-id21529 . -1) (undo-tree-id21530 . -1) (undo-tree-id21531 . -1) (undo-tree-id21532 . -1) (undo-tree-id21533 . -1) (undo-tree-id21534 . -1) (undo-tree-id21535 . -1) (undo-tree-id21536 . -1) (undo-tree-id21537 . -1) (undo-tree-id21538 . -1) 4044) nil (26156 47822 247375 969000) 0 nil])
([nil nil ((#("	let min_point_x = if rad > x {
	    0
	} else {
	    get_within_range(x - rad, 0, self.width)
	};

" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 26 (fontified t) 26 27 (syntax-table (1) fontified t) 27 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 83 (fontified t) 83 87 (fontified t face font-lock-keyword-face) 87 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-4-face)) 94 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-3-face)) 97 99 (fontified t) 99 100 (rear-nonsticky t fontified t)) . 4115) (undo-tree-id21555 . -99) (undo-tree-id21556 . -99) (undo-tree-id21557 . -99) (undo-tree-id21558 . -93) (undo-tree-id21559 . -5) (undo-tree-id21560 . -16) (undo-tree-id21561 . -5) (undo-tree-id21562 . -16) (undo-tree-id21563 . -30) (undo-tree-id21564 . -30) (undo-tree-id21565 . -30) (undo-tree-id21566 . -30) (undo-tree-id21567 . -30) (undo-tree-id21568 . -30) (undo-tree-id21569 . -30) (undo-tree-id21570 . -30) (undo-tree-id21571 . -30) (undo-tree-id21572 . -30) (undo-tree-id21573 . -30) (undo-tree-id21574 . -30) (undo-tree-id21575 . -30) (undo-tree-id21576 . -30) (undo-tree-id21577 . -30) (undo-tree-id21578 . -30) (undo-tree-id21579 . -30) (undo-tree-id21580 . -30) (undo-tree-id21581 . -30) (undo-tree-id21582 . -30) (undo-tree-id21583 . -30) (undo-tree-id21584 . -30) (undo-tree-id21585 . -30) (undo-tree-id21586 . -30) (undo-tree-id21587 . -30) (undo-tree-id21588 . -30) (undo-tree-id21589 . -30) (undo-tree-id21590 . -37) (undo-tree-id21591 . -37) (undo-tree-id21592 . -37) (undo-tree-id21593 . -37) (undo-tree-id21594 . -37) (undo-tree-id21595 . -37) (undo-tree-id21596 . -37) (undo-tree-id21597 . -37) (undo-tree-id21598 . -37) (undo-tree-id21599 . -47) (undo-tree-id21600 . -47) (undo-tree-id21601 . -47) (undo-tree-id21602 . -47) (undo-tree-id21603 . -47) (undo-tree-id21604 . -47) (undo-tree-id21605 . -47) (undo-tree-id21606 . -47) (undo-tree-id21607 . -47) (undo-tree-id21608 . -93) (undo-tree-id21609 . -93) (undo-tree-id21610 . -93) (undo-tree-id21611 . -93) (undo-tree-id21612 . -93) (undo-tree-id21613 . -93) (undo-tree-id21614 . -93) (undo-tree-id21615 . -93) (undo-tree-id21616 . -93) (undo-tree-id21617 . -93) (undo-tree-id21618 . -93) (undo-tree-id21619 . -93) (undo-tree-id21620 . -93) (undo-tree-id21621 . -93) (undo-tree-id21622 . -93) (undo-tree-id21623 . -93) (undo-tree-id21624 . -93) (undo-tree-id21625 . -93) (undo-tree-id21626 . -93) (undo-tree-id21627 . -93) (undo-tree-id21628 . -93) (undo-tree-id21629 . -93) (undo-tree-id21630 . -93) (undo-tree-id21631 . -93) (undo-tree-id21632 . -93) (undo-tree-id21633 . -93) (undo-tree-id21634 . -93) (undo-tree-id21635 . -93) (undo-tree-id21636 . -93) (undo-tree-id21637 . -93) (undo-tree-id21638 . -93) (undo-tree-id21639 . -93) (undo-tree-id21640 . -97) (undo-tree-id21641 . -97) (undo-tree-id21642 . -97) (undo-tree-id21643 . -97) (undo-tree-id21644 . -97) (undo-tree-id21645 . -97) (undo-tree-id21646 . -97) (undo-tree-id21647 . -97) (undo-tree-id21648 . -97) (undo-tree-id21649 . -99) (undo-tree-id21650 . -99) (undo-tree-id21651 . -99) (undo-tree-id21652 . -99) (undo-tree-id21653 . -99) (undo-tree-id21654 . -99) (undo-tree-id21655 . -99) (undo-tree-id21656 . -99) (undo-tree-id21657 . -99) (undo-tree-id21658 . -100) (undo-tree-id21659 . -99) (undo-tree-id21660 . -99) (undo-tree-id21661 . -99) (undo-tree-id21662 . -99) (undo-tree-id21663 . -99) (undo-tree-id21664 . -99) (undo-tree-id21665 . -99) (undo-tree-id21666 . -99) (undo-tree-id21667 . -99) (undo-tree-id21668 . -99) (undo-tree-id21669 . -99) (undo-tree-id21670 . -99) (undo-tree-id21671 . -95) (undo-tree-id21672 . -95) (undo-tree-id21673 . -95) (undo-tree-id21674 . -95) (undo-tree-id21675 . -95) (undo-tree-id21676 . -95) (undo-tree-id21677 . -95) (undo-tree-id21678 . -95) (undo-tree-id21679 . -95) (undo-tree-id21680 . -49) (undo-tree-id21681 . -49) (undo-tree-id21682 . -49) (undo-tree-id21683 . -49) (undo-tree-id21684 . -49) (undo-tree-id21685 . -49) (undo-tree-id21686 . -49) (undo-tree-id21687 . -49) (undo-tree-id21688 . -49) (undo-tree-id21689 . -39) (undo-tree-id21690 . -39) (undo-tree-id21691 . -39) (undo-tree-id21692 . -39) (undo-tree-id21693 . -39) (undo-tree-id21694 . -39) (undo-tree-id21695 . -39) (undo-tree-id21696 . -39) (undo-tree-id21697 . -39) (undo-tree-id21698 . -32) (undo-tree-id21699 . -32) (undo-tree-id21700 . -32) (undo-tree-id21701 . -32) (undo-tree-id21702 . -32) (undo-tree-id21703 . -32) (undo-tree-id21704 . -32) (undo-tree-id21705 . -32) (undo-tree-id21706 . -32) (undo-tree-id21707 . -100) (t 26156 47822 347946 6000)) nil (26156 47836 109139 41000) 0 nil])
([nil nil ((#("	let min_point_x = if rad > x {
	    0
	} else {
	    get_within_range(x - rad, 0, self.width)
	};

" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 26 (fontified t) 26 27 (fontified t syntax-table (1)) 27 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 32 (fontified t) 32 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 83 (fontified t) 83 87 (fontified t face font-lock-keyword-face) 87 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-4-face)) 94 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-3-face)) 97 99 (fontified t) 99 100 (rear-nonsticky t fontified t)) . 4115) (undo-tree-id21708 . -99) (undo-tree-id21709 . -99) (undo-tree-id21710 . -99) (undo-tree-id21711 . -32) (undo-tree-id21712 . -32) (undo-tree-id21713 . -32) (undo-tree-id21714 . -32) (undo-tree-id21715 . -32) (undo-tree-id21716 . -32) (undo-tree-id21717 . -32) (undo-tree-id21718 . -32) (undo-tree-id21719 . -32) (undo-tree-id21720 . -32) (undo-tree-id21721 . -39) (undo-tree-id21722 . -39) (undo-tree-id21723 . -39) (undo-tree-id21724 . -39) (undo-tree-id21725 . -39) (undo-tree-id21726 . -39) (undo-tree-id21727 . -39) (undo-tree-id21728 . -39) (undo-tree-id21729 . -39) (undo-tree-id21730 . -49) (undo-tree-id21731 . -49) (undo-tree-id21732 . -49) (undo-tree-id21733 . -49) (undo-tree-id21734 . -49) (undo-tree-id21735 . -49) (undo-tree-id21736 . -49) (undo-tree-id21737 . -49) (undo-tree-id21738 . -49) (undo-tree-id21739 . -95) (undo-tree-id21740 . -95) (undo-tree-id21741 . -95) (undo-tree-id21742 . -95) (undo-tree-id21743 . -95) (undo-tree-id21744 . -95) (undo-tree-id21745 . -95) (undo-tree-id21746 . -95) (undo-tree-id21747 . -95) (undo-tree-id21748 . -99) (undo-tree-id21749 . -99) (undo-tree-id21750 . -99) (undo-tree-id21751 . -99) (undo-tree-id21752 . -99) (undo-tree-id21753 . -99) (undo-tree-id21754 . -99) (undo-tree-id21755 . -99) (undo-tree-id21756 . -99) (undo-tree-id21757 . -95) (undo-tree-id21758 . -95) (undo-tree-id21759 . -95) (undo-tree-id21760 . -95) (undo-tree-id21761 . -95) (undo-tree-id21762 . -95) (undo-tree-id21763 . -95) (undo-tree-id21764 . -95) (undo-tree-id21765 . -95) (undo-tree-id21766 . -95) (undo-tree-id21767 . -95) (undo-tree-id21768 . -95) (undo-tree-id21769 . -95) (undo-tree-id21770 . -95) (undo-tree-id21771 . -95) (undo-tree-id21772 . -95) (undo-tree-id21773 . -95) (undo-tree-id21774 . -95) (undo-tree-id21775 . -95) (undo-tree-id21776 . -95) (undo-tree-id21777 . -95) (undo-tree-id21778 . -95) (undo-tree-id21779 . -95) (undo-tree-id21780 . -95) (undo-tree-id21781 . -95) (undo-tree-id21782 . -95) (undo-tree-id21783 . -95) (undo-tree-id21784 . -95) (undo-tree-id21785 . -95) (undo-tree-id21786 . -95) (undo-tree-id21787 . -95) (undo-tree-id21788 . -95) (undo-tree-id21789 . -95) (undo-tree-id21790 . -95) (undo-tree-id21791 . -95) (undo-tree-id21792 . -95) (undo-tree-id21793 . -95) (undo-tree-id21794 . -95) (undo-tree-id21795 . -95) (undo-tree-id21796 . -95) (undo-tree-id21797 . -95) (undo-tree-id21798 . -95) (undo-tree-id21799 . -95) (undo-tree-id21800 . -95) (undo-tree-id21801 . -95) (undo-tree-id21802 . -95) (undo-tree-id21803 . -95) (undo-tree-id21804 . -95) (undo-tree-id21805 . -95) (undo-tree-id21806 . -95) (undo-tree-id21807 . -95) (undo-tree-id21808 . -95) (undo-tree-id21809 . -95) (undo-tree-id21810 . -99) (undo-tree-id21811 . -99) (undo-tree-id21812 . -99) (undo-tree-id21813 . -99) (undo-tree-id21814 . -99) (undo-tree-id21815 . -99) (undo-tree-id21816 . -99) (undo-tree-id21817 . -99) (undo-tree-id21818 . -99) (undo-tree-id21819 . -100) (undo-tree-id21820 . -99) (undo-tree-id21821 . -99) (undo-tree-id21822 . -99) (undo-tree-id21823 . -99) (undo-tree-id21824 . -99) (undo-tree-id21825 . -99) (undo-tree-id21826 . -99) (undo-tree-id21827 . -99) (undo-tree-id21828 . -99) (undo-tree-id21829 . -99) (undo-tree-id21830 . -99) (undo-tree-id21831 . -99) (undo-tree-id21832 . -95) (undo-tree-id21833 . -95) (undo-tree-id21834 . -95) (undo-tree-id21835 . -95) (undo-tree-id21836 . -95) (undo-tree-id21837 . -95) (undo-tree-id21838 . -95) (undo-tree-id21839 . -95) (undo-tree-id21840 . -95) (undo-tree-id21841 . -49) (undo-tree-id21842 . -49) (undo-tree-id21843 . -49) (undo-tree-id21844 . -49) (undo-tree-id21845 . -49) (undo-tree-id21846 . -49) (undo-tree-id21847 . -49) (undo-tree-id21848 . -49) (undo-tree-id21849 . -49) (undo-tree-id21850 . -39) (undo-tree-id21851 . -39) (undo-tree-id21852 . -39) (undo-tree-id21853 . -39) (undo-tree-id21854 . -39) (undo-tree-id21855 . -39) (undo-tree-id21856 . -39) (undo-tree-id21857 . -39) (undo-tree-id21858 . -39) (undo-tree-id21859 . -32) (undo-tree-id21860 . -32) (undo-tree-id21861 . -32) (undo-tree-id21862 . -32) (undo-tree-id21863 . -32) (undo-tree-id21864 . -32) (undo-tree-id21865 . -32) (undo-tree-id21866 . -32) (undo-tree-id21867 . -32) (undo-tree-id21868 . -100) (t 26156 47836 203475 829000)) nil (26156 47840 669711 810000) 0 nil])
([nil nil ((#("	let min_point_y = get_within_range(y - rad, 0, self.height);
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 16 (fontified t face font-lock-variable-name-face) 16 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 41 (fontified t) 41 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 62 (fontified t)) . 4117) (undo-tree-id21869 . -61) (undo-tree-id21870 . -62) (undo-tree-id21871 . -62) (undo-tree-id21872 . -62) (undo-tree-id21873 . -62) (undo-tree-id21874 . -62) (undo-tree-id21875 . -62) (undo-tree-id21876 . -62) (undo-tree-id21877 . -62) (undo-tree-id21878 . -62) (undo-tree-id21879 . -62) (t 26156 47840 739325 576000)) nil (26156 47843 895283 310000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4116) (undo-tree-id22013 . -1) (undo-tree-id22014 . -1) (undo-tree-id22015 . -1) (undo-tree-id22016 . -1) (undo-tree-id22017 . -1) (undo-tree-id22018 . -1) (undo-tree-id22019 . -1) (undo-tree-id22020 . -1) (undo-tree-id22021 . -1) (undo-tree-id22022 . -1) (undo-tree-id22023 . -1) (undo-tree-id22024 . -1) (undo-tree-id22025 . -1) (undo-tree-id22026 . -1) (undo-tree-id22027 . -1) (undo-tree-id22028 . -1) (undo-tree-id22029 . -1) (undo-tree-id22030 . -1) (undo-tree-id22031 . -1) (undo-tree-id22032 . -1) (undo-tree-id22033 . -1) (undo-tree-id22034 . -1) (undo-tree-id22035 . -1) (undo-tree-id22036 . -1) (undo-tree-id22037 . -1) (undo-tree-id22038 . -1) (undo-tree-id22039 . -1) (undo-tree-id22040 . -1) (undo-tree-id22041 . -1) (undo-tree-id22042 . -1) (undo-tree-id22043 . -1) (undo-tree-id22044 . -1) (undo-tree-id22045 . -1) (undo-tree-id22046 . -1) (undo-tree-id22047 . -1) (undo-tree-id22048 . -1) (undo-tree-id22049 . -1) (undo-tree-id22050 . -1) (undo-tree-id22051 . -1) (undo-tree-id22052 . -1) (undo-tree-id22053 . -1) (undo-tree-id22054 . -1) (undo-tree-id22055 . -1) (undo-tree-id22056 . -1) (undo-tree-id22057 . -1) (undo-tree-id22058 . -1) (undo-tree-id22059 . -1) (undo-tree-id22060 . -1) (undo-tree-id22061 . -1) (undo-tree-id22062 . -1) (undo-tree-id22063 . -1) (undo-tree-id22064 . -1) (undo-tree-id22065 . -1) (undo-tree-id22066 . -1) (undo-tree-id22067 . -1) (undo-tree-id22068 . -1) (undo-tree-id22069 . -1) (undo-tree-id22070 . -1) (undo-tree-id22071 . -1) (undo-tree-id22072 . -1) (undo-tree-id22073 . -1) (undo-tree-id22074 . -1) (undo-tree-id22075 . -1) (undo-tree-id22076 . -1) (undo-tree-id22077 . -1) (undo-tree-id22078 . -1) (undo-tree-id22079 . -1) (undo-tree-id22080 . -1) (undo-tree-id22081 . -1) (undo-tree-id22082 . -1) (undo-tree-id22083 . -1) (undo-tree-id22084 . -1) (undo-tree-id22085 . -1) (undo-tree-id22086 . -1) (undo-tree-id22087 . -1) (undo-tree-id22088 . -1) (undo-tree-id22089 . -1) (t 26156 47843 987219 74000)) nil (26156 47847 377927 949000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4115) (undo-tree-id21880 . 1) (undo-tree-id21881 . -1) (undo-tree-id21882 . -1) (undo-tree-id21883 . -1) (undo-tree-id21884 . -1) (undo-tree-id21885 . -1) (undo-tree-id21886 . -1) (undo-tree-id21887 . -1) (undo-tree-id21888 . -1) (undo-tree-id21889 . -1) (undo-tree-id21890 . -1) (undo-tree-id21891 . -1) (undo-tree-id21892 . -1) (undo-tree-id21893 . -1) (undo-tree-id21894 . -1) (undo-tree-id21895 . -1) (undo-tree-id21896 . -1) (undo-tree-id21897 . -1) (undo-tree-id21898 . -1) (undo-tree-id21899 . -1) (undo-tree-id21900 . -1) (undo-tree-id21901 . -1) (undo-tree-id21902 . -1) (undo-tree-id21903 . -1) (undo-tree-id21904 . -1) (undo-tree-id21905 . -1) (undo-tree-id21906 . -1) (undo-tree-id21907 . -1) (undo-tree-id21908 . -1) (undo-tree-id21909 . -1) (undo-tree-id21910 . -1) (undo-tree-id21911 . -1) (undo-tree-id21912 . -1) (undo-tree-id21913 . -1) (undo-tree-id21914 . -1) (undo-tree-id21915 . -1) (undo-tree-id21916 . -1) (undo-tree-id21917 . -1) (undo-tree-id21918 . -1) (undo-tree-id21919 . -1) (undo-tree-id21920 . -1) (undo-tree-id21921 . -1) (undo-tree-id21922 . -1) (undo-tree-id21923 . -1) (undo-tree-id21924 . -1) (undo-tree-id21925 . -1) (undo-tree-id21926 . -1) (undo-tree-id21927 . -1) (undo-tree-id21928 . -1) (undo-tree-id21929 . -1) (undo-tree-id21930 . -1) (undo-tree-id21931 . -1) (undo-tree-id21932 . -1) (undo-tree-id21933 . -1) (undo-tree-id21934 . -1) (undo-tree-id21935 . -1) (undo-tree-id21936 . -1) (undo-tree-id21937 . -1) (undo-tree-id21938 . -1) (undo-tree-id21939 . -1) (undo-tree-id21940 . -1) (undo-tree-id21941 . -1) (undo-tree-id21942 . -1) (undo-tree-id21943 . -1) (undo-tree-id21944 . -1) (undo-tree-id21945 . -1) (undo-tree-id21946 . -1) (undo-tree-id21947 . -1) (undo-tree-id21948 . -1) (undo-tree-id21949 . -1) (undo-tree-id21950 . -1) (undo-tree-id21951 . -1) (undo-tree-id21952 . -1) (undo-tree-id21953 . -1) (undo-tree-id21954 . -1) (undo-tree-id21955 . -1) (undo-tree-id21956 . -1) (undo-tree-id21957 . -1) (undo-tree-id21958 . -1) (undo-tree-id21959 . -1) (undo-tree-id21960 . -1) (undo-tree-id21961 . -1) (undo-tree-id21962 . -1) (undo-tree-id21963 . -1) (undo-tree-id21964 . -1) (undo-tree-id21965 . -1) (undo-tree-id21966 . -1) (undo-tree-id21967 . -1) (undo-tree-id21968 . -1) (undo-tree-id21969 . -1) (undo-tree-id21970 . -1) (undo-tree-id21971 . -1) (undo-tree-id21972 . -1) (undo-tree-id21973 . -1) (undo-tree-id21974 . -1) (undo-tree-id21975 . -1) (undo-tree-id21976 . -1) (undo-tree-id21977 . -1) (undo-tree-id21978 . -1) (undo-tree-id21979 . -1) (undo-tree-id21980 . -1) (undo-tree-id21981 . -1) (undo-tree-id21982 . -1) (undo-tree-id21983 . -1) (undo-tree-id21984 . -1) (undo-tree-id21985 . -1) (undo-tree-id21986 . -1) (undo-tree-id21987 . -1) (undo-tree-id21988 . -1) (undo-tree-id21989 . -1) (undo-tree-id21990 . -1) (undo-tree-id21991 . -1) (undo-tree-id21992 . -1) (undo-tree-id21993 . -1) (undo-tree-id21994 . -1) (undo-tree-id21995 . -1) (undo-tree-id21996 . -1) (undo-tree-id21997 . -1) (undo-tree-id21998 . -1) (undo-tree-id21999 . -1) (undo-tree-id22000 . -1) (undo-tree-id22001 . -1) (undo-tree-id22002 . -1) (undo-tree-id22003 . -1) (undo-tree-id22004 . -1) (undo-tree-id22005 . -1) (undo-tree-id22006 . -1) (undo-tree-id22007 . -1) (undo-tree-id22008 . -1) (undo-tree-id22009 . -1) (undo-tree-id22010 . -1) (undo-tree-id22011 . -1) (undo-tree-id22012 . -1)) nil (26156 47847 377413 234000) 0 nil])
([nil nil ((3942 . 3943) (t 26156 47847 447106 636000)) nil (26156 47866 925398 882000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -3942) (undo-tree-id22090 . -1) (undo-tree-id22091 . -1) (undo-tree-id22092 . -1) (undo-tree-id22093 . -1) (undo-tree-id22094 . -1) (undo-tree-id22095 . -1) (undo-tree-id22096 . -1) (undo-tree-id22097 . -1) (undo-tree-id22098 . -1) (undo-tree-id22099 . -1) (undo-tree-id22100 . -1) (undo-tree-id22101 . -1) (undo-tree-id22102 . -1) (undo-tree-id22103 . -1) (undo-tree-id22104 . -1) (undo-tree-id22105 . -1) (undo-tree-id22106 . -1) (undo-tree-id22107 . -1) (undo-tree-id22108 . -1) (undo-tree-id22109 . -1) (undo-tree-id22110 . -1) (undo-tree-id22111 . -1) (undo-tree-id22112 . -1) 3943) nil (26156 47866 925386 603000) 0 nil])
([nil nil ((#("	// this really does not look like a good rust code

	// let min_point_x = if (rad > x) {
	//     0
	// } else 
	//    get_within_range(x - rad, 0, self.width) 
	// }  ;

" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 52 (fontified t face font-lock-comment-face) 52 53 (fontified t) 53 54 (fontified t) 54 57 (fontified t face font-lock-comment-delimiter-face) 57 60 (fontified t face font-lock-comment-face) 60 61 (fontified t face font-lock-comment-face) 61 72 (fontified t face font-lock-comment-face) 72 75 (fontified t face font-lock-comment-face) 75 77 (fontified t face font-lock-comment-face) 77 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 83 (fontified t face font-lock-comment-face) 83 84 (fontified t syntax-table (1) face font-lock-comment-face) 84 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 89 (fontified t face font-lock-comment-face) 89 90 (fontified t face font-lock-comment-face) 90 91 (fontified t) 91 94 (fontified t face font-lock-comment-delimiter-face) 94 98 (fontified t face font-lock-comment-delimiter-face) 98 99 (fontified t face font-lock-comment-face) 99 100 (fontified t face font-lock-comment-face) 100 101 (fontified t) 101 104 (fontified t face font-lock-comment-delimiter-face) 104 105 (fontified t face font-lock-comment-face) 105 106 (fontified t face font-lock-comment-face) 106 110 (fontified t face font-lock-comment-face) 110 111 (fontified t face font-lock-comment-face) 111 112 (fontified t face font-lock-comment-face) 112 113 (fontified t) 113 116 (fontified t face font-lock-comment-delimiter-face) 116 119 (fontified t face font-lock-comment-delimiter-face) 119 135 (fontified t face font-lock-comment-face) 135 136 (fontified t face font-lock-comment-face) 136 148 (fontified t face font-lock-comment-face) 148 152 (fontified t face font-lock-comment-face) 152 158 (fontified t face font-lock-comment-face) 158 159 (fontified t face font-lock-comment-face) 159 160 (fontified t face font-lock-comment-face) 160 161 (fontified t face font-lock-comment-face) 161 162 (fontified t) 162 165 (fontified t face font-lock-comment-delimiter-face) 165 166 (fontified t face font-lock-comment-face) 166 170 (fontified t face font-lock-comment-face) 170 171 (fontified t)) . 3744) (undo-tree-id22113 . -170) (undo-tree-id22114 . -170) (undo-tree-id22115 . -170) (undo-tree-id22116 . -53) (undo-tree-id22117 . -53) (undo-tree-id22118 . -168) (undo-tree-id22119 . -168) (undo-tree-id22120 . -168) (undo-tree-id22121 . -168) (undo-tree-id22122 . -168) (undo-tree-id22123 . -168) (undo-tree-id22124 . -168) (undo-tree-id22125 . -168) (undo-tree-id22126 . -168) (undo-tree-id22127 . -138) (undo-tree-id22128 . -138) (undo-tree-id22129 . -138) (undo-tree-id22130 . -138) (undo-tree-id22131 . -138) (undo-tree-id22132 . -138) (undo-tree-id22133 . -138) (undo-tree-id22134 . -138) (undo-tree-id22135 . -138) (undo-tree-id22136 . -138) (undo-tree-id22137 . -138) (undo-tree-id22138 . -138) (undo-tree-id22139 . -138) (undo-tree-id22140 . -138) (undo-tree-id22141 . -138) (undo-tree-id22142 . -138) (undo-tree-id22143 . -138) (undo-tree-id22144 . -138) (undo-tree-id22145 . -138) (undo-tree-id22146 . -138) (undo-tree-id22147 . -138) (undo-tree-id22148 . -138) (undo-tree-id22149 . -138) (undo-tree-id22150 . -138) (undo-tree-id22151 . -138) (undo-tree-id22152 . -138) (undo-tree-id22153 . -138) (undo-tree-id22154 . -138) (undo-tree-id22155 . -138) (undo-tree-id22156 . -138) (undo-tree-id22157 . -138) (undo-tree-id22158 . -138) (undo-tree-id22159 . -138) (undo-tree-id22160 . -138) (undo-tree-id22161 . -138) (undo-tree-id22162 . -138) (undo-tree-id22163 . -138) (undo-tree-id22164 . -138) (undo-tree-id22165 . -138) (undo-tree-id22166 . -138) (undo-tree-id22167 . -138) (undo-tree-id22168 . -138) (undo-tree-id22169 . -110) (undo-tree-id22170 . -110) (undo-tree-id22171 . -110) (undo-tree-id22172 . -110) (undo-tree-id22173 . -110) (undo-tree-id22174 . -110) (undo-tree-id22175 . -110) (undo-tree-id22176 . -110) (undo-tree-id22177 . -110) (undo-tree-id22178 . -98) (undo-tree-id22179 . -98) (undo-tree-id22180 . -98) (undo-tree-id22181 . -98) (undo-tree-id22182 . -98) (undo-tree-id22183 . -98) (undo-tree-id22184 . -98) (undo-tree-id22185 . -98) (undo-tree-id22186 . -98) (undo-tree-id22187 . -79) (undo-tree-id22188 . -79) (undo-tree-id22189 . -79) (undo-tree-id22190 . -79) (undo-tree-id22191 . -79) (undo-tree-id22192 . -79) (undo-tree-id22193 . -79) (undo-tree-id22194 . -79) (undo-tree-id22195 . -79) (undo-tree-id22196 . -52) (undo-tree-id22197 . -52) (undo-tree-id22198 . -52) (undo-tree-id22199 . -52) (undo-tree-id22200 . -52) (undo-tree-id22201 . -52) (undo-tree-id22202 . -52) (undo-tree-id22203 . -52) (undo-tree-id22204 . -52) (undo-tree-id22205 . -52) (undo-tree-id22206 . -26) (undo-tree-id22207 . -26) (undo-tree-id22208 . -26) (undo-tree-id22209 . -26) (undo-tree-id22210 . -26) (undo-tree-id22211 . -26) (undo-tree-id22212 . -26) (undo-tree-id22213 . -26) (undo-tree-id22214 . -26) (undo-tree-id22215 . -26) (undo-tree-id22216 . -26) (undo-tree-id22217 . -26) (undo-tree-id22218 . -26) (undo-tree-id22219 . -26) (undo-tree-id22220 . -26) (undo-tree-id22221 . -26) (undo-tree-id22222 . -26) (undo-tree-id22223 . -26) (undo-tree-id22224 . -52) (undo-tree-id22225 . -52) (undo-tree-id22226 . -52) (undo-tree-id22227 . -52) (undo-tree-id22228 . -52) (undo-tree-id22229 . -52) (undo-tree-id22230 . -52) (undo-tree-id22231 . -52) (undo-tree-id22232 . -52) (undo-tree-id22233 . -79) (undo-tree-id22234 . -79) (undo-tree-id22235 . -79) (undo-tree-id22236 . -79) (undo-tree-id22237 . -79) (undo-tree-id22238 . -79) (undo-tree-id22239 . -79) (undo-tree-id22240 . -79) (undo-tree-id22241 . -79) (undo-tree-id22242 . -98) (undo-tree-id22243 . -98) (undo-tree-id22244 . -98) (undo-tree-id22245 . -98) (undo-tree-id22246 . -98) (undo-tree-id22247 . -98) (undo-tree-id22248 . -98) (undo-tree-id22249 . -98) (undo-tree-id22250 . -98) (undo-tree-id22251 . -110) (undo-tree-id22252 . -110) (undo-tree-id22253 . -110) (undo-tree-id22254 . -110) (undo-tree-id22255 . -110) (undo-tree-id22256 . -110) (undo-tree-id22257 . -110) (undo-tree-id22258 . -110) (undo-tree-id22259 . -110) (undo-tree-id22260 . -138) (undo-tree-id22261 . -138) (undo-tree-id22262 . -138) (undo-tree-id22263 . -138) (undo-tree-id22264 . -138) (undo-tree-id22265 . -138) (undo-tree-id22266 . -138) (undo-tree-id22267 . -138) (undo-tree-id22268 . -138) (undo-tree-id22269 . -168) (undo-tree-id22270 . -168) (undo-tree-id22271 . -168) (undo-tree-id22272 . -168) (undo-tree-id22273 . -168) (undo-tree-id22274 . -168) (undo-tree-id22275 . -168) (undo-tree-id22276 . -168) (undo-tree-id22277 . -168) (undo-tree-id22278 . -170) (undo-tree-id22279 . -170) (undo-tree-id22280 . -170) (undo-tree-id22281 . -170) (undo-tree-id22282 . -170) (undo-tree-id22283 . -170) (undo-tree-id22284 . -170) (undo-tree-id22285 . -170) (undo-tree-id22286 . -170) (undo-tree-id22287 . -170) (undo-tree-id22288 . -170) (undo-tree-id22289 . -170) (undo-tree-id22290 . -170) (undo-tree-id22291 . -170) (undo-tree-id22292 . -170) (undo-tree-id22293 . -170) (undo-tree-id22294 . -170) (undo-tree-id22295 . -170) (undo-tree-id22296 . -170) (undo-tree-id22297 . -170) (undo-tree-id22298 . -170) (undo-tree-id22299 . -170) (undo-tree-id22300 . -170) (undo-tree-id22301 . -170) (undo-tree-id22302 . -170) (undo-tree-id22303 . -170) (undo-tree-id22304 . -170) (undo-tree-id22305 . -170) (undo-tree-id22306 . -170) (undo-tree-id22307 . -170) (undo-tree-id22308 . -170) (undo-tree-id22309 . -170) (undo-tree-id22310 . -170) (undo-tree-id22311 . -170) (undo-tree-id22312 . -170) (undo-tree-id22313 . -170) (undo-tree-id22314 . -170) (undo-tree-id22315 . -170) (undo-tree-id22316 . -170) (undo-tree-id22317 . -170) (undo-tree-id22318 . -171) (undo-tree-id22319 . -170) (undo-tree-id22320 . -170) (undo-tree-id22321 . -170) (undo-tree-id22322 . -170) (undo-tree-id22323 . -170) (undo-tree-id22324 . -170) (undo-tree-id22325 . -170) (undo-tree-id22326 . -170) (undo-tree-id22327 . -170) (undo-tree-id22328 . -170) (undo-tree-id22329 . -170) (undo-tree-id22330 . -170) (undo-tree-id22331 . -161) (undo-tree-id22332 . -161) (undo-tree-id22333 . -161) (undo-tree-id22334 . -161) (undo-tree-id22335 . -161) (undo-tree-id22336 . -161) (undo-tree-id22337 . -161) (undo-tree-id22338 . -161) (undo-tree-id22339 . -161) (undo-tree-id22340 . -112) (undo-tree-id22341 . -112) (undo-tree-id22342 . -112) (undo-tree-id22343 . -112) (undo-tree-id22344 . -112) (undo-tree-id22345 . -112) (undo-tree-id22346 . -112) (undo-tree-id22347 . -112) (undo-tree-id22348 . -112) (undo-tree-id22349 . -100) (undo-tree-id22350 . -100) (undo-tree-id22351 . -100) (undo-tree-id22352 . -100) (undo-tree-id22353 . -100) (undo-tree-id22354 . -100) (undo-tree-id22355 . -100) (undo-tree-id22356 . -100) (undo-tree-id22357 . -100) (undo-tree-id22358 . -90) (undo-tree-id22359 . -90) (undo-tree-id22360 . -90) (undo-tree-id22361 . -90) (undo-tree-id22362 . -90) (undo-tree-id22363 . -90) (undo-tree-id22364 . -90) (undo-tree-id22365 . -90) (undo-tree-id22366 . -90) (undo-tree-id22367 . -53) (undo-tree-id22368 . -53) (undo-tree-id22369 . -53) (undo-tree-id22370 . -53) (undo-tree-id22371 . -53) (undo-tree-id22372 . -53) (undo-tree-id22373 . -53) (undo-tree-id22374 . -53) (undo-tree-id22375 . -53) (undo-tree-id22376 . -52) (undo-tree-id22377 . -52) (undo-tree-id22378 . -52) (undo-tree-id22379 . -52) (undo-tree-id22380 . -52) (undo-tree-id22381 . -52) (undo-tree-id22382 . -52) (undo-tree-id22383 . -52) (undo-tree-id22384 . -52) (undo-tree-id22385 . -171) (t 26156 47867 18489 603000)) nil (26156 47896 26306 815000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3745) (undo-tree-id22427 . -1) 3746 (3745 . 3746) (#("	" 0 1 (fontified nil)) . 3744) (undo-tree-id22428 . -1) (3743 . 3746) (t 26156 47896 125629 878000)) nil (26156 47908 189090 565000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4579 . 4580) (nil fontified nil 4379 . 4580) (4379 . 4580)) nil (26156 47908 189082 526000) 0 nil])
([nil nil ((#("	let min_point_x = get_within_range(x - rad, 0, self.width);
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 26 (fontified t) 26 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 43 (fontified t) 43 46 (fontified t) 46 48 (fontified t) 48 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 60 (fontified t) 60 61 (fontified t)) . 4584) (undo-tree-id22407 . -60) (undo-tree-id22408 . -61) (undo-tree-id22409 . -61) (undo-tree-id22410 . -61) (undo-tree-id22411 . -61) (undo-tree-id22412 . -61) (undo-tree-id22413 . -61) (undo-tree-id22414 . -61) (undo-tree-id22415 . -61) (undo-tree-id22416 . -61) (undo-tree-id22417 . -61) (undo-tree-id22418 . -61) (undo-tree-id22419 . -61) (undo-tree-id22420 . -61) (undo-tree-id22421 . -61) (undo-tree-id22422 . -61) (undo-tree-id22423 . -61) (undo-tree-id22424 . -61) (undo-tree-id22425 . -61) (undo-tree-id22426 . -61)) nil (26156 47908 189076 657000) 0 nil])
([nil nil ((#("	let min_point_y = get_within_range(y - rad, 0, self.height);
" 0 1 (rear-nonsticky t fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 29 (fontified t) 29 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 38 (fontified t) 38 40 (fontified t) 40 43 (fontified t) 43 46 (fontified t) 46 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t) 61 62 (fontified t)) . 4584) (undo-tree-id22386 . -61) (undo-tree-id22387 . -62) (undo-tree-id22388 . -62) (undo-tree-id22389 . -62) (undo-tree-id22390 . -62) (undo-tree-id22391 . -62) (undo-tree-id22392 . -62) (undo-tree-id22393 . -62) (undo-tree-id22394 . -62) (undo-tree-id22395 . -62) (undo-tree-id22396 . -62) (undo-tree-id22397 . -62) (undo-tree-id22398 . -62) (undo-tree-id22399 . -62) (undo-tree-id22400 . -62) (undo-tree-id22401 . -62) (undo-tree-id22402 . -62) (undo-tree-id22403 . -62) (undo-tree-id22404 . -62) (undo-tree-id22405 . -61) (undo-tree-id22406 . -62)) nil (26156 47908 189033 468000) 0 nil])
([nil nil ((#("fn tolerance_calculator(map1: &Map, map2: &Map, current_index: Coordinate, tol: usize) -> usize {
    todo!()
}

" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 28 (fontified t face font-lock-variable-name-face) 28 30 (fontified t) 30 31 (fontified t face rust-ampersand-face) 31 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 40 (fontified t face font-lock-variable-name-face) 40 42 (fontified t) 42 43 (fontified t face rust-ampersand-face) 43 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 61 (fontified t face font-lock-variable-name-face) 61 63 (fontified t) 63 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 78 (fontified t face font-lock-variable-name-face) 78 80 (fontified t) 80 85 (fontified t face font-lock-type-face) 85 86 (fontified t face (rainbow-delimiters-depth-1-face)) 86 88 (fontified t) 88 89 (fontified t syntax-table (1)) 89 90 (fontified t) 90 95 (fontified t face font-lock-type-face) 95 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-1-face)) 97 98 (fontified t) 98 102 (fontified t) 102 107 (fontified t face font-lock-preprocessor-face) 107 108 (fontified t face (rainbow-delimiters-depth-2-face)) 108 109 (fontified t face (rainbow-delimiters-depth-2-face)) 109 110 (fontified t) 110 111 (fontified t face (rainbow-delimiters-depth-1-face)) 111 112 (fontified t) 112 113 (fontified t)) . 1831) (undo-tree-id22429 . -112) (undo-tree-id22430 . -112) (undo-tree-id22431 . -112) (undo-tree-id22432 . -24) (undo-tree-id22433 . -28) (undo-tree-id22434 . -24) (undo-tree-id22435 . -28) (undo-tree-id22436 . -36) (undo-tree-id22437 . -40) (undo-tree-id22438 . -36) (undo-tree-id22439 . -40) (undo-tree-id22440 . -48) (undo-tree-id22441 . -61) (undo-tree-id22442 . -48) (undo-tree-id22443 . -61) (undo-tree-id22444 . -75) (undo-tree-id22445 . -78) (undo-tree-id22446 . -75) (undo-tree-id22447 . -78) (undo-tree-id22448 . -3) (undo-tree-id22449 . -23) (undo-tree-id22450 . -98) (undo-tree-id22451 . -98) (undo-tree-id22452 . -98) (undo-tree-id22453 . -98) (undo-tree-id22454 . -98) (undo-tree-id22455 . -98) (undo-tree-id22456 . -98) (undo-tree-id22457 . -98) (undo-tree-id22458 . -98) (undo-tree-id22459 . -110) (undo-tree-id22460 . -110) (undo-tree-id22461 . -110) (undo-tree-id22462 . -110) (undo-tree-id22463 . -110) (undo-tree-id22464 . -110) (undo-tree-id22465 . -110) (undo-tree-id22466 . -110) (undo-tree-id22467 . -110) (undo-tree-id22468 . -112) (undo-tree-id22469 . -112) (undo-tree-id22470 . -112) (undo-tree-id22471 . -112) (undo-tree-id22472 . -112) (undo-tree-id22473 . -112) (undo-tree-id22474 . -112) (undo-tree-id22475 . -112) (undo-tree-id22476 . -112) (undo-tree-id22477 . -113) (undo-tree-id22478 . -113) (undo-tree-id22479 . -113) (undo-tree-id22480 . -113) (undo-tree-id22481 . -113) (undo-tree-id22482 . -113) (undo-tree-id22483 . -113) (undo-tree-id22484 . -113) (undo-tree-id22485 . -113) (undo-tree-id22486 . -113) (undo-tree-id22487 . -113) (undo-tree-id22488 . -113) (undo-tree-id22489 . -113) (undo-tree-id22490 . -113) (undo-tree-id22491 . -113) (undo-tree-id22492 . -113) (undo-tree-id22493 . -113) (undo-tree-id22494 . -113) (undo-tree-id22495 . -112) (undo-tree-id22496 . -112) (undo-tree-id22497 . -112) (undo-tree-id22498 . -112) (undo-tree-id22499 . -112) (undo-tree-id22500 . -112) (undo-tree-id22501 . -112) (undo-tree-id22502 . -112) (undo-tree-id22503 . -112) (undo-tree-id22504 . -110) (undo-tree-id22505 . -110) (undo-tree-id22506 . -110) (undo-tree-id22507 . -110) (undo-tree-id22508 . -110) (undo-tree-id22509 . -110) (undo-tree-id22510 . -110) (undo-tree-id22511 . -110) (undo-tree-id22512 . -110) (undo-tree-id22513 . -98) (undo-tree-id22514 . -98) (undo-tree-id22515 . -98) (undo-tree-id22516 . -98) (undo-tree-id22517 . -98) (undo-tree-id22518 . -98) (undo-tree-id22519 . -98) (undo-tree-id22520 . -98) (undo-tree-id22521 . -98) (undo-tree-id22522 . -98) (undo-tree-id22523 . -98) (undo-tree-id22524 . -98) (undo-tree-id22525 . -98) (undo-tree-id22526 . -98) (undo-tree-id22527 . -98) (undo-tree-id22528 . -98) (undo-tree-id22529 . -98) (undo-tree-id22530 . -98) (undo-tree-id22531 . -98) (undo-tree-id22532 . -110) (undo-tree-id22533 . -110) (undo-tree-id22534 . -110) (undo-tree-id22535 . -110) (undo-tree-id22536 . -110) (undo-tree-id22537 . -110) (undo-tree-id22538 . -110) (undo-tree-id22539 . -110) (undo-tree-id22540 . -110) (undo-tree-id22541 . -112) (undo-tree-id22542 . -112) (undo-tree-id22543 . -112) (undo-tree-id22544 . -112) (undo-tree-id22545 . -112) (undo-tree-id22546 . -112) (undo-tree-id22547 . -112) (undo-tree-id22548 . -112) (undo-tree-id22549 . -112) (undo-tree-id22550 . -113) (undo-tree-id22551 . -112) (undo-tree-id22552 . -112) (undo-tree-id22553 . -112) (undo-tree-id22554 . -112) (undo-tree-id22555 . -112) (undo-tree-id22556 . -112) (undo-tree-id22557 . -112) (undo-tree-id22558 . -112) (undo-tree-id22559 . -112) (undo-tree-id22560 . -112) (undo-tree-id22561 . -112) (undo-tree-id22562 . -112) (undo-tree-id22563 . -110) (undo-tree-id22564 . -110) (undo-tree-id22565 . -110) (undo-tree-id22566 . -110) (undo-tree-id22567 . -110) (undo-tree-id22568 . -110) (undo-tree-id22569 . -110) (undo-tree-id22570 . -110) (undo-tree-id22571 . -110) (undo-tree-id22572 . -98) (undo-tree-id22573 . -98) (undo-tree-id22574 . -98) (undo-tree-id22575 . -98) (undo-tree-id22576 . -98) (undo-tree-id22577 . -98) (undo-tree-id22578 . -98) (undo-tree-id22579 . -98) (undo-tree-id22580 . -98) (undo-tree-id22581 . -113) (t 26156 47908 261291 102000)) nil (26156 47934 42763 516000) 0 nil])
([nil nil ((2645 . 2647) (t 26156 47934 136605 748000)) nil (26156 47957 789980 184000) 0 nil])
([nil nil ((#("//			    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 9 (fontified t face font-lock-comment-delimiter-face)) . 2645) (undo-tree-id22584 . -8) (undo-tree-id22585 . 7) (t 26156 47957 860019 899000)) nil (26156 48001 345994 658000) 0 nil])
([nil nil ((2645 . 2652)) nil (26156 48001 345987 527000) 0 nil])
([nil nil ((#("tolerance " 0 10 (fontified t face font-lock-string-face)) . 2662) (undo-tree-id22583 . -9)) nil (26156 48001 345985 263000) 0 nil])
([nil nil ((#("region" 0 6 (fontified t face font-lock-string-face)) . 2662) (undo-tree-id22582 . -5)) nil (26156 48001 345980 401000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2663) (2663 . 2664) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2663) (2663 . 2664) (2662 . 2664)) nil (26156 48001 345961 344000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2666) (2666 . 2667) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2666) (2666 . 2667) (2664 . 2667)) nil (26156 48001 345955 546000) 0 nil])
([nil nil ((2663 . 2664)) nil (26156 48001 345949 870000) 0 nil])
([nil nil ((2667 . 2668)) nil (26156 48001 345937 960000) 0 nil])
([nil nil ((#("			    println!(\"{i}X{j}\");
" 0 7 (fontified t) 7 15 (fontified t face rust-builtin-formatting-macro) 15 16 (fontified t face (rainbow-delimiters-depth-8-face)) 16 17 (fontified t face font-lock-string-face) 17 19 (fontified t face rust-string-interpolation) 19 20 (fontified t face rust-string-interpolation) 20 21 (fontified t face font-lock-string-face) 21 23 (fontified t face rust-string-interpolation) 23 24 (fontified t face rust-string-interpolation) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face (rainbow-delimiters-depth-8-face)) 26 27 (fontified t) 27 28 (fontified t)) . 2645) (undo-tree-id22736 . -23) (undo-tree-id22737 . -27) (undo-tree-id22738 . 5) (undo-tree-id22739 . -23) (undo-tree-id22740 . 1) (undo-tree-id22741 . -23) (undo-tree-id22742 . -26) (undo-tree-id22743 . -18) (undo-tree-id22744 . -18) (undo-tree-id22745 . 9) (undo-tree-id22746 . -26) (undo-tree-id22747 . -26) 2671 (t 26156 48001 439043 431000)) nil (26156 48088 457368 920000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified t)) . -2713) (undo-tree-id22734 . -7) 2720 (2713 . 2720) (#("			    " 0 7 (fontified nil)) . 2712) (undo-tree-id22735 . -7) (2711 . 2720)) nil (26156 48088 457345 249000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2720 . 2721) (#("
" 0 1 (fontified nil)) . -2741) (2713 . 2742)) nil (26156 48088 457337 402000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2741) (2741 . 2742) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -2741) (2741 . 2742) (2738 . 2742)) nil (26156 48088 457332 790000) 0 nil])
([nil nil ((2741 . 2747) (#("to" 0 2 (fontified nil)) . 2741) (2741 . 2743) (#("tolval" 0 6 (fontified nil)) . -2741) (2741 . 2747) (#("to" 0 2 (fontified t face rust-string-interpolation)) . -2741) (undo-tree-id22586 . -2) (undo-tree-id22587 . -2) (undo-tree-id22588 . -1) (undo-tree-id22589 . -1) (undo-tree-id22590 . -1) (undo-tree-id22591 . -1) (undo-tree-id22592 . -1) (undo-tree-id22593 . -1) (undo-tree-id22594 . -1) (undo-tree-id22595 . -1) (undo-tree-id22596 . -1) (undo-tree-id22597 . -1) (undo-tree-id22598 . -2) (undo-tree-id22599 . -2) (undo-tree-id22600 . -2) (undo-tree-id22601 . -2) (undo-tree-id22602 . -2) (undo-tree-id22603 . -2) (undo-tree-id22604 . -2) (undo-tree-id22605 . -2) (undo-tree-id22606 . -2) (undo-tree-id22607 . -2) (undo-tree-id22608 . -2) (undo-tree-id22609 . -2) (undo-tree-id22610 . -2) (undo-tree-id22611 . -2) (undo-tree-id22612 . -2) (undo-tree-id22613 . -2) (undo-tree-id22614 . -2) (undo-tree-id22615 . -2) (undo-tree-id22616 . -2) (undo-tree-id22617 . -2) (undo-tree-id22618 . -2) (undo-tree-id22619 . -2) (undo-tree-id22620 . -2) (undo-tree-id22621 . -2) (undo-tree-id22622 . -2) (undo-tree-id22623 . -2) (undo-tree-id22624 . -2) (undo-tree-id22625 . -2) (undo-tree-id22626 . -2) (undo-tree-id22627 . -2) (undo-tree-id22628 . -2) (undo-tree-id22629 . -2) (undo-tree-id22630 . -2) (undo-tree-id22631 . -2) (undo-tree-id22632 . -2) (undo-tree-id22633 . -2) (undo-tree-id22634 . -2) (undo-tree-id22635 . -2) (undo-tree-id22636 . -2) (undo-tree-id22637 . -2) (undo-tree-id22638 . -2) (undo-tree-id22639 . -2) (undo-tree-id22640 . -2) (undo-tree-id22641 . -2) (undo-tree-id22642 . -2) (undo-tree-id22643 . -2) (undo-tree-id22644 . -2) (undo-tree-id22645 . -2) (undo-tree-id22646 . -2) (undo-tree-id22647 . -2) (undo-tree-id22648 . -2) (undo-tree-id22649 . -2) (undo-tree-id22650 . -2) (undo-tree-id22651 . -2) (undo-tree-id22652 . -2) (undo-tree-id22653 . -2) (undo-tree-id22654 . -2) (undo-tree-id22655 . -2) (undo-tree-id22656 . -2) (undo-tree-id22657 . -2) (undo-tree-id22658 . -2) (undo-tree-id22659 . -2) (undo-tree-id22660 . -2) (undo-tree-id22661 . -2) (undo-tree-id22662 . -2) (undo-tree-id22663 . -2) (undo-tree-id22664 . -2) (undo-tree-id22665 . -2) (undo-tree-id22666 . -2) (undo-tree-id22667 . -2) (undo-tree-id22668 . -2) (undo-tree-id22669 . -2) (undo-tree-id22670 . -2) (undo-tree-id22671 . -2) (undo-tree-id22672 . -2) (undo-tree-id22673 . -2) (undo-tree-id22674 . -2) (undo-tree-id22675 . -2) (undo-tree-id22676 . -2) (undo-tree-id22677 . -2) (undo-tree-id22678 . -2) (undo-tree-id22679 . -2) (undo-tree-id22680 . -2) (undo-tree-id22681 . -2) (undo-tree-id22682 . -2) (undo-tree-id22683 . -2) (undo-tree-id22684 . -2) (undo-tree-id22685 . -2) (undo-tree-id22686 . -2) (undo-tree-id22687 . -2) (undo-tree-id22688 . -2) (undo-tree-id22689 . -2) (undo-tree-id22690 . -2) (undo-tree-id22691 . -2) (undo-tree-id22692 . -2) (undo-tree-id22693 . -2) (undo-tree-id22694 . -2) (undo-tree-id22695 . -2) (undo-tree-id22696 . -2) (undo-tree-id22697 . -2) (undo-tree-id22698 . -2) (undo-tree-id22699 . -2) (undo-tree-id22700 . -2) (undo-tree-id22701 . -2) (undo-tree-id22702 . -2) (undo-tree-id22703 . -2) (undo-tree-id22704 . -2) (undo-tree-id22705 . -2) (undo-tree-id22706 . -2) (undo-tree-id22707 . -2) (undo-tree-id22708 . -2) (undo-tree-id22709 . -2) (undo-tree-id22710 . -2) (undo-tree-id22711 . -2) (undo-tree-id22712 . -2) (undo-tree-id22713 . -2) (undo-tree-id22714 . -2) (undo-tree-id22715 . -2) (undo-tree-id22716 . -2) (undo-tree-id22717 . -2) (undo-tree-id22718 . -2) (undo-tree-id22719 . -2) (undo-tree-id22720 . -2) (undo-tree-id22721 . -2) (undo-tree-id22722 . -2) (undo-tree-id22723 . -2) (undo-tree-id22724 . -2) (undo-tree-id22725 . -2) (undo-tree-id22726 . -2) (undo-tree-id22727 . -2) (undo-tree-id22728 . -2) (undo-tree-id22729 . -2) (undo-tree-id22730 . -2) (undo-tree-id22731 . -2) (undo-tree-id22732 . -2) (undo-tree-id22733 . -2) 2743 (2741 . 2743)) nil (26156 48088 457303 293000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2713) (undo-tree-id22832 . -1) (t 26156 48088 557441 815000)) nil (26156 48092 972390 535000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2712) (undo-tree-id22748 . -1) (undo-tree-id22749 . -1) (undo-tree-id22750 . -1) (undo-tree-id22751 . -1) (undo-tree-id22752 . -1) (undo-tree-id22753 . -1) (undo-tree-id22754 . -1) (undo-tree-id22755 . -1) (undo-tree-id22756 . -1) (undo-tree-id22757 . -1) (undo-tree-id22758 . -1) (undo-tree-id22759 . -1) (undo-tree-id22760 . -1) (undo-tree-id22761 . -1) (undo-tree-id22762 . -1) (undo-tree-id22763 . -1) (undo-tree-id22764 . -1) (undo-tree-id22765 . -1) (undo-tree-id22766 . -1) (undo-tree-id22767 . -1) (undo-tree-id22768 . -1) (undo-tree-id22769 . -1) (undo-tree-id22770 . -1) (undo-tree-id22771 . -1) (undo-tree-id22772 . -1) (undo-tree-id22773 . -1) (undo-tree-id22774 . -1) (undo-tree-id22775 . -1) (undo-tree-id22776 . -1) (undo-tree-id22777 . -1) (undo-tree-id22778 . -1) (undo-tree-id22779 . -1) (undo-tree-id22780 . -1) (undo-tree-id22781 . -1) (undo-tree-id22782 . -1) (undo-tree-id22783 . -1) (undo-tree-id22784 . -1) (undo-tree-id22785 . -1) (undo-tree-id22786 . -1) (undo-tree-id22787 . -1) (undo-tree-id22788 . -1) (undo-tree-id22789 . -1) (undo-tree-id22790 . -1) (undo-tree-id22791 . -1) (undo-tree-id22792 . -1) (undo-tree-id22793 . -1) (undo-tree-id22794 . -1) (undo-tree-id22795 . -1) (undo-tree-id22796 . -1) (undo-tree-id22797 . -1) (undo-tree-id22798 . -1) (undo-tree-id22799 . -1) (undo-tree-id22800 . -1) (undo-tree-id22801 . -1) (undo-tree-id22802 . -1) (undo-tree-id22803 . -1) (undo-tree-id22804 . -1) (undo-tree-id22805 . -1) (undo-tree-id22806 . -1) (undo-tree-id22807 . -1) (undo-tree-id22808 . -1) (undo-tree-id22809 . -1) (undo-tree-id22810 . -1) (undo-tree-id22811 . -1) (undo-tree-id22812 . -1) (undo-tree-id22813 . -1) (undo-tree-id22814 . -1) (undo-tree-id22815 . -1) (undo-tree-id22816 . -1) (undo-tree-id22817 . -1) (undo-tree-id22818 . -1) (undo-tree-id22819 . -1) (undo-tree-id22820 . -1) (undo-tree-id22821 . -1) (undo-tree-id22822 . -1) (undo-tree-id22823 . -1) (undo-tree-id22824 . -1) (undo-tree-id22825 . -1) (undo-tree-id22826 . -1) (undo-tree-id22827 . -1) (undo-tree-id22828 . -1) (undo-tree-id22829 . -1) (undo-tree-id22830 . -1) (undo-tree-id22831 . -1)) nil (26156 48092 972371 736000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified t)) . -2781) (undo-tree-id22833 . -7) (undo-tree-id22834 . -7) (undo-tree-id22835 . -7) (undo-tree-id22836 . -7) (undo-tree-id22837 . -7) (undo-tree-id22838 . -7) (undo-tree-id22839 . -7) (undo-tree-id22840 . -7) (undo-tree-id22841 . -7) (undo-tree-id22842 . -7) (undo-tree-id22843 . -7) (undo-tree-id22844 . -7) (undo-tree-id22845 . -7) 2788 (t 26156 48093 69370 506000)) nil (26156 48126 75056 524000) 0 nil])
([nil nil ((apply -9 2644 2791 undo--wrap-and-run-primitive-undo 2644 2791 ((2763 . 2766) (2722 . 2725) (2652 . 2655) 2644))) nil (26156 48126 75000 883000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2577) (undo-tree-id22846 . -1) (undo-tree-id22847 . -1) (undo-tree-id22848 . -1) 2578 (2577 . 2578) (t 26156 48126 172879 679000)) nil (26156 48133 449700 877000) 0 nil])
([nil nil ((6076 . 6077) (#("2" 0 1 (fontified t)) . -6076) (undo-tree-id22849 . -1) (undo-tree-id22850 . -1) (undo-tree-id22851 . -1) (undo-tree-id22852 . -1) (undo-tree-id22853 . -1) (undo-tree-id22854 . -1) (undo-tree-id22855 . -1) (undo-tree-id22856 . -1) (undo-tree-id22857 . -1) (undo-tree-id22858 . -1) (undo-tree-id22859 . -1) (undo-tree-id22860 . -1) (undo-tree-id22861 . -1) (undo-tree-id22862 . -1) (undo-tree-id22863 . -1) (undo-tree-id22864 . -1) (undo-tree-id22865 . -1) (undo-tree-id22866 . -1) (undo-tree-id22867 . -1) (undo-tree-id22868 . -1) (undo-tree-id22869 . -1) (undo-tree-id22870 . -1) (undo-tree-id22871 . -1) (undo-tree-id22872 . -1) (undo-tree-id22873 . -1) (undo-tree-id22874 . -1) (undo-tree-id22875 . -1) (undo-tree-id22876 . -1) (undo-tree-id22877 . -1) (undo-tree-id22878 . -1) (undo-tree-id22879 . -1) (undo-tree-id22880 . -1) (undo-tree-id22881 . -1) (undo-tree-id22882 . -1) (undo-tree-id22883 . -1) (undo-tree-id22884 . -1) (undo-tree-id22885 . -1) (undo-tree-id22886 . -1) (undo-tree-id22887 . -1) (undo-tree-id22888 . -1) (undo-tree-id22889 . -1) (undo-tree-id22890 . -1) (undo-tree-id22891 . -1) (undo-tree-id22892 . -1) (undo-tree-id22893 . -1) (undo-tree-id22894 . -1) (undo-tree-id22895 . -1) (#("5" 0 1 (fontified t)) . -6077) (undo-tree-id22896 . -1) (undo-tree-id22897 . -1) (undo-tree-id22898 . -1) (undo-tree-id22899 . -1) (undo-tree-id22900 . -1) (undo-tree-id22901 . -1) (undo-tree-id22902 . -1) (undo-tree-id22903 . -1) (undo-tree-id22904 . -1) (undo-tree-id22905 . -1) (undo-tree-id22906 . -1) (undo-tree-id22907 . -1) (undo-tree-id22908 . -1) 6078 (t 26156 48133 548777 839000)) nil (26156 48172 952142 287000) 0 nil])
([nil nil ((5992 . 5994) (#("5" 0 1 (fontified t)) . -5992) (undo-tree-id22993 . -1) (#("0" 0 1 (fontified t)) . -5993) (undo-tree-id22994 . -1) 5994 (t 26156 48173 48276 746000)) nil (26156 48185 393510 639000) 0 nil])
([nil nil ((5992 . 5993) (#("2" 0 1 (fontified t)) . -5992) (undo-tree-id22945 . -1) (undo-tree-id22946 . -1) (undo-tree-id22947 . -1) (undo-tree-id22948 . -1) (undo-tree-id22949 . -1) (undo-tree-id22950 . -1) (undo-tree-id22951 . -1) (undo-tree-id22952 . -1) (undo-tree-id22953 . -1) (undo-tree-id22954 . -1) (undo-tree-id22955 . -1) (undo-tree-id22956 . -1) (undo-tree-id22957 . -1) (undo-tree-id22958 . -1) (undo-tree-id22959 . -1) (undo-tree-id22960 . -1) (undo-tree-id22961 . -1) (undo-tree-id22962 . -1) (undo-tree-id22963 . -1) (undo-tree-id22964 . -1) (undo-tree-id22965 . -1) (undo-tree-id22966 . -1) (undo-tree-id22967 . -1) (undo-tree-id22968 . -1) (undo-tree-id22969 . -1) (undo-tree-id22970 . -1) (undo-tree-id22971 . -1) (undo-tree-id22972 . -1) (undo-tree-id22973 . -1) (undo-tree-id22974 . -1) (undo-tree-id22975 . -1) (undo-tree-id22976 . -1) (undo-tree-id22977 . -1) (undo-tree-id22978 . -1) (undo-tree-id22979 . -1) (#("5" 0 1 (fontified t)) . -5993) (undo-tree-id22980 . -1) (undo-tree-id22981 . -1) (undo-tree-id22982 . -1) (undo-tree-id22983 . -1) (undo-tree-id22984 . -1) (undo-tree-id22985 . -1) (undo-tree-id22986 . -1) (undo-tree-id22987 . -1) (undo-tree-id22988 . -1) (undo-tree-id22989 . -1) (undo-tree-id22990 . -1) (undo-tree-id22991 . -1) (undo-tree-id22992 . -1) 5994) nil (26156 48185 393497 743000) 0 nil])
([nil nil ((6017 . 6018) (#("5" 0 1 (fontified t)) . -6017) (undo-tree-id22909 . -1) (undo-tree-id22910 . -1) (undo-tree-id22911 . -1) (undo-tree-id22912 . -1) (undo-tree-id22913 . -1) (undo-tree-id22914 . -1) (undo-tree-id22915 . -1) (undo-tree-id22916 . -1) (undo-tree-id22917 . -1) (undo-tree-id22918 . -1) (undo-tree-id22919 . -1) (undo-tree-id22920 . -1) (undo-tree-id22921 . -1) (undo-tree-id22922 . -1) (undo-tree-id22923 . -1) (undo-tree-id22924 . -1) (undo-tree-id22925 . -1) (undo-tree-id22926 . -1) (undo-tree-id22927 . -1) (undo-tree-id22928 . -1) (undo-tree-id22929 . -1) (undo-tree-id22930 . -1) (undo-tree-id22931 . -1) (#("0" 0 1 (fontified t)) . -6018) (undo-tree-id22932 . -1) (undo-tree-id22933 . -1) (undo-tree-id22934 . -1) (undo-tree-id22935 . -1) (undo-tree-id22936 . -1) (undo-tree-id22937 . -1) (undo-tree-id22938 . -1) (undo-tree-id22939 . -1) (undo-tree-id22940 . -1) (undo-tree-id22941 . -1) (undo-tree-id22942 . -1) (undo-tree-id22943 . -1) (undo-tree-id22944 . -1) 6019) nil (26156 48185 393397 456000) 0 nil])
([nil nil ((5992 . 5993) (#("8" 0 1 (fontified t)) . -5992) (undo-tree-id23008 . -1) 5993 (t 26156 48185 464134 77000)) nil (26156 48201 670274 388000) 0 nil])
([nil nil ((6017 . 6018) (#("8" 0 1 (fontified t)) . -6017) (undo-tree-id23009 . 1) (undo-tree-id23010 . -1) (undo-tree-id23011 . -1) (undo-tree-id23012 . -1) (undo-tree-id23013 . -1) (undo-tree-id23014 . -1) (undo-tree-id23015 . -1) (undo-tree-id23016 . -1) (undo-tree-id23017 . -1) (undo-tree-id23018 . -1) (undo-tree-id23019 . -1) (undo-tree-id23020 . -1) (undo-tree-id23021 . -1) (undo-tree-id23022 . -1) 6018) nil (26156 48208 209313 132000) 0 nil] [nil nil ((6013 . 6014) (#("2" 0 1 (fontified t)) . -6013) (undo-tree-id22995 . -1) (undo-tree-id22996 . -1) (undo-tree-id22997 . -1) (undo-tree-id22998 . -1) (undo-tree-id22999 . -1) (undo-tree-id23000 . -1) (undo-tree-id23001 . -1) (undo-tree-id23002 . -1) (undo-tree-id23003 . -1) (undo-tree-id23004 . -1) (undo-tree-id23005 . -1) (undo-tree-id23006 . -1) (undo-tree-id23007 . -1) 6014) ((6013 . 6014) (#("1" 0 1 (fontified t)) . 6013)) (26156 48201 668881 770000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5917) (undo-tree-id23144 . -1) (undo-tree-id23145 . -1) 5918 (5917 . 5918) (t 26156 48208 307889 223000)) nil (26156 49212 728265 777000) 0 nil])
nil
([nil nil ((#("." 0 1 (fontified t)) . -5917) (undo-tree-id23142 . -1) (undo-tree-id23143 . -1) 5918 (5917 . 5918)) nil (26156 49212 728258 3000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -5913) (undo-tree-id23141 . -1) 5914) nil (26156 49212 728251 269000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6018)) nil (26156 49212 728246 930000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 6018)) nil (26156 49212 728244 769000) 0 nil])
([nil nil ((6018 . 6019)) nil (26156 49212 728242 974000) 0 nil])
([nil nil ((#("//    " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face)) . 6379) (undo-tree-id23139 . -5) (undo-tree-id23140 . -6)) nil (26156 49212 728240 572000) 0 nil])
([nil nil ((6379 . 6383)) nil (26156 49212 728232 764000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6453 . 6454) (#("
" 0 1 (fontified nil)) . -6520) (6449 . 6521) 6448) nil (26156 49212 728230 90000) 0 nil])
([nil nil ((6459 . 6460)) nil (26156 49212 728226 733000) 0 nil])
([nil nil ((apply yas--snippet-revive 6389 6397 #s(yas--snippet nil nil #s(yas--exit 6397 nil) 128 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6397 nil) 128 nil nil nil nil)) (6389 . 6397) (#("to_pgm()$0" 0 10 (fontified nil)) . 6389) (6389 . 6399) (#("to" 0 2 (fontified nil)) . 6389) (6389 . 6391) (#("to_pgm()" 0 8 (fontified nil)) . -6389) (6389 . 6397) (#("to" 0 2 (fontified t)) . -6389) (undo-tree-id23136 . -2) (undo-tree-id23137 . -2) (undo-tree-id23138 . -2) 6391 (6388 . 6391)) nil (26156 49212 728221 94000) 0 nil])
([nil nil ((apply yas--snippet-revive 6470 6478 #s(yas--snippet nil nil #s(yas--exit 6478 nil) 130 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6478 nil) 130 nil nil nil nil)) (6470 . 6478) (#("to_pgm()$0" 0 10 (fontified nil)) . 6470) (6470 . 6480) (#("to_p" 0 4 (fontified nil)) . 6470) (6470 . 6474) (#("to_pgm()" 0 8 (fontified nil)) . -6470) (6470 . 6478) (#("to_p" 0 4 (fontified t)) . -6470) (undo-tree-id23023 . -4) (undo-tree-id23024 . -4) (undo-tree-id23025 . -4) (undo-tree-id23026 . -4) (undo-tree-id23027 . -4) (undo-tree-id23028 . -4) (undo-tree-id23029 . -4) (undo-tree-id23030 . -4) (undo-tree-id23031 . -4) (undo-tree-id23032 . -4) (undo-tree-id23033 . -4) (undo-tree-id23034 . -4) (undo-tree-id23035 . -4) (undo-tree-id23036 . -4) (undo-tree-id23037 . -4) (undo-tree-id23038 . -4) (undo-tree-id23039 . -4) (undo-tree-id23040 . -4) (undo-tree-id23041 . -4) (undo-tree-id23042 . -4) (undo-tree-id23043 . -4) (undo-tree-id23044 . -4) (undo-tree-id23045 . -4) (undo-tree-id23046 . -4) (undo-tree-id23047 . -4) (undo-tree-id23048 . -4) (undo-tree-id23049 . -4) (undo-tree-id23050 . -4) (undo-tree-id23051 . -4) (undo-tree-id23052 . -4) (undo-tree-id23053 . -4) (undo-tree-id23054 . -4) (undo-tree-id23055 . -4) (undo-tree-id23056 . -4) (undo-tree-id23057 . -4) (undo-tree-id23058 . -4) (undo-tree-id23059 . -4) (undo-tree-id23060 . -4) (undo-tree-id23061 . -4) (undo-tree-id23062 . -4) (undo-tree-id23063 . -4) (undo-tree-id23064 . -4) (undo-tree-id23065 . -4) (undo-tree-id23066 . -4) (undo-tree-id23067 . -4) (undo-tree-id23068 . -4) (undo-tree-id23069 . -4) (undo-tree-id23070 . -4) (undo-tree-id23071 . -4) (undo-tree-id23072 . -4) (undo-tree-id23073 . -4) (undo-tree-id23074 . -4) (undo-tree-id23075 . -4) (undo-tree-id23076 . -4) (undo-tree-id23077 . -4) (undo-tree-id23078 . -4) (undo-tree-id23079 . -4) (undo-tree-id23080 . -4) (undo-tree-id23081 . -4) (undo-tree-id23082 . -4) (undo-tree-id23083 . -4) (undo-tree-id23084 . -4) (undo-tree-id23085 . -4) (undo-tree-id23086 . -4) (undo-tree-id23087 . -4) (undo-tree-id23088 . -4) (undo-tree-id23089 . -4) (undo-tree-id23090 . -4) (undo-tree-id23091 . -4) (undo-tree-id23092 . -4) (undo-tree-id23093 . -4) (undo-tree-id23094 . -4) (undo-tree-id23095 . -4) (undo-tree-id23096 . -4) (undo-tree-id23097 . -4) (undo-tree-id23098 . -4) (undo-tree-id23099 . -4) (undo-tree-id23100 . -4) (undo-tree-id23101 . -4) (undo-tree-id23102 . -4) (undo-tree-id23103 . -4) (undo-tree-id23104 . -4) (undo-tree-id23105 . -4) (undo-tree-id23106 . -4) (undo-tree-id23107 . -4) (undo-tree-id23108 . -4) (undo-tree-id23109 . -4) (undo-tree-id23110 . -4) (undo-tree-id23111 . -4) (undo-tree-id23112 . -4) (undo-tree-id23113 . -4) (undo-tree-id23114 . -4) (undo-tree-id23115 . -4) (undo-tree-id23116 . -4) (undo-tree-id23117 . -4) (undo-tree-id23118 . -4) 6474 (6473 . 6474) (#("o" 0 1 (fontified t)) . -6473) (undo-tree-id23119 . -1) (undo-tree-id23120 . -1) (#("w" 0 1 (fontified t)) . -6474) (undo-tree-id23121 . -1) (undo-tree-id23122 . -1) (#("n" 0 1 (fontified t)) . -6475) (undo-tree-id23123 . -1) (undo-tree-id23124 . -1) (#("e" 0 1 (fontified t)) . -6476) (undo-tree-id23125 . -1) (undo-tree-id23126 . -1) (#("d" 0 1 (fontified t)) . -6477) (undo-tree-id23127 . -1) (undo-tree-id23128 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -6478) (undo-tree-id23129 . -1) (undo-tree-id23130 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -6479) (undo-tree-id23131 . -1) (undo-tree-id23132 . -1) 6480 (apply yas--snippet-revive 6470 6480 #s(yas--snippet nil nil #s(yas--exit 6480 nil) 129 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6480 nil) 129 nil nil nil nil)) (6470 . 6480) (#("to_owned()$0" 0 12 (fontified nil)) . 6470) (6470 . 6482) (#("to" 0 2 (fontified nil)) . 6470) (6470 . 6472) (#("to_owned() (as ToOwned)" 0 23 (fontified nil)) . -6470) (6470 . 6493) (#("to" 0 2 (fontified t)) . -6470) (undo-tree-id23133 . -2) (undo-tree-id23134 . -2) (undo-tree-id23135 . -2) 6472 (6469 . 6472)) nil (26156 49212 728183 952000) 0 nil])
([nil nil ((5913 . 5915) (#("5" 0 1 (fontified t)) . -5913) (undo-tree-id23186 . -1) (undo-tree-id23187 . -1) (undo-tree-id23188 . -1) (undo-tree-id23189 . -1) (undo-tree-id23190 . -1) (undo-tree-id23191 . -1) (undo-tree-id23192 . -1) (undo-tree-id23193 . -1) (undo-tree-id23194 . -1) (undo-tree-id23195 . -1) (undo-tree-id23196 . -1) (undo-tree-id23197 . -1) (undo-tree-id23198 . -1) 5914 (t 26156 49212 825805 132000)) nil (26156 49263 317590 435000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6019) (undo-tree-id23173 . -1) (undo-tree-id23174 . -1) (undo-tree-id23175 . -1) (undo-tree-id23176 . -1) (undo-tree-id23177 . -1) (undo-tree-id23178 . -1) (undo-tree-id23179 . -1) (undo-tree-id23180 . -1) (undo-tree-id23181 . -1) (undo-tree-id23182 . -1) (undo-tree-id23183 . -1) (undo-tree-id23184 . -1) (undo-tree-id23185 . -1) 6020) nil (26156 49263 317564 908000) 0 nil])
([nil nil ((6019 . 6021) (#("5" 0 1 (fontified t)) . -6019) (undo-tree-id23159 . 1) (undo-tree-id23160 . -1) (undo-tree-id23161 . -1) (undo-tree-id23162 . -1) (undo-tree-id23163 . -1) (undo-tree-id23164 . -1) (undo-tree-id23165 . -1) (undo-tree-id23166 . -1) (undo-tree-id23167 . -1) (undo-tree-id23168 . -1) (undo-tree-id23169 . -1) (undo-tree-id23170 . -1) (undo-tree-id23171 . -1) (undo-tree-id23172 . -1) 6020) nil (26156 49263 317537 219000) 0 nil])
([nil nil ((6019 . 6020)) nil (26156 49263 317509 745000) 0 nil])
([nil nil ((6502 . 6503) (#("3" 0 1 (fontified t face font-lock-string-face)) . -6502) (undo-tree-id23146 . -1) (undo-tree-id23147 . -1) (undo-tree-id23148 . -1) (undo-tree-id23149 . -1) (undo-tree-id23150 . -1) (undo-tree-id23151 . -1) (undo-tree-id23152 . -1) (undo-tree-id23153 . -1) (undo-tree-id23154 . -1) (undo-tree-id23155 . -1) (undo-tree-id23156 . -1) (undo-tree-id23157 . -1) 6503 (6502 . 6503) (#("2" 0 1 (fontified t face font-lock-string-face)) . -6502) (undo-tree-id23158 . -1) 6503) nil (26156 49263 317498 231000) 0 nil])
([nil nil ((6391 . 6392) (t 26156 49263 386233 517000)) nil (26156 49309 314552 314000) 0 nil])
([nil nil ((apply yas--snippet-revive 6391 6403 #s(yas--snippet nil nil #s(yas--exit 6403 nil) 131 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6403 nil) 131 nil nil nil nil)) (6391 . 6403) (#("get_points()$0" 0 14 (fontified nil)) . 6391) (6391 . 6405) (#("g" 0 1 (fontified nil)) . 6391) (6391 . 6392) (#("get_points()" 0 12 (fontified nil)) . -6391) (6391 . 6403) (#("g" 0 1 (fontified t)) . -6391) (undo-tree-id23324 . -1) (undo-tree-id23325 . -1) (undo-tree-id23326 . -1) 6392 (6391 . 6392)) nil (26156 49309 314547 784000) 0 nil])
([nil nil ((6485 . 6486)) nil (26156 49309 314536 876000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -6488) (undo-tree-id23314 . -1) (undo-tree-id23315 . -1) (undo-tree-id23316 . 1) (undo-tree-id23317 . -1) (undo-tree-id23318 . -1) (undo-tree-id23319 . -1) 6489 (#("x" 0 1 (fontified t)) . 6489) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6488 6488 nil nil nil t #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) #s(yas--exit 6492 nil) 132 nil #s(yas--field 1 6488 6488 nil nil nil t #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) nil nil)) (6485 . 6494) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 6485) (6485 . 6506) (#("ge" 0 2 (fontified nil)) . 6485) (6485 . 6487) (#("get(…)" 0 6 (fontified nil)) . -6485) (6485 . 6491) (#("ge" 0 2 (fontified t)) . -6485) (undo-tree-id23320 . -2) (undo-tree-id23321 . -2) 6487 (6486 . 6487) (#("a" 0 1 (fontified t)) . -6486) (undo-tree-id23322 . -1) (undo-tree-id23323 . -1) 6487 (6485 . 6487)) nil (26156 49309 314530 315000) 0 nil])
([nil nil ((apply yas--snippet-revive 6485 6492 #s(yas--snippet nil (#s(yas--field 1 6488 6488 nil nil nil t #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) #s(yas--exit 6492 nil) 132 nil #s(yas--field 1 6488 6488 nil nil nil t #s(yas--field 2 6490 6491 nil nil nil nil #s(yas--exit 6492 nil))) nil nil))) nil (26156 49309 314506 447000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 6485)) nil (26156 49309 314504 672000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 6485)) nil (26156 49309 314502 805000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 6485) (undo-tree-id23309 . -1) (undo-tree-id23310 . -1) (undo-tree-id23311 . -1) (undo-tree-id23312 . -1) (undo-tree-id23313 . -1)) nil (26156 49309 314500 104000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 6485) (undo-tree-id23306 . 1) (undo-tree-id23307 . -1) (undo-tree-id23308 . -1)) nil (26156 49309 314489 94000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6485) (undo-tree-id23305 . 1)) nil (26156 49309 314480 403000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 6485) (undo-tree-id23300 . 1) (undo-tree-id23301 . -1) (undo-tree-id23302 . -1) (undo-tree-id23303 . -1) (undo-tree-id23304 . -1)) nil (26156 49309 314475 469000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 6485) (undo-tree-id23294 . 1) (undo-tree-id23295 . -1) (undo-tree-id23296 . -1) (undo-tree-id23297 . -1) (undo-tree-id23298 . -1) (undo-tree-id23299 . -1)) nil (26156 49309 314462 101000) 0 nil])
([nil nil ((apply yas--snippet-revive 6485 6497 #s(yas--snippet nil nil #s(yas--exit 6497 nil) 133 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6497 nil) 133 nil nil nil nil)) (6485 . 6497) (#("get_points()$0" 0 14 (fontified nil)) . 6485) (6485 . 6499) (#("ge" 0 2 (fontified nil)) . 6485) (6485 . 6487) (#("get_points()" 0 12 (fontified nil)) . -6485) (6485 . 6497) (#("ge" 0 2 (fontified t)) . -6485) (undo-tree-id23199 . -2) (undo-tree-id23200 . -2) (undo-tree-id23201 . -1) (undo-tree-id23202 . -1) (undo-tree-id23203 . -1) (undo-tree-id23204 . -1) (undo-tree-id23205 . -1) (undo-tree-id23206 . -1) (undo-tree-id23207 . -1) (undo-tree-id23208 . -1) (undo-tree-id23209 . -1) (undo-tree-id23210 . -1) (undo-tree-id23211 . -2) (undo-tree-id23212 . -2) (undo-tree-id23213 . -2) (undo-tree-id23214 . -2) (undo-tree-id23215 . -2) (undo-tree-id23216 . -2) (undo-tree-id23217 . -2) (undo-tree-id23218 . -2) (undo-tree-id23219 . -2) (undo-tree-id23220 . -2) (undo-tree-id23221 . -2) (undo-tree-id23222 . -2) (undo-tree-id23223 . -2) (undo-tree-id23224 . -2) (undo-tree-id23225 . -2) (undo-tree-id23226 . -2) (undo-tree-id23227 . -2) (undo-tree-id23228 . -2) (undo-tree-id23229 . -2) (undo-tree-id23230 . -2) (undo-tree-id23231 . -2) (undo-tree-id23232 . -2) (undo-tree-id23233 . -2) (undo-tree-id23234 . -2) (undo-tree-id23235 . -2) (undo-tree-id23236 . -2) (undo-tree-id23237 . -2) (undo-tree-id23238 . -2) (undo-tree-id23239 . -2) (undo-tree-id23240 . -2) (undo-tree-id23241 . -2) (undo-tree-id23242 . -2) (undo-tree-id23243 . -2) (undo-tree-id23244 . -2) (undo-tree-id23245 . -2) (undo-tree-id23246 . -2) (undo-tree-id23247 . -2) (undo-tree-id23248 . -2) (undo-tree-id23249 . -2) (undo-tree-id23250 . -2) (undo-tree-id23251 . -2) (undo-tree-id23252 . -2) (undo-tree-id23253 . -2) (undo-tree-id23254 . -2) (undo-tree-id23255 . -2) (undo-tree-id23256 . -2) (undo-tree-id23257 . -2) (undo-tree-id23258 . -2) (undo-tree-id23259 . -2) (undo-tree-id23260 . -2) (undo-tree-id23261 . -2) (undo-tree-id23262 . -2) (undo-tree-id23263 . -2) (undo-tree-id23264 . -2) (undo-tree-id23265 . -2) (undo-tree-id23266 . -2) (undo-tree-id23267 . -2) (undo-tree-id23268 . -2) (undo-tree-id23269 . -2) (undo-tree-id23270 . -2) (undo-tree-id23271 . -2) (undo-tree-id23272 . -2) (undo-tree-id23273 . -2) (undo-tree-id23274 . -2) (undo-tree-id23275 . -2) (undo-tree-id23276 . -2) (undo-tree-id23277 . -2) (undo-tree-id23278 . -2) (undo-tree-id23279 . -2) (undo-tree-id23280 . -2) (undo-tree-id23281 . -2) (undo-tree-id23282 . -2) (undo-tree-id23283 . -2) (undo-tree-id23284 . -2) (undo-tree-id23285 . -2) (undo-tree-id23286 . -2) (undo-tree-id23287 . -2) (undo-tree-id23288 . -2) (undo-tree-id23289 . -2) (undo-tree-id23290 . -2) (undo-tree-id23291 . -2) (undo-tree-id23292 . -2) (undo-tree-id23293 . -2) 6487 (6485 . 6487)) nil (26156 49309 314433 186000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 6391) (undo-tree-id23340 . -2) (t 26156 49309 390635 250000)) nil (26156 49333 753378 133000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6391)) nil (26156 49333 753373 893000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 6391) (undo-tree-id23339 . -5)) nil (26156 49333 753371 722000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 6391) (undo-tree-id23336 . -2) (undo-tree-id23337 . -1) (undo-tree-id23338 . -3)) nil (26156 49333 753367 131000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 6472) (undo-tree-id23334 . -2) (undo-tree-id23335 . -3)) nil (26156 49333 753357 281000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6472) (undo-tree-id23333 . -1)) nil (26156 49333 753001 630000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 6472) (undo-tree-id23331 . -5) (undo-tree-id23332 . -6)) nil (26156 49333 752995 332000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 6472) (undo-tree-id23327 . -2) (undo-tree-id23328 . 1) (undo-tree-id23329 . -1) (undo-tree-id23330 . -3)) nil (26156 49333 752980 302000) 0 nil])
([nil nil ((5312 . 5314) (#(">" 0 1 (fontified t syntax-table (1))) . -5312) (undo-tree-id23341 . -1) (undo-tree-id23342 . -1) (#(" " 0 1 (fontified t)) . -5313) (undo-tree-id23343 . -1) (undo-tree-id23344 . -1) (#("&" 0 1 (fontified t)) . -5314) (undo-tree-id23345 . -1) (undo-tree-id23346 . -1) (#("2" 0 1 (fontified t)) . -5315) (undo-tree-id23347 . -1) (undo-tree-id23348 . -1) (#("0" 0 1 (fontified t)) . -5316) (undo-tree-id23349 . -1) (undo-tree-id23350 . -1) (#("0" 0 1 (fontified t)) . -5317) (undo-tree-id23351 . -1) 5318 (t 26156 49333 850853 120000)) nil (26156 49417 84578 67000) 0 nil])
([nil nil ((5315 . 5317)) nil (26156 49417 84522 838000) 0 nil])
([nil nil ((5317 . 5318) (t 26156 49417 183615 654000)) nil (26156 49420 908085 305000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5317) (undo-tree-id23352 . -1) (undo-tree-id23353 . -1) (undo-tree-id23354 . -1) (undo-tree-id23355 . -1) (undo-tree-id23356 . -1) (undo-tree-id23357 . -1) (undo-tree-id23358 . -1) (undo-tree-id23359 . -1) (undo-tree-id23360 . -1) (undo-tree-id23361 . -1) (undo-tree-id23362 . -1) (undo-tree-id23363 . -1) (undo-tree-id23364 . -1) (undo-tree-id23365 . -1) (undo-tree-id23366 . -1) (undo-tree-id23367 . -1) (undo-tree-id23368 . -1) (undo-tree-id23369 . -1) (undo-tree-id23370 . -1) (undo-tree-id23371 . -1) (undo-tree-id23372 . -1) (undo-tree-id23373 . -1) (undo-tree-id23374 . -1) 5318) nil (26156 49420 908073 557000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6480) (undo-tree-id23396 . -1) (undo-tree-id23397 . -1) 6481 (6480 . 6481) (6470 . 6480) (#("ge" 0 2 (fontified nil)) . 6470) (6470 . 6472) (#("get_points" 0 10 (fontified nil)) . -6470) (6470 . 6480) (#("ge" 0 2 (fontified t)) . -6470) (undo-tree-id23398 . -2) (undo-tree-id23399 . -2) (undo-tree-id23400 . -2) 6472 (6470 . 6472) (#("t" 0 1 (fontified t)) . -6470) (undo-tree-id23401 . -1) (undo-tree-id23402 . -1) (#("o" 0 1 (fontified t)) . -6471) (undo-tree-id23403 . -1) (undo-tree-id23404 . -1) (#("_" 0 1 (fontified t)) . -6472) (undo-tree-id23405 . -1) (undo-tree-id23406 . -1) (#("p" 0 1 (fontified t)) . -6473) (undo-tree-id23407 . -1) (undo-tree-id23408 . -1) (#("b" 0 1 (fontified t)) . -6474) (undo-tree-id23409 . -1) (undo-tree-id23410 . -1) 6475 (6474 . 6475) (#("g" 0 1 (fontified t)) . -6474) (undo-tree-id23411 . -1) (#("m" 0 1 (fontified t)) . -6475) (undo-tree-id23412 . -1) 6476 (t 26156 49421 3651 305000)) nil (26156 49467 999467 253000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6483) (undo-tree-id23390 . -1) (undo-tree-id23391 . -1) (undo-tree-id23392 . -1) 6484 (#("o" 0 1 (fontified t)) . -6484) (undo-tree-id23393 . -1) (undo-tree-id23394 . -1) (undo-tree-id23395 . -1) 6485 (6482 . 6485)) nil (26156 49467 999429 482000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 6482) (undo-tree-id23389 . -1)) nil (26156 49467 999414 792000) 0 nil])
([nil nil ((5216 . 5220) (#("    " 0 4 (fontified nil)) . 5215) (undo-tree-id23376 . -4) (undo-tree-id23377 . -4) (undo-tree-id23378 . -4) (undo-tree-id23379 . -4) (undo-tree-id23380 . -4) (undo-tree-id23381 . -4) (undo-tree-id23382 . -4) (undo-tree-id23383 . -4) (undo-tree-id23384 . -4) (undo-tree-id23385 . -4) (undo-tree-id23386 . -4) (undo-tree-id23387 . -4) (undo-tree-id23388 . -4) (5215 . 5220) (#("    " 0 4 (fontified nil)) . 5214) (5214 . 5218) (5214 . 5215)) nil (26156 49467 999408 572000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5537 . 5538) (nil fontified nil 5220 . 5538) (5220 . 5538) 5219) nil (26156 49467 999378 683000) 0 nil])
([nil nil ((5232 . 5233) (#("g" 0 1 (fontified t face font-lock-function-name-face)) . 5232) (undo-tree-id23375 . -1)) nil (26156 49467 999367 114000) 0 nil])
([nil nil ((5259 . 5260) (t 26156 49468 96095 391000)) nil (26156 49476 501696 272000) 0 nil])
([nil nil ((#("pgm" 0 3 (fontified t)) . 5454) (undo-tree-id23415 . -2) (undo-tree-id23416 . -3)) nil (26156 49476 501693 256000) 0 nil])
([nil nil ((5454 . 5457)) nil (26156 49476 501675 647000) 0 nil])
([nil nil ((#("255" 0 3 (fontified t)) . 5470) (undo-tree-id23413 . -2) (undo-tree-id23414 . -3)) nil (26156 49476 501666 561000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5470) (undo-tree-id23417 . -1) (undo-tree-id23418 . -1) (undo-tree-id23419 . -1) (undo-tree-id23420 . -1) (undo-tree-id23421 . -1) (undo-tree-id23422 . -1) (t 26156 49476 600176 459000)) nil (26156 49477 811834 637000) 0 nil])
([nil nil ((apply yas--snippet-revive 6804 6812 #s(yas--snippet nil nil #s(yas--exit 6812 nil) 134 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6812 nil) 134 nil nil nil nil)) (6804 . 6812) (#("to_pbm()$0" 0 10 (fontified nil)) . 6804) (6804 . 6814) (#("to" 0 2 (fontified nil)) . 6804) (6804 . 6806) (#("to_pbm()" 0 8 (fontified nil)) . -6804) (6804 . 6812) (#("to" 0 2 (fontified t)) . -6804) (undo-tree-id23423 . -2) (undo-tree-id23424 . -2) (undo-tree-id23425 . -2) (undo-tree-id23426 . -2) (undo-tree-id23427 . -2) (undo-tree-id23428 . -2) (undo-tree-id23429 . -2) (undo-tree-id23430 . -2) (undo-tree-id23431 . -2) (undo-tree-id23432 . -2) (undo-tree-id23433 . -2) (undo-tree-id23434 . -2) (undo-tree-id23435 . -2) (undo-tree-id23436 . -2) (undo-tree-id23437 . -2) (undo-tree-id23438 . -2) (undo-tree-id23439 . -2) (undo-tree-id23440 . -2) (undo-tree-id23441 . -2) (undo-tree-id23442 . -2) (undo-tree-id23443 . -2) (undo-tree-id23444 . -2) (undo-tree-id23445 . -2) (undo-tree-id23446 . -2) (undo-tree-id23447 . -2) (undo-tree-id23448 . -2) (undo-tree-id23449 . -2) (undo-tree-id23450 . -2) (undo-tree-id23451 . -2) (undo-tree-id23452 . -2) (undo-tree-id23453 . -2) (undo-tree-id23454 . -2) (undo-tree-id23455 . -2) (undo-tree-id23456 . -2) (undo-tree-id23457 . -2) (undo-tree-id23458 . -2) (undo-tree-id23459 . -2) (undo-tree-id23460 . -2) (undo-tree-id23461 . -2) (undo-tree-id23462 . -2) (undo-tree-id23463 . -2) (undo-tree-id23464 . -2) (undo-tree-id23465 . -2) (undo-tree-id23466 . -2) (undo-tree-id23467 . -2) (undo-tree-id23468 . -2) 6806 (6804 . 6806) (6803 . 6804) (#("t" 0 1 (fontified t)) . -6803) (undo-tree-id23469 . -1) (undo-tree-id23470 . -1) (undo-tree-id23471 . -1) (undo-tree-id23472 . -1) (#("o" 0 1 (fontified t)) . -6804) (undo-tree-id23473 . -1) (undo-tree-id23474 . -1) 6805 (6803 . 6805) (t 26156 49477 884188 721000)) nil (26156 49489 898550 522000) 0 nil])
([nil nil ((5638 . 5639) (t 26156 49490 304 718000)) nil (26156 49511 757978 247000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -5623) (undo-tree-id23612 . -5) (undo-tree-id23613 . -5) (undo-tree-id23614 . -5) (undo-tree-id23615 . -5) (undo-tree-id23616 . -5) (undo-tree-id23617 . -5) (undo-tree-id23618 . -5) (undo-tree-id23619 . -5) (undo-tree-id23620 . -5) (undo-tree-id23621 . -5) (undo-tree-id23622 . -5) (undo-tree-id23623 . -5) (undo-tree-id23624 . -5) (undo-tree-id23625 . -5) (undo-tree-id23626 . -5) (undo-tree-id23627 . -5) (undo-tree-id23628 . -5) (undo-tree-id23629 . -5) (undo-tree-id23630 . -5) (undo-tree-id23631 . -5) (undo-tree-id23632 . -5) (undo-tree-id23633 . -5) (undo-tree-id23634 . -5) (undo-tree-id23635 . -5) (undo-tree-id23636 . -5) (undo-tree-id23637 . -5) (undo-tree-id23638 . -5) (undo-tree-id23639 . -5) (undo-tree-id23640 . -5) (undo-tree-id23641 . -5) (undo-tree-id23642 . -5) (undo-tree-id23643 . -5) (undo-tree-id23644 . -5) (undo-tree-id23645 . -5) (undo-tree-id23646 . -5) (undo-tree-id23647 . -5) (undo-tree-id23648 . -5) (undo-tree-id23649 . -5) (undo-tree-id23650 . -5) (undo-tree-id23651 . -5) (undo-tree-id23652 . -5) (undo-tree-id23653 . -5) (undo-tree-id23654 . -5) (undo-tree-id23655 . -5) (undo-tree-id23656 . -5) (undo-tree-id23657 . -5) 5628 (5622 . 5628) (t 26156 49511 856515 234000)) nil (26156 49550 117584 952000) 0 nil])
([nil nil ((5628 . 5640) (5623 . 5628)) nil (26156 49550 117492 721000) 0 nil])
([nil nil ((5640 . 5642)) nil (26156 49550 117489 102000) 0 nil])
([nil nil ((5639 . 5641) (#("u" 0 1 (fontified nil)) . 5639) (5639 . 5640) (#("u8" 0 2 (fontified nil)) . -5639) (5639 . 5641) (#("u" 0 1 (fontified t)) . -5639) (undo-tree-id23475 . -1) (undo-tree-id23476 . -1) (undo-tree-id23477 . -1) (undo-tree-id23478 . -1) (undo-tree-id23479 . -1) (undo-tree-id23480 . -1) (undo-tree-id23481 . -1) (undo-tree-id23482 . -1) (undo-tree-id23483 . -1) (undo-tree-id23484 . -1) (undo-tree-id23485 . -1) (undo-tree-id23486 . -1) (undo-tree-id23487 . -1) (undo-tree-id23488 . -1) (undo-tree-id23489 . -1) (undo-tree-id23490 . -1) (undo-tree-id23491 . -1) (undo-tree-id23492 . -1) (undo-tree-id23493 . -1) (undo-tree-id23494 . -1) (undo-tree-id23495 . -1) (undo-tree-id23496 . -1) (undo-tree-id23497 . -1) (undo-tree-id23498 . -1) (undo-tree-id23499 . -1) (undo-tree-id23500 . -1) (undo-tree-id23501 . -1) (undo-tree-id23502 . -1) (undo-tree-id23503 . -1) (undo-tree-id23504 . -1) (undo-tree-id23505 . -1) (undo-tree-id23506 . -1) (undo-tree-id23507 . -1) (undo-tree-id23508 . -1) (undo-tree-id23509 . -1) (undo-tree-id23510 . -1) (undo-tree-id23511 . -1) (undo-tree-id23512 . -1) (undo-tree-id23513 . -1) (undo-tree-id23514 . -1) (undo-tree-id23515 . -1) (undo-tree-id23516 . -1) (undo-tree-id23517 . -1) (undo-tree-id23518 . -1) (undo-tree-id23519 . -1) (undo-tree-id23520 . -1) (undo-tree-id23521 . -1) (undo-tree-id23522 . -1) (undo-tree-id23523 . -1) (undo-tree-id23524 . -1) (undo-tree-id23525 . -1) (undo-tree-id23526 . -1) (undo-tree-id23527 . -1) (undo-tree-id23528 . -1) (undo-tree-id23529 . -1) (undo-tree-id23530 . -1) (undo-tree-id23531 . -1) (undo-tree-id23532 . -1) (undo-tree-id23533 . -1) (undo-tree-id23534 . -1) (undo-tree-id23535 . -1) (undo-tree-id23536 . -1) (undo-tree-id23537 . -1) (undo-tree-id23538 . -1) (undo-tree-id23539 . -1) (undo-tree-id23540 . -1) (undo-tree-id23541 . -1) (undo-tree-id23542 . -1) (undo-tree-id23543 . -1) (undo-tree-id23544 . -1) (undo-tree-id23545 . -1) (undo-tree-id23546 . -1) (undo-tree-id23547 . -1) (undo-tree-id23548 . -1) (undo-tree-id23549 . -1) (undo-tree-id23550 . -1) (undo-tree-id23551 . -1) (undo-tree-id23552 . -1) (undo-tree-id23553 . -1) (undo-tree-id23554 . -1) (undo-tree-id23555 . -1) (undo-tree-id23556 . -1) (undo-tree-id23557 . -1) (undo-tree-id23558 . -1) (undo-tree-id23559 . -1) (undo-tree-id23560 . -1) (undo-tree-id23561 . -1) (undo-tree-id23562 . -1) (undo-tree-id23563 . -1) (undo-tree-id23564 . -1) (undo-tree-id23565 . -1) (undo-tree-id23566 . -1) (undo-tree-id23567 . -1) (undo-tree-id23568 . -1) (undo-tree-id23569 . -1) (undo-tree-id23570 . -1) (undo-tree-id23571 . -1) (undo-tree-id23572 . -1) (undo-tree-id23573 . -1) (undo-tree-id23574 . -1) (undo-tree-id23575 . -1) (undo-tree-id23576 . -1) (undo-tree-id23577 . -1) (undo-tree-id23578 . -1) (undo-tree-id23579 . -1) (undo-tree-id23580 . -1) (undo-tree-id23581 . -1) (undo-tree-id23582 . -1) (undo-tree-id23583 . -1) (undo-tree-id23584 . -1) (undo-tree-id23585 . -1) (undo-tree-id23586 . -1) (undo-tree-id23587 . -1) (undo-tree-id23588 . -1) (undo-tree-id23589 . -1) (undo-tree-id23590 . -1) (undo-tree-id23591 . -1) (undo-tree-id23592 . -1) (undo-tree-id23593 . -1) (undo-tree-id23594 . -1) (undo-tree-id23595 . -1) (undo-tree-id23596 . -1) (undo-tree-id23597 . -1) (undo-tree-id23598 . -1) (undo-tree-id23599 . -1) (undo-tree-id23600 . -1) (undo-tree-id23601 . -1) (undo-tree-id23602 . -1) (undo-tree-id23603 . -1) (undo-tree-id23604 . -1) (undo-tree-id23605 . -1) (undo-tree-id23606 . -1) (undo-tree-id23607 . -1) 5640 (5637 . 5640) (#("L" 0 1 (fontified t face font-lock-variable-name-face)) . -5637) (undo-tree-id23608 . -1) (#(":" 0 1 (fontified t)) . -5638) (undo-tree-id23609 . -1) 5639 (5637 . 5639) (#(" " 0 1 (fontified t)) . -5637) (undo-tree-id23610 . -1) (#("&" 0 1 (fontified t)) . -5638) (undo-tree-id23611 . -1) 5639 (5637 . 5639)) nil (26156 49550 117462 63000) 0 nil])
([nil nil ((5661 . 5666) (#("0" 0 1 (fontified t)) . -5661) (undo-tree-id23658 . -1) 5662 (t 26156 49550 216888 492000)) nil (26156 49568 178956 760000) 0 nil])
([nil nil ((5661 . 5662) (t 26156 49558 724971 900000)) nil (26156 49582 672128 280000) 0 nil] [nil nil ((5661 . 5662) (#("*" 0 1 (fontified t)) . -5661) (undo-tree-id23659 . -1) 5662 (5661 . 5662) (t 26156 49558 724971 900000)) ((#("*" 0 1 (fontified nil)) . 5661) (5661 . 5662) (#("&" 0 1 (fontified t face rust-ampersand-face)) . 5661)) (26156 49568 176533 788000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 5655) (undo-tree-id23918 . -1) (undo-tree-id23919 . -1)) nil (26156 49582 672125 499000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 5655) (undo-tree-id23893 . -1) (undo-tree-id23894 . -1) (undo-tree-id23895 . -1) (undo-tree-id23896 . -1) (undo-tree-id23897 . -1) (undo-tree-id23898 . -1) (undo-tree-id23899 . -1) (undo-tree-id23900 . -1) (undo-tree-id23901 . -1) (undo-tree-id23902 . -1) (undo-tree-id23903 . -1) (undo-tree-id23904 . -1) (undo-tree-id23905 . -1) (undo-tree-id23906 . -1) (undo-tree-id23907 . -1) (undo-tree-id23908 . -1) (undo-tree-id23909 . -1) (undo-tree-id23910 . -1) (undo-tree-id23911 . -1) (undo-tree-id23912 . -1) (undo-tree-id23913 . -1) (undo-tree-id23914 . -1) (undo-tree-id23915 . -1) (undo-tree-id23916 . -1) (undo-tree-id23917 . -1)) nil (26156 49582 672117 43000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 5655) (undo-tree-id23891 . -1) (undo-tree-id23892 . -1)) nil (26156 49582 672068 189000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 5655) (undo-tree-id23888 . -1) (undo-tree-id23889 . -1) (undo-tree-id23890 . -1)) nil (26156 49582 672061 579000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5655) (undo-tree-id23886 . -1) (undo-tree-id23887 . -1)) nil (26156 49582 672054 86000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5655) (undo-tree-id23772 . -1) (undo-tree-id23773 . -1) (undo-tree-id23774 . -1) (undo-tree-id23775 . -1) (undo-tree-id23776 . -1) (undo-tree-id23777 . -1) (undo-tree-id23778 . -1) (undo-tree-id23779 . -1) (undo-tree-id23780 . -1) (undo-tree-id23781 . -1) (undo-tree-id23782 . -1) (undo-tree-id23783 . -1) (undo-tree-id23784 . -1) (undo-tree-id23785 . -1) (undo-tree-id23786 . -1) (undo-tree-id23787 . -1) (undo-tree-id23788 . -1) (undo-tree-id23789 . -1) (undo-tree-id23790 . -1) (undo-tree-id23791 . -1) (undo-tree-id23792 . -1) (undo-tree-id23793 . -1) (undo-tree-id23794 . -1) (undo-tree-id23795 . -1) (undo-tree-id23796 . -1) (undo-tree-id23797 . -1) (undo-tree-id23798 . -1) (undo-tree-id23799 . -1) (undo-tree-id23800 . -1) (undo-tree-id23801 . -1) (undo-tree-id23802 . -1) (undo-tree-id23803 . -1) (undo-tree-id23804 . -1) (undo-tree-id23805 . -1) (undo-tree-id23806 . -1) (undo-tree-id23807 . -1) (undo-tree-id23808 . -1) (undo-tree-id23809 . -1) (undo-tree-id23810 . -1) (undo-tree-id23811 . -1) (undo-tree-id23812 . -1) (undo-tree-id23813 . -1) (undo-tree-id23814 . -1) (undo-tree-id23815 . -1) (undo-tree-id23816 . -1) (undo-tree-id23817 . -1) (undo-tree-id23818 . -1) (undo-tree-id23819 . -1) (undo-tree-id23820 . -1) (undo-tree-id23821 . -1) (undo-tree-id23822 . -1) (undo-tree-id23823 . -1) (undo-tree-id23824 . -1) (undo-tree-id23825 . -1) (undo-tree-id23826 . -1) (undo-tree-id23827 . -1) (undo-tree-id23828 . -1) (undo-tree-id23829 . -1) (undo-tree-id23830 . -1) (undo-tree-id23831 . -1) (undo-tree-id23832 . -1) (undo-tree-id23833 . -1) (undo-tree-id23834 . -1) (undo-tree-id23835 . -1) (undo-tree-id23836 . -1) (undo-tree-id23837 . -1) (undo-tree-id23838 . -1) (undo-tree-id23839 . -1) (undo-tree-id23840 . -1) (undo-tree-id23841 . -1) (undo-tree-id23842 . -1) (undo-tree-id23843 . -1) (undo-tree-id23844 . -1) (undo-tree-id23845 . -1) (undo-tree-id23846 . -1) (undo-tree-id23847 . -1) (undo-tree-id23848 . -1) (undo-tree-id23849 . -1) (undo-tree-id23850 . -1) (undo-tree-id23851 . -1) (undo-tree-id23852 . -1) (undo-tree-id23853 . -1) (undo-tree-id23854 . -1) (undo-tree-id23855 . -1) (undo-tree-id23856 . -1) (undo-tree-id23857 . -1) (undo-tree-id23858 . -1) (undo-tree-id23859 . -1) (undo-tree-id23860 . -1) (undo-tree-id23861 . -1) (undo-tree-id23862 . -1) (undo-tree-id23863 . -1) (undo-tree-id23864 . -1) (undo-tree-id23865 . -1) (undo-tree-id23866 . -1) (undo-tree-id23867 . -1) (undo-tree-id23868 . -1) (undo-tree-id23869 . -1) (undo-tree-id23870 . -1) (undo-tree-id23871 . -1) (undo-tree-id23872 . -1) (undo-tree-id23873 . -1) (undo-tree-id23874 . -1) (undo-tree-id23875 . -1) (undo-tree-id23876 . -1) (undo-tree-id23877 . -1) (undo-tree-id23878 . -1) (undo-tree-id23879 . -1) (undo-tree-id23880 . -1) (undo-tree-id23881 . -1) (undo-tree-id23882 . -1) (undo-tree-id23883 . -1) (undo-tree-id23884 . -1) (undo-tree-id23885 . -1)) nil (26156 49582 672038 839000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 5655) (undo-tree-id23749 . -1) (undo-tree-id23750 . -1) (undo-tree-id23751 . -1) (undo-tree-id23752 . -1) (undo-tree-id23753 . -1) (undo-tree-id23754 . -1) (undo-tree-id23755 . -1) (undo-tree-id23756 . -1) (undo-tree-id23757 . -1) (undo-tree-id23758 . -1) (undo-tree-id23759 . -1) (undo-tree-id23760 . -1) (undo-tree-id23761 . -1) (undo-tree-id23762 . -1) (undo-tree-id23763 . -1) (undo-tree-id23764 . -1) (undo-tree-id23765 . -1) (undo-tree-id23766 . -1) (undo-tree-id23767 . -1) (undo-tree-id23768 . -1) (undo-tree-id23769 . -1) (undo-tree-id23770 . -1) (undo-tree-id23771 . -1)) nil (26156 49582 671727 545000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 5655) (undo-tree-id23746 . 1) (undo-tree-id23747 . -1) (undo-tree-id23748 . -1)) nil (26156 49582 671342 434000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 5655) (undo-tree-id23743 . 1) (undo-tree-id23744 . -1) (undo-tree-id23745 . -1)) nil (26156 49582 671332 209000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 5655) (undo-tree-id23740 . 1) (undo-tree-id23741 . -1) (undo-tree-id23742 . -1)) nil (26156 49582 671325 192000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 5655) (undo-tree-id23737 . 1) (undo-tree-id23738 . -1) (undo-tree-id23739 . -1)) nil (26156 49582 671317 560000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -5655) (undo-tree-id23664 . -1) (undo-tree-id23665 . -1) (undo-tree-id23666 . -1) (undo-tree-id23667 . -1) (undo-tree-id23668 . -1) (undo-tree-id23669 . -1) (undo-tree-id23670 . -1) (undo-tree-id23671 . -1) (undo-tree-id23672 . -1) (undo-tree-id23673 . -1) (undo-tree-id23674 . -1) (undo-tree-id23675 . -1) (undo-tree-id23676 . -1) (undo-tree-id23677 . -1) (undo-tree-id23678 . -1) (undo-tree-id23679 . -1) (undo-tree-id23680 . -1) (undo-tree-id23681 . -1) (undo-tree-id23682 . -1) (undo-tree-id23683 . -1) (undo-tree-id23684 . -1) (undo-tree-id23685 . -1) (undo-tree-id23686 . -1) (undo-tree-id23687 . -1) (undo-tree-id23688 . -1) (undo-tree-id23689 . -1) (undo-tree-id23690 . -1) (undo-tree-id23691 . -1) (undo-tree-id23692 . -1) (undo-tree-id23693 . -1) (undo-tree-id23694 . -1) (undo-tree-id23695 . -1) (undo-tree-id23696 . -1) (undo-tree-id23697 . -1) (undo-tree-id23698 . -1) (undo-tree-id23699 . -1) (undo-tree-id23700 . -1) (undo-tree-id23701 . -1) (undo-tree-id23702 . -1) (undo-tree-id23703 . -1) (undo-tree-id23704 . -1) (undo-tree-id23705 . -1) (undo-tree-id23706 . -1) (undo-tree-id23707 . -1) (undo-tree-id23708 . -1) (undo-tree-id23709 . -1) (undo-tree-id23710 . -1) (undo-tree-id23711 . -1) (undo-tree-id23712 . -1) (undo-tree-id23713 . -1) (undo-tree-id23714 . -1) (undo-tree-id23715 . -1) (undo-tree-id23716 . -1) (undo-tree-id23717 . -1) (undo-tree-id23718 . -1) (undo-tree-id23719 . -1) (undo-tree-id23720 . -1) (undo-tree-id23721 . -1) (undo-tree-id23722 . -1) (undo-tree-id23723 . -1) (undo-tree-id23724 . -1) (undo-tree-id23725 . -1) (undo-tree-id23726 . -1) (undo-tree-id23727 . -1) (undo-tree-id23728 . -1) (undo-tree-id23729 . -1) (undo-tree-id23730 . -1) (undo-tree-id23731 . -1) (undo-tree-id23732 . -1) (undo-tree-id23733 . -1) (undo-tree-id23734 . -1) (undo-tree-id23735 . -1) (undo-tree-id23736 . -1) 5656 (5655 . 5656)) nil (26156 49582 671304 8000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 5655) (undo-tree-id23660 . 1) (undo-tree-id23661 . 1) (undo-tree-id23662 . -1) (undo-tree-id23663 . -1)) nil (26156 49582 671171 548000) 0 nil])
([nil nil ((5655 . 5663)) nil (26156 49582 671137 674000) 0 nil])
([nil nil ((5658 . 5659) (t 26156 49582 745208 533000)) nil (26156 49585 342809 459000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -5663) (undo-tree-id23920 . -1) (undo-tree-id23921 . -1) (undo-tree-id23922 . -1) (undo-tree-id23923 . -1) (undo-tree-id23924 . -1) (undo-tree-id23925 . -1) (undo-tree-id23926 . -1) (undo-tree-id23927 . -1) (undo-tree-id23928 . -1) (undo-tree-id23929 . -1) (undo-tree-id23930 . -1) (undo-tree-id23931 . -1) (undo-tree-id23932 . -1) 5664 (t 26156 49585 421235 0)) nil (26156 49591 132877 479000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -5660) (undo-tree-id24098 . -1) (undo-tree-id24099 . -1) (undo-tree-id24100 . -1) (undo-tree-id24101 . -1) (undo-tree-id24102 . -1) (undo-tree-id24103 . -1) (undo-tree-id24104 . -1) (undo-tree-id24105 . -1) (undo-tree-id24106 . -1) (undo-tree-id24107 . -1) (undo-tree-id24108 . -1) (undo-tree-id24109 . -1) (undo-tree-id24110 . -1) (undo-tree-id24111 . -1) (undo-tree-id24112 . -1) (undo-tree-id24113 . -1) (undo-tree-id24114 . -1) (undo-tree-id24115 . -1) (undo-tree-id24116 . -1) (undo-tree-id24117 . -1) (undo-tree-id24118 . -1) (undo-tree-id24119 . -1) (undo-tree-id24120 . -1) (undo-tree-id24121 . -1) (undo-tree-id24122 . -1) (undo-tree-id24123 . -1) (undo-tree-id24124 . -1) (undo-tree-id24125 . -1) (undo-tree-id24126 . -1) (undo-tree-id24127 . -1) (undo-tree-id24128 . -1) (undo-tree-id24129 . -1) (undo-tree-id24130 . -1) (undo-tree-id24131 . -1) (undo-tree-id24132 . -1) (undo-tree-id24133 . -1) (undo-tree-id24134 . -1) (undo-tree-id24135 . -1) (undo-tree-id24136 . -1) (undo-tree-id24137 . -1) (undo-tree-id24138 . -1) (undo-tree-id24139 . -1) (undo-tree-id24140 . -1) (undo-tree-id24141 . -1) (undo-tree-id24142 . -1) (undo-tree-id24143 . -1) (undo-tree-id24144 . -1) (undo-tree-id24145 . -1) (undo-tree-id24146 . -1) (undo-tree-id24147 . -1) (undo-tree-id24148 . -1) (undo-tree-id24149 . -1) (undo-tree-id24150 . -1) (undo-tree-id24151 . -1) (undo-tree-id24152 . -1) (undo-tree-id24153 . -1) (undo-tree-id24154 . -1) (undo-tree-id24155 . -1) (undo-tree-id24156 . -1) (undo-tree-id24157 . -1) (undo-tree-id24158 . -1) (undo-tree-id24159 . -1) (undo-tree-id24160 . -1) (undo-tree-id24161 . -1) (undo-tree-id24162 . -1) (undo-tree-id24163 . -1) (undo-tree-id24164 . -1) (undo-tree-id24165 . -1) (undo-tree-id24166 . -1) (undo-tree-id24167 . -1) (undo-tree-id24168 . -1) (undo-tree-id24169 . -1) (undo-tree-id24170 . -1) (undo-tree-id24171 . -1) (undo-tree-id24172 . -1) (undo-tree-id24173 . -1) (undo-tree-id24174 . -1) (undo-tree-id24175 . -1) (undo-tree-id24176 . -1) (undo-tree-id24177 . -1) (undo-tree-id24178 . -1) (undo-tree-id24179 . -1) (undo-tree-id24180 . -1) (undo-tree-id24181 . -1) (undo-tree-id24182 . -1) (undo-tree-id24183 . -1) (undo-tree-id24184 . -1) (undo-tree-id24185 . -1) (undo-tree-id24186 . -1) (undo-tree-id24187 . -1) (undo-tree-id24188 . -1) (undo-tree-id24189 . -1) (undo-tree-id24190 . -1) (undo-tree-id24191 . -1) (undo-tree-id24192 . -1) (undo-tree-id24193 . -1) (undo-tree-id24194 . -1) (undo-tree-id24195 . -1) (undo-tree-id24196 . -1) (undo-tree-id24197 . -1) (undo-tree-id24198 . -1) (undo-tree-id24199 . -1) (undo-tree-id24200 . -1) (undo-tree-id24201 . -1) (undo-tree-id24202 . -1) (undo-tree-id24203 . -1) (undo-tree-id24204 . -1) (undo-tree-id24205 . -1) (undo-tree-id24206 . -1) (undo-tree-id24207 . -1) (undo-tree-id24208 . -1) (undo-tree-id24209 . -1) (undo-tree-id24210 . -1) (undo-tree-id24211 . -1) (undo-tree-id24212 . -1) (undo-tree-id24213 . -1) (undo-tree-id24214 . -1) (undo-tree-id24215 . -1) (undo-tree-id24216 . -1) (undo-tree-id24217 . -1) (undo-tree-id24218 . -1) (undo-tree-id24219 . -1) (#("x" 0 1 (fontified t)) . -5661) (undo-tree-id24220 . -1) (undo-tree-id24221 . -1) (undo-tree-id24222 . -1) (undo-tree-id24223 . -1) (undo-tree-id24224 . -1) (undo-tree-id24225 . -1) (undo-tree-id24226 . -1) (undo-tree-id24227 . -1) (undo-tree-id24228 . -1) (undo-tree-id24229 . -1) (undo-tree-id24230 . -1) (undo-tree-id24231 . -1) (undo-tree-id24232 . -1) (undo-tree-id24233 . -1) (undo-tree-id24234 . -1) (undo-tree-id24235 . -1) (undo-tree-id24236 . -1) (undo-tree-id24237 . -1) (undo-tree-id24238 . -1) (undo-tree-id24239 . -1) (undo-tree-id24240 . -1) (undo-tree-id24241 . -1) (undo-tree-id24242 . -1) (undo-tree-id24243 . -1) (undo-tree-id24244 . -1) (undo-tree-id24245 . -1) (undo-tree-id24246 . -1) (undo-tree-id24247 . -1) (undo-tree-id24248 . -1) (undo-tree-id24249 . -1) (undo-tree-id24250 . -1) (undo-tree-id24251 . -1) (undo-tree-id24252 . -1) (undo-tree-id24253 . -1) (undo-tree-id24254 . -1) (undo-tree-id24255 . -1) (undo-tree-id24256 . -1) (undo-tree-id24257 . -1) (undo-tree-id24258 . -1) (undo-tree-id24259 . -1) (undo-tree-id24260 . -1) (undo-tree-id24261 . -1) (undo-tree-id24262 . -1) (undo-tree-id24263 . -1) (undo-tree-id24264 . -1) (undo-tree-id24265 . -1) (undo-tree-id24266 . -1) (undo-tree-id24267 . -1) (undo-tree-id24268 . -1) (undo-tree-id24269 . -1) (undo-tree-id24270 . -1) (undo-tree-id24271 . -1) (undo-tree-id24272 . -1) (undo-tree-id24273 . -1) (undo-tree-id24274 . -1) (undo-tree-id24275 . -1) (undo-tree-id24276 . -1) (undo-tree-id24277 . -1) (undo-tree-id24278 . -1) (undo-tree-id24279 . -1) (undo-tree-id24280 . -1) (undo-tree-id24281 . -1) (undo-tree-id24282 . -1) (undo-tree-id24283 . -1) (undo-tree-id24284 . -1) (undo-tree-id24285 . -1) (undo-tree-id24286 . -1) (undo-tree-id24287 . -1) (undo-tree-id24288 . -1) (undo-tree-id24289 . -1) (undo-tree-id24290 . -1) (undo-tree-id24291 . -1) (undo-tree-id24292 . -1) (undo-tree-id24293 . -1) (undo-tree-id24294 . -1) (undo-tree-id24295 . -1) (undo-tree-id24296 . -1) (undo-tree-id24297 . -1) (undo-tree-id24298 . -1) (undo-tree-id24299 . -1) (undo-tree-id24300 . -1) (undo-tree-id24301 . -1) (undo-tree-id24302 . -1) (undo-tree-id24303 . -1) (undo-tree-id24304 . -1) (undo-tree-id24305 . -1) (undo-tree-id24306 . -1) (undo-tree-id24307 . -1) (undo-tree-id24308 . -1) (undo-tree-id24309 . -1) (undo-tree-id24310 . -1) (undo-tree-id24311 . -1) (undo-tree-id24312 . -1) (undo-tree-id24313 . -1) (undo-tree-id24314 . -1) (undo-tree-id24315 . -1) (undo-tree-id24316 . -1) (undo-tree-id24317 . -1) (undo-tree-id24318 . -1) (undo-tree-id24319 . -1) (undo-tree-id24320 . -1) (undo-tree-id24321 . -1) (undo-tree-id24322 . -1) (undo-tree-id24323 . -1) (undo-tree-id24324 . -1) (undo-tree-id24325 . -1) (undo-tree-id24326 . -1) (undo-tree-id24327 . -1) (undo-tree-id24328 . -1) (undo-tree-id24329 . -1) (undo-tree-id24330 . -1) (undo-tree-id24331 . -1) (#("0" 0 1 (fontified t)) . -5662) (undo-tree-id24332 . -1) (undo-tree-id24333 . -1) (undo-tree-id24334 . -1) (undo-tree-id24335 . -1) (undo-tree-id24336 . -1) (undo-tree-id24337 . -1) (undo-tree-id24338 . -1) (undo-tree-id24339 . -1) (undo-tree-id24340 . -1) (undo-tree-id24341 . -1) (undo-tree-id24342 . -1) (undo-tree-id24343 . -1) (undo-tree-id24344 . -1) (undo-tree-id24345 . -1) (undo-tree-id24346 . -1) (undo-tree-id24347 . -1) (undo-tree-id24348 . -1) (undo-tree-id24349 . -1) (undo-tree-id24350 . -1) (undo-tree-id24351 . -1) (undo-tree-id24352 . -1) (undo-tree-id24353 . -1) (undo-tree-id24354 . -1) (undo-tree-id24355 . -1) (undo-tree-id24356 . -1) (undo-tree-id24357 . -1) (undo-tree-id24358 . -1) (undo-tree-id24359 . -1) (undo-tree-id24360 . -1) (undo-tree-id24361 . -1) (undo-tree-id24362 . -1) (undo-tree-id24363 . -1) (undo-tree-id24364 . -1) (undo-tree-id24365 . -1) (#(" " 0 1 (fontified t)) . -5663) (undo-tree-id24366 . 1) (undo-tree-id24367 . 1) (undo-tree-id24368 . -1) (undo-tree-id24369 . -1) (undo-tree-id24370 . -1) (undo-tree-id24371 . -1) (undo-tree-id24372 . -1) (undo-tree-id24373 . -1) (undo-tree-id24374 . -1) (undo-tree-id24375 . -1) (undo-tree-id24376 . -1) (undo-tree-id24377 . -1) (undo-tree-id24378 . -1) (undo-tree-id24379 . -1) (undo-tree-id24380 . -1) 5664 (t 26156 49591 233292 556000)) nil (26156 49602 835926 135000) 0 nil])
([nil nil ((#("	    let thing: u8 = 0;
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 16 (fontified t) 16 18 (fontified t face font-lock-type-face) 18 23 (fontified t) 23 24 (fontified t)) . 5623) (undo-tree-id24062 . -23) (undo-tree-id24063 . -12) (undo-tree-id24064 . -12) (undo-tree-id24065 . -12) (undo-tree-id24066 . -12) (undo-tree-id24067 . -12) (undo-tree-id24068 . -12) (undo-tree-id24069 . -12) (undo-tree-id24070 . -12) (undo-tree-id24071 . -12) (undo-tree-id24072 . -12) (undo-tree-id24073 . -12) (undo-tree-id24074 . -12) (undo-tree-id24075 . -12) (undo-tree-id24076 . -12) (undo-tree-id24077 . -12) (undo-tree-id24078 . -12) (undo-tree-id24079 . -12) (undo-tree-id24080 . -12) (undo-tree-id24081 . -12) (undo-tree-id24082 . -12) (undo-tree-id24083 . -12) (undo-tree-id24084 . -12) (undo-tree-id24085 . -12) (undo-tree-id24086 . -12) (undo-tree-id24087 . -12) (undo-tree-id24088 . -12) (undo-tree-id24089 . -12) (undo-tree-id24090 . -12) (undo-tree-id24091 . -12) (undo-tree-id24092 . -12) (undo-tree-id24093 . -12) (undo-tree-id24094 . -12) (undo-tree-id24095 . -12) (undo-tree-id24096 . -12) (undo-tree-id24097 . -24) 5635) nil (26156 49602 835112 890000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -5623) (undo-tree-id24048 . -5) (undo-tree-id24049 . -5) (undo-tree-id24050 . -5) (undo-tree-id24051 . -5) (undo-tree-id24052 . -5) (undo-tree-id24053 . -5) (undo-tree-id24054 . -5) (undo-tree-id24055 . -5) (undo-tree-id24056 . -5) (undo-tree-id24057 . -5) (undo-tree-id24058 . -5) (undo-tree-id24059 . -5) (undo-tree-id24060 . -5) (undo-tree-id24061 . -5) 5628 (5622 . 5628)) nil (26156 49602 835043 729000) 0 nil])
([nil nil ((5637 . 5638)) nil (26156 49602 835015 485000) 0 nil])
([nil nil ((5642 . 5644) (#("u" 0 1 (fontified nil)) . 5642) (5642 . 5643) (#("u8" 0 2 (fontified nil)) . -5642) (5642 . 5644) (#("u" 0 1 (fontified t)) . -5642) (undo-tree-id23933 . -1) (undo-tree-id23934 . -1) (undo-tree-id23935 . -1) (undo-tree-id23936 . -1) (undo-tree-id23937 . -1) (undo-tree-id23938 . -1) (undo-tree-id23939 . -1) (undo-tree-id23940 . -1) (undo-tree-id23941 . -1) (undo-tree-id23942 . -1) (undo-tree-id23943 . -1) (undo-tree-id23944 . -1) (undo-tree-id23945 . -1) (undo-tree-id23946 . -1) (undo-tree-id23947 . -1) (undo-tree-id23948 . -1) (undo-tree-id23949 . -1) (undo-tree-id23950 . -1) (undo-tree-id23951 . -1) (undo-tree-id23952 . -1) (undo-tree-id23953 . -1) (undo-tree-id23954 . -1) (undo-tree-id23955 . -1) (undo-tree-id23956 . -1) (undo-tree-id23957 . -1) (undo-tree-id23958 . -1) (undo-tree-id23959 . -1) (undo-tree-id23960 . -1) (undo-tree-id23961 . -1) (undo-tree-id23962 . -1) (undo-tree-id23963 . -1) (undo-tree-id23964 . -1) (undo-tree-id23965 . -1) (undo-tree-id23966 . -1) (undo-tree-id23967 . -1) (undo-tree-id23968 . -1) (undo-tree-id23969 . -1) (undo-tree-id23970 . -1) (undo-tree-id23971 . -1) (undo-tree-id23972 . -1) (undo-tree-id23973 . -1) (undo-tree-id23974 . -1) (undo-tree-id23975 . -1) (undo-tree-id23976 . -1) (undo-tree-id23977 . -1) (undo-tree-id23978 . -1) (undo-tree-id23979 . -1) (undo-tree-id23980 . -1) (undo-tree-id23981 . -1) (undo-tree-id23982 . -1) (undo-tree-id23983 . -1) (undo-tree-id23984 . -1) (undo-tree-id23985 . -1) (undo-tree-id23986 . -1) (undo-tree-id23987 . -1) (undo-tree-id23988 . -1) (undo-tree-id23989 . -1) (undo-tree-id23990 . -1) (undo-tree-id23991 . -1) (undo-tree-id23992 . -1) (undo-tree-id23993 . -1) (undo-tree-id23994 . -1) (undo-tree-id23995 . -1) (undo-tree-id23996 . -1) (undo-tree-id23997 . -1) (undo-tree-id23998 . -1) (undo-tree-id23999 . -1) (undo-tree-id24000 . -1) (undo-tree-id24001 . -1) (undo-tree-id24002 . -1) (undo-tree-id24003 . -1) (undo-tree-id24004 . -1) (undo-tree-id24005 . -1) (undo-tree-id24006 . -1) (undo-tree-id24007 . -1) (undo-tree-id24008 . -1) (undo-tree-id24009 . -1) (undo-tree-id24010 . -1) (undo-tree-id24011 . -1) (undo-tree-id24012 . -1) (undo-tree-id24013 . -1) (undo-tree-id24014 . -1) (undo-tree-id24015 . -1) (undo-tree-id24016 . -1) (undo-tree-id24017 . -1) (undo-tree-id24018 . -1) (undo-tree-id24019 . -1) (undo-tree-id24020 . -1) (undo-tree-id24021 . -1) (undo-tree-id24022 . -1) (undo-tree-id24023 . -1) (undo-tree-id24024 . -1) (undo-tree-id24025 . -1) (undo-tree-id24026 . -1) (undo-tree-id24027 . -1) (undo-tree-id24028 . -1) (undo-tree-id24029 . -1) (undo-tree-id24030 . -1) (undo-tree-id24031 . -1) (undo-tree-id24032 . -1) (undo-tree-id24033 . -1) (undo-tree-id24034 . -1) (undo-tree-id24035 . -1) (undo-tree-id24036 . -1) (undo-tree-id24037 . -1) (undo-tree-id24038 . -1) (undo-tree-id24039 . -1) (undo-tree-id24040 . -1) (undo-tree-id24041 . -1) (undo-tree-id24042 . -1) (undo-tree-id24043 . -1) (undo-tree-id24044 . -1) (undo-tree-id24045 . -1) (undo-tree-id24046 . -1) (undo-tree-id24047 . -1) 5643 (5639 . 5643) (5637 . 5639)) nil (26156 49602 834991 472000) 0 nil])
([nil nil ((5632 . 5633) (t 26156 49602 937408 742000)) nil (26156 49608 932696 576000) 0 nil])
([nil nil ((6319 . 6320) (#("1" 0 1 (fontified t)) . -6319) (undo-tree-id24394 . -1) (undo-tree-id24395 . -1) (undo-tree-id24396 . -1) (undo-tree-id24397 . -1) (undo-tree-id24398 . -1) (undo-tree-id24399 . -1) (undo-tree-id24400 . -1) (undo-tree-id24401 . -1) (undo-tree-id24402 . -1) (undo-tree-id24403 . -1) (undo-tree-id24404 . -1) (undo-tree-id24405 . -1) (undo-tree-id24406 . -1) 6320 (t 26156 49609 33469 412000)) nil (26156 50318 658972 81000) 0 nil])
([nil nil ((6344 . 6345) (#("1" 0 1 (fontified t)) . -6344) (undo-tree-id24381 . -1) (undo-tree-id24382 . -1) (undo-tree-id24383 . -1) (undo-tree-id24384 . -1) (undo-tree-id24385 . -1) (undo-tree-id24386 . -1) (undo-tree-id24387 . -1) (undo-tree-id24388 . -1) (undo-tree-id24389 . -1) (undo-tree-id24390 . -1) (undo-tree-id24391 . -1) (undo-tree-id24392 . -1) (undo-tree-id24393 . -1) 6345) nil (26156 50318 658933 85000) 0 nil])
([nil nil ((#("200" 0 3 (fontified t)) . 6240) (undo-tree-id24447 . -2) (undo-tree-id24448 . -3) (t 26156 50318 736750 662000)) nil (26156 50332 802342 822000) 0 nil])
([nil nil ((6240 . 6243) (#("3" 0 1 (fontified t)) . -6240) (undo-tree-id24409 . -1) (undo-tree-id24410 . -1) (undo-tree-id24411 . -1) (undo-tree-id24412 . -1) (undo-tree-id24413 . -1) (undo-tree-id24414 . -1) (undo-tree-id24415 . -1) (undo-tree-id24416 . -1) (undo-tree-id24417 . -1) (undo-tree-id24418 . -1) (undo-tree-id24419 . -1) (undo-tree-id24420 . -1) (undo-tree-id24421 . -1) (undo-tree-id24422 . -1) (undo-tree-id24423 . -1) (undo-tree-id24424 . -1) (undo-tree-id24425 . -1) (undo-tree-id24426 . -1) (undo-tree-id24427 . -1) (undo-tree-id24428 . -1) (undo-tree-id24429 . -1) (undo-tree-id24430 . -1) (undo-tree-id24431 . -1) (undo-tree-id24432 . -1) (#("0" 0 1 (fontified t)) . -6241) (undo-tree-id24433 . -1) (undo-tree-id24434 . -1) (undo-tree-id24435 . -1) (undo-tree-id24436 . -1) (undo-tree-id24437 . -1) (undo-tree-id24438 . -1) (undo-tree-id24439 . -1) (undo-tree-id24440 . -1) (undo-tree-id24441 . -1) (undo-tree-id24442 . -1) (undo-tree-id24443 . -1) (undo-tree-id24444 . -1) (undo-tree-id24445 . -1) (undo-tree-id24446 . -1) 6242 (6240 . 6242)) nil (26156 50332 802331 793000) 0 nil])
([nil nil ((#("250" 0 3 (fontified t)) . 6347) (undo-tree-id24407 . -2) (undo-tree-id24408 . -3)) nil (26156 50332 802258 99000) 0 nil])
([nil nil ((6347 . 6350)) nil (26156 50332 802229 763000) 0 nil])
([nil nil ((6319 . 6320) (#("3" 0 1 (fontified t)) . -6319) (undo-tree-id24462 . -1) 6320 (t 26156 50332 905192 774000)) nil (26156 50460 23781 630000) 0 nil])
([nil nil ((6344 . 6345) (#("3" 0 1 (fontified t)) . -6344) (undo-tree-id24449 . -1) (undo-tree-id24450 . -1) (undo-tree-id24451 . -1) (undo-tree-id24452 . -1) (undo-tree-id24453 . -1) (undo-tree-id24454 . -1) (undo-tree-id24455 . -1) (undo-tree-id24456 . -1) (undo-tree-id24457 . -1) (undo-tree-id24458 . -1) (undo-tree-id24459 . -1) (undo-tree-id24460 . -1) (undo-tree-id24461 . -1) 6345) nil (26156 50460 23765 431000) 0 nil])
([nil nil ((6319 . 6321) (#("1" 0 1 (fontified t)) . -6319) (undo-tree-id24476 . -1) 6320 (t 26156 50460 96933 357000)) nil (26156 50470 635454 401000) 0 nil])
([nil nil ((6345 . 6347) (#("1" 0 1 (fontified t)) . -6345) (undo-tree-id24463 . -1) (undo-tree-id24464 . -1) (undo-tree-id24465 . -1) (undo-tree-id24466 . -1) (undo-tree-id24467 . -1) (undo-tree-id24468 . -1) (undo-tree-id24469 . -1) (undo-tree-id24470 . -1) (undo-tree-id24471 . -1) (undo-tree-id24472 . -1) (undo-tree-id24473 . -1) (undo-tree-id24474 . -1) (undo-tree-id24475 . -1) 6346) nil (26156 50470 635441 117000) 0 nil])
([nil nil ((6240 . 6243) (#("1" 0 1 (fontified t)) . -6240) (undo-tree-id24549 . -1) (#("5" 0 1 (fontified t)) . -6241) (undo-tree-id24550 . -1) (#("0" 0 1 (fontified t)) . -6242) (undo-tree-id24551 . -1) 6243 (t 26156 50470 737229 416000)) nil (26156 50494 772512 453000) 0 nil])
([nil nil ((6349 . 6352) (#("1" 0 1 (fontified t)) . -6349) (undo-tree-id24477 . -1) (undo-tree-id24478 . -1) (undo-tree-id24479 . -1) (undo-tree-id24480 . -1) (undo-tree-id24481 . -1) (undo-tree-id24482 . -1) (undo-tree-id24483 . -1) (undo-tree-id24484 . -1) (undo-tree-id24485 . -1) (undo-tree-id24486 . -1) (undo-tree-id24487 . -1) (undo-tree-id24488 . -1) (undo-tree-id24489 . -1) (undo-tree-id24490 . -1) (undo-tree-id24491 . -1) (undo-tree-id24492 . -1) (undo-tree-id24493 . -1) (undo-tree-id24494 . -1) (undo-tree-id24495 . -1) (undo-tree-id24496 . -1) (undo-tree-id24497 . -1) (undo-tree-id24498 . -1) (undo-tree-id24499 . -1) (undo-tree-id24500 . -1) (undo-tree-id24501 . -1) (undo-tree-id24502 . -1) (undo-tree-id24503 . -1) (undo-tree-id24504 . -1) (undo-tree-id24505 . -1) (undo-tree-id24506 . -1) (undo-tree-id24507 . -1) (undo-tree-id24508 . -1) (undo-tree-id24509 . -1) (undo-tree-id24510 . -1) (#("5" 0 1 (fontified t)) . -6350) (undo-tree-id24511 . -1) (undo-tree-id24512 . -1) (undo-tree-id24513 . -1) (undo-tree-id24514 . -1) (undo-tree-id24515 . -1) (undo-tree-id24516 . -1) (undo-tree-id24517 . -1) (undo-tree-id24518 . -1) (undo-tree-id24519 . -1) (undo-tree-id24520 . -1) (undo-tree-id24521 . -1) (undo-tree-id24522 . -1) (undo-tree-id24523 . -1) (undo-tree-id24524 . -1) (undo-tree-id24525 . -1) (undo-tree-id24526 . -1) (undo-tree-id24527 . -1) (undo-tree-id24528 . -1) (undo-tree-id24529 . -1) (undo-tree-id24530 . -1) (undo-tree-id24531 . -1) (undo-tree-id24532 . -1) (undo-tree-id24533 . -1) (undo-tree-id24534 . -1) (#("0" 0 1 (fontified t)) . -6351) (undo-tree-id24535 . -1) (undo-tree-id24536 . -1) (undo-tree-id24537 . -1) (undo-tree-id24538 . -1) (undo-tree-id24539 . -1) (undo-tree-id24540 . -1) (undo-tree-id24541 . -1) (undo-tree-id24542 . -1) (undo-tree-id24543 . -1) (undo-tree-id24544 . -1) (undo-tree-id24545 . -1) (undo-tree-id24546 . -1) (undo-tree-id24547 . -1) (undo-tree-id24548 . -1) 6352) nil (26156 50494 772489 882000) 0 nil])
([nil nil ((6349 . 6352) (#("2" 0 1 (fontified t)) . -6349) (undo-tree-id24565 . -1) (undo-tree-id24566 . -1) (#("5" 0 1 (fontified t)) . -6350) (undo-tree-id24567 . -1) (undo-tree-id24568 . -1) (#("0" 0 1 (fontified t)) . -6351) (undo-tree-id24569 . -1) 6352 (t 26156 50494 869892 215000)) nil (26156 50505 724598 233000) 0 nil])
([nil nil ((6241 . 6242) (#("5" 0 1 (fontified t)) . -6241) (undo-tree-id24552 . -1) (undo-tree-id24553 . -1) (undo-tree-id24554 . -1) (undo-tree-id24555 . -1) (undo-tree-id24556 . -1) (undo-tree-id24557 . -1) (undo-tree-id24558 . -1) (undo-tree-id24559 . -1) (undo-tree-id24560 . -1) (undo-tree-id24561 . -1) (undo-tree-id24562 . -1) (undo-tree-id24563 . -1) (undo-tree-id24564 . -1) 6242) nil (26156 50505 724576 859000) 0 nil])
([nil nil ((5647 . 5648) (#("0" 0 1 (fontified t)) . -5647) (undo-tree-id24603 . -1) (undo-tree-id24604 . -1) (undo-tree-id24605 . -1) (undo-tree-id24606 . -1) (undo-tree-id24607 . -1) (undo-tree-id24608 . -1) (undo-tree-id24609 . -1) (undo-tree-id24610 . -1) (undo-tree-id24611 . -1) (undo-tree-id24612 . -1) (undo-tree-id24613 . -1) (undo-tree-id24614 . -1) (undo-tree-id24615 . -1) (undo-tree-id24616 . -1) (undo-tree-id24617 . -1) (undo-tree-id24618 . -1) (undo-tree-id24619 . -1) (undo-tree-id24620 . -1) (undo-tree-id24621 . -1) (undo-tree-id24622 . -1) (undo-tree-id24623 . -1) (undo-tree-id24624 . -1) (undo-tree-id24625 . -1) (undo-tree-id24626 . -1) (undo-tree-id24627 . -1) (undo-tree-id24628 . -1) (undo-tree-id24629 . -1) (undo-tree-id24630 . -1) (undo-tree-id24631 . -1) (undo-tree-id24632 . -1) (undo-tree-id24633 . -1) (undo-tree-id24634 . -1) (undo-tree-id24635 . -1) (undo-tree-id24636 . -1) (undo-tree-id24637 . -1) (undo-tree-id24638 . -1) (undo-tree-id24639 . -1) (undo-tree-id24640 . -1) (undo-tree-id24641 . -1) (undo-tree-id24642 . -1) (undo-tree-id24643 . -1) (undo-tree-id24644 . -1) (undo-tree-id24645 . -1) (undo-tree-id24646 . -1) (undo-tree-id24647 . -1) (undo-tree-id24648 . -1) (undo-tree-id24649 . -1) (undo-tree-id24650 . -1) (undo-tree-id24651 . -1) (undo-tree-id24652 . -1) (undo-tree-id24653 . -1) (undo-tree-id24654 . -1) (undo-tree-id24655 . -1) (undo-tree-id24656 . -1) (undo-tree-id24657 . -1) (undo-tree-id24658 . -1) (undo-tree-id24659 . -1) (undo-tree-id24660 . -1) (undo-tree-id24661 . -1) (undo-tree-id24662 . -1) (undo-tree-id24663 . -1) (undo-tree-id24664 . -1) (undo-tree-id24665 . -1) (undo-tree-id24666 . -1) (undo-tree-id24667 . -1) (undo-tree-id24668 . -1) (undo-tree-id24669 . -1) (undo-tree-id24670 . -1) (undo-tree-id24671 . -1) (undo-tree-id24672 . -1) (undo-tree-id24673 . -1) (undo-tree-id24674 . -1) (undo-tree-id24675 . -1) (undo-tree-id24676 . -1) (undo-tree-id24677 . -1) (undo-tree-id24678 . -1) (undo-tree-id24679 . -1) (undo-tree-id24680 . -1) (undo-tree-id24681 . -1) (undo-tree-id24682 . -1) (undo-tree-id24683 . -1) (undo-tree-id24684 . -1) (undo-tree-id24685 . -1) (undo-tree-id24686 . -1) (undo-tree-id24687 . -1) (undo-tree-id24688 . -1) (undo-tree-id24689 . -1) (undo-tree-id24690 . -1) (undo-tree-id24691 . -1) (undo-tree-id24692 . -1) (undo-tree-id24693 . -1) (undo-tree-id24694 . -1) (undo-tree-id24695 . -1) (undo-tree-id24696 . -1) (undo-tree-id24697 . -1) (undo-tree-id24698 . -1) (undo-tree-id24699 . -1) (undo-tree-id24700 . -1) (undo-tree-id24701 . -1) (undo-tree-id24702 . -1) (undo-tree-id24703 . -1) (undo-tree-id24704 . -1) (undo-tree-id24705 . -1) (undo-tree-id24706 . -1) (undo-tree-id24707 . -1) (undo-tree-id24708 . -1) (undo-tree-id24709 . -1) (undo-tree-id24710 . -1) (undo-tree-id24711 . -1) (undo-tree-id24712 . -1) (undo-tree-id24713 . -1) (undo-tree-id24714 . -1) (undo-tree-id24715 . -1) (undo-tree-id24716 . -1) (undo-tree-id24717 . -1) (undo-tree-id24718 . -1) (undo-tree-id24719 . -1) (undo-tree-id24720 . -1) (undo-tree-id24721 . -1) (undo-tree-id24722 . -1) (undo-tree-id24723 . -1) (undo-tree-id24724 . -1) (undo-tree-id24725 . -1) (undo-tree-id24726 . -1) (undo-tree-id24727 . -1) (undo-tree-id24728 . -1) (undo-tree-id24729 . -1) (undo-tree-id24730 . -1) (undo-tree-id24731 . -1) (undo-tree-id24732 . -1) (undo-tree-id24733 . -1) (undo-tree-id24734 . -1) (undo-tree-id24735 . -1) (undo-tree-id24736 . -1) (undo-tree-id24737 . -1) (undo-tree-id24738 . -1) (undo-tree-id24739 . -1) (undo-tree-id24740 . -1) (undo-tree-id24741 . -1) (undo-tree-id24742 . -1) (undo-tree-id24743 . -1) (undo-tree-id24744 . -1) (undo-tree-id24745 . -1) (undo-tree-id24746 . -1) (undo-tree-id24747 . -1) (undo-tree-id24748 . -1) (undo-tree-id24749 . -1) (undo-tree-id24750 . -1) 5648 (t 26156 50505 826189 274000)) nil (26156 50560 204470 685000) 0 nil])
([nil nil ((5661 . 5662) (#("1" 0 1 (fontified t)) . -5661) (undo-tree-id24570 . -1) (undo-tree-id24571 . -1) (undo-tree-id24572 . -1) (undo-tree-id24573 . -1) (undo-tree-id24574 . -1) (undo-tree-id24575 . -1) (undo-tree-id24576 . -1) (undo-tree-id24577 . -1) (undo-tree-id24578 . -1) (undo-tree-id24579 . -1) (undo-tree-id24580 . -1) (undo-tree-id24581 . -1) (undo-tree-id24582 . -1) (undo-tree-id24583 . -1) (undo-tree-id24584 . -1) (undo-tree-id24585 . -1) (undo-tree-id24586 . -1) (undo-tree-id24587 . -1) (undo-tree-id24588 . -1) (undo-tree-id24589 . -1) (undo-tree-id24590 . -1) (undo-tree-id24591 . -1) (undo-tree-id24592 . -1) (undo-tree-id24593 . -1) (undo-tree-id24594 . -1) (undo-tree-id24595 . -1) (undo-tree-id24596 . -1) (undo-tree-id24597 . -1) (undo-tree-id24598 . -1) (undo-tree-id24599 . -1) (undo-tree-id24600 . -1) (undo-tree-id24601 . -1) (undo-tree-id24602 . -1) 5662) nil (26156 50560 203708 633000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -6317) (undo-tree-id24756 . -1) (undo-tree-id24757 . -1) (#(" " 0 1 (fontified t)) . -6318) (undo-tree-id24758 . -1) (undo-tree-id24759 . -1) (#("3" 0 1 (fontified t)) . -6319) (undo-tree-id24760 . -1) (undo-tree-id24761 . -1) (#("0" 0 1 (fontified t)) . -6320) (undo-tree-id24762 . 1) (undo-tree-id24763 . -1) (undo-tree-id24764 . -1) 6321 (t 26156 50560 307632 718000)) nil (26156 50582 204741 237000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6338) (undo-tree-id24751 . -1) (#("-" 0 1 (fontified t)) . -6339) (undo-tree-id24752 . -1) (#(" " 0 1 (fontified t)) . -6340) (undo-tree-id24753 . -1) (#("3" 0 1 (fontified t)) . -6341) (undo-tree-id24754 . -1) (#("0" 0 1 (fontified t)) . -6342) (undo-tree-id24755 . -1) 6343) nil (26156 50582 204710 996000) 0 nil])
([nil nil ((6312 . 6313) (#(" " 0 1 (fontified t)) . -6312) (undo-tree-id24765 . -1) (undo-tree-id24766 . -1) 6313 (t 26156 50582 316200 769000)) nil (26156 50597 100783 274000) 0 nil])
([nil nil ((6318 . 6321) (6317 . 6318)) nil (26156 50597 100758 985000) 0 nil])
([nil nil ((6342 . 6346)) nil (26156 50597 100747 356000) 0 nil])
([nil nil ((5767 . 5771) (5754 . 5768) (5750 . 5754) (#("    " 0 4 (fontified nil)) . 5749) (undo-tree-id24768 . -4) (5748 . 5754) (t 26156 50597 204580 425000)) nil (26156 55327 821907 919000) 0 nil])
([nil nil ((5772 . 5776)) nil (26156 55327 821901 924000) 0 nil])
([nil nil ((5767 . 5768)) nil (26156 55327 821899 950000) 0 nil])
([nil nil ((5777 . 5781) (#(" " 0 1 (fontified t)) . -5777) (undo-tree-id24767 . -1) 5778 (5777 . 5778)) nil (26156 55327 821895 818000) 0 nil])
([nil nil ((5784 . 5785) (5785 . 5789) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5784) (5784 . 5785) (5783 . 5785) (5781 . 5784)) nil (26156 55327 821864 995000) 0 nil])
([nil nil ((apply yas--snippet-revive 5787 5794 #s(yas--snippet nil nil #s(yas--exit 5793 nil) 135 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5793 nil) 135 nil nil nil nil)) (5787 . 5794) (#("todo!($0)" 0 9 (fontified nil)) . 5787) (5787 . 5796) (#("todo" 0 4 (fontified nil)) . 5787) (5787 . 5791) (#("todo!(…)" 0 8 (fontified nil)) . -5787) (5787 . 5795) (#("todo" 0 4 (fontified t)) . -5787) (undo-tree-id24769 . -4) (undo-tree-id24770 . -4) (undo-tree-id24771 . -4) (undo-tree-id24772 . -3) (undo-tree-id24773 . -3) (undo-tree-id24774 . -3) (undo-tree-id24775 . -3) (undo-tree-id24776 . -3) (undo-tree-id24777 . -3) (undo-tree-id24778 . -3) (undo-tree-id24779 . -3) (undo-tree-id24780 . -3) (undo-tree-id24781 . -4) (undo-tree-id24782 . -4) (undo-tree-id24783 . -4) (undo-tree-id24784 . -4) (undo-tree-id24785 . -4) (undo-tree-id24786 . -4) (undo-tree-id24787 . -4) (undo-tree-id24788 . -4) (undo-tree-id24789 . -4) (undo-tree-id24790 . -4) (undo-tree-id24791 . -4) (undo-tree-id24792 . -4) (undo-tree-id24793 . -4) (undo-tree-id24794 . -4) (undo-tree-id24795 . -4) (undo-tree-id24796 . -4) (undo-tree-id24797 . -4) (undo-tree-id24798 . -4) (undo-tree-id24799 . -4) (undo-tree-id24800 . -4) (undo-tree-id24801 . -4) (undo-tree-id24802 . -4) (undo-tree-id24803 . -4) (undo-tree-id24804 . -4) (undo-tree-id24805 . -4) (undo-tree-id24806 . -4) (undo-tree-id24807 . -4) (undo-tree-id24808 . -4) (undo-tree-id24809 . -4) (undo-tree-id24810 . -4) (undo-tree-id24811 . -4) (undo-tree-id24812 . -4) (undo-tree-id24813 . -4) (undo-tree-id24814 . -4) (undo-tree-id24815 . -4) (undo-tree-id24816 . -4) (undo-tree-id24817 . -4) (undo-tree-id24818 . -4) (undo-tree-id24819 . -4) (undo-tree-id24820 . -4) (undo-tree-id24821 . -4) (undo-tree-id24822 . -4) (undo-tree-id24823 . -4) (undo-tree-id24824 . -4) (undo-tree-id24825 . -4) (undo-tree-id24826 . -4) (undo-tree-id24827 . -4) (undo-tree-id24828 . -4) (undo-tree-id24829 . -4) (undo-tree-id24830 . -4) (undo-tree-id24831 . -4) (undo-tree-id24832 . -4) (undo-tree-id24833 . -4) (undo-tree-id24834 . -4) (undo-tree-id24835 . -4) (undo-tree-id24836 . -4) (undo-tree-id24837 . -4) (undo-tree-id24838 . -4) (undo-tree-id24839 . -4) (undo-tree-id24840 . -4) (undo-tree-id24841 . -4) (undo-tree-id24842 . -4) (undo-tree-id24843 . -4) (undo-tree-id24844 . -4) 5791 (5789 . 5791) (5787 . 5789) (5786 . 5787) (#("	" 0 1 (fontified nil)) . 5785) (undo-tree-id24845 . -1) (5785 . 5787) (#("	" 0 1 (fontified nil)) . 5784) (undo-tree-id24846 . -1) (5785 . 5786) (t 26156 55327 898428 803000)) nil (26156 55333 411730 825000) 0 nil])
([nil nil ((5784 . 5785) (t 26156 55333 506418 967000)) nil (26156 55370 69793 270000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -5806) (undo-tree-id24986 . -1) 5807 (5794 . 5807) (5789 . 5794) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -5789) (undo-tree-id24987 . -1) (undo-tree-id24988 . -1) 5790 (5789 . 5790) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -5789) (undo-tree-id24989 . -1) (undo-tree-id24990 . -1) (undo-tree-id24991 . -1) 5790 (5785 . 5790)) nil (26156 55370 69787 528000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -5781) (undo-tree-id24940 . -1) (undo-tree-id24941 . -1) (undo-tree-id24942 . -1) (undo-tree-id24943 . -1) (undo-tree-id24944 . -1) (undo-tree-id24945 . -1) (undo-tree-id24946 . -1) (undo-tree-id24947 . -1) (undo-tree-id24948 . -1) (undo-tree-id24949 . -1) (undo-tree-id24950 . -1) (undo-tree-id24951 . -1) (undo-tree-id24952 . -1) (undo-tree-id24953 . -1) (undo-tree-id24954 . -1) (undo-tree-id24955 . -1) (undo-tree-id24956 . -1) (undo-tree-id24957 . -1) (undo-tree-id24958 . -1) (undo-tree-id24959 . -1) (undo-tree-id24960 . -1) (undo-tree-id24961 . -1) (undo-tree-id24962 . -1) (undo-tree-id24963 . -1) (undo-tree-id24964 . -1) (undo-tree-id24965 . -1) (undo-tree-id24966 . -1) (undo-tree-id24967 . -1) (undo-tree-id24968 . -1) (undo-tree-id24969 . -1) (undo-tree-id24970 . -1) (undo-tree-id24971 . -1) (#("l" 0 1 (fontified t)) . -5782) (undo-tree-id24972 . -1) (undo-tree-id24973 . -1) (undo-tree-id24974 . -1) (undo-tree-id24975 . -1) (undo-tree-id24976 . -1) (undo-tree-id24977 . -1) (undo-tree-id24978 . -1) (undo-tree-id24979 . -1) (undo-tree-id24980 . -1) (undo-tree-id24981 . -1) (undo-tree-id24982 . -1) (undo-tree-id24983 . -1) 5783 (5781 . 5783) (#(")" 0 1 (fontified nil)) . -5780) (5780 . 5781) (#(")" 0 1 (fontified nil)) . -5780) (5772 . 5781) (#("l" 0 1 (fontified t)) . -5772) (undo-tree-id24984 . -1) (undo-tree-id24985 . -1) 5773 (5772 . 5773)) nil (26156 55370 69765 120000) 0 nil])
([nil nil ((5789 . 5794) (#("us" 0 2 (fontified nil)) . 5789) (5789 . 5791) (#("usize" 0 5 (fontified nil)) . -5789) (5789 . 5794) (#("us" 0 2 (fontified t)) . -5789) (undo-tree-id24847 . -2) (undo-tree-id24848 . -2) (undo-tree-id24849 . -1) (undo-tree-id24850 . -1) (undo-tree-id24851 . -1) (undo-tree-id24852 . -1) (undo-tree-id24853 . -1) (undo-tree-id24854 . -1) (undo-tree-id24855 . -1) (undo-tree-id24856 . -1) (undo-tree-id24857 . -1) (undo-tree-id24858 . -1) (undo-tree-id24859 . -2) (undo-tree-id24860 . -2) (undo-tree-id24861 . -2) (undo-tree-id24862 . -2) (undo-tree-id24863 . -2) (undo-tree-id24864 . -2) (undo-tree-id24865 . -2) (undo-tree-id24866 . -2) (undo-tree-id24867 . -2) (undo-tree-id24868 . -2) (undo-tree-id24869 . -2) (undo-tree-id24870 . -2) (undo-tree-id24871 . -2) (undo-tree-id24872 . -2) (undo-tree-id24873 . -2) (undo-tree-id24874 . -2) (undo-tree-id24875 . -2) (undo-tree-id24876 . -2) (undo-tree-id24877 . -2) (undo-tree-id24878 . -2) (undo-tree-id24879 . -2) (undo-tree-id24880 . -2) (undo-tree-id24881 . -2) (undo-tree-id24882 . -2) (undo-tree-id24883 . -2) (undo-tree-id24884 . -2) (undo-tree-id24885 . -2) (undo-tree-id24886 . -2) (undo-tree-id24887 . -2) (undo-tree-id24888 . -2) (undo-tree-id24889 . -2) (undo-tree-id24890 . -2) (undo-tree-id24891 . -2) (undo-tree-id24892 . -2) (undo-tree-id24893 . -2) (undo-tree-id24894 . -2) (undo-tree-id24895 . -2) (undo-tree-id24896 . -2) (undo-tree-id24897 . -2) (undo-tree-id24898 . -2) (undo-tree-id24899 . -2) (undo-tree-id24900 . -2) (undo-tree-id24901 . -2) (undo-tree-id24902 . -2) (undo-tree-id24903 . -2) (undo-tree-id24904 . -2) (undo-tree-id24905 . -2) (undo-tree-id24906 . -2) (undo-tree-id24907 . -2) (undo-tree-id24908 . -2) (undo-tree-id24909 . -2) (undo-tree-id24910 . -2) (undo-tree-id24911 . -2) (undo-tree-id24912 . -2) (undo-tree-id24913 . -2) (undo-tree-id24914 . -2) (undo-tree-id24915 . -2) (undo-tree-id24916 . -2) (undo-tree-id24917 . -2) (undo-tree-id24918 . -2) (undo-tree-id24919 . -2) (undo-tree-id24920 . -2) (undo-tree-id24921 . -2) (undo-tree-id24922 . -2) (undo-tree-id24923 . -2) (undo-tree-id24924 . -2) (undo-tree-id24925 . -2) (undo-tree-id24926 . -2) (undo-tree-id24927 . -2) (undo-tree-id24928 . -2) (undo-tree-id24929 . -2) (undo-tree-id24930 . -2) (undo-tree-id24931 . -2) (undo-tree-id24932 . -2) (undo-tree-id24933 . -2) (undo-tree-id24934 . -2) (undo-tree-id24935 . -2) (undo-tree-id24936 . -2) (undo-tree-id24937 . -2) (undo-tree-id24938 . -2) (undo-tree-id24939 . -2) 5791 (5790 . 5791) (5780 . 5790)) nil (26156 55370 69651 768000) 0 nil])
([nil nil ((5829 . 5830) (t 26156 55370 170360 846000)) nil (26156 55485 43243 431000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -5830) (undo-tree-id25215 . -1) (undo-tree-id25216 . -1) (undo-tree-id25217 . -1) (undo-tree-id25218 . -1) (undo-tree-id25219 . -1) (undo-tree-id25220 . -1) (undo-tree-id25221 . -1) (undo-tree-id25222 . -1) (undo-tree-id25223 . -1) (undo-tree-id25224 . -1) (undo-tree-id25225 . -1) (undo-tree-id25226 . -1) (undo-tree-id25227 . -1) (undo-tree-id25228 . -1) (undo-tree-id25229 . -1) (undo-tree-id25230 . -1) (undo-tree-id25231 . -1) (undo-tree-id25232 . -1) (undo-tree-id25233 . -1) (undo-tree-id25234 . -1) (undo-tree-id25235 . -1) (undo-tree-id25236 . -1) (undo-tree-id25237 . -1) (undo-tree-id25238 . -1) (undo-tree-id25239 . -1) (undo-tree-id25240 . -1) (undo-tree-id25241 . -1) (undo-tree-id25242 . -1) (undo-tree-id25243 . -1) (undo-tree-id25244 . -1) (undo-tree-id25245 . -1) (undo-tree-id25246 . -1) (undo-tree-id25247 . -1) (undo-tree-id25248 . -1) (undo-tree-id25249 . -1) (undo-tree-id25250 . -1) (undo-tree-id25251 . -1) (undo-tree-id25252 . -1) (undo-tree-id25253 . -1) (undo-tree-id25254 . -1) (undo-tree-id25255 . -1) (undo-tree-id25256 . -1) (undo-tree-id25257 . -1) (undo-tree-id25258 . -1) (undo-tree-id25259 . -1) (undo-tree-id25260 . -1) (undo-tree-id25261 . -1) (undo-tree-id25262 . -1) (undo-tree-id25263 . -1) (undo-tree-id25264 . -1) (undo-tree-id25265 . -1) (undo-tree-id25266 . -1) (undo-tree-id25267 . -1) (undo-tree-id25268 . -1) (undo-tree-id25269 . -1) (undo-tree-id25270 . -1) (undo-tree-id25271 . -1) (undo-tree-id25272 . -1) (undo-tree-id25273 . -1) (undo-tree-id25274 . -1) (undo-tree-id25275 . -1) (undo-tree-id25276 . -1) (undo-tree-id25277 . -1) (undo-tree-id25278 . -1) (undo-tree-id25279 . -1) (undo-tree-id25280 . -1) (undo-tree-id25281 . -1) (undo-tree-id25282 . -1) (undo-tree-id25283 . -1) (undo-tree-id25284 . -1) (undo-tree-id25285 . -1) (undo-tree-id25286 . -1) (#("a" 0 1 (fontified t)) . -5831) (undo-tree-id25287 . -1) (undo-tree-id25288 . -1) (undo-tree-id25289 . -1) (undo-tree-id25290 . -1) (undo-tree-id25291 . -1) (undo-tree-id25292 . -1) (undo-tree-id25293 . -1) (undo-tree-id25294 . -1) (undo-tree-id25295 . -1) (undo-tree-id25296 . -1) (undo-tree-id25297 . -1) (undo-tree-id25298 . -1) (undo-tree-id25299 . -1) (undo-tree-id25300 . -1) (undo-tree-id25301 . -1) (undo-tree-id25302 . -1) (undo-tree-id25303 . -1) (undo-tree-id25304 . -1) (undo-tree-id25305 . -1) (undo-tree-id25306 . -1) (undo-tree-id25307 . -1) (undo-tree-id25308 . -1) (undo-tree-id25309 . -1) (undo-tree-id25310 . -1) (undo-tree-id25311 . -1) (undo-tree-id25312 . -1) (undo-tree-id25313 . -1) (undo-tree-id25314 . -1) (undo-tree-id25315 . -1) (undo-tree-id25316 . -1) (undo-tree-id25317 . -1) (undo-tree-id25318 . -1) (undo-tree-id25319 . -1) (undo-tree-id25320 . -1) (undo-tree-id25321 . -1) (undo-tree-id25322 . -1) (undo-tree-id25323 . -1) (undo-tree-id25324 . -1) (undo-tree-id25325 . -1) (undo-tree-id25326 . -1) (undo-tree-id25327 . -1) (#("k" 0 1 (fontified t)) . -5832) (undo-tree-id25328 . -1) (undo-tree-id25329 . -1) (undo-tree-id25330 . -1) (undo-tree-id25331 . -1) (undo-tree-id25332 . -1) (undo-tree-id25333 . -1) (undo-tree-id25334 . -1) (undo-tree-id25335 . -1) (undo-tree-id25336 . -1) (undo-tree-id25337 . -1) (undo-tree-id25338 . -1) (undo-tree-id25339 . -1) (undo-tree-id25340 . -1) (undo-tree-id25341 . -1) (undo-tree-id25342 . -1) (undo-tree-id25343 . -1) (undo-tree-id25344 . -1) (undo-tree-id25345 . -1) (undo-tree-id25346 . -1) (undo-tree-id25347 . -1) (undo-tree-id25348 . -1) (undo-tree-id25349 . -1) (undo-tree-id25350 . -1) (undo-tree-id25351 . -1) (undo-tree-id25352 . -1) (undo-tree-id25353 . -1) (undo-tree-id25354 . -1) (undo-tree-id25355 . -1) (undo-tree-id25356 . -1) (undo-tree-id25357 . -1) (undo-tree-id25358 . -1) (undo-tree-id25359 . -1) 5833 (5830 . 5833)) nil (26156 55485 43227 528000) 0 nil])
([nil nil ((5831 . 5832) (#("	" 0 1 (fontified nil)) . 5830) (undo-tree-id25064 . -1) (undo-tree-id25065 . -1) (undo-tree-id25066 . -1) (undo-tree-id25067 . -1) (undo-tree-id25068 . -1) (undo-tree-id25069 . -1) (undo-tree-id25070 . -1) (undo-tree-id25071 . -1) (undo-tree-id25072 . -1) (undo-tree-id25073 . -1) (undo-tree-id25074 . -1) (undo-tree-id25075 . -1) (undo-tree-id25076 . -1) (5830 . 5832) (#("	" 0 1 (fontified nil)) . 5829) (undo-tree-id25077 . -1) (undo-tree-id25078 . -1) (undo-tree-id25079 . -1) (undo-tree-id25080 . -1) (undo-tree-id25081 . -1) (undo-tree-id25082 . -1) (undo-tree-id25083 . -1) (undo-tree-id25084 . -1) (undo-tree-id25085 . -1) (undo-tree-id25086 . -1) (undo-tree-id25087 . -1) (undo-tree-id25088 . -1) (undo-tree-id25089 . -1) (undo-tree-id25090 . -1) (undo-tree-id25091 . -1) (undo-tree-id25092 . -1) (undo-tree-id25093 . -1) (undo-tree-id25094 . -1) (undo-tree-id25095 . -1) (undo-tree-id25096 . -1) (undo-tree-id25097 . -1) (undo-tree-id25098 . -1) (undo-tree-id25099 . -1) (undo-tree-id25100 . -1) (undo-tree-id25101 . -1) (undo-tree-id25102 . -1) (undo-tree-id25103 . -1) (undo-tree-id25104 . -1) (undo-tree-id25105 . -1) (undo-tree-id25106 . -1) (undo-tree-id25107 . -1) (undo-tree-id25108 . -1) (undo-tree-id25109 . -1) (undo-tree-id25110 . -1) (undo-tree-id25111 . -1) (undo-tree-id25112 . -1) (undo-tree-id25113 . -1) (undo-tree-id25114 . -1) (undo-tree-id25115 . -1) (undo-tree-id25116 . -1) (undo-tree-id25117 . -1) (undo-tree-id25118 . -1) (undo-tree-id25119 . -1) (undo-tree-id25120 . -1) (undo-tree-id25121 . -1) (undo-tree-id25122 . -1) (undo-tree-id25123 . -1) (undo-tree-id25124 . -1) (undo-tree-id25125 . -1) (undo-tree-id25126 . -1) (undo-tree-id25127 . -1) (undo-tree-id25128 . -1) (undo-tree-id25129 . -1) (undo-tree-id25130 . -1) (undo-tree-id25131 . -1) (undo-tree-id25132 . -1) (undo-tree-id25133 . -1) (undo-tree-id25134 . -1) (undo-tree-id25135 . -1) (undo-tree-id25136 . -1) (undo-tree-id25137 . -1) (undo-tree-id25138 . -1) (undo-tree-id25139 . -1) (undo-tree-id25140 . -1) (undo-tree-id25141 . -1) (undo-tree-id25142 . -1) (undo-tree-id25143 . -1) (undo-tree-id25144 . -1) (undo-tree-id25145 . -1) (undo-tree-id25146 . -1) (undo-tree-id25147 . -1) (undo-tree-id25148 . -1) (undo-tree-id25149 . -1) (undo-tree-id25150 . -1) (undo-tree-id25151 . -1) (undo-tree-id25152 . -1) (undo-tree-id25153 . -1) (undo-tree-id25154 . -1) (undo-tree-id25155 . -1) (undo-tree-id25156 . -1) (undo-tree-id25157 . -1) (undo-tree-id25158 . -1) (undo-tree-id25159 . -1) (undo-tree-id25160 . -1) (undo-tree-id25161 . -1) (undo-tree-id25162 . -1) (undo-tree-id25163 . -1) (undo-tree-id25164 . -1) (undo-tree-id25165 . -1) (undo-tree-id25166 . -1) (undo-tree-id25167 . -1) (undo-tree-id25168 . -1) (undo-tree-id25169 . -1) (undo-tree-id25170 . -1) (undo-tree-id25171 . -1) (undo-tree-id25172 . -1) (undo-tree-id25173 . -1) (undo-tree-id25174 . -1) (undo-tree-id25175 . -1) (undo-tree-id25176 . -1) (undo-tree-id25177 . -1) (undo-tree-id25178 . -1) (undo-tree-id25179 . -1) (undo-tree-id25180 . -1) (undo-tree-id25181 . -1) (undo-tree-id25182 . -1) (undo-tree-id25183 . -1) (undo-tree-id25184 . -1) (undo-tree-id25185 . -1) (undo-tree-id25186 . -1) (undo-tree-id25187 . -1) (undo-tree-id25188 . -1) (undo-tree-id25189 . -1) (undo-tree-id25190 . -1) (undo-tree-id25191 . -1) (undo-tree-id25192 . -1) (undo-tree-id25193 . -1) (undo-tree-id25194 . -1) (undo-tree-id25195 . -1) (undo-tree-id25196 . -1) (undo-tree-id25197 . -1) (undo-tree-id25198 . -1) (undo-tree-id25199 . -1) (undo-tree-id25200 . -1) (undo-tree-id25201 . -1) (undo-tree-id25202 . -1) (undo-tree-id25203 . -1) (undo-tree-id25204 . -1) (undo-tree-id25205 . -1) (undo-tree-id25206 . -1) (undo-tree-id25207 . -1) (undo-tree-id25208 . -1) (undo-tree-id25209 . -1) (undo-tree-id25210 . -1) (undo-tree-id25211 . -1) (undo-tree-id25212 . -1) (undo-tree-id25213 . -1) (undo-tree-id25214 . -1) (5830 . 5831)) nil (26156 55485 42965 880000) 0 nil])
([nil nil ((5830 . 5831)) nil (26156 55485 42036 172000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5831) (undo-tree-id25023 . -1) (undo-tree-id25024 . -1) (undo-tree-id25025 . -1) (undo-tree-id25026 . -1) (undo-tree-id25027 . -1) (undo-tree-id25028 . -1) (undo-tree-id25029 . -1) (undo-tree-id25030 . -1) (undo-tree-id25031 . -1) (undo-tree-id25032 . -1) (undo-tree-id25033 . -1) (undo-tree-id25034 . -1) (undo-tree-id25035 . -1) (undo-tree-id25036 . -1) (undo-tree-id25037 . -1) (undo-tree-id25038 . -1) (undo-tree-id25039 . -1) (undo-tree-id25040 . -1) (undo-tree-id25041 . -1) (undo-tree-id25042 . -1) (undo-tree-id25043 . -1) (undo-tree-id25044 . -1) (undo-tree-id25045 . -1) (undo-tree-id25046 . -1) (undo-tree-id25047 . -1) (undo-tree-id25048 . -1) (undo-tree-id25049 . -1) (undo-tree-id25050 . -1) (undo-tree-id25051 . -1) (undo-tree-id25052 . -1) (undo-tree-id25053 . -1) (undo-tree-id25054 . -1) (undo-tree-id25055 . -1) (undo-tree-id25056 . -1) (undo-tree-id25057 . -1) (undo-tree-id25058 . -1) (undo-tree-id25059 . -1) (undo-tree-id25060 . -1) (undo-tree-id25061 . -1) (undo-tree-id25062 . -1) (undo-tree-id25063 . -1) 5832 (5831 . 5832)) nil (26156 55485 42030 46000) 0 nil])
([nil nil ((5871 . 5876) (5872 . 5873) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 5871) (5871 . 5876) (5870 . 5872) (5868 . 5871) (5863 . 5868) (#("wi" 0 2 (fontified nil)) . 5863) (5863 . 5865) (#("width" 0 5 (fontified nil)) . -5863) (5863 . 5868) (#("wi" 0 2 (fontified t)) . -5863) (undo-tree-id25008 . -1) (undo-tree-id25009 . -2) (undo-tree-id25010 . -2) 5865 (5862 . 5865) (5858 . 5862) (#("sel" 0 3 (fontified nil)) . 5858) (5858 . 5861) (#("self" 0 4 (fontified nil)) . -5858) (5858 . 5862) (#("sel" 0 3 (fontified t)) . -5858) (undo-tree-id25011 . -3) (undo-tree-id25012 . -3) 5861 (5856 . 5861) (5843 . 5856) (#("s" 0 1 (fontified nil)) . 5843) (5843 . 5844) (#("square_length" 0 13 (fontified nil)) . -5843) (5843 . 5856) (#("s" 0 1 (fontified t)) . -5843) (undo-tree-id25013 . -1) (undo-tree-id25014 . -1) 5844 (5843 . 5844) (5836 . 5843) (5831 . 5836) (#("s" 0 1 (fontified t)) . -5831) (undo-tree-id25015 . -1) (#("u" 0 1 (fontified t)) . -5832) (undo-tree-id25016 . -1) (#("d" 0 1 (fontified t)) . -5833) (undo-tree-id25017 . -1) (#("o" 0 1 (fontified t)) . -5834) (undo-tree-id25018 . -1) (#(" " 0 1 (fontified t)) . -5835) (undo-tree-id25019 . -1) 5836 (5831 . 5836) (#("f" 0 1 (fontified t)) . -5831) (undo-tree-id25020 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -5832) (undo-tree-id25021 . -1) (#(" " 0 1 (fontified t)) . -5833) (undo-tree-id25022 . -1) 5834 (5831 . 5834)) nil (26156 55485 41943 551000) 0 nil])
([nil nil ((5917 . 5919) (5918 . 5923) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 5917) (5917 . 5919) (5916 . 5918) (5914 . 5917) (5908 . 5914) (#("h" 0 1 (fontified nil)) . 5908) (5908 . 5909) (#("height" 0 6 (fontified nil)) . -5908) (5908 . 5914) (#("h" 0 1 (fontified t)) . -5908) (undo-tree-id24992 . -1) (undo-tree-id24993 . -1) (undo-tree-id24994 . -1) (undo-tree-id24995 . -1) (undo-tree-id24996 . -1) (undo-tree-id24997 . -1) 5909 (5908 . 5909) (5907 . 5908) (5903 . 5907) (#("sel" 0 3 (fontified nil)) . 5903) (5903 . 5906) (#("self" 0 4 (fontified nil)) . -5903) (5903 . 5907) (#("sel" 0 3 (fontified t)) . -5903) (undo-tree-id24998 . -3) (undo-tree-id24999 . -3) 5906 (5901 . 5906) (5888 . 5901) (#("s" 0 1 (fontified nil)) . 5888) (5888 . 5889) (#("square_length" 0 13 (fontified nil)) . -5888) (5888 . 5901) (#("s" 0 1 (fontified t)) . -5888) (undo-tree-id25000 . -1) (undo-tree-id25001 . -1) 5889 (5885 . 5889) (#("-" 0 1 (fontified t)) . -5885) (undo-tree-id25002 . -1) (undo-tree-id25003 . -1) (#("." 0 1 (fontified t)) . -5886) (undo-tree-id25004 . -1) (undo-tree-id25005 . -1) (#("." 0 1 (fontified t)) . -5887) (undo-tree-id25006 . -1) (undo-tree-id25007 . -1) 5888 (5876 . 5888)) nil (26156 55485 41886 129000) 0 nil])
([nil nil ((5868 . 5869) (#("]" 0 1 (fontified nil)) . -5868) (5868 . 5869) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -5868) (undo-tree-id25360 . -1) (undo-tree-id25361 . -1) (undo-tree-id25362 . -1) (undo-tree-id25363 . -1) 5869 (5868 . 5869) (#(")" 0 1 (fontified nil)) . -5868) (5868 . 5869) (t 26156 55485 142241 540000)) nil (26156 55500 777182 792000) 0 nil])
([nil nil ((5840 . 5841)) nil (26156 55500 777075 634000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 5840) (undo-tree-id25368 . -1) (undo-tree-id25369 . -1) (t 26156 55500 850231 884000)) nil (26156 55505 114378 113000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 5868) (undo-tree-id25364 . -1) (undo-tree-id25365 . -1) (undo-tree-id25366 . -1) (undo-tree-id25367 . -1)) nil (26156 55505 114363 450000) 0 nil])
([nil nil ((5868 . 5869) (#("}" 0 1 (fontified nil)) . -5868) (5868 . 5869) (t 26156 55505 214229 460000)) nil (26156 55520 369525 852000) 0 nil])
([nil nil ((5840 . 5841)) nil (26156 55520 369513 556000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 5840) (t 26156 55520 466221 856000)) nil (26156 55678 42289 538000) 0 nil])
([nil nil ((#(".." 0 2 (fontified t)) . 5841) (undo-tree-id25388 . -1)) nil (26156 55678 42286 808000) 0 nil])
([nil nil ((#("square" 0 6 (fontified t)) . 5841) (undo-tree-id25387 . -5)) nil (26156 55678 42282 700000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5841)) nil (26156 55678 42279 411000) 0 nil])
([nil nil ((#("length" 0 6 (fontified t)) . 5841) (undo-tree-id25386 . -5)) nil (26156 55678 42276 694000) 0 nil])
([nil nil ((5853 . 5854) (#(")" 0 1 (fontified nil)) . -5853) (5853 . 5854) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -5853) (undo-tree-id25385 . -1) 5854) nil (26156 55678 42272 292000) 0 nil])
([nil nil ((5840 . 5841)) nil (26156 55678 42267 461000) 0 nil])
([nil nil ((5864 . 5877) (#("s" 0 1 (fontified nil)) . 5864) (5864 . 5865) (#("square_length" 0 13 (fontified nil)) . -5864) (5864 . 5877) (#("s" 0 1 (fontified t)) . -5864) (undo-tree-id25381 . -1) (undo-tree-id25382 . -1) 5865 (#("step" 0 4 (fontified nil)) . 5865) (5864 . 5865) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5864 5877 nil nil nil t #s(yas--exit 5878 nil))) #s(yas--exit 5878 nil) 136 nil #s(yas--field 1 5864 5877 nil nil nil t #s(yas--exit 5878 nil)) nil nil)) (5856 . 5869) (#("step_by(${1:step})$0" 0 20 (fontified nil)) . 5856) (5856 . 5876) (#("st" 0 2 (fontified nil)) . 5856) (5856 . 5858) (#("step_by(…) (as Iterator)" 0 24 (fontified nil)) . -5856) (5856 . 5880) (#("st" 0 2 (fontified t)) . -5856) (undo-tree-id25383 . -2) (undo-tree-id25384 . -2) 5858 (5856 . 5858) (5855 . 5856)) nil (26156 55678 42260 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 5856 5878 #s(yas--snippet nil (#s(yas--field 1 5864 5877 nil nil nil t #s(yas--exit 5878 nil))) #s(yas--exit 5878 nil) 136 nil #s(yas--field 1 5864 5877 nil nil nil t #s(yas--exit 5878 nil)) nil nil))) nil (26156 55678 42244 392000) 0 nil])
([nil nil ((#("square" 0 6 (fontified t)) . 5898) (undo-tree-id25380 . -5)) nil (26156 55678 42242 210000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5898)) nil (26156 55678 42238 242000) 0 nil])
([nil nil ((#("length" 0 6 (fontified t)) . 5898) (undo-tree-id25379 . -5)) nil (26156 55678 42235 986000) 0 nil])
([nil nil ((#(".." 0 2 (fontified t)) . 5898) (undo-tree-id25378 . -1)) nil (26156 55678 42231 40000) 0 nil])
([nil nil ((5909 . 5910) (#(")" 0 1 (fontified nil)) . -5909) (5909 . 5910)) nil (26156 55678 42226 737000) 0 nil])
([nil nil ((5895 . 5896)) nil (26156 55678 42222 689000) 0 nil])
([nil nil ((5920 . 5933) (#("s" 0 1 (fontified nil)) . 5920) (undo-tree-id25370 . -1) (5920 . 5921) (#("square_length" 0 13 (fontified nil)) . -5920) (undo-tree-id25371 . -13) (5920 . 5933) (#("s" 0 1 (fontified t)) . -5920) (undo-tree-id25372 . -1) (undo-tree-id25373 . -1) (undo-tree-id25374 . -1) 5921 (#("step" 0 4 (fontified nil)) . 5921) (undo-tree-id25375 . -4) (5920 . 5921) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5920 5933 nil nil nil t #s(yas--exit 5934 nil))) #s(yas--exit 5934 nil) 137 nil #s(yas--field 1 5920 5933 nil nil nil t #s(yas--exit 5934 nil)) nil nil)) (5912 . 5925) (#("step_by(${1:step})$0" 0 20 (fontified nil)) . 5912) (5912 . 5932) (#("st" 0 2 (fontified nil)) . 5912) (5912 . 5914) (#("step_by(…) (as Iterator)" 0 24 (fontified nil)) . -5912) (5912 . 5936) (#("st" 0 2 (fontified t)) . -5912) (undo-tree-id25376 . -2) (undo-tree-id25377 . -2) 5914 (5912 . 5914) (5911 . 5912)) nil (26156 55678 42208 92000) 0 nil])
([nil nil ((apply yas--snippet-revive 5912 5934 #s(yas--snippet nil (#s(yas--field 1 5920 5933 nil nil nil t #s(yas--exit 5934 nil))) #s(yas--exit 5934 nil) 137 nil #s(yas--field 1 5920 5933 nil nil nil t #s(yas--exit 5934 nil)) nil nil))) nil (26156 55741 850077 692000) 0 nil])
([nil nil ((5974 . 5976) (#("		" 0 2 (fontified nil)) . 5973) (undo-tree-id25622 . -2) (5972 . 5976) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -5972) (undo-tree-id25623 . -1) (undo-tree-id25624 . -1) 5973 (5953 . 5973) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -5953) (undo-tree-id25625 . -1) 5954 (5939 . 5954) (t 26156 55678 138213 689000)) nil (26156 55741 850050 911000) 0 nil])
([nil nil ((5973 . 5975)) nil (26156 55741 850039 671000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5830) (undo-tree-id25594 . -1) (undo-tree-id25595 . -1) (undo-tree-id25596 . -1) (undo-tree-id25597 . -1) (undo-tree-id25598 . -1) (undo-tree-id25599 . -1) (undo-tree-id25600 . -1) (undo-tree-id25601 . -1) (undo-tree-id25602 . -1) (undo-tree-id25603 . -1) (undo-tree-id25604 . -1) (undo-tree-id25605 . -1) (undo-tree-id25606 . -1) (undo-tree-id25607 . -1) (undo-tree-id25608 . -1) 5831 (5830 . 5831) (#("	" 0 1 (fontified nil)) . 5829) (undo-tree-id25609 . -1) (undo-tree-id25610 . -1) (undo-tree-id25611 . -1) (undo-tree-id25612 . -1) (undo-tree-id25613 . -1) (undo-tree-id25614 . -1) (undo-tree-id25615 . -1) (undo-tree-id25616 . -1) (undo-tree-id25617 . -1) (undo-tree-id25618 . -1) (undo-tree-id25619 . -1) (undo-tree-id25620 . -1) (undo-tree-id25621 . -1) (5828 . 5831)) nil (26156 55741 850033 781000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5831) (undo-tree-id25393 . -1) (undo-tree-id25394 . -1) (undo-tree-id25395 . -1) (undo-tree-id25396 . -1) (undo-tree-id25397 . -1) (undo-tree-id25398 . -1) (undo-tree-id25399 . -1) (undo-tree-id25400 . -1) (undo-tree-id25401 . -1) (undo-tree-id25402 . -1) (undo-tree-id25403 . -1) (undo-tree-id25404 . -1) (undo-tree-id25405 . -1) (undo-tree-id25406 . -1) (undo-tree-id25407 . -1) (undo-tree-id25408 . -1) (undo-tree-id25409 . -1) (undo-tree-id25410 . -1) (undo-tree-id25411 . -1) (undo-tree-id25412 . -1) (undo-tree-id25413 . -1) (undo-tree-id25414 . -1) (undo-tree-id25415 . -1) (undo-tree-id25416 . -1) (undo-tree-id25417 . -1) (undo-tree-id25418 . -1) (undo-tree-id25419 . -1) (undo-tree-id25420 . -1) (undo-tree-id25421 . -1) (undo-tree-id25422 . -1) (undo-tree-id25423 . -1) (undo-tree-id25424 . -1) (undo-tree-id25425 . -1) (undo-tree-id25426 . -1) (undo-tree-id25427 . -1) (undo-tree-id25428 . -1) (undo-tree-id25429 . -1) (undo-tree-id25430 . -1) (undo-tree-id25431 . -1) (undo-tree-id25432 . -1) (undo-tree-id25433 . -1) (undo-tree-id25434 . -1) (undo-tree-id25435 . -1) (undo-tree-id25436 . -1) (undo-tree-id25437 . -1) (undo-tree-id25438 . -1) (undo-tree-id25439 . -1) (undo-tree-id25440 . -1) (undo-tree-id25441 . -1) (undo-tree-id25442 . -1) (undo-tree-id25443 . -1) (undo-tree-id25444 . -1) (undo-tree-id25445 . -1) (undo-tree-id25446 . -1) (undo-tree-id25447 . -1) (undo-tree-id25448 . -1) (undo-tree-id25449 . -1) (undo-tree-id25450 . -1) (undo-tree-id25451 . -1) (undo-tree-id25452 . -1) (undo-tree-id25453 . -1) (undo-tree-id25454 . -1) (undo-tree-id25455 . -1) (undo-tree-id25456 . -1) (undo-tree-id25457 . -1) (undo-tree-id25458 . -1) (undo-tree-id25459 . -1) (undo-tree-id25460 . -1) (undo-tree-id25461 . -1) (undo-tree-id25462 . -1) (undo-tree-id25463 . -1) (undo-tree-id25464 . -1) (undo-tree-id25465 . -1) (undo-tree-id25466 . -1) (undo-tree-id25467 . -1) (undo-tree-id25468 . -1) (undo-tree-id25469 . -1) (undo-tree-id25470 . -1) (undo-tree-id25471 . -1) (undo-tree-id25472 . -1) (undo-tree-id25473 . -1) (undo-tree-id25474 . -1) (undo-tree-id25475 . -1) (undo-tree-id25476 . -1) (undo-tree-id25477 . -1) (undo-tree-id25478 . -1) (undo-tree-id25479 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -5832) (undo-tree-id25480 . -1) (undo-tree-id25481 . -1) (undo-tree-id25482 . -1) (undo-tree-id25483 . -1) (undo-tree-id25484 . -1) (undo-tree-id25485 . -1) (undo-tree-id25486 . -1) (undo-tree-id25487 . -1) (undo-tree-id25488 . -1) (undo-tree-id25489 . -1) (undo-tree-id25490 . -1) (undo-tree-id25491 . -1) (undo-tree-id25492 . -1) (undo-tree-id25493 . -1) (undo-tree-id25494 . -1) (undo-tree-id25495 . -1) (undo-tree-id25496 . -1) (undo-tree-id25497 . -1) (undo-tree-id25498 . -1) (undo-tree-id25499 . -1) (undo-tree-id25500 . -1) (undo-tree-id25501 . -1) (undo-tree-id25502 . -1) (undo-tree-id25503 . -1) (undo-tree-id25504 . -1) (undo-tree-id25505 . -1) (undo-tree-id25506 . -1) (undo-tree-id25507 . -1) (undo-tree-id25508 . -1) (undo-tree-id25509 . -1) (undo-tree-id25510 . -1) (undo-tree-id25511 . -1) (undo-tree-id25512 . -1) (undo-tree-id25513 . -1) (undo-tree-id25514 . -1) (undo-tree-id25515 . -1) (undo-tree-id25516 . -1) (undo-tree-id25517 . -1) (undo-tree-id25518 . -1) (undo-tree-id25519 . -1) (undo-tree-id25520 . -1) (undo-tree-id25521 . -1) (undo-tree-id25522 . -1) (undo-tree-id25523 . -1) (undo-tree-id25524 . -1) (undo-tree-id25525 . -1) (undo-tree-id25526 . -1) (undo-tree-id25527 . -1) (undo-tree-id25528 . -1) (undo-tree-id25529 . -1) (undo-tree-id25530 . -1) (undo-tree-id25531 . -1) (undo-tree-id25532 . -1) (undo-tree-id25533 . -1) (undo-tree-id25534 . -1) (undo-tree-id25535 . -1) (undo-tree-id25536 . -1) (undo-tree-id25537 . -1) (undo-tree-id25538 . -1) (undo-tree-id25539 . -1) (undo-tree-id25540 . -1) (undo-tree-id25541 . -1) (undo-tree-id25542 . -1) (undo-tree-id25543 . -1) (undo-tree-id25544 . -1) (undo-tree-id25545 . -1) (undo-tree-id25546 . -1) (#(" " 0 1 (fontified t)) . -5833) (undo-tree-id25547 . -1) (undo-tree-id25548 . -1) (undo-tree-id25549 . -1) (undo-tree-id25550 . -1) (undo-tree-id25551 . -1) (undo-tree-id25552 . -1) (undo-tree-id25553 . -1) (undo-tree-id25554 . -1) (undo-tree-id25555 . -1) (undo-tree-id25556 . -1) (undo-tree-id25557 . -1) (undo-tree-id25558 . -1) (undo-tree-id25559 . -1) (undo-tree-id25560 . -1) (undo-tree-id25561 . -1) (undo-tree-id25562 . -1) (undo-tree-id25563 . -1) (undo-tree-id25564 . -1) (undo-tree-id25565 . -1) (undo-tree-id25566 . -1) (undo-tree-id25567 . -1) (undo-tree-id25568 . -1) (undo-tree-id25569 . -1) (undo-tree-id25570 . -1) (undo-tree-id25571 . -1) (undo-tree-id25572 . -1) (undo-tree-id25573 . -1) (undo-tree-id25574 . -1) (undo-tree-id25575 . -1) (undo-tree-id25576 . -1) (undo-tree-id25577 . -1) (undo-tree-id25578 . -1) (undo-tree-id25579 . -1) (undo-tree-id25580 . -1) (undo-tree-id25581 . -1) (undo-tree-id25582 . -1) (undo-tree-id25583 . -1) (undo-tree-id25584 . -1) (undo-tree-id25585 . -1) (undo-tree-id25586 . -1) (undo-tree-id25587 . -1) (undo-tree-id25588 . -1) (undo-tree-id25589 . -1) (undo-tree-id25590 . -1) (undo-tree-id25591 . -1) (undo-tree-id25592 . -1) (undo-tree-id25593 . -1) 5834 (5831 . 5834) (5830 . 5831)) nil (26156 55741 849771 152000) 0 nil])
([nil nil ((5806 . 5810) (apply yas--snippet-revive 5799 5807 #s(yas--snippet nil nil #s(yas--exit 5806 nil) 138 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5806 nil) 138 nil nil nil nil)) (5799 . 5807) (#("Option<$0>" 0 10 (fontified nil)) . 5799) (5799 . 5809) (#("OptioSelf" 0 5 (fontified nil) 5 9 (fontified nil face font-lock-type-face)) . 5799) (undo-tree-id25389 . -8) (undo-tree-id25390 . 4) (5799 . 5804) (#("Option<…>" 0 9 (fontified nil)) . -5799) (5799 . 5808) (#("Optio" 0 5 (fontified t face font-lock-type-face)) . -5799) (undo-tree-id25391 . -5) (undo-tree-id25392 . -5) 5804 (5799 . 5804)) nil (26156 55741 848988 258000) 0 nil])
([nil nil ((5881 . 5883) (5879 . 5881) (apply yas--snippet-revive 5872 5880 #s(yas--snippet nil nil #s(yas--exit 5879 nil) 139 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5879 nil) 139 nil nil nil nil)) (5872 . 5880) (#("return $0;" 0 10 (fontified nil)) . 5872) (5872 . 5882) (#("ret" 0 3 (fontified nil)) . 5872) (5872 . 5875) (#("return" 0 6 (fontified nil)) . -5872) (5872 . 5878) (#("ret" 0 3 (fontified t)) . -5872) (undo-tree-id25626 . -3) (undo-tree-id25627 . -3) 5875 (5872 . 5875) (5867 . 5872) (5868 . 5869) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 5867) (5867 . 5872) (5866 . 5868) (5855 . 5867) (5842 . 5855) (#("sq" 0 2 (fontified nil)) . 5842) (5842 . 5844) (#("square_length" 0 13 (fontified nil)) . -5842) (5842 . 5855) (#("sq" 0 2 (fontified t)) . -5842) (undo-tree-id25628 . -2) (undo-tree-id25629 . -2) (undo-tree-id25630 . -2) 5844 (5839 . 5844) (t 26156 55741 914241 699000)) nil (26156 55756 142754 419000) 0 nil])
([nil nil ((5877 . 5892) (#("," 0 1 (fontified t face font-lock-comment-face)) . -5877) (undo-tree-id25966 . -1) (undo-tree-id25967 . -1) (undo-tree-id25968 . -1) (#("b" 0 1 (fontified t face font-lock-comment-face)) . -5878) (undo-tree-id25969 . -1) (undo-tree-id25970 . -1) (undo-tree-id25971 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -5879) (undo-tree-id25972 . -1) (undo-tree-id25973 . -1) (undo-tree-id25974 . -1) 5880 (5866 . 5880) (t 26156 55756 246250 109000)) nil (26156 55921 425092 494000) 0 nil])
([nil nil ((6059 . 6061) (#("		" 0 2 (fontified nil)) . 6058) (undo-tree-id25913 . -2) (undo-tree-id25914 . -1) (undo-tree-id25915 . -1) (undo-tree-id25916 . -1) (undo-tree-id25917 . -1) (undo-tree-id25918 . -1) (undo-tree-id25919 . -1) (undo-tree-id25920 . -1) (undo-tree-id25921 . -1) (undo-tree-id25922 . -1) (undo-tree-id25923 . -1) (undo-tree-id25924 . -1) (undo-tree-id25925 . -1) (undo-tree-id25926 . -1) (undo-tree-id25927 . -1) (undo-tree-id25928 . -1) (undo-tree-id25929 . -1) (undo-tree-id25930 . -1) (undo-tree-id25931 . -1) (undo-tree-id25932 . -1) (undo-tree-id25933 . -1) (undo-tree-id25934 . -1) (undo-tree-id25935 . -1) (undo-tree-id25936 . -1) (undo-tree-id25937 . -1) (undo-tree-id25938 . -1) (undo-tree-id25939 . -1) (undo-tree-id25940 . -1) (undo-tree-id25941 . -1) (undo-tree-id25942 . -1) (undo-tree-id25943 . -2) (undo-tree-id25944 . -2) (undo-tree-id25945 . -2) (undo-tree-id25946 . -2) (undo-tree-id25947 . -2) (undo-tree-id25948 . -2) (undo-tree-id25949 . -2) (undo-tree-id25950 . -2) (undo-tree-id25951 . -2) (undo-tree-id25952 . -2) (undo-tree-id25953 . -2) (undo-tree-id25954 . -2) (undo-tree-id25955 . -2) (undo-tree-id25956 . -2) (undo-tree-id25957 . -2) (undo-tree-id25958 . -2) (undo-tree-id25959 . -2) (undo-tree-id25960 . -2) (undo-tree-id25961 . -2) (undo-tree-id25962 . -2) (undo-tree-id25963 . -2) (undo-tree-id25964 . -2) (undo-tree-id25965 . -2) (6060 . 6061)) nil (26156 55921 425067 923000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -6061) (undo-tree-id25682 . -1) (undo-tree-id25683 . -1) (undo-tree-id25684 . -1) (undo-tree-id25685 . -1) (undo-tree-id25686 . -1) (undo-tree-id25687 . -1) (undo-tree-id25688 . -1) (undo-tree-id25689 . -1) (undo-tree-id25690 . -1) (undo-tree-id25691 . -1) (undo-tree-id25692 . -1) (undo-tree-id25693 . -1) (undo-tree-id25694 . -1) (undo-tree-id25695 . -1) (undo-tree-id25696 . -1) (undo-tree-id25697 . -1) (undo-tree-id25698 . -1) (undo-tree-id25699 . -1) (undo-tree-id25700 . -1) (undo-tree-id25701 . -1) (undo-tree-id25702 . -1) (undo-tree-id25703 . -1) (undo-tree-id25704 . -1) (undo-tree-id25705 . -1) (undo-tree-id25706 . -1) (undo-tree-id25707 . -1) (undo-tree-id25708 . -1) (undo-tree-id25709 . -1) (undo-tree-id25710 . -1) (undo-tree-id25711 . -1) (undo-tree-id25712 . -1) (undo-tree-id25713 . -1) (undo-tree-id25714 . -1) (undo-tree-id25715 . -1) (undo-tree-id25716 . -1) (undo-tree-id25717 . -1) (undo-tree-id25718 . -1) (undo-tree-id25719 . -1) (undo-tree-id25720 . -1) (undo-tree-id25721 . -1) (undo-tree-id25722 . -1) (undo-tree-id25723 . -1) (undo-tree-id25724 . -1) (undo-tree-id25725 . -1) (undo-tree-id25726 . -1) (undo-tree-id25727 . -1) (undo-tree-id25728 . -1) (undo-tree-id25729 . -1) (undo-tree-id25730 . -1) (undo-tree-id25731 . -1) (undo-tree-id25732 . -1) (undo-tree-id25733 . -1) (undo-tree-id25734 . -1) (undo-tree-id25735 . -1) (undo-tree-id25736 . -1) (undo-tree-id25737 . -1) (undo-tree-id25738 . -1) (undo-tree-id25739 . -1) (undo-tree-id25740 . -1) (undo-tree-id25741 . -1) (undo-tree-id25742 . -1) (undo-tree-id25743 . -1) (undo-tree-id25744 . -1) (undo-tree-id25745 . -1) (undo-tree-id25746 . -1) (undo-tree-id25747 . -1) (undo-tree-id25748 . -1) (undo-tree-id25749 . -1) (undo-tree-id25750 . -1) (undo-tree-id25751 . -1) (undo-tree-id25752 . -1) (undo-tree-id25753 . -1) (undo-tree-id25754 . -1) (undo-tree-id25755 . -1) (undo-tree-id25756 . -1) (undo-tree-id25757 . -1) (undo-tree-id25758 . -1) (undo-tree-id25759 . -1) (undo-tree-id25760 . -1) (undo-tree-id25761 . -1) (undo-tree-id25762 . -1) (undo-tree-id25763 . -1) (undo-tree-id25764 . -1) (undo-tree-id25765 . -1) (undo-tree-id25766 . -1) (undo-tree-id25767 . -1) (undo-tree-id25768 . -1) (undo-tree-id25769 . -1) (undo-tree-id25770 . -1) (undo-tree-id25771 . -1) (undo-tree-id25772 . -1) (undo-tree-id25773 . -1) (undo-tree-id25774 . -1) (undo-tree-id25775 . -1) (undo-tree-id25776 . -1) (undo-tree-id25777 . -1) (undo-tree-id25778 . -1) (undo-tree-id25779 . -1) (undo-tree-id25780 . -1) (undo-tree-id25781 . -1) (undo-tree-id25782 . -1) (undo-tree-id25783 . -1) (undo-tree-id25784 . -1) (undo-tree-id25785 . -1) (undo-tree-id25786 . -1) (undo-tree-id25787 . -1) (undo-tree-id25788 . -1) (undo-tree-id25789 . -1) (undo-tree-id25790 . -1) (undo-tree-id25791 . -1) (undo-tree-id25792 . -1) (undo-tree-id25793 . -1) (undo-tree-id25794 . -1) (undo-tree-id25795 . -1) (#("e" 0 1 (fontified t)) . -6062) (undo-tree-id25796 . -1) (undo-tree-id25797 . -1) (undo-tree-id25798 . -1) (undo-tree-id25799 . -1) (undo-tree-id25800 . -1) (undo-tree-id25801 . -1) (undo-tree-id25802 . -1) (undo-tree-id25803 . -1) (undo-tree-id25804 . -1) (undo-tree-id25805 . -1) (undo-tree-id25806 . -1) (undo-tree-id25807 . -1) (undo-tree-id25808 . -1) (undo-tree-id25809 . -1) (undo-tree-id25810 . -1) (undo-tree-id25811 . -1) (undo-tree-id25812 . -1) (undo-tree-id25813 . -1) (undo-tree-id25814 . -1) (undo-tree-id25815 . -1) (undo-tree-id25816 . -1) (undo-tree-id25817 . -1) (undo-tree-id25818 . -1) (undo-tree-id25819 . -1) (undo-tree-id25820 . -1) (undo-tree-id25821 . -1) (undo-tree-id25822 . -1) (undo-tree-id25823 . -1) (undo-tree-id25824 . -1) (undo-tree-id25825 . -1) (undo-tree-id25826 . -1) (undo-tree-id25827 . -1) (undo-tree-id25828 . -1) (undo-tree-id25829 . -1) (undo-tree-id25830 . -1) (undo-tree-id25831 . -1) (undo-tree-id25832 . -1) (undo-tree-id25833 . -1) (undo-tree-id25834 . -1) (undo-tree-id25835 . -1) (undo-tree-id25836 . -1) (undo-tree-id25837 . -1) (undo-tree-id25838 . -1) (undo-tree-id25839 . -1) (undo-tree-id25840 . -1) (undo-tree-id25841 . -1) (undo-tree-id25842 . -1) (undo-tree-id25843 . -1) (undo-tree-id25844 . -1) (undo-tree-id25845 . -1) (undo-tree-id25846 . -1) (undo-tree-id25847 . -1) (undo-tree-id25848 . -1) (undo-tree-id25849 . -1) (undo-tree-id25850 . -1) (undo-tree-id25851 . -1) (undo-tree-id25852 . -1) (undo-tree-id25853 . -1) (undo-tree-id25854 . -1) (undo-tree-id25855 . -1) (undo-tree-id25856 . -1) (undo-tree-id25857 . -1) (undo-tree-id25858 . -1) (undo-tree-id25859 . -1) (undo-tree-id25860 . -1) (undo-tree-id25861 . -1) (undo-tree-id25862 . -1) (undo-tree-id25863 . -1) (undo-tree-id25864 . -1) (undo-tree-id25865 . -1) (undo-tree-id25866 . -1) (undo-tree-id25867 . -1) (undo-tree-id25868 . -1) (undo-tree-id25869 . -1) (undo-tree-id25870 . -1) (undo-tree-id25871 . -1) (undo-tree-id25872 . -1) (undo-tree-id25873 . -1) (undo-tree-id25874 . -1) (undo-tree-id25875 . -1) (undo-tree-id25876 . -1) (undo-tree-id25877 . -1) (undo-tree-id25878 . -1) (undo-tree-id25879 . -1) (#("t" 0 1 (fontified t)) . -6063) (undo-tree-id25880 . -1) (undo-tree-id25881 . -1) (undo-tree-id25882 . -1) (undo-tree-id25883 . -1) (undo-tree-id25884 . -1) (undo-tree-id25885 . -1) (undo-tree-id25886 . -1) (undo-tree-id25887 . -1) (undo-tree-id25888 . -1) (undo-tree-id25889 . -1) (undo-tree-id25890 . -1) (undo-tree-id25891 . -1) (undo-tree-id25892 . -1) (undo-tree-id25893 . -1) (undo-tree-id25894 . -1) (undo-tree-id25895 . -1) (undo-tree-id25896 . -1) (undo-tree-id25897 . -1) (undo-tree-id25898 . -1) (undo-tree-id25899 . -1) (undo-tree-id25900 . -1) (undo-tree-id25901 . -1) (undo-tree-id25902 . -1) (undo-tree-id25903 . -1) (undo-tree-id25904 . -1) (undo-tree-id25905 . -1) (undo-tree-id25906 . -1) (undo-tree-id25907 . -1) (undo-tree-id25908 . -1) (undo-tree-id25909 . -1) (undo-tree-id25910 . -1) (undo-tree-id25911 . -1) (undo-tree-id25912 . -1) 6064 (6062 . 6064) (6061 . 6062)) nil (26156 55921 424955 363000) 0 nil])
([nil nil ((6075 . 6076) (6074 . 6075) (6070 . 6074) (6069 . 6070) (6066 . 6069) (6065 . 6067) (6063 . 6065) (6061 . 6063)) nil (26156 55921 423605 881000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6084) (undo-tree-id25645 . -1) (undo-tree-id25646 . -1) (undo-tree-id25647 . -1) (undo-tree-id25648 . -1) (undo-tree-id25649 . -1) (undo-tree-id25650 . -1) (undo-tree-id25651 . -1) (undo-tree-id25652 . -1) (undo-tree-id25653 . -1) (undo-tree-id25654 . -1) (undo-tree-id25655 . -1) (undo-tree-id25656 . -1) (undo-tree-id25657 . -1) (undo-tree-id25658 . -1) (undo-tree-id25659 . -1) (undo-tree-id25660 . -1) (undo-tree-id25661 . -1) (undo-tree-id25662 . -1) (undo-tree-id25663 . -1) (undo-tree-id25664 . -1) (undo-tree-id25665 . -1) (undo-tree-id25666 . -1) (undo-tree-id25667 . -1) (undo-tree-id25668 . -1) (undo-tree-id25669 . -1) (undo-tree-id25670 . -1) (undo-tree-id25671 . -1) (undo-tree-id25672 . -1) (undo-tree-id25673 . -1) (undo-tree-id25674 . -1) (undo-tree-id25675 . -1) (undo-tree-id25676 . -1) (undo-tree-id25677 . -1) (undo-tree-id25678 . -1) (undo-tree-id25679 . -1) (undo-tree-id25680 . -1) (undo-tree-id25681 . -1) 6085 (6082 . 6085) (6081 . 6082) (6077 . 6081)) nil (26156 55921 423597 319000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . 5869) (undo-tree-id25644 . -1)) nil (26156 55921 423523 994000) 0 nil])
([nil nil ((5869 . 5870)) nil (26156 55921 423519 211000) 0 nil])
([nil nil ((5863 . 5864) (#("0" 0 1 (fontified t)) . -5863) (undo-tree-id25631 . -1) (undo-tree-id25632 . -1) (undo-tree-id25633 . -1) (undo-tree-id25634 . -1) (undo-tree-id25635 . -1) (undo-tree-id25636 . -1) (undo-tree-id25637 . -1) (undo-tree-id25638 . -1) (undo-tree-id25639 . -1) (undo-tree-id25640 . -1) (undo-tree-id25641 . -1) (undo-tree-id25642 . -1) (undo-tree-id25643 . -1) 5864) nil (26156 55921 423509 448000) 0 nil])
([nil nil ((5863 . 5864) (#("1" 0 1 (fontified t)) . -5863) (undo-tree-id25975 . -1) (undo-tree-id25976 . -1) (undo-tree-id25977 . -1) (undo-tree-id25978 . -1) (undo-tree-id25979 . -1) (undo-tree-id25980 . -1) (undo-tree-id25981 . -1) (undo-tree-id25982 . -1) (undo-tree-id25983 . -1) (undo-tree-id25984 . -1) (undo-tree-id25985 . -1) (undo-tree-id25986 . -1) (undo-tree-id25987 . -1) (undo-tree-id25988 . -1) (undo-tree-id25989 . -1) (undo-tree-id25990 . -1) (undo-tree-id25991 . -1) (undo-tree-id25992 . -1) (undo-tree-id25993 . -1) (undo-tree-id25994 . -1) (undo-tree-id25995 . -1) (undo-tree-id25996 . -1) (undo-tree-id25997 . -1) (undo-tree-id25998 . -1) (undo-tree-id25999 . -1) (undo-tree-id26000 . -1) (undo-tree-id26001 . -1) (undo-tree-id26002 . -1) (undo-tree-id26003 . -1) (undo-tree-id26004 . -1) (undo-tree-id26005 . -1) (undo-tree-id26006 . -1) (undo-tree-id26007 . -1) (#("\\" 0 1 (fontified t)) . -5864) (undo-tree-id26008 . -1) (undo-tree-id26009 . -1) (undo-tree-id26010 . -1) (undo-tree-id26011 . -1) (undo-tree-id26012 . -1) (undo-tree-id26013 . -1) (undo-tree-id26014 . -1) (undo-tree-id26015 . -1) (undo-tree-id26016 . -1) (undo-tree-id26017 . -1) (undo-tree-id26018 . -1) (undo-tree-id26019 . -1) 5865 (5864 . 5865) (t 26156 55921 522147 530000)) nil (26156 55927 252939 303000) 0 nil])
([nil nil ((5768 . 5772) (t 26156 55927 357676 970000)) nil (26156 56998 18605 635000) 0 nil])
([nil nil ((6082 . 6095) (#("s" 0 1 (fontified nil)) . 6082) (6082 . 6083) (#("square_length" 0 13 (fontified nil)) . -6082) (6082 . 6095) (#("s" 0 1 (fontified t)) . -6082) (undo-tree-id26024 . -1) (undo-tree-id26025 . -1) 6083 (6081 . 6083) (6080 . 6081) (6073 . 6081) (6070 . 6073) (6065 . 6071) (#("l" 0 1 (fontified t)) . -6065) (undo-tree-id26026 . -1) (undo-tree-id26027 . -1) (undo-tree-id26028 . -1) (#("e" 0 1 (fontified nil face font-lock-keyword-face)) . -6066) (undo-tree-id26029 . -1) (undo-tree-id26030 . -1) (undo-tree-id26031 . -1) 6067 (#("t" 0 1 (fontified nil face font-lock-keyword-face)) . -6067) (undo-tree-id26032 . -1) (undo-tree-id26033 . -1) (undo-tree-id26034 . -1) (#(" " 0 1 (fontified nil)) . -6068) (undo-tree-id26035 . -1) (undo-tree-id26036 . -1) (undo-tree-id26037 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -6069) (undo-tree-id26038 . -1) (undo-tree-id26039 . -1) (undo-tree-id26040 . -1) (#("m" 0 1 (fontified t)) . -6070) (undo-tree-id26041 . -1) (undo-tree-id26042 . -1) (#("i" 0 1 (fontified t)) . -6071) (undo-tree-id26043 . -1) (undo-tree-id26044 . -1) (#("d" 0 1 (fontified t)) . -6072) (undo-tree-id26045 . -1) (undo-tree-id26046 . -1) (#("x" 0 1 (fontified t)) . -6073) (undo-tree-id26047 . -1) (undo-tree-id26048 . -1) (#("," 0 1 (fontified t)) . -6074) (undo-tree-id26049 . -1) (undo-tree-id26050 . -1) (#(" " 0 1 (fontified t)) . -6075) (undo-tree-id26051 . -1) (undo-tree-id26052 . -1) (#("m" 0 1 (fontified t)) . -6076) (undo-tree-id26053 . -1) (undo-tree-id26054 . -1) (#("i" 0 1 (fontified t)) . -6077) (undo-tree-id26055 . -1) (undo-tree-id26056 . -1) (#("d" 0 1 (fontified t)) . -6078) (undo-tree-id26057 . -1) (undo-tree-id26058 . -1) (#("y" 0 1 (fontified t)) . -6079) (undo-tree-id26059 . -1) (undo-tree-id26060 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -6080) (undo-tree-id26061 . -1) (undo-tree-id26062 . -1) (#(" " 0 1 (fontified t)) . -6081) (undo-tree-id26063 . -1) (#("=" 0 1 (fontified t)) . -6082) (undo-tree-id26064 . -1) (#(" " 0 1 (fontified t)) . -6083) (undo-tree-id26065 . -1) (#("i" 0 1 (fontified t)) . -6084) (undo-tree-id26066 . -1) (#(" " 0 1 (fontified t)) . -6085) (undo-tree-id26067 . -1) (#("+" 0 1 (fontified t)) . -6086) (undo-tree-id26068 . -1) (#(" " 0 1 (fontified t)) . -6087) (undo-tree-id26069 . -1) 6088) nil (26156 56998 18585 123000) 0 nil])
([nil nil ((6097 . 6098)) nil (26156 56998 18482 937000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 6069)) nil (26156 56998 18479 859000) 0 nil])
([nil nil ((6098 . 6104) (6099 . 6101) (#("		    " 0 6 (fontified nil face (rainbow-delimiters-depth-5-face))) . 6098) (6098 . 6104) (6097 . 6099) (6096 . 6098) (6095 . 6096) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6095) (undo-tree-id26020 . -1) (undo-tree-id26021 . -1) (#(" " 0 1 (fontified t)) . -6096) (undo-tree-id26022 . -1) (undo-tree-id26023 . -1) 6097) nil (26156 56998 18467 9000) 0 nil])
([nil nil ((6120 . 6133) (#("s" 0 1 (fontified nil)) . 6120) (6120 . 6121) (#("square_length" 0 13 (fontified nil)) . -6120) (6120 . 6133) (#("s" 0 1 (fontified t)) . -6120) (undo-tree-id26254 . -1) (undo-tree-id26255 . -1) (undo-tree-id26256 . -1) (undo-tree-id26257 . -1) (undo-tree-id26258 . -1) (undo-tree-id26259 . -1) (undo-tree-id26260 . -1) (undo-tree-id26261 . -1) (undo-tree-id26262 . -1) (undo-tree-id26263 . -1) (undo-tree-id26264 . -1) (undo-tree-id26265 . -1) (undo-tree-id26266 . -1) (undo-tree-id26267 . -1) (undo-tree-id26268 . -1) (undo-tree-id26269 . -1) (undo-tree-id26270 . -1) (undo-tree-id26271 . -1) (undo-tree-id26272 . -1) (undo-tree-id26273 . -1) (undo-tree-id26274 . -1) (undo-tree-id26275 . -1) (undo-tree-id26276 . -1) (undo-tree-id26277 . -1) (undo-tree-id26278 . -1) (undo-tree-id26279 . -1) (undo-tree-id26280 . -1) (undo-tree-id26281 . -1) (undo-tree-id26282 . -1) (undo-tree-id26283 . -1) (undo-tree-id26284 . -1) (undo-tree-id26285 . -1) (undo-tree-id26286 . -1) (undo-tree-id26287 . -1) (undo-tree-id26288 . -1) (undo-tree-id26289 . -1) (undo-tree-id26290 . -1) (undo-tree-id26291 . -1) (undo-tree-id26292 . -1) (undo-tree-id26293 . -1) (undo-tree-id26294 . -1) (undo-tree-id26295 . -1) (undo-tree-id26296 . -1) (undo-tree-id26297 . -1) (undo-tree-id26298 . -1) (undo-tree-id26299 . -1) (undo-tree-id26300 . -1) (undo-tree-id26301 . -1) (undo-tree-id26302 . -1) (undo-tree-id26303 . -1) (undo-tree-id26304 . -1) (undo-tree-id26305 . -1) (undo-tree-id26306 . -1) (undo-tree-id26307 . -1) (undo-tree-id26308 . -1) (undo-tree-id26309 . -1) (undo-tree-id26310 . -1) (undo-tree-id26311 . -1) (undo-tree-id26312 . -1) (undo-tree-id26313 . -1) (undo-tree-id26314 . -1) (undo-tree-id26315 . -1) (undo-tree-id26316 . -1) (undo-tree-id26317 . -1) (undo-tree-id26318 . -1) (undo-tree-id26319 . -1) (undo-tree-id26320 . -1) (undo-tree-id26321 . -1) (undo-tree-id26322 . -1) (undo-tree-id26323 . -1) (undo-tree-id26324 . -1) (undo-tree-id26325 . -1) (undo-tree-id26326 . -1) (undo-tree-id26327 . -1) (undo-tree-id26328 . -1) (undo-tree-id26329 . -1) (undo-tree-id26330 . -1) (undo-tree-id26331 . -1) (undo-tree-id26332 . -1) (undo-tree-id26333 . -1) (undo-tree-id26334 . -1) (undo-tree-id26335 . -1) (undo-tree-id26336 . -1) (undo-tree-id26337 . -1) (undo-tree-id26338 . -1) (undo-tree-id26339 . -1) (undo-tree-id26340 . -1) (undo-tree-id26341 . -1) (undo-tree-id26342 . -1) (undo-tree-id26343 . -1) (undo-tree-id26344 . -1) (undo-tree-id26345 . -1) (undo-tree-id26346 . -1) (undo-tree-id26347 . -1) (undo-tree-id26348 . -1) (undo-tree-id26349 . -1) (undo-tree-id26350 . -1) (undo-tree-id26351 . -1) (undo-tree-id26352 . -1) (undo-tree-id26353 . -1) (undo-tree-id26354 . -1) (undo-tree-id26355 . -1) (undo-tree-id26356 . -1) (undo-tree-id26357 . -1) (undo-tree-id26358 . -1) (undo-tree-id26359 . -1) (undo-tree-id26360 . -1) (undo-tree-id26361 . -1) (undo-tree-id26362 . -1) (undo-tree-id26363 . -1) 6121 (6118 . 6121) (6114 . 6119) (6104 . 6114) (t 26156 56998 120936 816000)) nil (26156 57058 3515 387000) 0 nil])
([nil nil ((6137 . 6140) (6138 . 6144) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-6-face))) . 6137) (6137 . 6140) (6136 . 6138) (6134 . 6137)) nil (26156 57058 3060 668000) 0 nil])
([nil nil ((6064 . 6066) (#("		" 0 2 (fontified nil)) . 6063) (undo-tree-id26227 . -2) (undo-tree-id26228 . -2) (undo-tree-id26229 . -2) (undo-tree-id26230 . -2) (undo-tree-id26231 . -2) (undo-tree-id26232 . -2) (undo-tree-id26233 . -2) (undo-tree-id26234 . -2) (undo-tree-id26235 . -2) (undo-tree-id26236 . -2) (undo-tree-id26237 . -2) (undo-tree-id26238 . -2) (undo-tree-id26239 . -2) (undo-tree-id26240 . -2) (undo-tree-id26241 . -2) (6063 . 6066) (#("		" 0 2 (fontified nil)) . 6062) (undo-tree-id26242 . -2) (undo-tree-id26243 . -2) (undo-tree-id26244 . -2) (undo-tree-id26245 . -2) (undo-tree-id26246 . -2) (undo-tree-id26247 . -2) (undo-tree-id26248 . -2) (undo-tree-id26249 . -2) (undo-tree-id26250 . -2) (undo-tree-id26251 . -2) (undo-tree-id26252 . -2) (undo-tree-id26253 . -2) (6064 . 6065) (6062 . 6064)) nil (26156 57058 3053 692000) 0 nil])
([nil nil ((6088 . 6089) (apply yas--snippet-revive 6083 6088 #s(yas--snippet nil nil nil 140 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 140 nil nil nil nil)) (6083 . 6088) (#("false" 0 5 (fontified nil)) . 6083) (6083 . 6088) (#("fal" 0 3 (fontified nil)) . 6083) (6083 . 6086) (#("false" 0 5 (fontified nil)) . -6083) (6083 . 6088) (#("fal" 0 3 (fontified t)) . -6083) (undo-tree-id26138 . -3) (undo-tree-id26139 . -3) (undo-tree-id26140 . -1) (undo-tree-id26141 . -1) (undo-tree-id26142 . -1) (undo-tree-id26143 . -1) (undo-tree-id26144 . -1) (undo-tree-id26145 . -1) (undo-tree-id26146 . -1) (undo-tree-id26147 . -1) (undo-tree-id26148 . -1) (undo-tree-id26149 . -1) (undo-tree-id26150 . -2) (undo-tree-id26151 . -2) (undo-tree-id26152 . -2) (undo-tree-id26153 . -2) (undo-tree-id26154 . -2) (undo-tree-id26155 . -2) (undo-tree-id26156 . -2) (undo-tree-id26157 . -2) (undo-tree-id26158 . -2) (undo-tree-id26159 . -2) (undo-tree-id26160 . -3) (undo-tree-id26161 . -3) (undo-tree-id26162 . -3) (undo-tree-id26163 . -3) (undo-tree-id26164 . -3) (undo-tree-id26165 . -3) (undo-tree-id26166 . -3) (undo-tree-id26167 . -3) (undo-tree-id26168 . -3) (undo-tree-id26169 . -3) (undo-tree-id26170 . -3) (undo-tree-id26171 . -3) (undo-tree-id26172 . -3) (undo-tree-id26173 . -3) (undo-tree-id26174 . -3) (undo-tree-id26175 . -3) (undo-tree-id26176 . -3) (undo-tree-id26177 . -3) (undo-tree-id26178 . -3) (undo-tree-id26179 . -3) (undo-tree-id26180 . -3) (undo-tree-id26181 . -3) (undo-tree-id26182 . -3) (undo-tree-id26183 . -3) (undo-tree-id26184 . -3) (undo-tree-id26185 . -3) (undo-tree-id26186 . -3) (undo-tree-id26187 . -3) (undo-tree-id26188 . -3) (undo-tree-id26189 . -3) (undo-tree-id26190 . -3) (undo-tree-id26191 . -3) (undo-tree-id26192 . -3) (undo-tree-id26193 . -3) (undo-tree-id26194 . -3) (undo-tree-id26195 . -3) (undo-tree-id26196 . -3) (undo-tree-id26197 . -3) (undo-tree-id26198 . -3) (undo-tree-id26199 . -3) (undo-tree-id26200 . -3) (undo-tree-id26201 . -3) (undo-tree-id26202 . -3) (undo-tree-id26203 . -3) (undo-tree-id26204 . -3) (undo-tree-id26205 . -3) (undo-tree-id26206 . -3) (undo-tree-id26207 . -3) (undo-tree-id26208 . -3) (undo-tree-id26209 . -3) (undo-tree-id26210 . -3) (undo-tree-id26211 . -3) (undo-tree-id26212 . -3) (undo-tree-id26213 . -3) (undo-tree-id26214 . -3) (undo-tree-id26215 . -3) (undo-tree-id26216 . -3) (undo-tree-id26217 . -3) (undo-tree-id26218 . -3) (undo-tree-id26219 . -3) (undo-tree-id26220 . -3) 6086 (6083 . 6086) (#("0" 0 1 (fontified t)) . -6083) (undo-tree-id26221 . -1) (undo-tree-id26222 . -1) 6084 (6073 . 6084) (#(" " 0 1 (fontified t)) . -6073) (undo-tree-id26223 . -1) (undo-tree-id26224 . -1) (#("_" 0 1 (fontified t)) . -6074) (undo-tree-id26225 . -1) (undo-tree-id26226 . -1) 6075 (6065 . 6075) (6063 . 6065)) nil (26156 57058 2990 39000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -6212) (undo-tree-id26102 . -1) (undo-tree-id26103 . -1) (undo-tree-id26104 . -1) (undo-tree-id26105 . -1) (undo-tree-id26106 . -1) (undo-tree-id26107 . -1) (undo-tree-id26108 . -1) (undo-tree-id26109 . -1) (undo-tree-id26110 . -1) (undo-tree-id26111 . -1) (undo-tree-id26112 . -1) (undo-tree-id26113 . -1) (undo-tree-id26114 . -1) (#("e" 0 1 (fontified t)) . -6213) (undo-tree-id26115 . -1) (undo-tree-id26116 . -1) 6214 (#("_" 0 1 (fontified t)) . -6214) (undo-tree-id26117 . -1) (undo-tree-id26118 . -1) (#("e" 0 1 (fontified t)) . -6215) (undo-tree-id26119 . -1) (undo-tree-id26120 . -1) 6216 (6211 . 6216) (#("o" 0 1 (fontified t)) . -6211) (undo-tree-id26121 . -1) (undo-tree-id26122 . -1) (#("n" 0 1 (fontified t)) . -6212) (undo-tree-id26123 . -1) (undo-tree-id26124 . -1) (#("e" 0 1 (fontified t)) . -6213) (undo-tree-id26125 . -1) (undo-tree-id26126 . -1) 6214 (6211 . 6214) (6204 . 6211) (6205 . 6208) (#("			    " 0 7 (fontified nil face (rainbow-delimiters-depth-7-face))) . 6204) (6204 . 6211) (6203 . 6205) (6202 . 6204) (6201 . 6202) (6196 . 6201) (apply yas--snippet-revive 6188 6196 #s(yas--snippet nil nil #s(yas--exit 6196 nil) 142 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6196 nil) 142 nil nil nil nil)) (6188 . 6196) (#("unwrap()$0" 0 10 (fontified nil)) . 6188) (6188 . 6198) (#("un" 0 2 (fontified nil)) . 6188) (6188 . 6190) (#("unwrap()" 0 8 (fontified nil)) . -6188) (6188 . 6196) (#("un" 0 2 (fontified t)) . -6188) (undo-tree-id26127 . -2) (undo-tree-id26128 . -2) (undo-tree-id26129 . -2) 6190 (6188 . 6190) (6187 . 6188) (#(" " 0 1 (fontified t)) . -6187) (undo-tree-id26130 . -1) 6188 (6187 . 6188) (apply yas--snippet-revive 6178 6187 #s(yas--snippet nil (#s(yas--field 1 6182 6183 nil nil nil t #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil))) #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil))) #s(yas--exit 6187 nil) 141 nil #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil)) nil nil)) (#("y" 0 1 (fontified nil)) . 6186) (6185 . 6186) (#("x" 0 1 (fontified nil)) . 6183) (6182 . 6183) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6182 6183 nil nil nil t #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil))) #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil))) #s(yas--exit 6187 nil) 141 nil #s(yas--field 2 6185 6186 nil nil nil t #s(yas--exit 6187 nil)) nil nil)) (6178 . 6187) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 6178) (6178 . 6199) (#("ge" 0 2 (fontified nil)) . 6178) (6178 . 6180) (#("get(…)" 0 6 (fontified nil)) . -6178) (6178 . 6184) (#("ge" 0 2 (fontified t)) . -6178) (undo-tree-id26131 . -1) (undo-tree-id26132 . -2) (undo-tree-id26133 . -2) 6180 (6178 . 6180) (6177 . 6178) (6173 . 6177) (#("sel" 0 3 (fontified nil)) . 6173) (6173 . 6176) (#("self" 0 4 (fontified nil)) . -6173) (6173 . 6177) (#("sel" 0 3 (fontified t)) . -6173) (undo-tree-id26134 . -3) (undo-tree-id26135 . -3) 6176 (6175 . 6176) (6173 . 6175) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . -6173) (undo-tree-id26136 . -1) (undo-tree-id26137 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 6174) (6170 . 6175)) nil (26156 57058 2656 585000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -6211) (undo-tree-id26070 . -1) (undo-tree-id26071 . -1) (undo-tree-id26072 . -1) (undo-tree-id26073 . -1) (undo-tree-id26074 . -1) (undo-tree-id26075 . -1) (undo-tree-id26076 . -1) (undo-tree-id26077 . -1) (undo-tree-id26078 . -1) (undo-tree-id26079 . -1) (undo-tree-id26080 . -1) (undo-tree-id26081 . -1) (undo-tree-id26082 . -1) (undo-tree-id26083 . -1) (undo-tree-id26084 . -1) (undo-tree-id26085 . -1) (undo-tree-id26086 . -1) (undo-tree-id26087 . -1) (undo-tree-id26088 . -1) (undo-tree-id26089 . -1) (undo-tree-id26090 . -1) (undo-tree-id26091 . -1) (undo-tree-id26092 . -1) (undo-tree-id26093 . -1) (undo-tree-id26094 . -1) (undo-tree-id26095 . -1) (undo-tree-id26096 . -1) (undo-tree-id26097 . -1) (undo-tree-id26098 . -1) (undo-tree-id26099 . -1) (undo-tree-id26100 . -1) (undo-tree-id26101 . -1) 6212) nil (26156 57058 2557 835000) 0 nil])
([nil nil ((#("bool " 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t)) . 6065) (undo-tree-id26364 . -4) (t 26156 57058 103971 169000)) nil (26156 57064 936327 482000) 0 nil])
([nil nil ((6065 . 6069)) nil (26156 57064 936298 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 6223 6227 #s(yas--snippet nil nil nil 143 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 143 nil nil nil nil)) (6223 . 6227) (#("true" 0 4 (fontified nil)) . 6223) (6223 . 6227) (#("tr" 0 2 (fontified nil)) . 6223) (6223 . 6225) (#("true" 0 4 (fontified nil)) . -6223) (6223 . 6227) (#("tr" 0 2 (fontified t)) . -6223) (undo-tree-id26365 . -2) (undo-tree-id26366 . -2) (undo-tree-id26367 . -1) (undo-tree-id26368 . -1) (undo-tree-id26369 . -1) (undo-tree-id26370 . -1) (undo-tree-id26371 . -1) (undo-tree-id26372 . -1) (undo-tree-id26373 . -1) (undo-tree-id26374 . -1) (undo-tree-id26375 . -1) (undo-tree-id26376 . -1) (undo-tree-id26377 . -1) (undo-tree-id26378 . -1) (undo-tree-id26379 . -1) (undo-tree-id26380 . -1) (undo-tree-id26381 . -1) (undo-tree-id26382 . -1) (undo-tree-id26383 . -1) (undo-tree-id26384 . -1) (undo-tree-id26385 . -1) (undo-tree-id26386 . -1) (undo-tree-id26387 . -1) (undo-tree-id26388 . -1) (undo-tree-id26389 . -1) (undo-tree-id26390 . -1) (undo-tree-id26391 . -1) (undo-tree-id26392 . -1) (undo-tree-id26393 . -1) (undo-tree-id26394 . -1) (undo-tree-id26395 . -1) (undo-tree-id26396 . -1) (undo-tree-id26397 . -1) (undo-tree-id26398 . -1) (undo-tree-id26399 . -1) (undo-tree-id26400 . -1) (undo-tree-id26401 . -1) (undo-tree-id26402 . -1) (undo-tree-id26403 . -1) (undo-tree-id26404 . -2) (undo-tree-id26405 . -2) (undo-tree-id26406 . -2) (undo-tree-id26407 . -2) (undo-tree-id26408 . -2) (undo-tree-id26409 . -2) (undo-tree-id26410 . -2) (undo-tree-id26411 . -2) (undo-tree-id26412 . -2) (undo-tree-id26413 . -2) (undo-tree-id26414 . -2) (undo-tree-id26415 . -2) (undo-tree-id26416 . -2) (undo-tree-id26417 . -2) (undo-tree-id26418 . -2) (undo-tree-id26419 . -2) (undo-tree-id26420 . -2) (undo-tree-id26421 . -2) (undo-tree-id26422 . -2) (undo-tree-id26423 . -2) (undo-tree-id26424 . -2) (undo-tree-id26425 . -2) (undo-tree-id26426 . -2) (undo-tree-id26427 . -2) (undo-tree-id26428 . -2) (undo-tree-id26429 . -2) (undo-tree-id26430 . -2) (undo-tree-id26431 . -2) (undo-tree-id26432 . -2) (undo-tree-id26433 . -2) (undo-tree-id26434 . -2) (undo-tree-id26435 . -2) (undo-tree-id26436 . -2) (undo-tree-id26437 . -2) (undo-tree-id26438 . -2) (undo-tree-id26439 . -2) (undo-tree-id26440 . -2) (undo-tree-id26441 . -2) (undo-tree-id26442 . -2) (undo-tree-id26443 . -2) (undo-tree-id26444 . -2) (undo-tree-id26445 . -2) (undo-tree-id26446 . -2) (undo-tree-id26447 . -2) (undo-tree-id26448 . -2) (undo-tree-id26449 . -2) (undo-tree-id26450 . -2) (undo-tree-id26451 . -2) (undo-tree-id26452 . -2) (undo-tree-id26453 . -2) (undo-tree-id26454 . -2) (undo-tree-id26455 . -2) (undo-tree-id26456 . -2) (undo-tree-id26457 . -2) (undo-tree-id26458 . -2) (undo-tree-id26459 . -2) (undo-tree-id26460 . -2) (undo-tree-id26461 . -2) (undo-tree-id26462 . -2) (undo-tree-id26463 . -2) (undo-tree-id26464 . -2) (undo-tree-id26465 . -2) (undo-tree-id26466 . -2) (undo-tree-id26467 . -2) (undo-tree-id26468 . -2) (undo-tree-id26469 . -2) (undo-tree-id26470 . -2) (undo-tree-id26471 . -2) (undo-tree-id26472 . -2) (undo-tree-id26473 . -2) (undo-tree-id26474 . -2) (undo-tree-id26475 . -2) (undo-tree-id26476 . -2) (undo-tree-id26477 . -2) (undo-tree-id26478 . -2) 6225 (6223 . 6225) (#("r" 0 1 (fontified t)) . -6223) (undo-tree-id26479 . -1) (undo-tree-id26480 . -1) (undo-tree-id26481 . -1) (undo-tree-id26482 . -1) (undo-tree-id26483 . -1) (undo-tree-id26484 . -1) (undo-tree-id26485 . -1) (undo-tree-id26486 . -1) (undo-tree-id26487 . -1) (undo-tree-id26488 . -1) (undo-tree-id26489 . -1) (undo-tree-id26490 . -1) (undo-tree-id26491 . -1) (undo-tree-id26492 . -1) (undo-tree-id26493 . -1) (undo-tree-id26494 . -1) (undo-tree-id26495 . -1) (undo-tree-id26496 . -1) (undo-tree-id26497 . -1) (undo-tree-id26498 . -1) (undo-tree-id26499 . -1) (undo-tree-id26500 . -1) (undo-tree-id26501 . -1) (undo-tree-id26502 . -1) (undo-tree-id26503 . -1) (undo-tree-id26504 . -1) (undo-tree-id26505 . -1) (undo-tree-id26506 . -1) (undo-tree-id26507 . -1) (undo-tree-id26508 . -1) (undo-tree-id26509 . -1) (undo-tree-id26510 . -1) (undo-tree-id26511 . -1) (undo-tree-id26512 . -1) (undo-tree-id26513 . -1) (undo-tree-id26514 . -1) (undo-tree-id26515 . -1) (undo-tree-id26516 . -1) (undo-tree-id26517 . -1) (undo-tree-id26518 . -1) (undo-tree-id26519 . -1) (undo-tree-id26520 . -1) (undo-tree-id26521 . -1) (undo-tree-id26522 . -1) (undo-tree-id26523 . -1) (undo-tree-id26524 . -1) (undo-tree-id26525 . -1) (undo-tree-id26526 . -1) (undo-tree-id26527 . -1) (undo-tree-id26528 . -1) (undo-tree-id26529 . -1) (undo-tree-id26530 . -1) (undo-tree-id26531 . -1) (undo-tree-id26532 . -1) (undo-tree-id26533 . -1) (undo-tree-id26534 . -1) (undo-tree-id26535 . -1) (undo-tree-id26536 . -1) (undo-tree-id26537 . -1) (undo-tree-id26538 . -1) (undo-tree-id26539 . -1) 6224 (6220 . 6224) (6210 . 6220) (#("one" 0 3 (fontified nil)) . 6210) (6210 . 6213) (#("one_exists" 0 10 (fontified nil)) . -6210) (6210 . 6220) (#("one" 0 3 (fontified t)) . -6210) (undo-tree-id26540 . -3) (undo-tree-id26541 . -3) 6213 (6210 . 6213) (t 26156 57065 35863 309000)) nil (26156 57076 122381 777000) 0 nil])
([nil nil ((6227 . 6228)) nil (26156 57076 121890 233000) 0 nil])
([nil nil ((6069 . 6073) (t 26156 57076 219690 838000)) nil (26156 57084 295467 930000) 0 nil])
([nil nil ((apply yas--snippet-revive 6240 6249 #s(yas--snippet nil nil nil 144 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 144 nil nil nil nil)) (6240 . 6249) (#("continue;" 0 9 (fontified nil)) . 6240) (6240 . 6249) (#("con" 0 3 (fontified nil)) . 6240) (6240 . 6243) (#("continue" 0 8 (fontified nil)) . -6240) (6240 . 6248) (#("con" 0 3 (fontified t)) . -6240) (undo-tree-id26625 . -3) (undo-tree-id26626 . -3) (undo-tree-id26627 . -2) (undo-tree-id26628 . -2) (undo-tree-id26629 . -2) (undo-tree-id26630 . -2) (undo-tree-id26631 . -2) (undo-tree-id26632 . -2) (undo-tree-id26633 . -2) (undo-tree-id26634 . -2) (undo-tree-id26635 . -2) (undo-tree-id26636 . -2) (undo-tree-id26637 . -2) (undo-tree-id26638 . -2) (undo-tree-id26639 . -2) (undo-tree-id26640 . -2) (undo-tree-id26641 . -2) (undo-tree-id26642 . -2) (undo-tree-id26643 . -2) (undo-tree-id26644 . -2) (undo-tree-id26645 . -2) (undo-tree-id26646 . -2) (undo-tree-id26647 . -2) (undo-tree-id26648 . -2) (undo-tree-id26649 . -2) (undo-tree-id26650 . -2) (undo-tree-id26651 . -2) (undo-tree-id26652 . -2) (undo-tree-id26653 . -2) (undo-tree-id26654 . -3) (undo-tree-id26655 . -3) (undo-tree-id26656 . -3) (undo-tree-id26657 . -3) (undo-tree-id26658 . -3) (undo-tree-id26659 . -3) (undo-tree-id26660 . -3) (undo-tree-id26661 . -3) (undo-tree-id26662 . -3) (undo-tree-id26663 . -3) (undo-tree-id26664 . -3) (undo-tree-id26665 . -3) (undo-tree-id26666 . -3) (undo-tree-id26667 . -3) (undo-tree-id26668 . -3) (undo-tree-id26669 . -3) (undo-tree-id26670 . -3) (undo-tree-id26671 . -3) (undo-tree-id26672 . -3) (undo-tree-id26673 . -3) (undo-tree-id26674 . -3) (undo-tree-id26675 . -3) (undo-tree-id26676 . -3) (undo-tree-id26677 . -3) (undo-tree-id26678 . -3) (undo-tree-id26679 . -3) (undo-tree-id26680 . -3) (undo-tree-id26681 . -3) (undo-tree-id26682 . -3) (undo-tree-id26683 . -3) (undo-tree-id26684 . -3) (undo-tree-id26685 . -3) (undo-tree-id26686 . -3) (undo-tree-id26687 . -3) (undo-tree-id26688 . -3) (undo-tree-id26689 . -3) (undo-tree-id26690 . -3) (undo-tree-id26691 . -3) (undo-tree-id26692 . -3) (undo-tree-id26693 . -3) (undo-tree-id26694 . -3) (undo-tree-id26695 . -3) (undo-tree-id26696 . -3) (undo-tree-id26697 . -3) (undo-tree-id26698 . -3) (undo-tree-id26699 . -3) (undo-tree-id26700 . -3) (undo-tree-id26701 . -3) (undo-tree-id26702 . -3) (undo-tree-id26703 . -3) (undo-tree-id26704 . -3) (undo-tree-id26705 . -3) (undo-tree-id26706 . -3) (undo-tree-id26707 . -3) (undo-tree-id26708 . -3) (undo-tree-id26709 . -3) (undo-tree-id26710 . -3) (undo-tree-id26711 . -3) (undo-tree-id26712 . -3) (undo-tree-id26713 . -3) (undo-tree-id26714 . -3) (undo-tree-id26715 . -3) (undo-tree-id26716 . -3) (undo-tree-id26717 . -3) (undo-tree-id26718 . -3) (undo-tree-id26719 . -3) (undo-tree-id26720 . -3) (undo-tree-id26721 . -3) (undo-tree-id26722 . -3) (undo-tree-id26723 . -3) (undo-tree-id26724 . -3) (undo-tree-id26725 . -3) (undo-tree-id26726 . -3) (undo-tree-id26727 . -3) (undo-tree-id26728 . -3) (undo-tree-id26729 . -3) (undo-tree-id26730 . -3) (undo-tree-id26731 . -3) (undo-tree-id26732 . -3) (undo-tree-id26733 . -3) (undo-tree-id26734 . -3) (undo-tree-id26735 . -3) (undo-tree-id26736 . -3) (undo-tree-id26737 . -3) (undo-tree-id26738 . -3) (undo-tree-id26739 . -3) 6243 (6240 . 6243) (6232 . 6240) (t 26156 57084 391566 6000)) nil (26156 57100 21655 285000) 0 nil])
([nil nil ((#("continue" 0 8 (fontified t face font-lock-keyword-face)) . 6240) (undo-tree-id26587 . -7) (undo-tree-id26588 . -8) (undo-tree-id26589 . -8) (undo-tree-id26590 . -8) (undo-tree-id26591 . -8) (undo-tree-id26592 . -8) (undo-tree-id26593 . -8) (undo-tree-id26594 . -8) (undo-tree-id26595 . -8) (undo-tree-id26596 . -8) (undo-tree-id26597 . -8) (undo-tree-id26598 . -8) (undo-tree-id26599 . -8) (undo-tree-id26600 . -8) (undo-tree-id26601 . -8) (undo-tree-id26602 . -8) (undo-tree-id26603 . -8) (undo-tree-id26604 . -8) (undo-tree-id26605 . -8) (undo-tree-id26606 . -8) (undo-tree-id26607 . -8) (undo-tree-id26608 . -8) (undo-tree-id26609 . -8) (undo-tree-id26610 . -8) (undo-tree-id26611 . -8) (undo-tree-id26612 . -8) (undo-tree-id26613 . -8) (undo-tree-id26614 . -8) (undo-tree-id26615 . -8) (undo-tree-id26616 . -8) (undo-tree-id26617 . -8) (undo-tree-id26618 . -8) (undo-tree-id26619 . -8) (undo-tree-id26620 . -8) (undo-tree-id26621 . -8) (undo-tree-id26622 . -8) (undo-tree-id26623 . -8) (undo-tree-id26624 . -8)) nil (26156 57100 21450 18000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 6240) (undo-tree-id26542 . -1) (undo-tree-id26543 . -1) (undo-tree-id26544 . -1) (undo-tree-id26545 . -1) (undo-tree-id26546 . -1) (undo-tree-id26547 . -1) (undo-tree-id26548 . -1) (undo-tree-id26549 . -1) (undo-tree-id26550 . -1) (undo-tree-id26551 . -1) (undo-tree-id26552 . -1) (undo-tree-id26553 . -1) (undo-tree-id26554 . -1) (undo-tree-id26555 . -1) (undo-tree-id26556 . -1) (undo-tree-id26557 . -1) (undo-tree-id26558 . -1) (undo-tree-id26559 . -1) (undo-tree-id26560 . -1) (undo-tree-id26561 . -1) (undo-tree-id26562 . -1) (undo-tree-id26563 . -1) (undo-tree-id26564 . -1) (undo-tree-id26565 . -1) (undo-tree-id26566 . -1) (undo-tree-id26567 . -1) (undo-tree-id26568 . -1) (undo-tree-id26569 . -1) (undo-tree-id26570 . -1) (undo-tree-id26571 . -1) (undo-tree-id26572 . -1) (undo-tree-id26573 . -1) (undo-tree-id26574 . -1) (undo-tree-id26575 . -1) (undo-tree-id26576 . -1) (undo-tree-id26577 . -1) (undo-tree-id26578 . -1) (undo-tree-id26579 . -1) (undo-tree-id26580 . -1) (undo-tree-id26581 . -1) (undo-tree-id26582 . -1) (undo-tree-id26583 . -1) (undo-tree-id26584 . -1) (undo-tree-id26585 . -1) (undo-tree-id26586 . -1)) nil (26156 57100 21370 989000) 0 nil])
([nil nil ((6240 . 6246)) nil (26156 57100 20808 9000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified t)) . -6261) (undo-tree-id26743 . -6) (undo-tree-id26744 . -6) (undo-tree-id26745 . -6) (undo-tree-id26746 . -6) (undo-tree-id26747 . -6) (undo-tree-id26748 . -6) (undo-tree-id26749 . -6) (undo-tree-id26750 . -6) (undo-tree-id26751 . -6) (undo-tree-id26752 . -6) (undo-tree-id26753 . -6) (undo-tree-id26754 . -6) (undo-tree-id26755 . -6) 6267 (6261 . 6267) (#("		    " 0 6 (fontified nil)) . 6260) (undo-tree-id26756 . -6) (undo-tree-id26757 . -6) (undo-tree-id26758 . -6) (undo-tree-id26759 . -6) (undo-tree-id26760 . -6) (undo-tree-id26761 . -6) (undo-tree-id26762 . -6) (undo-tree-id26763 . -6) (undo-tree-id26764 . -6) (undo-tree-id26765 . -6) (undo-tree-id26766 . -6) (undo-tree-id26767 . -6) (undo-tree-id26768 . -6) (6259 . 6267) (t 26156 57100 123328 452000)) nil (26156 57112 929233 366000) 0 nil])
([nil nil ((6286 . 6292) (6283 . 6286) (6284 . 6290) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-6-face))) . 6283) (6283 . 6286) (6282 . 6284) (6280 . 6283) (6270 . 6280) (#("one" 0 3 (fontified nil)) . 6270) (6270 . 6273) (#("one_exists" 0 10 (fontified nil)) . -6270) (6270 . 6280) (#("one" 0 3 (fontified t)) . -6270) (undo-tree-id26740 . -3) (undo-tree-id26741 . -3) 6273 (6267 . 6273) (6261 . 6267) (#("		    " 0 6 (fontified nil)) . 6260) (undo-tree-id26742 . -6) (6266 . 6267) (6260 . 6266)) nil (26156 57112 929182 282000) 0 nil])
([nil nil ((6186 . 6187) (t 26156 57112 987136 846000)) nil (26156 57122 28687 787000) 0 nil])
([nil nil ((6190 . 6191)) nil (26156 57122 28675 850000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -6309) (undo-tree-id27488 . -2) 6311 (6309 . 6311) (#("		" 0 2 (fontified nil)) . 6308) (undo-tree-id27489 . -2) (6307 . 6311) (t 26156 57122 131002 56000)) nil (26156 57166 42626 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6522 . 6523) (nil fontified nil 6309 . 6523) (6309 . 6523)) nil (26156 57166 42619 561000) 0 nil])
([nil nil ((6475 . 6481)) nil (26156 57166 42616 726000) 0 nil])
([nil nil ((6522 . 6528)) nil (26156 57166 42615 15000) 0 nil])
([nil nil ((6533 . 6535)) nil (26156 57166 42613 101000) 0 nil])
([nil nil ((#("			    one_exists = true;
" 0 20 (fontified t) 20 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t)) . 6422) (undo-tree-id27442 . -25) (undo-tree-id27443 . -1) (undo-tree-id27444 . -1) (undo-tree-id27445 . -1) (undo-tree-id27446 . -1) (undo-tree-id27447 . -1) (undo-tree-id27448 . -1) (undo-tree-id27449 . -1) (undo-tree-id27450 . -1) (undo-tree-id27451 . -1) (undo-tree-id27452 . -1) (undo-tree-id27453 . -1) (undo-tree-id27454 . -1) (undo-tree-id27455 . -1) (undo-tree-id27456 . -1) (undo-tree-id27457 . -1) (undo-tree-id27458 . -1) (undo-tree-id27459 . -1) (undo-tree-id27460 . -1) (undo-tree-id27461 . -1) (undo-tree-id27462 . -1) (undo-tree-id27463 . -1) (undo-tree-id27464 . -1) (undo-tree-id27465 . -1) (undo-tree-id27466 . -1) (undo-tree-id27467 . -1) (undo-tree-id27468 . -1) (undo-tree-id27469 . -1) (undo-tree-id27470 . -1) (undo-tree-id27471 . -1) (undo-tree-id27472 . -1) (undo-tree-id27473 . -1) (undo-tree-id27474 . -1) (undo-tree-id27475 . -1) (undo-tree-id27476 . -1) (undo-tree-id27477 . -1) (undo-tree-id27478 . -1) (undo-tree-id27479 . -1) (undo-tree-id27480 . -1) (undo-tree-id27481 . -1) (undo-tree-id27482 . -1) (undo-tree-id27483 . -1) (undo-tree-id27484 . -1) (undo-tree-id27485 . -1) (undo-tree-id27486 . -1) (undo-tree-id27487 . -26) 6423) nil (26156 57166 42606 670000) 0 nil])
([nil nil ((#("if self.get(ii, jj).unwrap() == 1 {
			    break;
			}" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-7-face)) 12 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-7-face)) 19 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-7-face)) 27 28 (fontified t face (rainbow-delimiters-depth-7-face)) 28 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-7-face)) 35 36 (fontified t) 36 43 (fontified t) 43 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-7-face))) . 6386) (undo-tree-id27247 . -53) (undo-tree-id27248 . -53) (undo-tree-id27249 . 5) (undo-tree-id27250 . -53) (undo-tree-id27251 . -51) (undo-tree-id27252 . -51) (undo-tree-id27253 . -51) (undo-tree-id27254 . -51) (undo-tree-id27255 . -51) (undo-tree-id27256 . -51) (undo-tree-id27257 . -51) (undo-tree-id27258 . -51) (undo-tree-id27259 . -51) (undo-tree-id27260 . -37) (undo-tree-id27261 . -37) (undo-tree-id27262 . -37) (undo-tree-id27263 . -37) (undo-tree-id27264 . -37) (undo-tree-id27265 . -37) (undo-tree-id27266 . -37) (undo-tree-id27267 . -37) (undo-tree-id27268 . -37) (undo-tree-id27269 . -37) (undo-tree-id27270 . -37) (undo-tree-id27271 . -37) (undo-tree-id27272 . -37) (undo-tree-id27273 . -37) (undo-tree-id27274 . -37) (undo-tree-id27275 . -37) (undo-tree-id27276 . -37) (undo-tree-id27277 . -37) (undo-tree-id27278 . -37) (undo-tree-id27279 . -37) (undo-tree-id27280 . -37) (undo-tree-id27281 . -37) (undo-tree-id27282 . -37) (undo-tree-id27283 . -37) (undo-tree-id27284 . -37) (undo-tree-id27285 . -37) (undo-tree-id27286 . -37) (undo-tree-id27287 . -37) (undo-tree-id27288 . -37) (undo-tree-id27289 . -37) (undo-tree-id27290 . -37) (undo-tree-id27291 . -36) (undo-tree-id27292 . -36) (undo-tree-id27293 . -36) (undo-tree-id27294 . -36) (undo-tree-id27295 . -36) (undo-tree-id27296 . -36) (undo-tree-id27297 . -36) (undo-tree-id27298 . -36) (undo-tree-id27299 . -36) (undo-tree-id27300 . -36) (undo-tree-id27301 . -36) (undo-tree-id27302 . -36) (undo-tree-id27303 . -36) (undo-tree-id27304 . -36) (undo-tree-id27305 . -36) (undo-tree-id27306 . -36) (undo-tree-id27307 . -36) (undo-tree-id27308 . -36) (undo-tree-id27309 . -36) (undo-tree-id27310 . -36) (undo-tree-id27311 . -36) (undo-tree-id27312 . -36) (undo-tree-id27313 . -36) (undo-tree-id27314 . -36) (undo-tree-id27315 . -36) (undo-tree-id27316 . -36) (undo-tree-id27317 . -36) (undo-tree-id27318 . -36) (undo-tree-id27319 . -36) (undo-tree-id27320 . -36) (undo-tree-id27321 . -36) (undo-tree-id27322 . -36) (undo-tree-id27323 . -36) (undo-tree-id27324 . -36) (undo-tree-id27325 . -36) (undo-tree-id27326 . -36) (undo-tree-id27327 . -36) (undo-tree-id27328 . -36) (undo-tree-id27329 . -36) (undo-tree-id27330 . -36) (undo-tree-id27331 . -36) (undo-tree-id27332 . -36) (undo-tree-id27333 . -36) (undo-tree-id27334 . -49) (undo-tree-id27335 . -37) (undo-tree-id27336 . -37) (undo-tree-id27337 . -37) (undo-tree-id27338 . -37) (undo-tree-id27339 . -37) (undo-tree-id27340 . -37) (undo-tree-id27341 . -37) (undo-tree-id27342 . -37) (undo-tree-id27343 . -37) (undo-tree-id27344 . -37) (undo-tree-id27345 . -37) (undo-tree-id27346 . -37) (undo-tree-id27347 . -37) (undo-tree-id27348 . -37) (undo-tree-id27349 . -37) (undo-tree-id27350 . -37) (undo-tree-id27351 . -37) (undo-tree-id27352 . -37) (undo-tree-id27353 . -37) (undo-tree-id27354 . -37) (undo-tree-id27355 . -37) (undo-tree-id27356 . -37) (undo-tree-id27357 . -37) (undo-tree-id27358 . -37) (undo-tree-id27359 . -37) (undo-tree-id27360 . -37) (undo-tree-id27361 . -37) (undo-tree-id27362 . -37) (undo-tree-id27363 . -37) (undo-tree-id27364 . -37) (undo-tree-id27365 . -37) (undo-tree-id27366 . -37) (undo-tree-id27367 . -37) (undo-tree-id27368 . -37) (undo-tree-id27369 . -37) (undo-tree-id27370 . -37) (undo-tree-id27371 . -37) (undo-tree-id27372 . -37) (undo-tree-id27373 . -37) (undo-tree-id27374 . -37) (undo-tree-id27375 . -37) (undo-tree-id27376 . -37) (undo-tree-id27377 . -37) (undo-tree-id27378 . -37) (undo-tree-id27379 . -49) (undo-tree-id27380 . -49) (undo-tree-id27381 . -49) (undo-tree-id27382 . -49) (undo-tree-id27383 . -49) (undo-tree-id27384 . -49) (undo-tree-id27385 . -49) (undo-tree-id27386 . -49) (undo-tree-id27387 . -49) (undo-tree-id27388 . -49) (undo-tree-id27389 . -49) (undo-tree-id27390 . -48) (undo-tree-id27391 . -48) (undo-tree-id27392 . -48) (undo-tree-id27393 . -48) (undo-tree-id27394 . -48) (undo-tree-id27395 . -48) (undo-tree-id27396 . -48) (undo-tree-id27397 . -48) (undo-tree-id27398 . -48) (undo-tree-id27399 . -48) (undo-tree-id27400 . -48) (undo-tree-id27401 . -53) (undo-tree-id27402 . -53) (undo-tree-id27403 . -53) (undo-tree-id27404 . -53) (undo-tree-id27405 . -53) (undo-tree-id27406 . -53) (undo-tree-id27407 . -53) (undo-tree-id27408 . -53) (undo-tree-id27409 . -53) (undo-tree-id27410 . -53) (undo-tree-id27411 . -53) (undo-tree-id27412 . -53) (undo-tree-id27413 . -53) (undo-tree-id27414 . -53) (undo-tree-id27415 . -53) (undo-tree-id27416 . -53) (undo-tree-id27417 . -53) (undo-tree-id27418 . -53) (undo-tree-id27419 . -54) (undo-tree-id27420 . -53) (undo-tree-id27421 . -53) (undo-tree-id27422 . -53) (undo-tree-id27423 . -53) (undo-tree-id27424 . -53) (undo-tree-id27425 . -53) (undo-tree-id27426 . -53) (undo-tree-id27427 . -53) (undo-tree-id27428 . -53) (undo-tree-id27429 . -53) (undo-tree-id27430 . -53) (undo-tree-id27431 . -53) (undo-tree-id27432 . -39) (undo-tree-id27433 . -39) (undo-tree-id27434 . -39) (undo-tree-id27435 . -39) (undo-tree-id27436 . -39) (undo-tree-id27437 . -39) (undo-tree-id27438 . -39) (undo-tree-id27439 . -39) (undo-tree-id27440 . -39) (undo-tree-id27441 . -54)) nil (26156 57166 42514 940000) 0 nil])
([nil nil ((#("    if one_exists {
			break;
		    }
		 " 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-6-face)) 19 23 (fontified t) 23 28 (fontified t face font-lock-keyword-face) 28 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-6-face)) 37 38 (fontified t) 38 41 (fontified t)) . 6404) (undo-tree-id27130 . -40) (undo-tree-id27131 . -40) (undo-tree-id27132 . -40) (undo-tree-id27133 . -36) (undo-tree-id27134 . -36) (undo-tree-id27135 . -36) (undo-tree-id27136 . -36) (undo-tree-id27137 . -36) (undo-tree-id27138 . -38) (undo-tree-id27139 . -39) (undo-tree-id27140 . -39) (undo-tree-id27141 . -39) (undo-tree-id27142 . -39) (undo-tree-id27143 . -39) (undo-tree-id27144 . -39) (undo-tree-id27145 . -39) (undo-tree-id27146 . -39) (undo-tree-id27147 . -39) (undo-tree-id27148 . -31) (undo-tree-id27149 . -31) (undo-tree-id27150 . -31) (undo-tree-id27151 . -31) (undo-tree-id27152 . -31) (undo-tree-id27153 . -31) (undo-tree-id27154 . -31) (undo-tree-id27155 . -31) (undo-tree-id27156 . -31) (undo-tree-id27157 . -21) (undo-tree-id27158 . -21) (undo-tree-id27159 . -21) (undo-tree-id27160 . -21) (undo-tree-id27161 . -21) (undo-tree-id27162 . -21) (undo-tree-id27163 . -21) (undo-tree-id27164 . -21) (undo-tree-id27165 . -21) (undo-tree-id27166 . -22) (undo-tree-id27167 . -22) (undo-tree-id27168 . -22) (undo-tree-id27169 . -22) (undo-tree-id27170 . -22) (undo-tree-id27171 . -22) (undo-tree-id27172 . -22) (undo-tree-id27173 . -22) (undo-tree-id27174 . -22) (undo-tree-id27175 . -32) (undo-tree-id27176 . -32) (undo-tree-id27177 . -32) (undo-tree-id27178 . -32) (undo-tree-id27179 . -32) (undo-tree-id27180 . -32) (undo-tree-id27181 . -32) (undo-tree-id27182 . -32) (undo-tree-id27183 . -32) (undo-tree-id27184 . -32) (undo-tree-id27185 . -32) (undo-tree-id27186 . -32) (undo-tree-id27187 . -32) (undo-tree-id27188 . -32) (undo-tree-id27189 . -32) (undo-tree-id27190 . -32) (undo-tree-id27191 . -32) (undo-tree-id27192 . -32) (undo-tree-id27193 . -32) (undo-tree-id27194 . -32) (undo-tree-id27195 . -32) (undo-tree-id27196 . -32) (undo-tree-id27197 . -32) (undo-tree-id27198 . -32) (undo-tree-id27199 . -32) (undo-tree-id27200 . -32) (undo-tree-id27201 . -32) (undo-tree-id27202 . -32) (undo-tree-id27203 . -32) (undo-tree-id27204 . -32) (undo-tree-id27205 . -32) (undo-tree-id27206 . -40) (undo-tree-id27207 . -40) (undo-tree-id27208 . -40) (undo-tree-id27209 . -40) (undo-tree-id27210 . -40) (undo-tree-id27211 . -40) (undo-tree-id27212 . -40) (undo-tree-id27213 . -40) (undo-tree-id27214 . -40) (undo-tree-id27215 . -41) (undo-tree-id27216 . -40) (undo-tree-id27217 . -40) (undo-tree-id27218 . -40) (undo-tree-id27219 . -40) (undo-tree-id27220 . -40) (undo-tree-id27221 . -40) (undo-tree-id27222 . -40) (undo-tree-id27223 . -40) (undo-tree-id27224 . -40) (undo-tree-id27225 . -40) (undo-tree-id27226 . -40) (undo-tree-id27227 . -40) (undo-tree-id27228 . -32) (undo-tree-id27229 . -32) (undo-tree-id27230 . -32) (undo-tree-id27231 . -32) (undo-tree-id27232 . -32) (undo-tree-id27233 . -32) (undo-tree-id27234 . -32) (undo-tree-id27235 . -32) (undo-tree-id27236 . -32) (undo-tree-id27237 . -22) (undo-tree-id27238 . -22) (undo-tree-id27239 . -22) (undo-tree-id27240 . -22) (undo-tree-id27241 . -22) (undo-tree-id27242 . -22) (undo-tree-id27243 . -22) (undo-tree-id27244 . -22) (undo-tree-id27245 . -22) (undo-tree-id27246 . -41)) nil (26156 57166 42001 651000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 6395) (undo-tree-id27068 . -6) (undo-tree-id27069 . -2) (undo-tree-id27070 . -1) (undo-tree-id27071 . -1) (undo-tree-id27072 . -1) (undo-tree-id27073 . -1) (undo-tree-id27074 . -1) (undo-tree-id27075 . -1) (undo-tree-id27076 . -1) (undo-tree-id27077 . -1) (undo-tree-id27078 . -1) (undo-tree-id27079 . -2) (undo-tree-id27080 . -2) (undo-tree-id27081 . -2) (undo-tree-id27082 . -2) (undo-tree-id27083 . -2) (undo-tree-id27084 . -2) (undo-tree-id27085 . -2) (undo-tree-id27086 . -2) (undo-tree-id27087 . -2) (undo-tree-id27088 . -2) (undo-tree-id27089 . -2) (undo-tree-id27090 . -2) (undo-tree-id27091 . -2) (undo-tree-id27092 . -2) (undo-tree-id27093 . -2) (undo-tree-id27094 . -2) (undo-tree-id27095 . -2) (undo-tree-id27096 . -2) (undo-tree-id27097 . -2) (undo-tree-id27098 . -2) (undo-tree-id27099 . -2) (undo-tree-id27100 . -2) (undo-tree-id27101 . -2) (undo-tree-id27102 . -2) (undo-tree-id27103 . -2) (undo-tree-id27104 . -2) (undo-tree-id27105 . -2) (undo-tree-id27106 . -2) (undo-tree-id27107 . -2) (undo-tree-id27108 . -2) (undo-tree-id27109 . -2) (undo-tree-id27110 . -2) (undo-tree-id27111 . -2) (undo-tree-id27112 . -2) (undo-tree-id27113 . -2) (undo-tree-id27114 . -2) (undo-tree-id27115 . -2) (undo-tree-id27116 . -2) (undo-tree-id27117 . -2) (undo-tree-id27118 . -2) (undo-tree-id27119 . -2) (undo-tree-id27120 . -2) (undo-tree-id27121 . -2) (undo-tree-id27122 . -2) (undo-tree-id27123 . -2) (undo-tree-id27124 . -2) (undo-tree-id27125 . -2) (undo-tree-id27126 . -2) (undo-tree-id27127 . -2) (undo-tree-id27128 . -2) (undo-tree-id27129 . -7) 6397) nil (26156 57166 41759 124000) 0 nil])
([nil nil ((#("		   
" 0 2 (fontified t) 2 5 (fontified t) 5 6 (fontified t)) . 6395) (undo-tree-id26875 . -2) (undo-tree-id26876 . -5) (undo-tree-id26877 . -2) (undo-tree-id26878 . 4) (undo-tree-id26879 . -2) (undo-tree-id26880 . -2) (undo-tree-id26881 . -2) (undo-tree-id26882 . -2) (undo-tree-id26883 . -2) (undo-tree-id26884 . -2) (undo-tree-id26885 . -2) (undo-tree-id26886 . -2) (undo-tree-id26887 . -2) (undo-tree-id26888 . -5) (undo-tree-id26889 . -4) (undo-tree-id26890 . -4) (undo-tree-id26891 . -4) (undo-tree-id26892 . -4) (undo-tree-id26893 . -4) (undo-tree-id26894 . -4) (undo-tree-id26895 . -4) (undo-tree-id26896 . -4) (undo-tree-id26897 . -4) (undo-tree-id26898 . -4) (undo-tree-id26899 . -4) (undo-tree-id26900 . -2) (undo-tree-id26901 . -2) (undo-tree-id26902 . -2) (undo-tree-id26903 . -2) (undo-tree-id26904 . -2) (undo-tree-id26905 . -2) (undo-tree-id26906 . -2) (undo-tree-id26907 . -2) (undo-tree-id26908 . -2) (undo-tree-id26909 . -2) (undo-tree-id26910 . -2) (undo-tree-id26911 . -2) (undo-tree-id26912 . -2) (undo-tree-id26913 . -2) (undo-tree-id26914 . -2) (undo-tree-id26915 . -2) (undo-tree-id26916 . -2) (undo-tree-id26917 . -2) (undo-tree-id26918 . -2) (undo-tree-id26919 . -2) (undo-tree-id26920 . -2) (undo-tree-id26921 . -2) (undo-tree-id26922 . -2) (undo-tree-id26923 . -2) (undo-tree-id26924 . -2) (undo-tree-id26925 . -2) (undo-tree-id26926 . -2) (undo-tree-id26927 . -1) (undo-tree-id26928 . -1) (undo-tree-id26929 . -1) (undo-tree-id26930 . -1) (undo-tree-id26931 . -1) (undo-tree-id26932 . -1) (undo-tree-id26933 . -1) (undo-tree-id26934 . -1) (undo-tree-id26935 . -1) (undo-tree-id26936 . -2) (undo-tree-id26937 . -2) (undo-tree-id26938 . -2) (undo-tree-id26939 . -2) (undo-tree-id26940 . -2) (undo-tree-id26941 . -2) (undo-tree-id26942 . -2) (undo-tree-id26943 . -2) (undo-tree-id26944 . -2) (undo-tree-id26945 . -2) (undo-tree-id26946 . -2) (undo-tree-id26947 . -2) (undo-tree-id26948 . -2) (undo-tree-id26949 . -2) (undo-tree-id26950 . -2) (undo-tree-id26951 . -2) (undo-tree-id26952 . -2) (undo-tree-id26953 . -2) (undo-tree-id26954 . -2) (undo-tree-id26955 . -2) (undo-tree-id26956 . -2) (undo-tree-id26957 . -2) (undo-tree-id26958 . -2) (undo-tree-id26959 . -2) (undo-tree-id26960 . -2) (undo-tree-id26961 . -2) (undo-tree-id26962 . -2) (undo-tree-id26963 . -2) (undo-tree-id26964 . -2) (undo-tree-id26965 . -2) (undo-tree-id26966 . -2) (undo-tree-id26967 . -2) (undo-tree-id26968 . -2) (undo-tree-id26969 . -2) (undo-tree-id26970 . -2) (undo-tree-id26971 . -2) (undo-tree-id26972 . -2) (undo-tree-id26973 . -2) (undo-tree-id26974 . -2) (undo-tree-id26975 . -2) (undo-tree-id26976 . -2) (undo-tree-id26977 . -2) (undo-tree-id26978 . -2) (undo-tree-id26979 . -2) (undo-tree-id26980 . -2) (undo-tree-id26981 . -2) (undo-tree-id26982 . -2) (undo-tree-id26983 . -2) (undo-tree-id26984 . -2) (undo-tree-id26985 . -2) (undo-tree-id26986 . -2) (undo-tree-id26987 . -2) (undo-tree-id26988 . -2) (undo-tree-id26989 . -2) (undo-tree-id26990 . -2) (undo-tree-id26991 . -2) (undo-tree-id26992 . -2) (undo-tree-id26993 . -2) (undo-tree-id26994 . -2) (undo-tree-id26995 . -2) (undo-tree-id26996 . -2) (undo-tree-id26997 . -2) (undo-tree-id26998 . -2) (undo-tree-id26999 . -2) (undo-tree-id27000 . -2) (undo-tree-id27001 . -2) (undo-tree-id27002 . -2) (undo-tree-id27003 . -2) (undo-tree-id27004 . -2) (undo-tree-id27005 . -2) (undo-tree-id27006 . -2) (undo-tree-id27007 . -2) (undo-tree-id27008 . -2) (undo-tree-id27009 . -2) (undo-tree-id27010 . -2) (undo-tree-id27011 . -2) (undo-tree-id27012 . -2) (undo-tree-id27013 . -2) (undo-tree-id27014 . -2) (undo-tree-id27015 . -2) (undo-tree-id27016 . -2) (undo-tree-id27017 . -2) (undo-tree-id27018 . -2) (undo-tree-id27019 . -2) (undo-tree-id27020 . -2) (undo-tree-id27021 . -2) (undo-tree-id27022 . -2) (undo-tree-id27023 . -2) (undo-tree-id27024 . -2) (undo-tree-id27025 . -2) (undo-tree-id27026 . -2) (undo-tree-id27027 . -2) (undo-tree-id27028 . -2) (undo-tree-id27029 . -2) (undo-tree-id27030 . -2) (undo-tree-id27031 . -2) (undo-tree-id27032 . -2) (undo-tree-id27033 . -2) (undo-tree-id27034 . -2) (undo-tree-id27035 . -2) (undo-tree-id27036 . -2) (undo-tree-id27037 . -2) (undo-tree-id27038 . -2) (undo-tree-id27039 . -2) (undo-tree-id27040 . -2) (undo-tree-id27041 . -2) (undo-tree-id27042 . -2) (undo-tree-id27043 . -5) (undo-tree-id27044 . -2) (undo-tree-id27045 . -2) (undo-tree-id27046 . -2) (undo-tree-id27047 . -2) (undo-tree-id27048 . -2) (undo-tree-id27049 . -2) (undo-tree-id27050 . -2) (undo-tree-id27051 . -2) (undo-tree-id27052 . -2) (undo-tree-id27053 . -2) (undo-tree-id27054 . -2) (undo-tree-id27055 . -2) (undo-tree-id27056 . -2) (undo-tree-id27057 . -2) (undo-tree-id27058 . -2) (undo-tree-id27059 . -2) (undo-tree-id27060 . -2) (undo-tree-id27061 . -2) (undo-tree-id27062 . -2) (undo-tree-id27063 . -2) (undo-tree-id27064 . -2) (undo-tree-id27065 . -2) (undo-tree-id27066 . -2) (undo-tree-id27067 . -6) 6397) nil (26156 57166 41599 794000) 0 nil])
([nil nil ((6405 . 6406) (apply yas--snippet-revive 6391 6405 #s(yas--snippet nil (#s(yas--field 1 6395 6397 nil nil nil t #s(yas--field 2 6399 6401 nil nil nil t #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil)))) #s(yas--field 2 6399 6401 nil nil nil t #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil))) #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil))) #s(yas--exit 6405 nil) 145 nil #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil)) nil nil)) (#("val" 0 3 (fontified nil)) . 6404) (undo-tree-id26769 . -3) (6403 . 6404) (6399 . 6401) (#("jj" 0 2 (fontified nil)) . 6399) (undo-tree-id26770 . -2) (6399 . 6401) (#("jj" 0 2 (fontified t)) . -6399) (undo-tree-id26771 . -2) (undo-tree-id26772 . -2) (undo-tree-id26773 . -2) (undo-tree-id26774 . -1) (undo-tree-id26775 . -1) (undo-tree-id26776 . -1) (undo-tree-id26777 . -1) (undo-tree-id26778 . -1) (undo-tree-id26779 . -1) (undo-tree-id26780 . -1) (undo-tree-id26781 . -1) (undo-tree-id26782 . -1) (undo-tree-id26783 . -1) (undo-tree-id26784 . -1) (undo-tree-id26785 . -1) (undo-tree-id26786 . -1) (undo-tree-id26787 . -1) (undo-tree-id26788 . -1) (undo-tree-id26789 . -1) (undo-tree-id26790 . -1) (undo-tree-id26791 . -1) (undo-tree-id26792 . -2) (undo-tree-id26793 . -2) (undo-tree-id26794 . -2) (undo-tree-id26795 . -2) (undo-tree-id26796 . -2) (undo-tree-id26797 . -2) (undo-tree-id26798 . -2) (undo-tree-id26799 . -2) (undo-tree-id26800 . -2) (undo-tree-id26801 . -2) (undo-tree-id26802 . -2) (undo-tree-id26803 . -2) (undo-tree-id26804 . -2) (undo-tree-id26805 . -2) (undo-tree-id26806 . -2) (undo-tree-id26807 . -2) (undo-tree-id26808 . -2) (undo-tree-id26809 . -2) (undo-tree-id26810 . -2) (undo-tree-id26811 . -2) (undo-tree-id26812 . -2) (undo-tree-id26813 . -2) (undo-tree-id26814 . -2) (undo-tree-id26815 . -2) (undo-tree-id26816 . -2) (undo-tree-id26817 . -2) (undo-tree-id26818 . -2) (undo-tree-id26819 . -2) (undo-tree-id26820 . -2) (undo-tree-id26821 . -2) (undo-tree-id26822 . -2) (undo-tree-id26823 . -2) (undo-tree-id26824 . -2) (undo-tree-id26825 . -2) (undo-tree-id26826 . -2) (undo-tree-id26827 . -2) (undo-tree-id26828 . -2) (undo-tree-id26829 . -2) (undo-tree-id26830 . -2) (undo-tree-id26831 . -2) (undo-tree-id26832 . -2) (undo-tree-id26833 . -2) (undo-tree-id26834 . -2) (undo-tree-id26835 . -2) (undo-tree-id26836 . -2) (undo-tree-id26837 . -2) (undo-tree-id26838 . -2) (undo-tree-id26839 . -2) (undo-tree-id26840 . -2) (undo-tree-id26841 . -2) (undo-tree-id26842 . -2) (undo-tree-id26843 . -2) (undo-tree-id26844 . -2) (undo-tree-id26845 . -2) (undo-tree-id26846 . -2) (undo-tree-id26847 . -2) (undo-tree-id26848 . -2) (undo-tree-id26849 . -2) (undo-tree-id26850 . -2) (undo-tree-id26851 . -2) (undo-tree-id26852 . -2) (undo-tree-id26853 . -2) (undo-tree-id26854 . -2) (undo-tree-id26855 . -2) (undo-tree-id26856 . -2) (undo-tree-id26857 . -2) (undo-tree-id26858 . -2) (undo-tree-id26859 . -2) (undo-tree-id26860 . -2) 6401 (6400 . 6401) (#("y" 0 1 (fontified nil)) . 6400) (undo-tree-id26861 . -1) (6399 . 6400) (6395 . 6397) (#("ii" 0 2 (fontified nil)) . 6395) (undo-tree-id26862 . -2) (6395 . 6397) (#("ii" 0 2 (fontified t)) . -6395) (undo-tree-id26863 . -2) (undo-tree-id26864 . -2) (undo-tree-id26865 . -2) 6397 (6395 . 6397) (#("1" 0 1 (fontified t)) . -6395) (undo-tree-id26866 . -1) (undo-tree-id26867 . -1) (undo-tree-id26868 . -1) 6396 (#("x" 0 1 (fontified nil)) . 6396) (undo-tree-id26869 . -1) (6395 . 6396) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6395 6397 nil nil nil t #s(yas--field 2 6399 6401 nil nil nil t #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil)))) #s(yas--field 2 6399 6401 nil nil nil t #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil))) #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil))) #s(yas--exit 6405 nil) 145 nil #s(yas--field 3 6403 6404 nil nil nil t #s(yas--exit 6405 nil)) nil nil)) (6391 . 6405) (#("set(${1:x}, ${2:y}, ${3:val})$0" 0 31 (fontified nil)) . 6391) (6391 . 6422) (#("se" 0 2 (fontified nil)) . 6391) (6391 . 6393) (#("set(…)" 0 6 (fontified nil)) . -6391) (6391 . 6397) (#("se" 0 2 (fontified t)) . -6391) (undo-tree-id26870 . -1) (undo-tree-id26871 . -2) (undo-tree-id26872 . -2) 6393 (6390 . 6393) (6386 . 6390) (#("sel" 0 3 (fontified nil)) . 6386) (6386 . 6389) (#("self" 0 4 (fontified nil)) . -6386) (6386 . 6390) (#("sel" 0 3 (fontified t)) . -6386) (undo-tree-id26873 . -3) (undo-tree-id26874 . -3) 6389 (6386 . 6389)) nil (26156 57166 40881 348000) 0 nil])
([nil nil ((#("	todo!()
" 0 1 (fontified t) 1 6 (fontified t face font-lock-preprocessor-face) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t)) . 6439) (undo-tree-id27490 . -8) (undo-tree-id27491 . -7) (undo-tree-id27492 . -7) (undo-tree-id27493 . -7) (undo-tree-id27494 . -7) (undo-tree-id27495 . -7) (undo-tree-id27496 . -7) (undo-tree-id27497 . -7) (undo-tree-id27498 . -7) (undo-tree-id27499 . -7) (undo-tree-id27500 . -7) (undo-tree-id27501 . -7) (undo-tree-id27502 . -7) (undo-tree-id27503 . -7) (undo-tree-id27504 . -7) (undo-tree-id27505 . -7) (undo-tree-id27506 . -7) (undo-tree-id27507 . -7) (undo-tree-id27508 . -7) (undo-tree-id27509 . -7) (undo-tree-id27510 . -7) (undo-tree-id27511 . -7) (undo-tree-id27512 . -7) (undo-tree-id27513 . -9) 6446 (t 26156 57166 142368 987000)) nil (26156 57175 869305 943000) 0 nil])
([nil nil ((#("-> " 0 1 (fontified t) 1 2 (fontified t syntax-table (1)) 2 3 (fontified t)) . 5800) (undo-tree-id28100 . -2) (undo-tree-id28101 . -3) (undo-tree-id28102 . -3) (undo-tree-id28103 . -3) (t 26156 57175 970231 28000)) nil (26156 57200 111995 527000) 0 nil])
([nil nil ((#("Option" 0 6 (fontified t face font-lock-type-face)) . 5800) (undo-tree-id28098 . -5) (undo-tree-id28099 . -6)) nil (26156 57200 111986 859000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t syntax-table (1))) . 5800) (undo-tree-id28097 . -1)) nil (26156 57200 111981 981000) 0 nil])
([nil nil ((#("Self" 0 4 (fontified t face font-lock-type-face)) . 5800) (undo-tree-id28095 . -3) (undo-tree-id28096 . -4)) nil (26156 57200 111978 196000) 0 nil])
([nil nil ((#("> " 0 1 (fontified t syntax-table (1)) 1 2 (fontified t)) . 5800) (undo-tree-id28081 . -1) (undo-tree-id28082 . -1) (undo-tree-id28083 . -2) (undo-tree-id28084 . -2) (undo-tree-id28085 . -2) (undo-tree-id28086 . -2) (undo-tree-id28087 . -2) (undo-tree-id28088 . -2) (undo-tree-id28089 . -2) (undo-tree-id28090 . -2) (undo-tree-id28091 . -2) (undo-tree-id28092 . -2) (undo-tree-id28093 . -2) (undo-tree-id28094 . -2)) nil (26156 57200 111972 197000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 5886) (undo-tree-id28079 . -6) (undo-tree-id28080 . -7)) nil (26156 57200 111946 436000) 0 nil])
([nil nil ((#("None" 0 4 (fontified t face font-lock-type-face)) . 5886) (undo-tree-id28059 . -3) (undo-tree-id28060 . -4) (undo-tree-id28061 . -4) (undo-tree-id28062 . -4) (undo-tree-id28063 . -4) (undo-tree-id28064 . -4) (undo-tree-id28065 . -4) (undo-tree-id28066 . -4) (undo-tree-id28067 . -4) (undo-tree-id28068 . -4) (undo-tree-id28069 . -4) (undo-tree-id28070 . -4) (undo-tree-id28071 . -4) (undo-tree-id28072 . -4) (undo-tree-id28073 . -4) (undo-tree-id28074 . -4) (undo-tree-id28075 . -4) (undo-tree-id28076 . -4) (undo-tree-id28077 . -4) (undo-tree-id28078 . -4)) nil (26156 57200 111938 852000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 5886) (undo-tree-id28058 . -1)) nil (26156 57200 111905 666000) 0 nil])
([nil nil ((5885 . 5886) (#(" " 0 1 (fontified t)) . -5885) (undo-tree-id27809 . -1) (undo-tree-id27810 . -1) (undo-tree-id27811 . -1) (undo-tree-id27812 . -1) (undo-tree-id27813 . -1) (undo-tree-id27814 . -1) (undo-tree-id27815 . -1) (undo-tree-id27816 . -1) (undo-tree-id27817 . -1) (undo-tree-id27818 . -1) (undo-tree-id27819 . -1) (undo-tree-id27820 . -1) (undo-tree-id27821 . -1) (undo-tree-id27822 . -1) (undo-tree-id27823 . -1) (undo-tree-id27824 . -1) (undo-tree-id27825 . -1) (undo-tree-id27826 . -1) (undo-tree-id27827 . -1) (undo-tree-id27828 . -1) (undo-tree-id27829 . -1) (undo-tree-id27830 . -1) (undo-tree-id27831 . -1) (undo-tree-id27832 . -1) (undo-tree-id27833 . -1) (undo-tree-id27834 . -1) (undo-tree-id27835 . -1) (undo-tree-id27836 . -1) (undo-tree-id27837 . -1) (undo-tree-id27838 . -1) (undo-tree-id27839 . -1) (undo-tree-id27840 . -1) (undo-tree-id27841 . -1) (undo-tree-id27842 . -1) (undo-tree-id27843 . -1) (undo-tree-id27844 . -1) (undo-tree-id27845 . -1) (undo-tree-id27846 . -1) (undo-tree-id27847 . -1) (undo-tree-id27848 . -1) (undo-tree-id27849 . -1) (undo-tree-id27850 . -1) (undo-tree-id27851 . -1) (undo-tree-id27852 . -1) (undo-tree-id27853 . -1) (undo-tree-id27854 . -1) (undo-tree-id27855 . -1) (undo-tree-id27856 . -1) (undo-tree-id27857 . -1) (undo-tree-id27858 . -1) (undo-tree-id27859 . -1) (undo-tree-id27860 . -1) (undo-tree-id27861 . -1) (undo-tree-id27862 . -1) (undo-tree-id27863 . -1) (undo-tree-id27864 . -1) (undo-tree-id27865 . -1) (undo-tree-id27866 . -1) (undo-tree-id27867 . -1) (undo-tree-id27868 . -1) (undo-tree-id27869 . -1) (undo-tree-id27870 . -1) (undo-tree-id27871 . -1) (undo-tree-id27872 . -1) (undo-tree-id27873 . -1) (undo-tree-id27874 . -1) (undo-tree-id27875 . -1) (undo-tree-id27876 . -1) (undo-tree-id27877 . -1) (undo-tree-id27878 . -1) (undo-tree-id27879 . -1) (undo-tree-id27880 . -1) (undo-tree-id27881 . -1) (undo-tree-id27882 . -1) (undo-tree-id27883 . -1) (undo-tree-id27884 . -1) (undo-tree-id27885 . -1) (undo-tree-id27886 . -1) (undo-tree-id27887 . -1) (undo-tree-id27888 . -1) (undo-tree-id27889 . -1) (undo-tree-id27890 . -1) (undo-tree-id27891 . -1) (undo-tree-id27892 . -1) (undo-tree-id27893 . -1) (undo-tree-id27894 . -1) (undo-tree-id27895 . -1) (undo-tree-id27896 . -1) (undo-tree-id27897 . -1) (undo-tree-id27898 . -1) (undo-tree-id27899 . -1) (undo-tree-id27900 . -1) (undo-tree-id27901 . -1) (undo-tree-id27902 . -1) (undo-tree-id27903 . -1) (undo-tree-id27904 . -1) (undo-tree-id27905 . -1) (undo-tree-id27906 . -1) (undo-tree-id27907 . -1) (undo-tree-id27908 . -1) (undo-tree-id27909 . -1) (undo-tree-id27910 . -1) (undo-tree-id27911 . -1) (undo-tree-id27912 . -1) (undo-tree-id27913 . -1) (undo-tree-id27914 . -1) (undo-tree-id27915 . -1) (undo-tree-id27916 . -1) (undo-tree-id27917 . -1) (undo-tree-id27918 . -1) (undo-tree-id27919 . -1) (undo-tree-id27920 . -1) (undo-tree-id27921 . -1) (undo-tree-id27922 . -1) (undo-tree-id27923 . -1) (undo-tree-id27924 . -1) (undo-tree-id27925 . -1) (undo-tree-id27926 . -1) (undo-tree-id27927 . -1) (undo-tree-id27928 . -1) (undo-tree-id27929 . -1) (undo-tree-id27930 . -1) (undo-tree-id27931 . -1) (undo-tree-id27932 . -1) (undo-tree-id27933 . -1) (undo-tree-id27934 . -1) (undo-tree-id27935 . -1) (undo-tree-id27936 . -1) (undo-tree-id27937 . -1) (undo-tree-id27938 . -1) (undo-tree-id27939 . -1) (undo-tree-id27940 . -1) (undo-tree-id27941 . -1) (undo-tree-id27942 . -1) (undo-tree-id27943 . -1) (undo-tree-id27944 . -1) (undo-tree-id27945 . -1) (undo-tree-id27946 . -1) (undo-tree-id27947 . -1) (undo-tree-id27948 . -1) (undo-tree-id27949 . -1) (undo-tree-id27950 . -1) (undo-tree-id27951 . -1) (undo-tree-id27952 . -1) (undo-tree-id27953 . -1) (undo-tree-id27954 . -1) (undo-tree-id27955 . -1) (#("N" 0 1 (fontified t face font-lock-type-face)) . -5886) (undo-tree-id27956 . -1) (undo-tree-id27957 . -1) (undo-tree-id27958 . -1) (undo-tree-id27959 . -1) (undo-tree-id27960 . -1) (undo-tree-id27961 . -1) (undo-tree-id27962 . -1) (undo-tree-id27963 . -1) (undo-tree-id27964 . -1) (undo-tree-id27965 . -1) (undo-tree-id27966 . -1) (undo-tree-id27967 . -1) (undo-tree-id27968 . -1) (undo-tree-id27969 . -1) (undo-tree-id27970 . -1) (undo-tree-id27971 . -1) (undo-tree-id27972 . -1) (undo-tree-id27973 . -1) (undo-tree-id27974 . -1) (undo-tree-id27975 . -1) (undo-tree-id27976 . -1) (undo-tree-id27977 . -1) (undo-tree-id27978 . -1) (undo-tree-id27979 . -1) (undo-tree-id27980 . -1) (undo-tree-id27981 . -1) (undo-tree-id27982 . -1) (undo-tree-id27983 . -1) (undo-tree-id27984 . -1) (undo-tree-id27985 . -1) (undo-tree-id27986 . -1) (undo-tree-id27987 . -1) (undo-tree-id27988 . -1) (undo-tree-id27989 . -1) (undo-tree-id27990 . -1) (undo-tree-id27991 . -1) (undo-tree-id27992 . -1) (undo-tree-id27993 . -1) (undo-tree-id27994 . -1) (undo-tree-id27995 . -1) (undo-tree-id27996 . -1) (undo-tree-id27997 . -1) (undo-tree-id27998 . -1) (undo-tree-id27999 . -1) (undo-tree-id28000 . -1) (undo-tree-id28001 . -1) (undo-tree-id28002 . -1) (undo-tree-id28003 . -1) (undo-tree-id28004 . -1) (undo-tree-id28005 . -1) (undo-tree-id28006 . -1) (undo-tree-id28007 . -1) (undo-tree-id28008 . -1) (undo-tree-id28009 . -1) (undo-tree-id28010 . -1) (undo-tree-id28011 . -1) (undo-tree-id28012 . -1) (undo-tree-id28013 . -1) (undo-tree-id28014 . -1) (undo-tree-id28015 . -1) (undo-tree-id28016 . -1) (undo-tree-id28017 . -1) (undo-tree-id28018 . -1) 5887 (5886 . 5887) (#("n" 0 1 (fontified t)) . -5886) (undo-tree-id28019 . -1) (undo-tree-id28020 . -1) (undo-tree-id28021 . -1) (undo-tree-id28022 . -1) (undo-tree-id28023 . -1) (undo-tree-id28024 . -1) (undo-tree-id28025 . -1) (undo-tree-id28026 . -1) (undo-tree-id28027 . -1) (undo-tree-id28028 . -1) (undo-tree-id28029 . -1) (undo-tree-id28030 . -1) (undo-tree-id28031 . -1) (undo-tree-id28032 . -1) (undo-tree-id28033 . -1) (undo-tree-id28034 . -1) (undo-tree-id28035 . -1) (undo-tree-id28036 . -1) (undo-tree-id28037 . -1) (undo-tree-id28038 . -1) (undo-tree-id28039 . -1) (undo-tree-id28040 . -1) (undo-tree-id28041 . -1) (undo-tree-id28042 . -1) 5887 (#("o" 0 1 (fontified t)) . -5887) (undo-tree-id28043 . -1) (undo-tree-id28044 . -1) (undo-tree-id28045 . -1) (undo-tree-id28046 . -1) (#("n" 0 1 (fontified t)) . -5888) (undo-tree-id28047 . -1) (undo-tree-id28048 . -1) (undo-tree-id28049 . -1) (#("e" 0 1 (fontified t)) . -5889) (undo-tree-id28050 . -1) (undo-tree-id28051 . -1) (undo-tree-id28052 . -1) 5890 (5886 . 5890) (#("R" 0 1 (fontified t face font-lock-type-face)) . -5886) (undo-tree-id28053 . -1) (undo-tree-id28054 . -1) (undo-tree-id28055 . -1) 5887 (5886 . 5887) (#("n" 0 1 (fontified t)) . -5886) (undo-tree-id28056 . -1) (undo-tree-id28057 . -1) 5887 (5886 . 5887)) nil (26156 57200 111874 968000) 0 nil])
([nil nil ((#("	if square_length % 2 == 0 { // even nuber is required
	    
	}

" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t) 29 32 (fontified t face font-lock-comment-delimiter-face) 32 54 (fontified t face font-lock-comment-face) 54 55 (fontified t face font-lock-comment-face) 55 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-3-face)) 63 64 (fontified t) 64 65 (fontified t)) . 5826) (undo-tree-id27514 . -64) (undo-tree-id27515 . -64) (undo-tree-id27516 . 5) (undo-tree-id27517 . -64) (undo-tree-id27518 . -59) (undo-tree-id27519 . -59) (undo-tree-id27520 . -59) (undo-tree-id27521 . -59) (undo-tree-id27522 . -59) (undo-tree-id27523 . -59) (undo-tree-id27524 . -59) (undo-tree-id27525 . -59) (undo-tree-id27526 . -59) (undo-tree-id27527 . -59) (undo-tree-id27528 . -59) (undo-tree-id27529 . -59) (undo-tree-id27530 . -59) (undo-tree-id27531 . -59) (undo-tree-id27532 . -59) (undo-tree-id27533 . -59) (undo-tree-id27534 . -59) (undo-tree-id27535 . -59) (undo-tree-id27536 . -59) (undo-tree-id27537 . -59) (undo-tree-id27538 . -59) (undo-tree-id27539 . -59) (undo-tree-id27540 . -59) (undo-tree-id27541 . -59) (undo-tree-id27542 . -59) (undo-tree-id27543 . -59) (undo-tree-id27544 . -59) (undo-tree-id27545 . -59) (undo-tree-id27546 . -59) (undo-tree-id27547 . -59) (undo-tree-id27548 . -59) (undo-tree-id27549 . -59) (undo-tree-id27550 . -59) (undo-tree-id27551 . -59) (undo-tree-id27552 . -59) (undo-tree-id27553 . -59) (undo-tree-id27554 . -59) (undo-tree-id27555 . -59) (undo-tree-id27556 . -59) (undo-tree-id27557 . -59) (undo-tree-id27558 . -59) (undo-tree-id27559 . -59) (undo-tree-id27560 . -59) (undo-tree-id27561 . -59) (undo-tree-id27562 . -59) (undo-tree-id27563 . -59) (undo-tree-id27564 . -59) (undo-tree-id27565 . -59) (undo-tree-id27566 . -59) (undo-tree-id27567 . -59) (undo-tree-id27568 . -59) (undo-tree-id27569 . -59) (undo-tree-id27570 . -59) (undo-tree-id27571 . -59) (undo-tree-id27572 . -59) (undo-tree-id27573 . -59) (undo-tree-id27574 . -59) (undo-tree-id27575 . -59) (undo-tree-id27576 . -59) (undo-tree-id27577 . -59) (undo-tree-id27578 . -59) (undo-tree-id27579 . -59) (undo-tree-id27580 . -59) (undo-tree-id27581 . -59) (undo-tree-id27582 . -59) (undo-tree-id27583 . -59) (undo-tree-id27584 . -59) (undo-tree-id27585 . -59) (undo-tree-id27586 . -59) (undo-tree-id27587 . -59) (undo-tree-id27588 . -59) (undo-tree-id27589 . -59) (undo-tree-id27590 . -59) (undo-tree-id27591 . -59) (undo-tree-id27592 . -59) (undo-tree-id27593 . -59) (undo-tree-id27594 . -59) (undo-tree-id27595 . -59) (undo-tree-id27596 . -59) (undo-tree-id27597 . -59) (undo-tree-id27598 . -59) (undo-tree-id27599 . -59) (undo-tree-id27600 . -59) (undo-tree-id27601 . 5) (undo-tree-id27602 . -59) (undo-tree-id27603 . -59) (undo-tree-id27604 . -59) (undo-tree-id27605 . -59) (undo-tree-id27606 . -59) (undo-tree-id27607 . -59) (undo-tree-id27608 . -59) (undo-tree-id27609 . -59) (undo-tree-id27610 . -59) (undo-tree-id27611 . -59) (undo-tree-id27612 . -59) (undo-tree-id27613 . -59) (undo-tree-id27614 . -59) (undo-tree-id27615 . -59) (undo-tree-id27616 . -59) (undo-tree-id27617 . -59) (undo-tree-id27618 . -59) (undo-tree-id27619 . -59) (undo-tree-id27620 . -59) (undo-tree-id27621 . -59) (undo-tree-id27622 . -59) (undo-tree-id27623 . -59) (undo-tree-id27624 . -59) (undo-tree-id27625 . -59) (undo-tree-id27626 . -59) (undo-tree-id27627 . -59) (undo-tree-id27628 . -59) (undo-tree-id27629 . -59) (undo-tree-id27630 . -59) (undo-tree-id27631 . -59) (undo-tree-id27632 . -59) (undo-tree-id27633 . -59) (undo-tree-id27634 . -59) (undo-tree-id27635 . -59) (undo-tree-id27636 . -59) (undo-tree-id27637 . -59) (undo-tree-id27638 . -59) (undo-tree-id27639 . -59) (undo-tree-id27640 . -59) (undo-tree-id27641 . -59) (undo-tree-id27642 . -59) (undo-tree-id27643 . -59) (undo-tree-id27644 . -59) (undo-tree-id27645 . -59) (undo-tree-id27646 . -59) (undo-tree-id27647 . -59) (undo-tree-id27648 . -59) (undo-tree-id27649 . -59) (undo-tree-id27650 . -59) (undo-tree-id27651 . -59) (undo-tree-id27652 . -59) (undo-tree-id27653 . -59) (undo-tree-id27654 . -59) (undo-tree-id27655 . -59) (undo-tree-id27656 . -59) (undo-tree-id27657 . -59) (undo-tree-id27658 . -59) (undo-tree-id27659 . -59) (undo-tree-id27660 . -59) (undo-tree-id27661 . -59) (undo-tree-id27662 . -59) (undo-tree-id27663 . -59) (undo-tree-id27664 . -59) (undo-tree-id27665 . -59) (undo-tree-id27666 . -59) (undo-tree-id27667 . -59) (undo-tree-id27668 . -59) (undo-tree-id27669 . -59) (undo-tree-id27670 . -59) (undo-tree-id27671 . -59) (undo-tree-id27672 . -59) (undo-tree-id27673 . -59) (undo-tree-id27674 . -59) (undo-tree-id27675 . -59) (undo-tree-id27676 . -59) (undo-tree-id27677 . -59) (undo-tree-id27678 . -59) (undo-tree-id27679 . -59) (undo-tree-id27680 . -59) (undo-tree-id27681 . -59) (undo-tree-id27682 . -59) (undo-tree-id27683 . -59) (undo-tree-id27684 . -59) (undo-tree-id27685 . -59) (undo-tree-id27686 . -59) (undo-tree-id27687 . -59) (undo-tree-id27688 . -59) (undo-tree-id27689 . -59) (undo-tree-id27690 . -59) (undo-tree-id27691 . -59) (undo-tree-id27692 . -59) (undo-tree-id27693 . -59) (undo-tree-id27694 . -59) (undo-tree-id27695 . -59) (undo-tree-id27696 . -59) (undo-tree-id27697 . -59) (undo-tree-id27698 . -59) (undo-tree-id27699 . -59) (undo-tree-id27700 . -59) (undo-tree-id27701 . -59) (undo-tree-id27702 . -59) (undo-tree-id27703 . -59) (undo-tree-id27704 . -59) (undo-tree-id27705 . -60) (undo-tree-id27706 . -60) (undo-tree-id27707 . -60) (undo-tree-id27708 . -60) (undo-tree-id27709 . -60) (undo-tree-id27710 . -60) (undo-tree-id27711 . -60) (undo-tree-id27712 . -60) (undo-tree-id27713 . -60) (undo-tree-id27714 . -60) (undo-tree-id27715 . -60) (undo-tree-id27716 . -60) (undo-tree-id27717 . -60) (undo-tree-id27718 . -60) (undo-tree-id27719 . -60) (undo-tree-id27720 . -60) (undo-tree-id27721 . -60) (undo-tree-id27722 . -60) (undo-tree-id27723 . -60) (undo-tree-id27724 . -60) (undo-tree-id27725 . -60) (undo-tree-id27726 . -60) (undo-tree-id27727 . -60) (undo-tree-id27728 . -60) (undo-tree-id27729 . -60) (undo-tree-id27730 . -60) (undo-tree-id27731 . -60) (undo-tree-id27732 . -60) (undo-tree-id27733 . -60) (undo-tree-id27734 . -60) (undo-tree-id27735 . -60) (undo-tree-id27736 . -60) (undo-tree-id27737 . -60) (undo-tree-id27738 . -60) (undo-tree-id27739 . -60) (undo-tree-id27740 . -60) (undo-tree-id27741 . -60) (undo-tree-id27742 . -60) (undo-tree-id27743 . -60) (undo-tree-id27744 . -60) (undo-tree-id27745 . -60) (undo-tree-id27746 . -60) (undo-tree-id27747 . -60) (undo-tree-id27748 . -59) (undo-tree-id27749 . -59) (undo-tree-id27750 . -59) (undo-tree-id27751 . -59) (undo-tree-id27752 . -59) (undo-tree-id27753 . -59) (undo-tree-id27754 . -59) (undo-tree-id27755 . -59) (undo-tree-id27756 . -59) (undo-tree-id27757 . -59) (undo-tree-id27758 . -59) (undo-tree-id27759 . -62) (undo-tree-id27760 . -62) (undo-tree-id27761 . -62) (undo-tree-id27762 . -62) (undo-tree-id27763 . -62) (undo-tree-id27764 . -62) (undo-tree-id27765 . -62) (undo-tree-id27766 . -62) (undo-tree-id27767 . -62) (undo-tree-id27768 . -64) (undo-tree-id27769 . -64) (undo-tree-id27770 . -64) (undo-tree-id27771 . -64) (undo-tree-id27772 . -64) (undo-tree-id27773 . -64) (undo-tree-id27774 . -64) (undo-tree-id27775 . -64) (undo-tree-id27776 . -64) (undo-tree-id27777 . -65) (undo-tree-id27778 . -64) (undo-tree-id27779 . -64) (undo-tree-id27780 . -64) (undo-tree-id27781 . -64) (undo-tree-id27782 . -64) (undo-tree-id27783 . -64) (undo-tree-id27784 . -64) (undo-tree-id27785 . -64) (undo-tree-id27786 . -64) (undo-tree-id27787 . -64) (undo-tree-id27788 . -64) (undo-tree-id27789 . -64) (undo-tree-id27790 . -61) (undo-tree-id27791 . -61) (undo-tree-id27792 . -61) (undo-tree-id27793 . -61) (undo-tree-id27794 . -61) (undo-tree-id27795 . -61) (undo-tree-id27796 . -61) (undo-tree-id27797 . -61) (undo-tree-id27798 . -61) (undo-tree-id27799 . -55) (undo-tree-id27800 . -55) (undo-tree-id27801 . -55) (undo-tree-id27802 . -55) (undo-tree-id27803 . -55) (undo-tree-id27804 . -55) (undo-tree-id27805 . -55) (undo-tree-id27806 . -55) (undo-tree-id27807 . -55) (undo-tree-id27808 . -65)) nil (26156 57200 111426 725000) 0 nil])
([nil nil ((6959 . 6963) (#("    " 0 4 (fontified nil)) . 6958) (undo-tree-id28128 . -4) (undo-tree-id28129 . -4) (undo-tree-id28130 . -4) (undo-tree-id28131 . -4) (undo-tree-id28132 . -4) (undo-tree-id28133 . -4) (undo-tree-id28134 . -4) (undo-tree-id28135 . -4) (undo-tree-id28136 . -4) (undo-tree-id28137 . -4) (undo-tree-id28138 . -4) (undo-tree-id28139 . -4) (undo-tree-id28140 . -4) (6958 . 6963) (#("    " 0 4 (fontified nil)) . 6957) (undo-tree-id28141 . -4) (undo-tree-id28142 . -4) (undo-tree-id28143 . -4) (undo-tree-id28144 . -4) (undo-tree-id28145 . -4) (undo-tree-id28146 . -4) (undo-tree-id28147 . -4) (undo-tree-id28148 . -4) (undo-tree-id28149 . -4) (undo-tree-id28150 . -4) (undo-tree-id28151 . -4) (undo-tree-id28152 . -4) (6961 . 6962) (6957 . 6961) (t 26156 57200 209895 802000)) nil (26156 57226 985409 82000) 0 nil])
([nil nil ((6978 . 6980) (#(";" 0 1 (fontified t)) . -6978) (undo-tree-id28104 . -1) (undo-tree-id28105 . -1) (undo-tree-id28106 . -1) (undo-tree-id28107 . -1) (undo-tree-id28108 . -1) (undo-tree-id28109 . -1) (undo-tree-id28110 . -1) (undo-tree-id28111 . -1) (undo-tree-id28112 . -1) (undo-tree-id28113 . -1) (undo-tree-id28114 . -1) (undo-tree-id28115 . -1) (undo-tree-id28116 . -1) (undo-tree-id28117 . -1) (undo-tree-id28118 . -1) (undo-tree-id28119 . -1) (undo-tree-id28120 . -1) 6979 (#("square_length" 0 13 (fontified nil)) . 6979) (undo-tree-id28121 . -13) (6978 . 6979) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6978 6980 nil nil nil t #s(yas--exit 6981 nil))) #s(yas--exit 6981 nil) 146 nil #s(yas--field 1 6978 6980 nil nil nil t #s(yas--exit 6981 nil)) nil nil)) (6968 . 6992) (#("make_bold(${1:square_length})$0" 0 31 (fontified nil)) . 6968) (6968 . 6999) (#("ma" 0 2 (fontified nil)) . 6968) (6968 . 6970) (#("make_bold(…)" 0 12 (fontified nil)) . -6968) (6968 . 6980) (#("ma" 0 2 (fontified t)) . -6968) (undo-tree-id28122 . -2) (undo-tree-id28123 . -2) (undo-tree-id28124 . -2) (undo-tree-id28125 . -2) 6970 (6967 . 6970) (6962 . 6967) (#("thi" 0 3 (fontified nil)) . 6962) (6962 . 6965) (#("thing" 0 5 (fontified nil)) . -6962) (6962 . 6967) (#("thi" 0 3 (fontified t)) . -6962) (undo-tree-id28126 . -3) (undo-tree-id28127 . -3) 6965 (6962 . 6965) (6958 . 6962)) nil (26156 57226 985350 612000) 0 nil])
([nil nil ((6981 . 6982) (apply yas--snippet-revive 6968 6981 #s(yas--snippet nil (#s(yas--field 1 6978 6980 nil nil nil t #s(yas--exit 6981 nil))) #s(yas--exit 6981 nil) 146 nil #s(yas--field 1 6978 6980 nil nil nil t #s(yas--exit 6981 nil)) nil nil))) nil (26156 57226 985203 567000) 0 nil])
([nil nil ((6759 . 6763) (t 26156 57227 65532 480000)) nil (26156 57233 510791 120000) 0 nil])
([nil nil ((6861 . 6865)) nil (26156 57233 510779 169000) 0 nil])
([nil nil ((7013 . 7014) (#("square_length" 0 13 (fontified nil)) . 7013) (undo-tree-id28153 . -13) (7012 . 7013) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7012 7014 nil nil nil t #s(yas--exit 7015 nil))) #s(yas--exit 7015 nil) 147 nil #s(yas--field 1 7012 7014 nil nil nil t #s(yas--exit 7015 nil)) nil nil)) (7002 . 7026) (#("make_bold(${1:square_length})$0" 0 31 (fontified nil)) . 7002) (7002 . 7033) (#("ma" 0 2 (fontified nil)) . 7002) (7002 . 7004) (#("make_bold(…)" 0 12 (fontified nil)) . -7002) (7002 . 7014) (#("ma" 0 2 (fontified t)) . -7002) (undo-tree-id28154 . -2) (undo-tree-id28155 . -2) (undo-tree-id28156 . -2) (undo-tree-id28157 . -1) (undo-tree-id28158 . -1) (undo-tree-id28159 . -1) (undo-tree-id28160 . -1) (undo-tree-id28161 . -1) (undo-tree-id28162 . -1) (undo-tree-id28163 . -1) (undo-tree-id28164 . -1) (undo-tree-id28165 . -1) (undo-tree-id28166 . -1) (undo-tree-id28167 . -1) (undo-tree-id28168 . -1) (undo-tree-id28169 . -1) (undo-tree-id28170 . -1) (undo-tree-id28171 . -1) (undo-tree-id28172 . -1) (undo-tree-id28173 . -1) (undo-tree-id28174 . -1) (undo-tree-id28175 . -1) (undo-tree-id28176 . -1) (undo-tree-id28177 . -1) (undo-tree-id28178 . -1) (undo-tree-id28179 . -1) (undo-tree-id28180 . -1) (undo-tree-id28181 . -1) (undo-tree-id28182 . -1) (undo-tree-id28183 . -1) (undo-tree-id28184 . -1) (undo-tree-id28185 . -1) (undo-tree-id28186 . -1) (undo-tree-id28187 . -2) (undo-tree-id28188 . -2) (undo-tree-id28189 . -2) (undo-tree-id28190 . -2) (undo-tree-id28191 . -2) (undo-tree-id28192 . -2) (undo-tree-id28193 . -2) (undo-tree-id28194 . -2) (undo-tree-id28195 . -2) (undo-tree-id28196 . -2) (undo-tree-id28197 . -2) (undo-tree-id28198 . -2) (undo-tree-id28199 . -2) (undo-tree-id28200 . -2) (undo-tree-id28201 . -2) (undo-tree-id28202 . -2) (undo-tree-id28203 . -2) (undo-tree-id28204 . -2) (undo-tree-id28205 . -2) (undo-tree-id28206 . -2) (undo-tree-id28207 . -2) (undo-tree-id28208 . -2) (undo-tree-id28209 . -2) (undo-tree-id28210 . -2) (undo-tree-id28211 . -2) (undo-tree-id28212 . -2) (undo-tree-id28213 . -2) (undo-tree-id28214 . -2) (undo-tree-id28215 . -2) (undo-tree-id28216 . -2) (undo-tree-id28217 . -2) (undo-tree-id28218 . -2) (undo-tree-id28219 . -2) (undo-tree-id28220 . -2) (undo-tree-id28221 . -2) (undo-tree-id28222 . -2) (undo-tree-id28223 . -2) (undo-tree-id28224 . -2) (undo-tree-id28225 . -2) (undo-tree-id28226 . -2) (undo-tree-id28227 . -2) (undo-tree-id28228 . -2) (undo-tree-id28229 . -2) (undo-tree-id28230 . -2) (undo-tree-id28231 . -2) (undo-tree-id28232 . -2) (undo-tree-id28233 . -2) (undo-tree-id28234 . -2) (undo-tree-id28235 . -2) (undo-tree-id28236 . -2) (undo-tree-id28237 . -2) (undo-tree-id28238 . -2) (undo-tree-id28239 . -2) (undo-tree-id28240 . -2) (undo-tree-id28241 . -2) (undo-tree-id28242 . -2) (undo-tree-id28243 . -2) (undo-tree-id28244 . -2) (undo-tree-id28245 . -2) (undo-tree-id28246 . -2) (undo-tree-id28247 . -2) (undo-tree-id28248 . -2) (undo-tree-id28249 . -2) (undo-tree-id28250 . -2) (undo-tree-id28251 . -2) (undo-tree-id28252 . -2) (undo-tree-id28253 . -2) (undo-tree-id28254 . -2) (undo-tree-id28255 . -2) (undo-tree-id28256 . -2) (undo-tree-id28257 . -2) (undo-tree-id28258 . -2) (undo-tree-id28259 . -2) (undo-tree-id28260 . -2) (undo-tree-id28261 . -2) 7004 (7001 . 7004) (6995 . 7001) (#("th" 0 2 (fontified nil)) . 6995) (6995 . 6997) (#("thing2" 0 6 (fontified nil)) . -6995) (6995 . 7001) (#("th" 0 2 (fontified t)) . -6995) (undo-tree-id28262 . -2) (undo-tree-id28263 . -2) (undo-tree-id28264 . -2) (undo-tree-id28265 . -2) (undo-tree-id28266 . -2) (undo-tree-id28267 . -2) (undo-tree-id28268 . -2) (undo-tree-id28269 . -2) (undo-tree-id28270 . -2) (undo-tree-id28271 . -2) (undo-tree-id28272 . -2) (undo-tree-id28273 . -2) (undo-tree-id28274 . -2) (undo-tree-id28275 . -2) (undo-tree-id28276 . -2) (undo-tree-id28277 . -2) (undo-tree-id28278 . -2) (undo-tree-id28279 . -2) (undo-tree-id28280 . -2) (undo-tree-id28281 . -2) (undo-tree-id28282 . -2) (undo-tree-id28283 . -2) (undo-tree-id28284 . -2) (undo-tree-id28285 . -2) (undo-tree-id28286 . -2) (undo-tree-id28287 . -2) (undo-tree-id28288 . -2) (undo-tree-id28289 . -2) (undo-tree-id28290 . -2) (undo-tree-id28291 . -2) (undo-tree-id28292 . -2) (undo-tree-id28293 . -2) (undo-tree-id28294 . -2) (undo-tree-id28295 . -2) (undo-tree-id28296 . -2) (undo-tree-id28297 . -2) (undo-tree-id28298 . -2) (undo-tree-id28299 . -2) (undo-tree-id28300 . -2) (undo-tree-id28301 . -2) (undo-tree-id28302 . -2) (undo-tree-id28303 . -2) (undo-tree-id28304 . -2) (undo-tree-id28305 . -2) (undo-tree-id28306 . -2) (undo-tree-id28307 . -2) (undo-tree-id28308 . -2) (undo-tree-id28309 . -2) (undo-tree-id28310 . -2) (undo-tree-id28311 . -2) (undo-tree-id28312 . -2) (undo-tree-id28313 . -2) (undo-tree-id28314 . -2) (undo-tree-id28315 . -2) (undo-tree-id28316 . -2) (undo-tree-id28317 . -2) (undo-tree-id28318 . -2) (undo-tree-id28319 . -2) (undo-tree-id28320 . -2) (undo-tree-id28321 . -2) (undo-tree-id28322 . -2) (undo-tree-id28323 . -2) (undo-tree-id28324 . -2) (undo-tree-id28325 . -2) (undo-tree-id28326 . -2) (undo-tree-id28327 . -2) (undo-tree-id28328 . -2) 6997 (6995 . 6997) (6990 . 6995) (t 26156 57233 617445 80000)) nil (26156 57242 693982 93000) 0 nil])
([nil nil ((7015 . 7016) (apply yas--snippet-revive 7002 7015 #s(yas--snippet nil (#s(yas--field 1 7012 7014 nil nil nil t #s(yas--exit 7015 nil))) #s(yas--exit 7015 nil) 147 nil #s(yas--field 1 7012 7014 nil nil nil t #s(yas--exit 7015 nil)) nil nil))) nil (26156 57242 693555 674000) 0 nil])
([nil nil ((apply -6 6965 7027 undo--wrap-and-run-primitive-undo 6965 7027 ((6998 . 7001) (6970 . 6973) 6965)) (t 26156 57242 797323 419000)) nil (26156 57291 303358 836000) 0 nil])
([nil nil ((6112 . 6113) (#("1" 0 1 (fontified t)) . -6112) (undo-tree-id28329 . -1) (undo-tree-id28330 . -1) (undo-tree-id28331 . -1) (undo-tree-id28332 . -1) (undo-tree-id28333 . -1) (undo-tree-id28334 . -1) (undo-tree-id28335 . -1) (undo-tree-id28336 . -1) (undo-tree-id28337 . -1) (undo-tree-id28338 . -1) (undo-tree-id28339 . -1) (undo-tree-id28340 . -1) (undo-tree-id28341 . -1) 6113 (t 26156 57291 388694 289000)) nil (26156 57338 507312 418000) 0 nil])
([nil nil ((6310 . 6311) (#("1" 0 1 (fontified t)) . -6310) (undo-tree-id28342 . -1) (undo-tree-id28343 . -1) (undo-tree-id28344 . -1) (undo-tree-id28345 . -1) (undo-tree-id28346 . -1) (undo-tree-id28347 . -1) (undo-tree-id28348 . -1) (undo-tree-id28349 . -1) (undo-tree-id28350 . -1) (undo-tree-id28351 . -1) (undo-tree-id28352 . -1) (undo-tree-id28353 . -1) (undo-tree-id28354 . -1) 6311 (t 26156 57338 608105 238000)) nil (26156 57345 9990 404000) 0 nil])
([nil nil ((apply 6 6966 7018 undo--wrap-and-run-primitive-undo 6966 7018 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6995) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6970) 6966)) (t 26156 57345 112025 712000)) nil (26156 57349 99794 764000) 0 nil])
([nil nil ((6987 . 6988) (#("0" 0 1 (fontified t)) . -6987) (undo-tree-id28448 . -1) 6988 (t 26156 57349 203975 877000)) nil (26156 57369 98480 65000) 0 nil])
([nil nil ((6986 . 6987) (#("1" 0 1 (fontified t)) . -6986) (undo-tree-id28391 . -1) (undo-tree-id28392 . -1) (undo-tree-id28393 . -1) (undo-tree-id28394 . -1) (undo-tree-id28395 . -1) (undo-tree-id28396 . -1) (undo-tree-id28397 . -1) (undo-tree-id28398 . -1) (undo-tree-id28399 . -1) (undo-tree-id28400 . -1) (undo-tree-id28401 . -1) (undo-tree-id28402 . -1) (undo-tree-id28403 . -1) (undo-tree-id28404 . -1) (undo-tree-id28405 . -1) (undo-tree-id28406 . -1) (undo-tree-id28407 . -1) (undo-tree-id28408 . -1) (undo-tree-id28409 . -1) (undo-tree-id28410 . -1) (undo-tree-id28411 . -1) (undo-tree-id28412 . -1) (undo-tree-id28413 . -1) (undo-tree-id28414 . -1) (undo-tree-id28415 . -1) (undo-tree-id28416 . -1) (undo-tree-id28417 . -1) (undo-tree-id28418 . -1) (undo-tree-id28419 . -1) (undo-tree-id28420 . -1) (undo-tree-id28421 . -1) (undo-tree-id28422 . -1) (undo-tree-id28423 . -1) (undo-tree-id28424 . -1) (undo-tree-id28425 . -1) (undo-tree-id28426 . -1) (undo-tree-id28427 . -1) (undo-tree-id28428 . -1) (undo-tree-id28429 . -1) (undo-tree-id28430 . -1) (undo-tree-id28431 . -1) (undo-tree-id28432 . -1) (undo-tree-id28433 . -1) (undo-tree-id28434 . -1) (#("2" 0 1 (fontified t)) . -6987) (undo-tree-id28435 . -1) (undo-tree-id28436 . -1) (undo-tree-id28437 . -1) (undo-tree-id28438 . -1) (undo-tree-id28439 . -1) (undo-tree-id28440 . -1) (undo-tree-id28441 . -1) (undo-tree-id28442 . -1) (undo-tree-id28443 . -1) (undo-tree-id28444 . -1) (undo-tree-id28445 . -1) (undo-tree-id28446 . -1) (undo-tree-id28447 . -1) 6988) nil (26156 57369 98468 246000) 0 nil])
([nil nil ((7011 . 7012) (#("1" 0 1 (fontified t)) . -7011) (undo-tree-id28355 . -1) (undo-tree-id28356 . -1) (undo-tree-id28357 . -1) (undo-tree-id28358 . -1) (undo-tree-id28359 . -1) (undo-tree-id28360 . -1) (undo-tree-id28361 . -1) (undo-tree-id28362 . -1) (undo-tree-id28363 . -1) (undo-tree-id28364 . -1) (undo-tree-id28365 . -1) (undo-tree-id28366 . -1) (undo-tree-id28367 . -1) (undo-tree-id28368 . -1) (undo-tree-id28369 . -1) (undo-tree-id28370 . -1) (undo-tree-id28371 . -1) (undo-tree-id28372 . -1) (undo-tree-id28373 . -1) (undo-tree-id28374 . -1) (undo-tree-id28375 . -1) (undo-tree-id28376 . -1) (undo-tree-id28377 . -1) (#("0" 0 1 (fontified t)) . -7012) (undo-tree-id28378 . -1) (undo-tree-id28379 . -1) (undo-tree-id28380 . -1) (undo-tree-id28381 . -1) (undo-tree-id28382 . -1) (undo-tree-id28383 . -1) (undo-tree-id28384 . -1) (undo-tree-id28385 . -1) (undo-tree-id28386 . -1) (undo-tree-id28387 . -1) (undo-tree-id28388 . -1) (undo-tree-id28389 . -1) (undo-tree-id28390 . -1) 7013) nil (26156 57369 98349 425000) 0 nil])
([nil nil ((#("			" 0 3 (fontified t)) . -6077) (undo-tree-id28452 . -3) (undo-tree-id28453 . -3) (undo-tree-id28454 . -3) (undo-tree-id28455 . -3) (undo-tree-id28456 . -3) (undo-tree-id28457 . -3) (undo-tree-id28458 . -3) (undo-tree-id28459 . -3) (undo-tree-id28460 . -3) (undo-tree-id28461 . -3) (undo-tree-id28462 . -3) (undo-tree-id28463 . -3) (undo-tree-id28464 . -3) 6080 (6076 . 6080) (t 26156 57369 203734 392000)) nil (26156 57402 26406 817000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6091) (6091 . 6092) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -6091) (6091 . 6092) (6090 . 6092) (6089 . 6091) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . -6089) (6089 . 6090) (apply yas--snippet-revive 6080 6090 #s(yas--snippet nil nil #s(yas--exit 6089 nil) 148 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6089 nil) 148 nil nil nil nil)) (6080 . 6090) (#("println!($0)" 0 12 (fontified nil)) . 6080) (6080 . 6092) (#("pr" 0 2 (fontified nil)) . 6080) (6080 . 6082) (#("println!(…)" 0 11 (fontified nil)) . -6080) (6080 . 6091) (#("pr" 0 2 (fontified t)) . -6080) (undo-tree-id28449 . -2) (undo-tree-id28450 . -2) (undo-tree-id28451 . -2) 6082 (6080 . 6082) (6077 . 6080)) nil (26156 57402 26374 285000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6093) (6093 . 6094) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -6093) (6093 . 6094) (6092 . 6094)) nil (26156 57402 26340 260000) 0 nil])
([nil nil ((6096 . 6097)) nil (26156 57402 26336 348000) 0 nil])
([nil nil ((6091 . 6093)) nil (26156 57402 26333 138000) 0 nil])
([nil nil ((6095 . 6097)) nil (26156 57402 26321 709000) 0 nil])
([nil nil ((6094 . 6095) (t 26156 57402 131344 113000)) nil (26156 57408 59619 896000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5826) (undo-tree-id28620 . -1) 5827 (5826 . 5827) (#("	" 0 1 (fontified nil)) . 5825) (undo-tree-id28621 . -1) (5824 . 5827) (t 26156 57408 159273 611000)) nil (26156 57935 562204 617000) 0 nil])
([nil nil ((5826 . 5827)) nil (26156 57935 562197 266000) 0 nil])
([nil nil ((6251 . 6261) (#("one" 0 3 (fontified nil)) . 6251) (6251 . 6254) (#("one_exists" 0 10 (fontified nil)) . -6251) (6251 . 6261) (#("one" 0 3 (fontified t)) . -6251) (undo-tree-id28608 . -3) (undo-tree-id28609 . -3) 6254 (6251 . 6254) (#("c" 0 1 (fontified t)) . -6251) (undo-tree-id28610 . -1) (undo-tree-id28611 . -1) (undo-tree-id28612 . -1) (#("o" 0 1 (fontified t)) . -6252) (undo-tree-id28613 . -1) (undo-tree-id28614 . -1) (#("n" 0 1 (fontified t)) . -6253) (undo-tree-id28615 . -1) (undo-tree-id28616 . -1) (#("t" 0 1 (fontified t)) . -6254) (undo-tree-id28617 . -1) (undo-tree-id28618 . -1) 6255 (6251 . 6255) (6247 . 6252) (6245 . 6247) (#("		" 0 2 (fontified nil)) . 6244) (undo-tree-id28619 . -2) (6246 . 6247) (6244 . 6246)) nil (26156 57935 562189 731000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -6261) (undo-tree-id28606 . 1) (undo-tree-id28607 . -1) 6262) nil (26156 57935 562155 937000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 6250) (undo-tree-id28604 . -1) (undo-tree-id28605 . -1)) nil (26156 57935 562149 762000) 0 nil])
([nil nil ((6264 . 6270) (#("		    " 0 6 (fontified nil)) . 6263) (undo-tree-id28603 . -6) (6263 . 6270) (6264 . 6266) (#("		    " 0 6 (fontified nil face (rainbow-delimiters-depth-5-face))) . 6263) (6263 . 6269) (6262 . 6264) (6260 . 6263)) nil (26156 57935 562143 737000) 0 nil])
([nil nil ((#("		for ii in i..(i+square_length) {
		    for jj in j..(j+square_length) {
			self.set(ii, jj, 0);
		    }
		}
		

" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-5-face)) 16 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-5-face)) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t) 35 41 (fontified t) 41 44 (fontified t face font-lock-keyword-face) 44 45 (fontified t) 45 47 (fontified t face font-lock-variable-name-face) 47 48 (fontified t) 48 50 (fontified t face font-lock-keyword-face) 50 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-6-face)) 55 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-6-face)) 71 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-6-face)) 73 74 (fontified t) 74 77 (fontified t) 77 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 83 (fontified t) 83 85 (fontified t) 85 86 (fontified t face (rainbow-delimiters-depth-7-face)) 86 88 (fontified t) 88 90 (fontified t) 90 92 (fontified t) 92 95 (fontified t) 95 96 (fontified t face (rainbow-delimiters-depth-7-face)) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 104 (fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-6-face)) 105 106 (fontified t) 106 108 (fontified t) 108 109 (fontified t face (rainbow-delimiters-depth-5-face)) 109 110 (fontified t) 110 112 (fontified t) 112 113 (fontified t) 113 114 (rear-nonsticky t fontified t)) . 6275) (undo-tree-id28522 . -113) (undo-tree-id28523 . -113) (undo-tree-id28524 . -113) (undo-tree-id28525 . -94) (undo-tree-id28526 . -111) (undo-tree-id28527 . -111) (undo-tree-id28528 . -111) (undo-tree-id28529 . -111) (undo-tree-id28530 . -111) (undo-tree-id28531 . -111) (undo-tree-id28532 . -111) (undo-tree-id28533 . -111) (undo-tree-id28534 . -111) (undo-tree-id28535 . -113) (undo-tree-id28536 . -113) (undo-tree-id28537 . -113) (undo-tree-id28538 . -113) (undo-tree-id28539 . -113) (undo-tree-id28540 . -113) (undo-tree-id28541 . -113) (undo-tree-id28542 . -113) (undo-tree-id28543 . -113) (undo-tree-id28544 . -114) (undo-tree-id28545 . -113) (undo-tree-id28546 . -113) (undo-tree-id28547 . -113) (undo-tree-id28548 . -113) (undo-tree-id28549 . -113) (undo-tree-id28550 . -113) (undo-tree-id28551 . -113) (undo-tree-id28552 . -113) (undo-tree-id28553 . -113) (undo-tree-id28554 . -113) (undo-tree-id28555 . -113) (undo-tree-id28556 . -113) (undo-tree-id28557 . -110) (undo-tree-id28558 . -110) (undo-tree-id28559 . -110) (undo-tree-id28560 . -110) (undo-tree-id28561 . -110) (undo-tree-id28562 . -110) (undo-tree-id28563 . -110) (undo-tree-id28564 . -110) (undo-tree-id28565 . -110) (undo-tree-id28566 . -106) (undo-tree-id28567 . -106) (undo-tree-id28568 . -106) (undo-tree-id28569 . -106) (undo-tree-id28570 . -106) (undo-tree-id28571 . -106) (undo-tree-id28572 . -106) (undo-tree-id28573 . -106) (undo-tree-id28574 . -106) (undo-tree-id28575 . -98) (undo-tree-id28576 . -98) (undo-tree-id28577 . -98) (undo-tree-id28578 . -98) (undo-tree-id28579 . -98) (undo-tree-id28580 . -98) (undo-tree-id28581 . -98) (undo-tree-id28582 . -98) (undo-tree-id28583 . -98) (undo-tree-id28584 . -74) (undo-tree-id28585 . -74) (undo-tree-id28586 . -74) (undo-tree-id28587 . -74) (undo-tree-id28588 . -74) (undo-tree-id28589 . -74) (undo-tree-id28590 . -74) (undo-tree-id28591 . -74) (undo-tree-id28592 . -74) (undo-tree-id28593 . -35) (undo-tree-id28594 . -35) (undo-tree-id28595 . -35) (undo-tree-id28596 . -35) (undo-tree-id28597 . -35) (undo-tree-id28598 . -35) (undo-tree-id28599 . -35) (undo-tree-id28600 . -35) (undo-tree-id28601 . -35) (undo-tree-id28602 . -114)) nil (26156 57935 562128 658000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6376 . 6377) (nil fontified nil 6263 . 6377) (6263 . 6377)) nil (26156 57935 561976 300000) 0 nil])
([nil nil ((6265 . 6269)) nil (26156 57935 561973 437000) 0 nil])
([nil nil ((6304 . 6305) (#("    " 0 4 (fontified t)) . 6304) (undo-tree-id28511 . -4) (undo-tree-id28512 . -4) (undo-tree-id28513 . -4) (undo-tree-id28514 . -4) (undo-tree-id28515 . -4) (undo-tree-id28516 . -4) (undo-tree-id28517 . -4) (undo-tree-id28518 . -4) (undo-tree-id28519 . -4) (undo-tree-id28520 . -4) (undo-tree-id28521 . -4) 6308) nil (26156 57935 561969 576000) 0 nil])
([nil nil ((6341 . 6345)) nil (26156 57935 561942 529000) 0 nil])
([nil nil ((6368 . 6369) (#("    " 0 4 (fontified t)) . 6368) (undo-tree-id28500 . -4) (undo-tree-id28501 . -4) (undo-tree-id28502 . -4) (undo-tree-id28503 . -4) (undo-tree-id28504 . -4) (undo-tree-id28505 . -4) (undo-tree-id28506 . -4) (undo-tree-id28507 . -4) (undo-tree-id28508 . -4) (undo-tree-id28509 . -4) (undo-tree-id28510 . -4) 6372) nil (26156 57935 561937 841000) 0 nil])
([nil nil ((6373 . 6377)) nil (26156 57935 561916 623000) 0 nil])
([nil nil ((6381 . 6385) 6380) nil (26156 57935 561914 431000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 6386) (undo-tree-id28488 . -1) (undo-tree-id28489 . -1) (undo-tree-id28490 . -1) (undo-tree-id28491 . -1) (undo-tree-id28492 . -1) (undo-tree-id28493 . -1) (undo-tree-id28494 . -1) (undo-tree-id28495 . -1) (undo-tree-id28496 . -1) (undo-tree-id28497 . -1) (undo-tree-id28498 . -1) (undo-tree-id28499 . -1)) nil (26156 57935 561910 227000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6386) (undo-tree-id28478 . -1) (undo-tree-id28479 . -1) (undo-tree-id28480 . -1) (undo-tree-id28481 . -1) (undo-tree-id28482 . -1) (undo-tree-id28483 . -1) (undo-tree-id28484 . -1) (undo-tree-id28485 . -1) (undo-tree-id28486 . -1) (undo-tree-id28487 . -1)) nil (26156 57935 561880 619000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 6386) (undo-tree-id28465 . -6) (undo-tree-id28466 . 1) (undo-tree-id28467 . -7) (undo-tree-id28468 . -7) (undo-tree-id28469 . -7) (undo-tree-id28470 . -7) (undo-tree-id28471 . -7) (undo-tree-id28472 . -7) (undo-tree-id28473 . -7) (undo-tree-id28474 . -7) (undo-tree-id28475 . -7) (undo-tree-id28476 . -6) (undo-tree-id28477 . -7)) nil (26156 57935 561852 706000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6413) (undo-tree-id28708 . -4) 6417 (6413 . 6417) (#("    " 0 4 (fontified nil)) . 6412) (undo-tree-id28709 . -4) (6411 . 6417) (t 26156 57935 645627 246000)) nil (26156 58067 970558 643000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7603 . 7604) (nil fontified nil 6413 . 7604) (6413 . 7604)) nil (26156 58067 970551 69000) 0 nil])
([nil nil ((6413 . 6417)) nil (26156 58067 970548 582000) 0 nil])
([nil nil ((6470 . 6471) (#("    " 0 4 (fontified t)) . 6470) (undo-tree-id28707 . -4) 6474) nil (26156 58067 970546 129000) 0 nil])
([nil nil ((6499 . 6500) (#("    " 0 4 (fontified t)) . 6499) 6507) nil (26156 58067 970541 316000) 0 nil])
([nil nil ((6527 . 6528) (#("    " 0 4 (fontified t)) . 6527) (undo-tree-id28706 . -3) 6530) nil (26156 58067 970537 867000) 0 nil])
([nil nil ((6529 . 6530) (#("    " 0 4 (fontified t)) . 6529)) nil (26156 58067 970532 805000) 0 nil])
([nil nil ((6572 . 6573) (#("    " 0 4 (fontified t)) . 6572) 6580) nil (26156 58067 970530 216000) 0 nil])
([nil nil ((6613 . 6617) 6617) nil (26156 58067 970527 844000) 0 nil])
([nil nil ((6649 . 6651) (#("            " 0 12 (fontified t)) . 6649) 6665) nil (26156 58067 970525 554000) 0 nil])
([nil nil ((6699 . 6701) (#("            " 0 12 (fontified t)) . 6699) 6719) nil (26156 58067 970522 498000) 0 nil])
([nil nil ((6753 . 6757) 6761) nil (26156 58067 970520 0) 0 nil])
([nil nil ((6822 . 6826) 6834) nil (26156 58067 970517 889000) 0 nil])
([nil nil ((6872 . 6876) 6888) nil (26156 58067 970515 79000) 0 nil])
([nil nil ((6898 . 6901) (#("                    " 0 20 (fontified t)) . 6898) 6934) nil (26156 58067 970512 726000) 0 nil])
([nil nil ((7084 . 7087) (#("                    " 0 20 (fontified t)) . 7084) 7104) nil (26156 58067 970509 934000) 0 nil])
([nil nil ((7089 . 7092) (#("                    " 0 20 (fontified t)) . 7089) 7113) nil (26156 58067 970507 60000) 0 nil])
([nil nil ((7134 . 7138) 7138) nil (26156 58067 970504 478000) 0 nil])
([nil nil ((7145 . 7148) (#("                    " 0 20 (fontified t)) . 7145) 7165) nil (26156 58067 970501 778000) 0 nil])
([nil nil ((7166 . 7170)) nil (26156 58067 970499 271000) 0 nil])
([nil nil ((7188 . 7192) 7187) nil (26156 58067 970497 451000) 0 nil])
([nil nil ((7209 . 7213) 7212) nil (26156 58067 970495 232000) 0 nil])
([nil nil ((7284 . 7288) 7291) nil (26156 58067 970493 54000) 0 nil])
([nil nil ((7306 . 7309) (#("                    " 0 20 (fontified t)) . 7306) 7333) nil (26156 58067 970490 21000) 0 nil])
([nil nil ((7355 . 7359) 7362) nil (26156 58067 970487 600000) 0 nil])
([nil nil ((7381 . 7385) (#("                            " 0 28 (fontified t)) . 7381) 7416) nil (26156 58067 970484 553000) 0 nil])
([nil nil ((7430 . 7434)) nil (26156 58067 970481 971000) 0 nil])
([nil nil ((7436 . 7439) (#("                    " 0 20 (fontified t)) . 7436) 7456) nil (26156 58067 970479 867000) 0 nil])
([nil nil ((7457 . 7461)) nil (26156 58067 970477 201000) 0 nil])
([nil nil ((7463 . 7465) (#("            " 0 12 (fontified t)) . 7463) 7475) nil (26156 58067 970474 434000) 0 nil])
([nil nil ((7475 . 7479)) nil (26156 58067 970471 795000) 0 nil])
([nil nil ((7481 . 7482) (#("    " 0 4 (fontified t)) . 7481) 7485) nil (26156 58067 970469 352000) 0 nil])
([nil nil ((7484 . 7488)) nil (26156 58067 970466 823000) 0 nil])
([nil nil ((7490 . 7494)) nil (26156 58067 970465 49000) 0 nil])
([nil nil ((#("matrix" 0 6 (fontified t face font-lock-variable-name-face)) . 6437) (undo-tree-id28704 . -5) (undo-tree-id28705 . -6)) nil (26156 58067 970462 385000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 6437) (undo-tree-id28702 . -1) (undo-tree-id28703 . -2)) nil (26156 58067 970456 456000) 0 nil])
([nil nil ((#("Matrix" 0 6 (fontified t face font-lock-type-face)) . 6442) (undo-tree-id28698 . -5) (undo-tree-id28699 . 6) (undo-tree-id28700 . -6) (undo-tree-id28701 . -6)) nil (26156 58067 970450 699000) 0 nil])
([nil nil ((6442 . 6446)) nil (26156 58067 970439 129000) 0 nil])
([nil nil ((#("matrix" 0 6 (fontified t)) . 6472) (undo-tree-id28696 . -5) (undo-tree-id28697 . -6)) nil (26156 58067 970436 750000) 0 nil])
([nil nil ((6474 . 6476) (6472 . 6474)) nil (26156 58067 970430 431000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6483) (undo-tree-id28660 . -1) (undo-tree-id28661 . -1) (undo-tree-id28662 . -1) (undo-tree-id28663 . -1) (undo-tree-id28664 . -1) (undo-tree-id28665 . -1) (undo-tree-id28666 . -1) (undo-tree-id28667 . -1) (undo-tree-id28668 . -1) (undo-tree-id28669 . -1) (undo-tree-id28670 . -1) (undo-tree-id28671 . -1) (undo-tree-id28672 . -1) (undo-tree-id28673 . -1) (undo-tree-id28674 . -1) (undo-tree-id28675 . -1) (undo-tree-id28676 . -1) (undo-tree-id28677 . -1) (undo-tree-id28678 . -1) (undo-tree-id28679 . -1) (undo-tree-id28680 . -1) (undo-tree-id28681 . -1) (undo-tree-id28682 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6484) (undo-tree-id28683 . -1) (undo-tree-id28684 . -1) (undo-tree-id28685 . -1) (undo-tree-id28686 . -1) (undo-tree-id28687 . -1) (undo-tree-id28688 . -1) (undo-tree-id28689 . -1) (undo-tree-id28690 . -1) (undo-tree-id28691 . -1) (undo-tree-id28692 . -1) (undo-tree-id28693 . -1) (undo-tree-id28694 . -1) (undo-tree-id28695 . -1) 6485) nil (26156 58067 970423 822000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6509) (undo-tree-id28624 . -1) (undo-tree-id28625 . -1) (undo-tree-id28626 . -1) (undo-tree-id28627 . -1) (undo-tree-id28628 . -1) (undo-tree-id28629 . -1) (undo-tree-id28630 . -1) (undo-tree-id28631 . -1) (undo-tree-id28632 . -1) (undo-tree-id28633 . -1) (undo-tree-id28634 . -1) (undo-tree-id28635 . -1) (undo-tree-id28636 . -1) (undo-tree-id28637 . -1) (undo-tree-id28638 . -1) (undo-tree-id28639 . -1) (undo-tree-id28640 . -1) (undo-tree-id28641 . -1) (undo-tree-id28642 . -1) (undo-tree-id28643 . -1) (undo-tree-id28644 . -1) (undo-tree-id28645 . -1) (undo-tree-id28646 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6510) (undo-tree-id28647 . -1) (undo-tree-id28648 . -1) (undo-tree-id28649 . -1) (undo-tree-id28650 . -1) (undo-tree-id28651 . -1) (undo-tree-id28652 . -1) (undo-tree-id28653 . -1) (undo-tree-id28654 . -1) (undo-tree-id28655 . -1) (undo-tree-id28656 . -1) (undo-tree-id28657 . -1) (undo-tree-id28658 . -1) (undo-tree-id28659 . -1) 6511) nil (26156 58067 970351 221000) 0 nil])
([nil nil ((#("matrix" 0 6 (fontified t)) . 6497) (undo-tree-id28622 . -5) (undo-tree-id28623 . -6)) nil (26156 58067 970280 459000) 0 nil])
([nil nil ((6499 . 6501) (6497 . 6499)) nil (26156 58067 970252 196000) 0 nil])
([nil nil ((#("matrix" 0 6 (fontified t)) . 6932) (undo-tree-id28713 . -5) (t 26156 58068 50091 35000)) nil (26156 58080 671930 742000) 0 nil])
([nil nil ((6932 . 6936)) nil (26156 58080 671926 8000) 0 nil])
([nil nil ((#("matrix" 0 6 (fontified t)) . 7365) (undo-tree-id28710 . -5) (undo-tree-id28711 . -6) (undo-tree-id28712 . -6)) nil (26156 58080 671920 967000) 0 nil])
([nil nil ((7365 . 7369)) nil (26156 58080 671888 128000) 0 nil])
([nil nil ((apply yas--snippet-revive 6947 6955 #s(yas--snippet nil nil #s(yas--exit 6955 nil) 149 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6955 nil) 149 nil nil nil nil)) (6947 . 6955) (#("unwrap()$0" 0 10 (fontified nil)) . 6947) (6947 . 6957) (#("un" 0 2 (fontified nil)) . 6947) (6947 . 6949) (#("unwrap()" 0 8 (fontified nil)) . -6947) (6947 . 6955) (#("un" 0 2 (fontified t)) . -6947) (undo-tree-id28714 . -1) (undo-tree-id28715 . -2) (undo-tree-id28716 . -2) (undo-tree-id28717 . -1) (undo-tree-id28718 . -1) (undo-tree-id28719 . -1) (undo-tree-id28720 . -1) (undo-tree-id28721 . -1) (undo-tree-id28722 . -1) (undo-tree-id28723 . -1) (undo-tree-id28724 . -1) (undo-tree-id28725 . -1) (undo-tree-id28726 . -1) (undo-tree-id28727 . -1) (undo-tree-id28728 . -1) (undo-tree-id28729 . -1) (undo-tree-id28730 . -1) (undo-tree-id28731 . -1) (undo-tree-id28732 . -1) (undo-tree-id28733 . -1) (undo-tree-id28734 . -1) (undo-tree-id28735 . -1) (undo-tree-id28736 . -1) (undo-tree-id28737 . -1) (undo-tree-id28738 . -1) (undo-tree-id28739 . -1) (undo-tree-id28740 . -1) (undo-tree-id28741 . -1) (undo-tree-id28742 . -1) (undo-tree-id28743 . -1) (undo-tree-id28744 . -1) (undo-tree-id28745 . -1) (undo-tree-id28746 . -1) (undo-tree-id28747 . -2) (undo-tree-id28748 . -2) (undo-tree-id28749 . -2) (undo-tree-id28750 . -2) (undo-tree-id28751 . -2) (undo-tree-id28752 . -2) (undo-tree-id28753 . -2) (undo-tree-id28754 . -2) (undo-tree-id28755 . -2) (undo-tree-id28756 . -2) (undo-tree-id28757 . -2) (undo-tree-id28758 . -2) (undo-tree-id28759 . -2) (undo-tree-id28760 . -2) (undo-tree-id28761 . -2) (undo-tree-id28762 . -2) (undo-tree-id28763 . -2) (undo-tree-id28764 . -2) (undo-tree-id28765 . -2) (undo-tree-id28766 . -2) (undo-tree-id28767 . -2) (undo-tree-id28768 . -2) (undo-tree-id28769 . -2) (undo-tree-id28770 . -2) (undo-tree-id28771 . -2) (undo-tree-id28772 . -2) (undo-tree-id28773 . -2) (undo-tree-id28774 . -2) (undo-tree-id28775 . -2) (undo-tree-id28776 . -2) (undo-tree-id28777 . -2) 6949 (6946 . 6949) (t 26156 58080 780514 650000)) nil (26156 58089 10457 796000) 0 nil])
([nil nil ((#("    fn make_bold(&mut self, square_length: usize) {
	// iterate with boxes

	

	for i in (0..self.width).step_by(square_length) {
	    for j in (0..self.height).step_by(square_length) {
		// now we have to work with boxes

		let mut one_exists = false;
		
		for ii in i..(i+square_length) {
		    for jj in j..(j+square_length) {
			println!(\"{ii} {jj}\");
			if self.get(ii, jj).unwrap() == 0 {
			    one_exists = true;
			    break;
			}
		    }

		    if one_exists {
			break;
		    }

		}

		if one_exists {
		    for ii in i..(i+square_length) {
			for jj in j..(j+square_length) {
			    self.set(ii, jj, 0);
			}
		    }
		    
		}

		
	    }
	}
	
    }

" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t face rust-ampersand-face) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 28 (fontified t) 28 41 (fontified t face font-lock-variable-name-face) 41 43 (fontified t) 43 48 (fontified t face font-lock-type-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-2-face)) 51 52 (fontified t) 52 53 (fontified t) 53 56 (fontified t face font-lock-comment-delimiter-face) 56 75 (fontified t face font-lock-comment-face) 75 76 (fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 80 (fontified t) 80 83 (fontified t face font-lock-keyword-face) 83 84 (fontified t) 84 85 (fontified t face font-lock-variable-name-face) 85 86 (fontified t) 86 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-3-face)) 90 91 (fontified t) 91 93 (fontified t) 93 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 103 (fontified t) 103 104 (fontified t face (rainbow-delimiters-depth-3-face)) 104 105 (fontified t) 105 112 (fontified t) 112 113 (fontified t face (rainbow-delimiters-depth-3-face)) 113 126 (fontified t) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t) 130 135 (fontified t) 135 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t) 139 140 (fontified t face font-lock-variable-name-face) 140 141 (fontified t) 141 143 (fontified t face font-lock-keyword-face) 143 144 (fontified t) 144 145 (fontified t face (rainbow-delimiters-depth-4-face)) 145 148 (fontified t) 148 152 (fontified t face font-lock-keyword-face) 152 153 (fontified t) 153 159 (fontified t) 159 160 (fontified t face (rainbow-delimiters-depth-4-face)) 160 161 (fontified t) 161 168 (fontified t) 168 169 (fontified t face (rainbow-delimiters-depth-4-face)) 169 182 (fontified t) 182 183 (fontified t face (rainbow-delimiters-depth-4-face)) 183 184 (fontified t) 184 185 (fontified t face (rainbow-delimiters-depth-4-face)) 185 186 (fontified t) 186 188 (fontified t) 188 191 (fontified t face font-lock-comment-delimiter-face) 191 222 (fontified t face font-lock-comment-face) 222 223 (fontified t) 223 225 (fontified t) 225 228 (fontified t face font-lock-keyword-face) 228 229 (fontified t) 229 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 243 (fontified t face font-lock-variable-name-face) 243 246 (fontified t) 246 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t) 252 253 (fontified t) 253 255 (fontified t) 255 256 (fontified t) 256 258 (fontified t) 258 261 (fontified t face font-lock-keyword-face) 261 262 (fontified t) 262 264 (fontified t face font-lock-variable-name-face) 264 265 (fontified t) 265 267 (fontified t face font-lock-keyword-face) 267 271 (fontified t) 271 272 (fontified t face (rainbow-delimiters-depth-5-face)) 272 274 (fontified t) 274 287 (fontified t) 287 288 (fontified t face (rainbow-delimiters-depth-5-face)) 288 289 (fontified t) 289 290 (fontified t face (rainbow-delimiters-depth-5-face)) 290 291 (fontified t) 291 297 (fontified t) 297 300 (fontified t face font-lock-keyword-face) 300 301 (fontified t) 301 303 (fontified t face font-lock-variable-name-face) 303 304 (fontified t) 304 306 (fontified t face font-lock-keyword-face) 306 310 (fontified t) 310 311 (fontified t face (rainbow-delimiters-depth-6-face)) 311 313 (fontified t) 313 326 (fontified t) 326 327 (fontified t face (rainbow-delimiters-depth-6-face)) 327 328 (fontified t) 328 329 (fontified t face (rainbow-delimiters-depth-6-face)) 329 330 (fontified t) 330 333 (fontified t) 333 341 (fontified t face rust-builtin-formatting-macro) 341 342 (fontified t face (rainbow-delimiters-depth-7-face)) 342 343 (fontified t face font-lock-string-face) 343 346 (fontified t face rust-string-interpolation) 346 347 (fontified t face rust-string-interpolation) 347 348 (fontified t face font-lock-string-face) 348 351 (fontified t face rust-string-interpolation) 351 352 (fontified t face rust-string-interpolation) 352 353 (fontified t face font-lock-string-face) 353 354 (fontified t face (rainbow-delimiters-depth-7-face)) 354 355 (fontified t) 355 356 (fontified t) 356 359 (fontified t) 359 361 (fontified t face font-lock-keyword-face) 361 362 (fontified t) 362 366 (fontified t face font-lock-keyword-face) 366 367 (fontified t) 367 370 (fontified t) 370 371 (fontified t face (rainbow-delimiters-depth-7-face)) 371 373 (fontified t) 373 377 (fontified t) 377 378 (fontified t face (rainbow-delimiters-depth-7-face)) 378 379 (fontified t) 379 385 (fontified t) 385 386 (fontified t face (rainbow-delimiters-depth-7-face)) 386 387 (fontified t face (rainbow-delimiters-depth-7-face)) 387 393 (fontified t) 393 394 (fontified t face (rainbow-delimiters-depth-7-face)) 394 395 (fontified t) 395 402 (fontified t) 402 415 (fontified t) 415 419 (fontified t face font-lock-keyword-face) 419 421 (fontified t) 421 428 (fontified t) 428 433 (fontified t face font-lock-keyword-face) 433 434 (fontified t) 434 435 (fontified t) 435 438 (fontified t) 438 439 (fontified t face (rainbow-delimiters-depth-7-face)) 439 440 (fontified t) 440 446 (fontified t) 446 447 (fontified t face (rainbow-delimiters-depth-6-face)) 447 448 (fontified t) 448 449 (fontified t) 449 455 (fontified t) 455 457 (fontified t face font-lock-keyword-face) 457 458 (fontified t) 458 469 (fontified t) 469 470 (fontified t face (rainbow-delimiters-depth-6-face)) 470 471 (fontified t) 471 474 (fontified t) 474 479 (fontified t face font-lock-keyword-face) 479 480 (fontified t) 480 481 (fontified t) 481 487 (fontified t) 487 488 (fontified t face (rainbow-delimiters-depth-6-face)) 488 489 (fontified t) 489 490 (fontified t) 490 492 (fontified t) 492 493 (fontified t face (rainbow-delimiters-depth-5-face)) 493 494 (fontified t) 494 495 (fontified t) 495 497 (fontified t) 497 499 (fontified t face font-lock-keyword-face) 499 500 (fontified t) 500 511 (fontified t) 511 512 (fontified t face (rainbow-delimiters-depth-5-face)) 512 513 (fontified t) 513 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 525 (fontified t face font-lock-variable-name-face) 525 526 (fontified t) 526 528 (fontified t face font-lock-keyword-face) 528 532 (fontified t) 532 533 (fontified t face (rainbow-delimiters-depth-6-face)) 533 548 (fontified t) 548 549 (fontified t face (rainbow-delimiters-depth-6-face)) 549 550 (fontified t) 550 551 (fontified t face (rainbow-delimiters-depth-6-face)) 551 552 (fontified t) 552 555 (fontified t) 555 558 (fontified t face font-lock-keyword-face) 558 559 (fontified t) 559 561 (fontified t face font-lock-variable-name-face) 561 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 568 (fontified t) 568 569 (fontified t face (rainbow-delimiters-depth-7-face)) 569 584 (fontified t) 584 585 (fontified t face (rainbow-delimiters-depth-7-face)) 585 586 (fontified t) 586 587 (fontified t face (rainbow-delimiters-depth-7-face)) 587 588 (fontified t) 588 595 (fontified t) 595 599 (fontified t face font-lock-keyword-face) 599 603 (fontified t) 603 604 (fontified t face (rainbow-delimiters-depth-8-face)) 604 613 (fontified t) 613 614 (fontified t face (rainbow-delimiters-depth-8-face)) 614 616 (fontified t) 616 619 (fontified t) 619 620 (fontified t face (rainbow-delimiters-depth-7-face)) 620 621 (fontified t) 621 627 (fontified t) 627 628 (fontified t face (rainbow-delimiters-depth-6-face)) 628 629 (fontified t) 629 635 (fontified t) 635 636 (fontified t) 636 638 (fontified t) 638 639 (fontified t face (rainbow-delimiters-depth-5-face)) 639 640 (fontified t) 640 641 (fontified t) 641 643 (fontified t) 643 644 (fontified t) 644 649 (fontified t) 649 650 (fontified t face (rainbow-delimiters-depth-4-face)) 650 651 (fontified t) 651 652 (fontified t) 652 653 (fontified t face (rainbow-delimiters-depth-3-face)) 653 654 (fontified t) 654 655 (fontified t) 655 656 (fontified t) 656 660 (fontified t) 660 661 (fontified t face (rainbow-delimiters-depth-2-face)) 661 662 (fontified t) 662 663 (fontified t)) . 5750) (undo-tree-id28778 . -662) (undo-tree-id28779 . -662) (undo-tree-id28780 . -662) (undo-tree-id28781 . -640) (undo-tree-id28782 . -50) (undo-tree-id28783 . -640) (undo-tree-id28784 . -640) (undo-tree-id28785 . -500) (undo-tree-id28786 . -640) (undo-tree-id28787 . -513) (undo-tree-id28788 . -636) (undo-tree-id28789 . -636) (undo-tree-id28790 . -638) (undo-tree-id28791 . -649) (undo-tree-id28792 . -640) (undo-tree-id28793 . -640) (undo-tree-id28794 . -640) (undo-tree-id28795 . -640) (undo-tree-id28796 . -640) (undo-tree-id28797 . -640) (undo-tree-id28798 . -640) (undo-tree-id28799 . -640) (undo-tree-id28800 . -640) (undo-tree-id28801 . -638) (undo-tree-id28802 . -638) (undo-tree-id28803 . -638) (undo-tree-id28804 . -638) (undo-tree-id28805 . -638) (undo-tree-id28806 . -638) (undo-tree-id28807 . -638) (undo-tree-id28808 . -638) (undo-tree-id28809 . -638) (undo-tree-id28810 . -638) (undo-tree-id28811 . -638) (undo-tree-id28812 . -638) (undo-tree-id28813 . -638) (undo-tree-id28814 . -638) (undo-tree-id28815 . -638) (undo-tree-id28816 . -638) (undo-tree-id28817 . -638) (undo-tree-id28818 . -638) (undo-tree-id28819 . -638) (undo-tree-id28820 . -638) (undo-tree-id28821 . -638) (undo-tree-id28822 . -638) (undo-tree-id28823 . -638) (undo-tree-id28824 . -638) (undo-tree-id28825 . -638) (undo-tree-id28826 . -638) (undo-tree-id28827 . -638) (undo-tree-id28828 . -638) (undo-tree-id28829 . -638) (undo-tree-id28830 . -638) (undo-tree-id28831 . -638) (undo-tree-id28832 . -638) (undo-tree-id28833 . -638) (undo-tree-id28834 . -638) (undo-tree-id28835 . -638) (undo-tree-id28836 . -638) (undo-tree-id28837 . -638) (undo-tree-id28838 . -638) (undo-tree-id28839 . -638) (undo-tree-id28840 . -638) (undo-tree-id28841 . -638) (undo-tree-id28842 . -638) (undo-tree-id28843 . -638) (undo-tree-id28844 . -640) (undo-tree-id28845 . -640) (undo-tree-id28846 . -640) (undo-tree-id28847 . -640) (undo-tree-id28848 . -640) (undo-tree-id28849 . -640) (undo-tree-id28850 . -640) (undo-tree-id28851 . -640) (undo-tree-id28852 . -640) (undo-tree-id28853 . -642) (undo-tree-id28854 . -642) (undo-tree-id28855 . -642) (undo-tree-id28856 . -642) (undo-tree-id28857 . -642) (undo-tree-id28858 . -642) (undo-tree-id28859 . -642) (undo-tree-id28860 . -642) (undo-tree-id28861 . -642) (undo-tree-id28862 . -649) (undo-tree-id28863 . -649) (undo-tree-id28864 . -649) (undo-tree-id28865 . -649) (undo-tree-id28866 . -649) (undo-tree-id28867 . -649) (undo-tree-id28868 . -649) (undo-tree-id28869 . -649) (undo-tree-id28870 . -649) (undo-tree-id28871 . -652) (undo-tree-id28872 . -652) (undo-tree-id28873 . -652) (undo-tree-id28874 . -652) (undo-tree-id28875 . -652) (undo-tree-id28876 . -652) (undo-tree-id28877 . -652) (undo-tree-id28878 . -652) (undo-tree-id28879 . -652) (undo-tree-id28880 . -654) (undo-tree-id28881 . -654) (undo-tree-id28882 . -654) (undo-tree-id28883 . -654) (undo-tree-id28884 . -654) (undo-tree-id28885 . -654) (undo-tree-id28886 . -654) (undo-tree-id28887 . -654) (undo-tree-id28888 . -654) (undo-tree-id28889 . -660) (undo-tree-id28890 . -660) (undo-tree-id28891 . -660) (undo-tree-id28892 . -660) (undo-tree-id28893 . -660) (undo-tree-id28894 . -660) (undo-tree-id28895 . -660) (undo-tree-id28896 . -660) (undo-tree-id28897 . -660) (undo-tree-id28898 . -662) (undo-tree-id28899 . -662) (undo-tree-id28900 . -662) (undo-tree-id28901 . -662) (undo-tree-id28902 . -662) (undo-tree-id28903 . -662) (undo-tree-id28904 . -662) (undo-tree-id28905 . -662) (undo-tree-id28906 . -662) (undo-tree-id28907 . -663) (undo-tree-id28908 . -662) (undo-tree-id28909 . -662) (undo-tree-id28910 . -662) (undo-tree-id28911 . -662) (undo-tree-id28912 . -662) (undo-tree-id28913 . -662) (undo-tree-id28914 . -662) (undo-tree-id28915 . -662) (undo-tree-id28916 . -662) (undo-tree-id28917 . -662) (undo-tree-id28918 . -662) (undo-tree-id28919 . -662) (undo-tree-id28920 . -656) (undo-tree-id28921 . -656) (undo-tree-id28922 . -656) (undo-tree-id28923 . -656) (undo-tree-id28924 . -656) (undo-tree-id28925 . -656) (undo-tree-id28926 . -656) (undo-tree-id28927 . -656) (undo-tree-id28928 . -656) (undo-tree-id28929 . -656) (undo-tree-id28930 . -656) (undo-tree-id28931 . -656) (undo-tree-id28932 . -656) (undo-tree-id28933 . -656) (undo-tree-id28934 . -656) (undo-tree-id28935 . -656) (undo-tree-id28936 . -656) (undo-tree-id28937 . -656) (undo-tree-id28938 . -656) (undo-tree-id28939 . -656) (undo-tree-id28940 . -656) (undo-tree-id28941 . -656) (undo-tree-id28942 . -656) (undo-tree-id28943 . -656) (undo-tree-id28944 . -656) (undo-tree-id28945 . -656) (undo-tree-id28946 . -656) (undo-tree-id28947 . -656) (undo-tree-id28948 . -656) (undo-tree-id28949 . -656) (undo-tree-id28950 . -656) (undo-tree-id28951 . -654) (undo-tree-id28952 . -654) (undo-tree-id28953 . -654) (undo-tree-id28954 . -654) (undo-tree-id28955 . -654) (undo-tree-id28956 . -654) (undo-tree-id28957 . -654) (undo-tree-id28958 . -654) (undo-tree-id28959 . -654) (undo-tree-id28960 . -651) (undo-tree-id28961 . -651) (undo-tree-id28962 . -651) (undo-tree-id28963 . -651) (undo-tree-id28964 . -651) (undo-tree-id28965 . -651) (undo-tree-id28966 . -651) (undo-tree-id28967 . -651) (undo-tree-id28968 . -651) (undo-tree-id28969 . -644) (undo-tree-id28970 . -644) (undo-tree-id28971 . -644) (undo-tree-id28972 . -644) (undo-tree-id28973 . -644) (undo-tree-id28974 . -644) (undo-tree-id28975 . -644) (undo-tree-id28976 . -644) (undo-tree-id28977 . -644) (undo-tree-id28978 . -641) (undo-tree-id28979 . -641) (undo-tree-id28980 . -641) (undo-tree-id28981 . -641) (undo-tree-id28982 . -641) (undo-tree-id28983 . -641) (undo-tree-id28984 . -641) (undo-tree-id28985 . -641) (undo-tree-id28986 . -641) (undo-tree-id28987 . -640) (undo-tree-id28988 . -640) (undo-tree-id28989 . -640) (undo-tree-id28990 . -640) (undo-tree-id28991 . -640) (undo-tree-id28992 . -640) (undo-tree-id28993 . -640) (undo-tree-id28994 . -640) (undo-tree-id28995 . -640) (undo-tree-id28996 . -636) (undo-tree-id28997 . -636) (undo-tree-id28998 . -636) (undo-tree-id28999 . -636) (undo-tree-id29000 . -636) (undo-tree-id29001 . -636) (undo-tree-id29002 . -636) (undo-tree-id29003 . -636) (undo-tree-id29004 . -636) (undo-tree-id29005 . -629) (undo-tree-id29006 . -629) (undo-tree-id29007 . -629) (undo-tree-id29008 . -629) (undo-tree-id29009 . -629) (undo-tree-id29010 . -629) (undo-tree-id29011 . -629) (undo-tree-id29012 . -629) (undo-tree-id29013 . -629) (undo-tree-id29014 . -621) (undo-tree-id29015 . -621) (undo-tree-id29016 . -621) (undo-tree-id29017 . -621) (undo-tree-id29018 . -621) (undo-tree-id29019 . -621) (undo-tree-id29020 . -621) (undo-tree-id29021 . -621) (undo-tree-id29022 . -621) (undo-tree-id29023 . -616) (undo-tree-id29024 . -616) (undo-tree-id29025 . -616) (undo-tree-id29026 . -616) (undo-tree-id29027 . -616) (undo-tree-id29028 . -616) (undo-tree-id29029 . -616) (undo-tree-id29030 . -616) (undo-tree-id29031 . -616) (undo-tree-id29032 . -588) (undo-tree-id29033 . -588) (undo-tree-id29034 . -588) (undo-tree-id29035 . -588) (undo-tree-id29036 . -588) (undo-tree-id29037 . -588) (undo-tree-id29038 . -588) (undo-tree-id29039 . -588) (undo-tree-id29040 . -588) (undo-tree-id29041 . -552) (undo-tree-id29042 . -552) (undo-tree-id29043 . -552) (undo-tree-id29044 . -552) (undo-tree-id29045 . -552) (undo-tree-id29046 . -552) (undo-tree-id29047 . -552) (undo-tree-id29048 . -552) (undo-tree-id29049 . -552) (undo-tree-id29050 . -513) (undo-tree-id29051 . -513) (undo-tree-id29052 . -513) (undo-tree-id29053 . -513) (undo-tree-id29054 . -513) (undo-tree-id29055 . -513) (undo-tree-id29056 . -513) (undo-tree-id29057 . -513) (undo-tree-id29058 . -513) (undo-tree-id29059 . -495) (undo-tree-id29060 . -495) (undo-tree-id29061 . -495) (undo-tree-id29062 . -495) (undo-tree-id29063 . -495) (undo-tree-id29064 . -495) (undo-tree-id29065 . -495) (undo-tree-id29066 . -495) (undo-tree-id29067 . -495) (undo-tree-id29068 . -494) (undo-tree-id29069 . -494) (undo-tree-id29070 . -494) (undo-tree-id29071 . -494) (undo-tree-id29072 . -494) (undo-tree-id29073 . -494) (undo-tree-id29074 . -494) (undo-tree-id29075 . -494) (undo-tree-id29076 . -494) (undo-tree-id29077 . -490) (undo-tree-id29078 . -490) (undo-tree-id29079 . -490) (undo-tree-id29080 . -490) (undo-tree-id29081 . -490) (undo-tree-id29082 . -490) (undo-tree-id29083 . -490) (undo-tree-id29084 . -490) (undo-tree-id29085 . -490) (undo-tree-id29086 . -489) (undo-tree-id29087 . -489) (undo-tree-id29088 . -489) (undo-tree-id29089 . -489) (undo-tree-id29090 . -489) (undo-tree-id29091 . -489) (undo-tree-id29092 . -489) (undo-tree-id29093 . -489) (undo-tree-id29094 . -489) (undo-tree-id29095 . -481) (undo-tree-id29096 . -481) (undo-tree-id29097 . -481) (undo-tree-id29098 . -481) (undo-tree-id29099 . -481) (undo-tree-id29100 . -481) (undo-tree-id29101 . -481) (undo-tree-id29102 . -481) (undo-tree-id29103 . -481) (undo-tree-id29104 . -471) (undo-tree-id29105 . -471) (undo-tree-id29106 . -471) (undo-tree-id29107 . -471) (undo-tree-id29108 . -471) (undo-tree-id29109 . -471) (undo-tree-id29110 . -471) (undo-tree-id29111 . -471) (undo-tree-id29112 . -471) (undo-tree-id29113 . -449) (undo-tree-id29114 . -449) (undo-tree-id29115 . -449) (undo-tree-id29116 . -449) (undo-tree-id29117 . -449) (undo-tree-id29118 . -449) (undo-tree-id29119 . -449) (undo-tree-id29120 . -449) (undo-tree-id29121 . -449) (undo-tree-id29122 . -448) (undo-tree-id29123 . -448) (undo-tree-id29124 . -448) (undo-tree-id29125 . -448) (undo-tree-id29126 . -448) (undo-tree-id29127 . -448) (undo-tree-id29128 . -448) (undo-tree-id29129 . -448) (undo-tree-id29130 . -448) (undo-tree-id29131 . -440) (undo-tree-id29132 . -440) (undo-tree-id29133 . -440) (undo-tree-id29134 . -440) (undo-tree-id29135 . -440) (undo-tree-id29136 . -440) (undo-tree-id29137 . -440) (undo-tree-id29138 . -440) (undo-tree-id29139 . -440) (undo-tree-id29140 . -435) (undo-tree-id29141 . -435) (undo-tree-id29142 . -435) (undo-tree-id29143 . -435) (undo-tree-id29144 . -435) (undo-tree-id29145 . -435) (undo-tree-id29146 . -435) (undo-tree-id29147 . -435) (undo-tree-id29148 . -435) (undo-tree-id29149 . -421) (undo-tree-id29150 . -421) (undo-tree-id29151 . -421) (undo-tree-id29152 . -421) (undo-tree-id29153 . -421) (undo-tree-id29154 . -421) (undo-tree-id29155 . -421) (undo-tree-id29156 . -421) (undo-tree-id29157 . -421) (undo-tree-id29158 . -395) (undo-tree-id29159 . -395) (undo-tree-id29160 . -395) (undo-tree-id29161 . -395) (undo-tree-id29162 . -395) (undo-tree-id29163 . -395) (undo-tree-id29164 . -395) (undo-tree-id29165 . -395) (undo-tree-id29166 . -395) (undo-tree-id29167 . -356) (undo-tree-id29168 . -356) (undo-tree-id29169 . -356) (undo-tree-id29170 . -356) (undo-tree-id29171 . -356) (undo-tree-id29172 . -356) (undo-tree-id29173 . -356) (undo-tree-id29174 . -356) (undo-tree-id29175 . -356) (undo-tree-id29176 . -330) (undo-tree-id29177 . -330) (undo-tree-id29178 . -330) (undo-tree-id29179 . -330) (undo-tree-id29180 . -330) (undo-tree-id29181 . -330) (undo-tree-id29182 . -330) (undo-tree-id29183 . -330) (undo-tree-id29184 . -330) (undo-tree-id29185 . -291) (undo-tree-id29186 . -291) (undo-tree-id29187 . -291) (undo-tree-id29188 . -291) (undo-tree-id29189 . -291) (undo-tree-id29190 . -291) (undo-tree-id29191 . -291) (undo-tree-id29192 . -291) (undo-tree-id29193 . -291) (undo-tree-id29194 . -291) (undo-tree-id29195 . -256) (undo-tree-id29196 . -256) (undo-tree-id29197 . -256) (undo-tree-id29198 . -256) (undo-tree-id29199 . -256) (undo-tree-id29200 . -256) (undo-tree-id29201 . -256) (undo-tree-id29202 . -256) (undo-tree-id29203 . -256) (undo-tree-id29204 . -253) (undo-tree-id29205 . -253) (undo-tree-id29206 . -253) (undo-tree-id29207 . -253) (undo-tree-id29208 . -253) (undo-tree-id29209 . -253) (undo-tree-id29210 . -253) (undo-tree-id29211 . -253) (undo-tree-id29212 . -253) (undo-tree-id29213 . -223) (undo-tree-id29214 . -223) (undo-tree-id29215 . -223) (undo-tree-id29216 . -223) (undo-tree-id29217 . -223) (undo-tree-id29218 . -223) (undo-tree-id29219 . -223) (undo-tree-id29220 . -223) (undo-tree-id29221 . -223) (undo-tree-id29222 . -222) (undo-tree-id29223 . -222) (undo-tree-id29224 . -222) (undo-tree-id29225 . -222) (undo-tree-id29226 . -222) (undo-tree-id29227 . -222) (undo-tree-id29228 . -222) (undo-tree-id29229 . -222) (undo-tree-id29230 . -222) (undo-tree-id29231 . -186) (undo-tree-id29232 . -186) (undo-tree-id29233 . -186) (undo-tree-id29234 . -186) (undo-tree-id29235 . -186) (undo-tree-id29236 . -186) (undo-tree-id29237 . -186) (undo-tree-id29238 . -186) (undo-tree-id29239 . -186) (undo-tree-id29240 . -130) (undo-tree-id29241 . -130) (undo-tree-id29242 . -130) (undo-tree-id29243 . -130) (undo-tree-id29244 . -130) (undo-tree-id29245 . -130) (undo-tree-id29246 . -130) (undo-tree-id29247 . -130) (undo-tree-id29248 . -130) (undo-tree-id29249 . -79) (undo-tree-id29250 . -79) (undo-tree-id29251 . -79) (undo-tree-id29252 . -79) (undo-tree-id29253 . -79) (undo-tree-id29254 . -79) (undo-tree-id29255 . -79) (undo-tree-id29256 . -79) (undo-tree-id29257 . -79) (undo-tree-id29258 . -78) (undo-tree-id29259 . -78) (undo-tree-id29260 . -78) (undo-tree-id29261 . -78) (undo-tree-id29262 . -78) (undo-tree-id29263 . -78) (undo-tree-id29264 . -78) (undo-tree-id29265 . -78) (undo-tree-id29266 . -78) (undo-tree-id29267 . -76) (undo-tree-id29268 . -76) (undo-tree-id29269 . -76) (undo-tree-id29270 . -76) (undo-tree-id29271 . -76) (undo-tree-id29272 . -76) (undo-tree-id29273 . -76) (undo-tree-id29274 . -76) (undo-tree-id29275 . -76) (undo-tree-id29276 . -75) (undo-tree-id29277 . -75) (undo-tree-id29278 . -75) (undo-tree-id29279 . -75) (undo-tree-id29280 . -75) (undo-tree-id29281 . -75) (undo-tree-id29282 . -75) (undo-tree-id29283 . -75) (undo-tree-id29284 . -75) (undo-tree-id29285 . -52) (undo-tree-id29286 . -52) (undo-tree-id29287 . -52) (undo-tree-id29288 . -52) (undo-tree-id29289 . -52) (undo-tree-id29290 . -52) (undo-tree-id29291 . -52) (undo-tree-id29292 . -52) (undo-tree-id29293 . -52) (undo-tree-id29294 . -663) (t 26156 58089 118075 93000)) nil (26156 58099 39819 100000) 0 nil])
([nil nil ((#(".make_bold(3);" 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 7442) (t 26156 58099 123920 242000)) nil (26156 58118 444180 971000) 0 nil])
([nil nil ((#("m" 0 1 (fontified nil)) . 7461) (7460 . 7461) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7460 7461 nil nil nil t #s(yas--exit 7462 nil))) #s(yas--exit 7462 nil) 150 nil #s(yas--field 1 7460 7461 nil nil nil t #s(yas--exit 7462 nil)) nil nil)) (7443 . 7462) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 7443) (7443 . 7469) (#("sa" 0 2 (fontified nil)) . 7443) (7443 . 7445) (#("separate_and_set(…)" 0 19 (fontified nil)) . -7443) (7443 . 7462) (#("sa" 0 2 (fontified t)) . -7443) (undo-tree-id29647 . -2) (undo-tree-id29648 . -2) (undo-tree-id29649 . -2) 7445 (7444 . 7445) (7442 . 7444)) nil (26156 58118 444175 774000) 0 nil])
([nil nil ((apply yas--snippet-revive 7443 7462 #s(yas--snippet nil (#s(yas--field 1 7460 7461 nil nil nil t #s(yas--exit 7462 nil))) #s(yas--exit 7462 nil) 150 nil #s(yas--field 1 7460 7461 nil nil nil t #s(yas--exit 7462 nil)) nil nil))) nil (26156 58118 444164 658000) 0 nil])
([nil nil ((7462 . 7463)) nil (26156 58118 444162 994000) 0 nil])
([nil nil ((#("make" 0 4 (fontified t)) . 7475) (undo-tree-id29646 . -3)) nil (26156 58118 444161 44000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7475) (undo-tree-id29645 . -1)) nil (26156 58118 444157 69000) 0 nil])
([nil nil ((#("bold" 0 4 (fontified t)) . 7475) (undo-tree-id29642 . -3) (undo-tree-id29643 . -4) (undo-tree-id29644 . -4)) nil (26156 58118 444152 638000) 0 nil])
([nil nil ((7475 . 7491) (#("sa" 0 2 (fontified nil)) . 7475) (7475 . 7477) (#("separate_and_set" 0 16 (fontified nil)) . -7475) (7475 . 7491) (#("sa" 0 2 (fontified t)) . -7475) (undo-tree-id29296 . -2) (undo-tree-id29297 . -2) (undo-tree-id29298 . -1) (undo-tree-id29299 . -1) (undo-tree-id29300 . -1) (undo-tree-id29301 . -1) (undo-tree-id29302 . -1) (undo-tree-id29303 . -1) (undo-tree-id29304 . -1) (undo-tree-id29305 . -1) (undo-tree-id29306 . -1) (undo-tree-id29307 . -1) (undo-tree-id29308 . -1) (undo-tree-id29309 . -1) (undo-tree-id29310 . -1) (undo-tree-id29311 . -1) (undo-tree-id29312 . -1) (undo-tree-id29313 . -1) (undo-tree-id29314 . -1) (undo-tree-id29315 . -1) (undo-tree-id29316 . -1) (undo-tree-id29317 . -1) (undo-tree-id29318 . -1) (undo-tree-id29319 . -1) (undo-tree-id29320 . -1) (undo-tree-id29321 . -1) (undo-tree-id29322 . -1) (undo-tree-id29323 . -1) (undo-tree-id29324 . -1) (undo-tree-id29325 . -1) (undo-tree-id29326 . -1) (undo-tree-id29327 . -1) (undo-tree-id29328 . -1) (undo-tree-id29329 . -1) (undo-tree-id29330 . -1) (undo-tree-id29331 . -1) (undo-tree-id29332 . -1) (undo-tree-id29333 . -1) (undo-tree-id29334 . -1) (undo-tree-id29335 . -1) (undo-tree-id29336 . -1) (undo-tree-id29337 . -1) (undo-tree-id29338 . -1) (undo-tree-id29339 . -1) (undo-tree-id29340 . -1) (undo-tree-id29341 . -1) (undo-tree-id29342 . -1) (undo-tree-id29343 . -1) (undo-tree-id29344 . -1) (undo-tree-id29345 . -1) (undo-tree-id29346 . -1) (undo-tree-id29347 . -1) (undo-tree-id29348 . -1) (undo-tree-id29349 . -1) (undo-tree-id29350 . -1) (undo-tree-id29351 . -1) (undo-tree-id29352 . -1) (undo-tree-id29353 . -1) (undo-tree-id29354 . -1) (undo-tree-id29355 . -1) (undo-tree-id29356 . -1) (undo-tree-id29357 . -1) (undo-tree-id29358 . -1) (undo-tree-id29359 . -1) (undo-tree-id29360 . -1) (undo-tree-id29361 . -1) (undo-tree-id29362 . -1) (undo-tree-id29363 . -1) (undo-tree-id29364 . -1) (undo-tree-id29365 . -1) (undo-tree-id29366 . -1) (undo-tree-id29367 . -1) (undo-tree-id29368 . -1) (undo-tree-id29369 . -1) (undo-tree-id29370 . -1) (undo-tree-id29371 . -1) (undo-tree-id29372 . -1) (undo-tree-id29373 . -1) (undo-tree-id29374 . -1) (undo-tree-id29375 . -1) (undo-tree-id29376 . -1) (undo-tree-id29377 . -1) (undo-tree-id29378 . -1) (undo-tree-id29379 . -1) (undo-tree-id29380 . -1) (undo-tree-id29381 . -1) (undo-tree-id29382 . -1) (undo-tree-id29383 . -1) (undo-tree-id29384 . -1) (undo-tree-id29385 . -1) (undo-tree-id29386 . -1) (undo-tree-id29387 . -1) (undo-tree-id29388 . -1) (undo-tree-id29389 . -1) (undo-tree-id29390 . -1) (undo-tree-id29391 . -1) (undo-tree-id29392 . -1) (undo-tree-id29393 . -1) (undo-tree-id29394 . -1) (undo-tree-id29395 . -1) (undo-tree-id29396 . -1) (undo-tree-id29397 . -1) (undo-tree-id29398 . -1) (undo-tree-id29399 . -1) (undo-tree-id29400 . -1) (undo-tree-id29401 . -1) (undo-tree-id29402 . -1) (undo-tree-id29403 . -1) (undo-tree-id29404 . -1) (undo-tree-id29405 . -1) (undo-tree-id29406 . -1) (undo-tree-id29407 . -1) (undo-tree-id29408 . -1) (undo-tree-id29409 . -1) (undo-tree-id29410 . -1) (undo-tree-id29411 . -1) (undo-tree-id29412 . -1) (undo-tree-id29413 . -1) (undo-tree-id29414 . -1) (undo-tree-id29415 . -1) (undo-tree-id29416 . -1) (undo-tree-id29417 . -1) (undo-tree-id29418 . -1) (undo-tree-id29419 . -1) (undo-tree-id29420 . -1) (undo-tree-id29421 . -1) (undo-tree-id29422 . -1) (undo-tree-id29423 . -1) (undo-tree-id29424 . -1) (undo-tree-id29425 . -1) (undo-tree-id29426 . -1) (undo-tree-id29427 . -1) (undo-tree-id29428 . -2) (undo-tree-id29429 . -2) (undo-tree-id29430 . -2) (undo-tree-id29431 . -2) (undo-tree-id29432 . -2) (undo-tree-id29433 . -2) (undo-tree-id29434 . -2) (undo-tree-id29435 . -2) (undo-tree-id29436 . -2) (undo-tree-id29437 . -2) (undo-tree-id29438 . -2) (undo-tree-id29439 . -2) (undo-tree-id29440 . -2) (undo-tree-id29441 . -2) (undo-tree-id29442 . -2) (undo-tree-id29443 . -2) (undo-tree-id29444 . -2) (undo-tree-id29445 . -2) (undo-tree-id29446 . -2) (undo-tree-id29447 . -2) (undo-tree-id29448 . -2) (undo-tree-id29449 . -2) (undo-tree-id29450 . -2) (undo-tree-id29451 . -2) (undo-tree-id29452 . -2) (undo-tree-id29453 . -2) (undo-tree-id29454 . -2) (undo-tree-id29455 . -2) (undo-tree-id29456 . -2) (undo-tree-id29457 . -2) (undo-tree-id29458 . -2) (undo-tree-id29459 . -2) (undo-tree-id29460 . -2) (undo-tree-id29461 . -2) (undo-tree-id29462 . -2) (undo-tree-id29463 . -2) (undo-tree-id29464 . -2) (undo-tree-id29465 . -2) (undo-tree-id29466 . -2) (undo-tree-id29467 . -2) (undo-tree-id29468 . -2) (undo-tree-id29469 . -2) (undo-tree-id29470 . -2) (undo-tree-id29471 . -2) (undo-tree-id29472 . -2) (undo-tree-id29473 . -2) (undo-tree-id29474 . -2) (undo-tree-id29475 . -2) (undo-tree-id29476 . -2) (undo-tree-id29477 . -2) (undo-tree-id29478 . -2) (undo-tree-id29479 . -2) (undo-tree-id29480 . -2) (undo-tree-id29481 . -2) (undo-tree-id29482 . -2) (undo-tree-id29483 . -2) (undo-tree-id29484 . -2) (undo-tree-id29485 . -2) (undo-tree-id29486 . -2) (undo-tree-id29487 . -2) (undo-tree-id29488 . -2) (undo-tree-id29489 . -2) (undo-tree-id29490 . -2) (undo-tree-id29491 . -2) (undo-tree-id29492 . -2) (undo-tree-id29493 . -2) (undo-tree-id29494 . -2) (undo-tree-id29495 . -2) (undo-tree-id29496 . -2) (undo-tree-id29497 . -2) (undo-tree-id29498 . -2) (undo-tree-id29499 . -2) (undo-tree-id29500 . -2) (undo-tree-id29501 . -2) (undo-tree-id29502 . -2) (undo-tree-id29503 . -2) (undo-tree-id29504 . -2) (undo-tree-id29505 . -2) (undo-tree-id29506 . -2) (undo-tree-id29507 . -2) (undo-tree-id29508 . -2) (undo-tree-id29509 . -2) (undo-tree-id29510 . -2) (undo-tree-id29511 . -2) (undo-tree-id29512 . -2) (undo-tree-id29513 . -2) (undo-tree-id29514 . -2) (undo-tree-id29515 . -2) (undo-tree-id29516 . -2) (undo-tree-id29517 . -2) (undo-tree-id29518 . -2) (undo-tree-id29519 . -2) (undo-tree-id29520 . -2) (undo-tree-id29521 . -2) (undo-tree-id29522 . -2) (undo-tree-id29523 . -2) (undo-tree-id29524 . -2) (undo-tree-id29525 . -2) (undo-tree-id29526 . -2) (undo-tree-id29527 . -2) (undo-tree-id29528 . -2) (undo-tree-id29529 . -2) (undo-tree-id29530 . -2) (undo-tree-id29531 . -2) 7477 (7476 . 7477) (#("a" 0 1 (fontified t)) . -7476) (undo-tree-id29532 . -1) (undo-tree-id29533 . -1) (undo-tree-id29534 . -1) (undo-tree-id29535 . -1) (undo-tree-id29536 . -1) (undo-tree-id29537 . -1) (undo-tree-id29538 . -1) (undo-tree-id29539 . -1) (undo-tree-id29540 . -1) (undo-tree-id29541 . -1) (undo-tree-id29542 . -1) (undo-tree-id29543 . -1) (undo-tree-id29544 . -1) (undo-tree-id29545 . -1) (undo-tree-id29546 . -1) (undo-tree-id29547 . -1) (undo-tree-id29548 . -1) (undo-tree-id29549 . -1) (undo-tree-id29550 . -1) (undo-tree-id29551 . -1) (undo-tree-id29552 . -1) (undo-tree-id29553 . -1) (undo-tree-id29554 . -1) (undo-tree-id29555 . -1) (undo-tree-id29556 . -1) (undo-tree-id29557 . -1) (undo-tree-id29558 . -1) (undo-tree-id29559 . -1) (undo-tree-id29560 . -1) (undo-tree-id29561 . -1) (undo-tree-id29562 . -1) (undo-tree-id29563 . -1) (undo-tree-id29564 . -1) (undo-tree-id29565 . -1) (undo-tree-id29566 . -1) (undo-tree-id29567 . -1) (undo-tree-id29568 . -1) (undo-tree-id29569 . -1) (undo-tree-id29570 . -1) (undo-tree-id29571 . -1) (undo-tree-id29572 . -1) (undo-tree-id29573 . -1) (undo-tree-id29574 . -1) (undo-tree-id29575 . -1) (undo-tree-id29576 . -1) (undo-tree-id29577 . -1) (undo-tree-id29578 . -1) (undo-tree-id29579 . -1) (undo-tree-id29580 . -1) (undo-tree-id29581 . -1) (undo-tree-id29582 . -1) (undo-tree-id29583 . -1) (undo-tree-id29584 . -1) (undo-tree-id29585 . -1) (undo-tree-id29586 . -1) (undo-tree-id29587 . -1) (undo-tree-id29588 . -1) (undo-tree-id29589 . -1) (undo-tree-id29590 . -1) (undo-tree-id29591 . -1) (undo-tree-id29592 . -1) (undo-tree-id29593 . -1) (undo-tree-id29594 . -1) (undo-tree-id29595 . -1) (undo-tree-id29596 . -1) (undo-tree-id29597 . -1) (undo-tree-id29598 . -1) (undo-tree-id29599 . -1) (undo-tree-id29600 . -1) (undo-tree-id29601 . -1) (undo-tree-id29602 . -1) (undo-tree-id29603 . -1) (undo-tree-id29604 . -1) (undo-tree-id29605 . -1) (undo-tree-id29606 . -1) (#("p" 0 1 (fontified t)) . -7477) (undo-tree-id29607 . -1) (undo-tree-id29608 . -1) (undo-tree-id29609 . -1) (undo-tree-id29610 . -1) (undo-tree-id29611 . -1) (undo-tree-id29612 . -1) (undo-tree-id29613 . -1) (undo-tree-id29614 . -1) (undo-tree-id29615 . -1) (undo-tree-id29616 . -1) (undo-tree-id29617 . -1) (undo-tree-id29618 . -1) (undo-tree-id29619 . -1) (undo-tree-id29620 . -1) (undo-tree-id29621 . -1) (undo-tree-id29622 . -1) (undo-tree-id29623 . -1) (undo-tree-id29624 . -1) (undo-tree-id29625 . -1) (undo-tree-id29626 . -1) (undo-tree-id29627 . -1) (undo-tree-id29628 . -1) (undo-tree-id29629 . -1) (undo-tree-id29630 . -1) (undo-tree-id29631 . -1) (undo-tree-id29632 . -1) (undo-tree-id29633 . -1) (undo-tree-id29634 . -1) (undo-tree-id29635 . -1) (undo-tree-id29636 . -1) (undo-tree-id29637 . -1) (undo-tree-id29638 . -1) (undo-tree-id29639 . -1) (undo-tree-id29640 . -1) (undo-tree-id29641 . -1) 7478 (7475 . 7478)) nil (26156 58118 444111 864000) 0 nil])
([nil nil ((7492 . 7493) (#("3" 0 1 (fontified t)) . -7492) (undo-tree-id29295 . -1) 7493) nil (26156 58118 443304 374000) 0 nil])
([nil nil ((7460 . 7462) (#("5" 0 1 (fontified t)) . -7460) (undo-tree-id29651 . -1) (undo-tree-id29652 . -1) (undo-tree-id29653 . -1) (undo-tree-id29654 . -1) (undo-tree-id29655 . -1) (undo-tree-id29656 . -1) (undo-tree-id29657 . -1) (undo-tree-id29658 . -1) (undo-tree-id29659 . -1) (undo-tree-id29660 . -1) (undo-tree-id29661 . -1) (undo-tree-id29662 . -1) (undo-tree-id29663 . -1) (undo-tree-id29664 . -1) (undo-tree-id29665 . -1) (undo-tree-id29666 . -1) (undo-tree-id29667 . -1) (undo-tree-id29668 . -1) (undo-tree-id29669 . -1) (undo-tree-id29670 . -1) (undo-tree-id29671 . -1) (undo-tree-id29672 . -1) (undo-tree-id29673 . -1) (undo-tree-id29674 . -1) (undo-tree-id29675 . -1) (undo-tree-id29676 . -1) (undo-tree-id29677 . -1) (undo-tree-id29678 . -1) (undo-tree-id29679 . -1) (undo-tree-id29680 . -1) (undo-tree-id29681 . -1) (undo-tree-id29682 . -1) (undo-tree-id29683 . -1) (undo-tree-id29684 . -1) (undo-tree-id29685 . -1) (undo-tree-id29686 . -1) (undo-tree-id29687 . -1) 7461 (t 26156 58118 551419 112000)) nil (26156 58157 546657 432000) 0 nil])
([nil nil ((7493 . 7494) (#("5" 0 1 (fontified t)) . -7493) (undo-tree-id29650 . -1) 7494) nil (26156 58157 546528 523000) 0 nil])
([nil nil ((7494 . 7495)) nil (26156 58157 546479 380000) 0 nil])
([nil nil ((apply yas--snippet-revive 7319 7331 #s(yas--snippet nil nil #s(yas--exit 7331 nil) 151 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7331 nil) 151 nil nil nil nil)) (7319 . 7331) (#("get_points()$0" 0 14 (fontified nil)) . 7319) (7319 . 7333) (#("ge" 0 2 (fontified nil)) . 7319) (7319 . 7321) (#("get_points()" 0 12 (fontified nil)) . -7319) (7319 . 7331) (#("ge" 0 2 (fontified t)) . -7319) (undo-tree-id29798 . -1) (undo-tree-id29799 . -2) (undo-tree-id29800 . -2) (undo-tree-id29801 . -1) (undo-tree-id29802 . -1) (undo-tree-id29803 . -1) (undo-tree-id29804 . -1) (undo-tree-id29805 . -1) (undo-tree-id29806 . -1) (undo-tree-id29807 . -1) (undo-tree-id29808 . -1) (undo-tree-id29809 . -1) (undo-tree-id29810 . -1) (undo-tree-id29811 . -1) (undo-tree-id29812 . -1) (undo-tree-id29813 . -1) (undo-tree-id29814 . -1) (undo-tree-id29815 . -1) (undo-tree-id29816 . -1) (undo-tree-id29817 . -1) (undo-tree-id29818 . -1) (undo-tree-id29819 . -1) (undo-tree-id29820 . -1) (undo-tree-id29821 . -1) (undo-tree-id29822 . -1) (undo-tree-id29823 . -1) (undo-tree-id29824 . -1) (undo-tree-id29825 . -1) (undo-tree-id29826 . -1) (undo-tree-id29827 . -1) (undo-tree-id29828 . -1) (undo-tree-id29829 . -1) (undo-tree-id29830 . -1) (undo-tree-id29831 . -2) (undo-tree-id29832 . -2) (undo-tree-id29833 . -2) (undo-tree-id29834 . -2) (undo-tree-id29835 . -2) (undo-tree-id29836 . -2) (undo-tree-id29837 . -2) (undo-tree-id29838 . -2) (undo-tree-id29839 . -2) (undo-tree-id29840 . -2) (undo-tree-id29841 . -2) (undo-tree-id29842 . -2) (undo-tree-id29843 . -2) (undo-tree-id29844 . -2) (undo-tree-id29845 . -2) (undo-tree-id29846 . -2) (undo-tree-id29847 . -2) (undo-tree-id29848 . -2) (undo-tree-id29849 . -2) (undo-tree-id29850 . -2) (undo-tree-id29851 . -2) (undo-tree-id29852 . -2) (undo-tree-id29853 . -2) (undo-tree-id29854 . -2) (undo-tree-id29855 . -2) (undo-tree-id29856 . -2) (undo-tree-id29857 . -2) (undo-tree-id29858 . -2) (undo-tree-id29859 . -2) (undo-tree-id29860 . -2) (undo-tree-id29861 . -2) (undo-tree-id29862 . -2) (undo-tree-id29863 . -2) (undo-tree-id29864 . -2) (undo-tree-id29865 . -2) (undo-tree-id29866 . -2) (undo-tree-id29867 . -2) (undo-tree-id29868 . -2) (undo-tree-id29869 . -2) (undo-tree-id29870 . -2) (undo-tree-id29871 . -2) (undo-tree-id29872 . -2) (undo-tree-id29873 . -2) (undo-tree-id29874 . -2) (undo-tree-id29875 . -2) (undo-tree-id29876 . -2) (undo-tree-id29877 . -2) (undo-tree-id29878 . -2) (undo-tree-id29879 . -2) (undo-tree-id29880 . -2) (undo-tree-id29881 . -2) (undo-tree-id29882 . -2) (undo-tree-id29883 . -2) (undo-tree-id29884 . -2) (undo-tree-id29885 . -2) (undo-tree-id29886 . -2) (undo-tree-id29887 . -2) (undo-tree-id29888 . -2) (undo-tree-id29889 . -2) (undo-tree-id29890 . -2) (undo-tree-id29891 . -2) (undo-tree-id29892 . -2) (undo-tree-id29893 . -2) (undo-tree-id29894 . -2) (undo-tree-id29895 . -2) (undo-tree-id29896 . -2) (undo-tree-id29897 . -2) (undo-tree-id29898 . -2) (undo-tree-id29899 . -2) (undo-tree-id29900 . -2) (undo-tree-id29901 . -2) (undo-tree-id29902 . -2) (undo-tree-id29903 . -2) (undo-tree-id29904 . -2) (undo-tree-id29905 . -2) (undo-tree-id29906 . -2) (undo-tree-id29907 . -2) (undo-tree-id29908 . -2) (undo-tree-id29909 . -2) (undo-tree-id29910 . -2) (undo-tree-id29911 . -2) (undo-tree-id29912 . -2) (undo-tree-id29913 . -2) (undo-tree-id29914 . -2) (undo-tree-id29915 . -2) (undo-tree-id29916 . -2) 7321 (7318 . 7321) (t 26156 58157 626136 511000)) nil (26156 58201 224866 543000) 0 nil])
([nil nil ((apply yas--snippet-revive 7444 7456 #s(yas--snippet nil nil #s(yas--exit 7456 nil) 152 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7456 nil) 152 nil nil nil nil)) (7444 . 7456) (#("get_points()$0" 0 14 (fontified nil)) . 7444) (7444 . 7458) (#("ge" 0 2 (fontified nil)) . 7444) (7444 . 7446) (#("get_points()" 0 12 (fontified nil)) . -7444) (7444 . 7456) (#("ge" 0 2 (fontified t)) . -7444) (undo-tree-id29688 . -2) (undo-tree-id29689 . -2) (undo-tree-id29690 . -2) (undo-tree-id29691 . -1) (undo-tree-id29692 . -1) (undo-tree-id29693 . -1) (undo-tree-id29694 . -1) (undo-tree-id29695 . -1) (undo-tree-id29696 . -1) (undo-tree-id29697 . -1) (undo-tree-id29698 . -1) (undo-tree-id29699 . -1) (undo-tree-id29700 . -1) (undo-tree-id29701 . -1) (undo-tree-id29702 . -1) (undo-tree-id29703 . -1) (undo-tree-id29704 . -1) (undo-tree-id29705 . -1) (undo-tree-id29706 . -1) (undo-tree-id29707 . -1) (undo-tree-id29708 . -1) (undo-tree-id29709 . -1) (undo-tree-id29710 . -1) (undo-tree-id29711 . -2) (undo-tree-id29712 . -2) (undo-tree-id29713 . -2) (undo-tree-id29714 . -2) (undo-tree-id29715 . -2) (undo-tree-id29716 . -2) (undo-tree-id29717 . -2) (undo-tree-id29718 . -2) (undo-tree-id29719 . -2) (undo-tree-id29720 . -2) (undo-tree-id29721 . -2) (undo-tree-id29722 . -2) (undo-tree-id29723 . -2) (undo-tree-id29724 . -2) (undo-tree-id29725 . -2) (undo-tree-id29726 . -2) (undo-tree-id29727 . -2) (undo-tree-id29728 . -2) (undo-tree-id29729 . -2) (undo-tree-id29730 . -2) (undo-tree-id29731 . -2) (undo-tree-id29732 . -2) (undo-tree-id29733 . -2) (undo-tree-id29734 . -2) (undo-tree-id29735 . -2) (undo-tree-id29736 . -2) (undo-tree-id29737 . -2) (undo-tree-id29738 . -2) (undo-tree-id29739 . -2) (undo-tree-id29740 . -2) (undo-tree-id29741 . -2) (undo-tree-id29742 . -2) (undo-tree-id29743 . -2) (undo-tree-id29744 . -2) (undo-tree-id29745 . -2) (undo-tree-id29746 . -2) (undo-tree-id29747 . -2) (undo-tree-id29748 . -2) (undo-tree-id29749 . -2) (undo-tree-id29750 . -2) (undo-tree-id29751 . -2) (undo-tree-id29752 . -2) (undo-tree-id29753 . -2) (undo-tree-id29754 . -2) (undo-tree-id29755 . -2) (undo-tree-id29756 . -2) (undo-tree-id29757 . -2) (undo-tree-id29758 . -2) (undo-tree-id29759 . -2) (undo-tree-id29760 . -2) (undo-tree-id29761 . -2) (undo-tree-id29762 . -2) (undo-tree-id29763 . -2) (undo-tree-id29764 . -2) (undo-tree-id29765 . -2) (undo-tree-id29766 . -2) (undo-tree-id29767 . -2) (undo-tree-id29768 . -2) (undo-tree-id29769 . -2) (undo-tree-id29770 . -2) (undo-tree-id29771 . -2) (undo-tree-id29772 . -2) (undo-tree-id29773 . -2) (undo-tree-id29774 . -2) (undo-tree-id29775 . -2) (undo-tree-id29776 . -2) (undo-tree-id29777 . -2) (undo-tree-id29778 . -2) (undo-tree-id29779 . -2) (undo-tree-id29780 . -2) (undo-tree-id29781 . -2) (undo-tree-id29782 . -2) (undo-tree-id29783 . -2) (undo-tree-id29784 . -2) (undo-tree-id29785 . -2) (undo-tree-id29786 . -2) (undo-tree-id29787 . -2) (undo-tree-id29788 . -2) (undo-tree-id29789 . -2) (undo-tree-id29790 . -2) (undo-tree-id29791 . -2) (undo-tree-id29792 . -2) (undo-tree-id29793 . -2) (undo-tree-id29794 . -2) (undo-tree-id29795 . -2) (undo-tree-id29796 . -2) (undo-tree-id29797 . -2) 7446 (7443 . 7446)) nil (26156 58201 224285 27000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 7974) (undo-tree-id29922 . -2) (undo-tree-id29923 . -3) (t 26156 58201 309172 631000)) nil (26156 58218 761711 161000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7974) (undo-tree-id29921 . -1)) nil (26156 58218 761704 846000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 7974) (undo-tree-id29919 . -5) (undo-tree-id29920 . -6)) nil (26156 58218 761697 218000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7974) (undo-tree-id29917 . -2) (undo-tree-id29918 . -3)) nil (26156 58218 761672 399000) 0 nil])
([nil nil ((7486 . 7487) (#("1" 0 1 (fontified t)) . -7486) (undo-tree-id29960 . -1) (undo-tree-id29961 . -1) (undo-tree-id29962 . -1) (undo-tree-id29963 . -1) (undo-tree-id29964 . -1) (undo-tree-id29965 . -1) (undo-tree-id29966 . -1) (undo-tree-id29967 . -1) (undo-tree-id29968 . -1) (undo-tree-id29969 . -1) (undo-tree-id29970 . -1) (undo-tree-id29971 . -1) (undo-tree-id29972 . -1) (undo-tree-id29973 . -1) (undo-tree-id29974 . -1) (undo-tree-id29975 . -1) (undo-tree-id29976 . -1) (undo-tree-id29977 . -1) (undo-tree-id29978 . -1) (undo-tree-id29979 . -1) (undo-tree-id29980 . -1) (undo-tree-id29981 . -1) (undo-tree-id29982 . -1) (#("0" 0 1 (fontified t)) . -7487) (undo-tree-id29983 . -1) (undo-tree-id29984 . -1) (undo-tree-id29985 . -1) (undo-tree-id29986 . -1) (undo-tree-id29987 . -1) (undo-tree-id29988 . -1) (undo-tree-id29989 . -1) (undo-tree-id29990 . -1) (undo-tree-id29991 . -1) (undo-tree-id29992 . -1) (undo-tree-id29993 . -1) (undo-tree-id29994 . -1) (undo-tree-id29995 . -1) 7488 (t 26156 58218 843865 325000)) nil (26156 58241 839294 131000) 0 nil])
([nil nil ((7518 . 7519) (#("1" 0 1 (fontified t)) . -7518) (undo-tree-id29924 . -1) (undo-tree-id29925 . -1) (undo-tree-id29926 . -1) (undo-tree-id29927 . -1) (undo-tree-id29928 . -1) (undo-tree-id29929 . -1) (undo-tree-id29930 . -1) (undo-tree-id29931 . -1) (undo-tree-id29932 . -1) (undo-tree-id29933 . -1) (undo-tree-id29934 . -1) (undo-tree-id29935 . -1) (undo-tree-id29936 . -1) (undo-tree-id29937 . -1) (undo-tree-id29938 . -1) (undo-tree-id29939 . -1) (undo-tree-id29940 . -1) (undo-tree-id29941 . -1) (undo-tree-id29942 . -1) (undo-tree-id29943 . -1) (undo-tree-id29944 . -1) (undo-tree-id29945 . -1) (undo-tree-id29946 . -1) (#("0" 0 1 (fontified t)) . -7519) (undo-tree-id29947 . -1) (undo-tree-id29948 . -1) (undo-tree-id29949 . -1) (undo-tree-id29950 . -1) (undo-tree-id29951 . -1) (undo-tree-id29952 . -1) (undo-tree-id29953 . -1) (undo-tree-id29954 . -1) (undo-tree-id29955 . -1) (undo-tree-id29956 . -1) (undo-tree-id29957 . -1) (undo-tree-id29958 . -1) (undo-tree-id29959 . -1) 7520) nil (26156 58241 839155 325000) 0 nil])
([nil nil ((7411 . 7413) (#("5" 0 1 (fontified t)) . -7411) (undo-tree-id30009 . -1) 7412 (t 26156 58241 951304 750000)) nil (26156 58267 176273 951000) 0 nil])
([nil nil ((7437 . 7439) (#("5" 0 1 (fontified t)) . -7437) (undo-tree-id29996 . -1) (undo-tree-id29997 . -1) (undo-tree-id29998 . -1) (undo-tree-id29999 . -1) (undo-tree-id30000 . -1) (undo-tree-id30001 . -1) (undo-tree-id30002 . -1) (undo-tree-id30003 . -1) (undo-tree-id30004 . -1) (undo-tree-id30005 . -1) (undo-tree-id30006 . -1) (undo-tree-id30007 . -1) (undo-tree-id30008 . -1) 7438) nil (26156 58267 176260 526000) 0 nil])
([nil nil ((7439 . 7440) (t 26156 58267 258935 372000)) nil (26156 58282 964466 222000) 0 nil])
([nil nil ((7413 . 7414)) nil (26156 58282 964455 680000) 0 nil])
([nil nil ((7443 . 7444) (#("2" 0 1 (fontified t)) . -7443) (undo-tree-id30010 . -1) 7444 (t 26156 58283 53131 990000)) nil (26156 58334 691639 951000) 0 nil])
([nil nil ((7314 . 7315) (#("2" 0 1 (fontified t)) . -7314) (undo-tree-id30012 . -1) 7315 (t 26156 58334 799977 811000)) nil (26156 58395 615407 461000) 0 nil])
([nil nil ((7443 . 7444) (#("1" 0 1 (fontified t)) . -7443) (undo-tree-id30011 . -1) 7444) nil (26156 58395 615393 58000) 0 nil])
([nil nil ((7438 . 7439) (#("1" 0 1 (fontified t)) . -7438) (undo-tree-id30029 . -1) (#("0" 0 1 (fontified t)) . -7439) (undo-tree-id30030 . -1) 7440 (t 26156 58395 699400 517000)) nil (26156 58420 236602 453000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 7411) (undo-tree-id30027 . -1) (undo-tree-id30028 . -1)) nil (26156 58420 236593 775000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 7411) (undo-tree-id30025 . -1) (undo-tree-id30026 . -1)) nil (26156 58420 236586 347000) 0 nil])
([nil nil ((7411 . 7413)) nil (26156 58420 236577 933000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 7412) (undo-tree-id30013 . -1) (undo-tree-id30014 . -1) (undo-tree-id30015 . -1) (undo-tree-id30016 . -1) (undo-tree-id30017 . -1) (undo-tree-id30018 . -1) (undo-tree-id30019 . -1) (undo-tree-id30020 . -1) (undo-tree-id30021 . -1) (undo-tree-id30022 . -1) (undo-tree-id30023 . -1) (undo-tree-id30024 . -1)) nil (26156 58420 236568 103000) 0 nil])
([nil nil ((apply -6 7599 7735 undo--wrap-and-run-primitive-undo 7599 7735 ((7650 . 7653) (7603 . 7606) 7599)) (t 26156 58420 330224 677000)) nil (26156 58494 977823 636000) 0 nil])
([nil nil ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 7603) (undo-tree-id30033 . -2) (undo-tree-id30034 . -3) (t 26156 58495 50227 37000)) nil (26156 58498 500143 839000) 0 nil])
([nil nil ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 7647) (undo-tree-id30031 . -2) (undo-tree-id30032 . -3)) nil (26156 58498 500130 339000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7811) (undo-tree-id30061 . -4) (undo-tree-id30062 . -4) (undo-tree-id30063 . -4) (undo-tree-id30064 . -4) (undo-tree-id30065 . -4) (undo-tree-id30066 . -4) (undo-tree-id30067 . -4) (undo-tree-id30068 . -4) (undo-tree-id30069 . -4) (undo-tree-id30070 . -4) (undo-tree-id30071 . -4) (undo-tree-id30072 . -4) (undo-tree-id30073 . -4) 7815 (7811 . 7815) (#("    " 0 4 (fontified nil)) . 7810) (undo-tree-id30074 . -4) (undo-tree-id30075 . -4) (undo-tree-id30076 . -4) (undo-tree-id30077 . -4) (undo-tree-id30078 . -4) (undo-tree-id30079 . -4) (undo-tree-id30080 . -4) (undo-tree-id30081 . -4) (undo-tree-id30082 . -4) (undo-tree-id30083 . -4) (undo-tree-id30084 . -4) (undo-tree-id30085 . -4) (undo-tree-id30086 . -4) (7809 . 7815) (t 26156 58498 606588 95000)) nil (26156 58503 261890 736000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7886) (undo-tree-id30035 . -4) (undo-tree-id30036 . -4) (undo-tree-id30037 . -4) (undo-tree-id30038 . -4) (undo-tree-id30039 . -4) (undo-tree-id30040 . -4) (undo-tree-id30041 . -4) (undo-tree-id30042 . -4) (undo-tree-id30043 . -4) (undo-tree-id30044 . -4) (undo-tree-id30045 . -4) (undo-tree-id30046 . -4) (undo-tree-id30047 . -4) 7890 (7886 . 7890) (#("    " 0 4 (fontified nil)) . 7885) (undo-tree-id30048 . -4) (undo-tree-id30049 . -4) (undo-tree-id30050 . -4) (undo-tree-id30051 . -4) (undo-tree-id30052 . -4) (undo-tree-id30053 . -4) (undo-tree-id30054 . -4) (undo-tree-id30055 . -4) (undo-tree-id30056 . -4) (undo-tree-id30057 . -4) (undo-tree-id30058 . -4) (undo-tree-id30059 . -4) (undo-tree-id30060 . -4) (7884 . 7890)) nil (26156 58503 261831 887000) 0 nil])
([nil nil ((#("+ " 0 2 (fontified t)) . 7409) (undo-tree-id30094 . -1) (undo-tree-id30095 . -2) (undo-tree-id30096 . -2) (undo-tree-id30097 . -2) (undo-tree-id30098 . -2) (undo-tree-id30099 . -2) (undo-tree-id30100 . -2) (undo-tree-id30101 . -2) (undo-tree-id30102 . -2) (undo-tree-id30103 . -2) (undo-tree-id30104 . -2) (t 26156 58503 347066 737000)) nil (26156 58554 310968 794000) 0 nil])
([nil nil ((#("50" 0 2 (fontified t)) . 7409) (undo-tree-id30091 . -1) (undo-tree-id30092 . 1) (undo-tree-id30093 . -2)) nil (26156 58554 310943 275000) 0 nil])
([nil nil ((#("+ " 0 2 (fontified t)) . 7431) (undo-tree-id30089 . -1) (undo-tree-id30090 . -2)) nil (26156 58554 310933 214000) 0 nil])
([nil nil ((#("50" 0 2 (fontified t)) . 7431) (undo-tree-id30087 . -1) (undo-tree-id30088 . -2)) nil (26156 58554 310918 597000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7430) (undo-tree-id30105 . -1) (undo-tree-id30106 . -1) (undo-tree-id30107 . -1) (undo-tree-id30108 . -1) (undo-tree-id30109 . -1) (undo-tree-id30110 . -1) (undo-tree-id30111 . -1) (undo-tree-id30112 . -1) (undo-tree-id30113 . -1) (undo-tree-id30114 . -1) (undo-tree-id30115 . -1) (undo-tree-id30116 . -1) (undo-tree-id30117 . -1) (undo-tree-id30118 . -1) (undo-tree-id30119 . -1) (undo-tree-id30120 . -1) (undo-tree-id30121 . -1) (undo-tree-id30122 . -1) (undo-tree-id30123 . -1) (undo-tree-id30124 . -1) (undo-tree-id30125 . -1) (undo-tree-id30126 . -1) (undo-tree-id30127 . -1) (undo-tree-id30128 . -1) (undo-tree-id30129 . -1) (undo-tree-id30130 . -1) (undo-tree-id30131 . -1) (undo-tree-id30132 . -1) (undo-tree-id30133 . -1) (undo-tree-id30134 . -1) (undo-tree-id30135 . -1) (undo-tree-id30136 . -1) (undo-tree-id30137 . -1) (undo-tree-id30138 . -1) (undo-tree-id30139 . -1) (undo-tree-id30140 . -1) (undo-tree-id30141 . -1) (undo-tree-id30142 . -1) (undo-tree-id30143 . -1) (undo-tree-id30144 . -1) (undo-tree-id30145 . -1) (undo-tree-id30146 . -1) (undo-tree-id30147 . -1) (undo-tree-id30148 . -1) (undo-tree-id30149 . -1) (undo-tree-id30150 . -1) (undo-tree-id30151 . -1) (undo-tree-id30152 . -1) (undo-tree-id30153 . -1) (undo-tree-id30154 . -1) (undo-tree-id30155 . -1) (undo-tree-id30156 . -1) (undo-tree-id30157 . -1) (undo-tree-id30158 . -1) (undo-tree-id30159 . -1) (undo-tree-id30160 . -1) (undo-tree-id30161 . -1) (undo-tree-id30162 . -1) (undo-tree-id30163 . -1) (undo-tree-id30164 . -1) (undo-tree-id30165 . -1) (undo-tree-id30166 . -1) (undo-tree-id30167 . -1) (undo-tree-id30168 . -1) (undo-tree-id30169 . -1) (undo-tree-id30170 . -1) (undo-tree-id30171 . -1) (undo-tree-id30172 . -1) (undo-tree-id30173 . -1) (undo-tree-id30174 . -1) (undo-tree-id30175 . -1) (undo-tree-id30176 . -1) (undo-tree-id30177 . -1) (undo-tree-id30178 . -1) (undo-tree-id30179 . -1) (undo-tree-id30180 . -1) (undo-tree-id30181 . -1) (undo-tree-id30182 . -1) (undo-tree-id30183 . -1) (t 26156 58554 384035 301000)) nil (26156 58558 853910 26000) 0 nil])
([nil nil ((7483 . 7485) (t 26156 58558 964465 346000)) nil (26156 58599 458546 442000) 0 nil])
([nil nil ((7334 . 7336) (t 26156 58599 572170 365000)) nil (26156 58601 733342 599000) 0 nil])
([nil nil ((#(".get_points();" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 7318) (undo-tree-id30184 . -1) (undo-tree-id30185 . -14) (undo-tree-id30186 . -14) (undo-tree-id30187 . -14) (undo-tree-id30188 . -14) (undo-tree-id30189 . -14) (undo-tree-id30190 . -14) (undo-tree-id30191 . -14) (undo-tree-id30192 . -14) (undo-tree-id30193 . -14) (undo-tree-id30194 . -14) (undo-tree-id30195 . -14) (undo-tree-id30196 . -13) (undo-tree-id30197 . -13) (undo-tree-id30198 . -13) (undo-tree-id30199 . -13) (undo-tree-id30200 . -13) (undo-tree-id30201 . -13) (undo-tree-id30202 . -13) (undo-tree-id30203 . -13) (undo-tree-id30204 . -13) (undo-tree-id30205 . -13) (undo-tree-id30206 . -13) (undo-tree-id30207 . -1) (undo-tree-id30208 . -1) (undo-tree-id30209 . -1) (undo-tree-id30210 . -1) (undo-tree-id30211 . -1) (undo-tree-id30212 . -1) (undo-tree-id30213 . -1) (undo-tree-id30214 . -1) (undo-tree-id30215 . -1) (undo-tree-id30216 . -1) (undo-tree-id30217 . -1) (undo-tree-id30218 . -1) (undo-tree-id30219 . -1) (undo-tree-id30220 . -1) (undo-tree-id30221 . -1) (undo-tree-id30222 . -1) (undo-tree-id30223 . -1) (undo-tree-id30224 . -1) (undo-tree-id30225 . -1) (undo-tree-id30226 . -1) (undo-tree-id30227 . -1) (undo-tree-id30228 . -1) (undo-tree-id30229 . -1) (undo-tree-id30230 . -14) (t 26156 58601 816369 671000)) nil (26156 58607 451601 146000) 0 nil])
([nil nil ((7318 . 7319)) nil (26156 58607 451494 842000) 0 nil])
([nil nil ((7511 . 7513) (t 26156 58607 560877 294000)) nil (26156 58612 997367 200000) 0 nil])
([nil nil ((7566 . 7568) (t 26156 58613 109364 197000)) nil (26156 58616 242579 366000) 0 nil])
([nil nil ((7955 . 7957) (t 26156 58616 333645 600000)) nil (26156 58636 217350 57000) 0 nil])
([nil nil ((#("    thing.to_pgm().write_as_binary(\"data2.pbm\").expect(\"couldn't write bitch\");
" 0 4 (fontified t) 4 10 (fontified t) 10 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t) 19 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face font-lock-string-face) 36 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 57 (fontified t face font-lock-string-face) 57 67 (fontified t face font-lock-string-face) 67 71 (fontified t face font-lock-string-face) 71 73 (fontified t face font-lock-string-face) 73 75 (fontified t face font-lock-string-face) 75 77 (fontified t face font-lock-string-face) 77 78 (fontified t face (rainbow-delimiters-depth-2-face)) 78 79 (fontified t) 79 80 (fontified t)) . 7873) (undo-tree-id30244 . -79) (undo-tree-id30245 . -3) 7876) nil (26156 58636 217347 547000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7444 . 7445) (#("
" 0 1 (fontified nil)) . -7520) (7440 . 7521)) nil (26156 58636 217337 223000) 0 nil])
([nil nil ((apply -12 7669 7964 undo--wrap-and-run-primitive-undo 7669 7964 (("    " . 7669) (7895 . 7898) (7809 . 7812) (7720 . 7723) (7669 . 7676) 7952))) nil (26156 58636 217333 574000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7521) (undo-tree-id30231 . -4) (undo-tree-id30232 . -4) (undo-tree-id30233 . -4) (undo-tree-id30234 . -4) (undo-tree-id30235 . -4) (undo-tree-id30236 . -4) (undo-tree-id30237 . -4) (undo-tree-id30238 . -4) (undo-tree-id30239 . -4) (undo-tree-id30240 . -4) (undo-tree-id30241 . -4) (undo-tree-id30242 . -4) (undo-tree-id30243 . -4) 7525 (7520 . 7525)) nil (26156 58636 217322 501000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7553) (undo-tree-id30292 . -4) 7557 (7552 . 7557) (t 26156 58636 327366 47000)) nil (26156 58647 996505 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7633) (7553 . 7634)) nil (26156 58647 996499 327000) 0 nil])
([nil nil ((7594 . 7595) (#("2" 0 1 (fontified t face font-lock-string-face)) . 7594) (undo-tree-id30246 . -1) (undo-tree-id30247 . -1) (undo-tree-id30248 . -1) (undo-tree-id30249 . -1) (undo-tree-id30250 . -1) (undo-tree-id30251 . -1) (undo-tree-id30252 . -1) (undo-tree-id30253 . -1) (undo-tree-id30254 . -1) (undo-tree-id30255 . -1) (undo-tree-id30256 . -1) (undo-tree-id30257 . -1) (undo-tree-id30258 . -1) (undo-tree-id30259 . -1) (undo-tree-id30260 . -1) (undo-tree-id30261 . -1) (undo-tree-id30262 . -1) (undo-tree-id30263 . -1) (undo-tree-id30264 . -1) (undo-tree-id30265 . -1) (undo-tree-id30266 . -1) (undo-tree-id30267 . -1) (undo-tree-id30268 . -1) (undo-tree-id30269 . -1) (undo-tree-id30270 . -1) (undo-tree-id30271 . -1) (undo-tree-id30272 . -1) (undo-tree-id30273 . -1) (undo-tree-id30274 . -1) (undo-tree-id30275 . -1) (undo-tree-id30276 . -1) (undo-tree-id30277 . -1) (undo-tree-id30278 . -1) (undo-tree-id30279 . -1) (undo-tree-id30280 . -1) (undo-tree-id30281 . -1) (undo-tree-id30282 . -1) (undo-tree-id30283 . -1) (undo-tree-id30284 . -1) (undo-tree-id30285 . -1) (undo-tree-id30286 . -1) (undo-tree-id30287 . -1) (undo-tree-id30288 . -1) (undo-tree-id30289 . -1) (undo-tree-id30290 . -1) (undo-tree-id30291 . -1)) nil (26156 58647 996486 468000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7634) (undo-tree-id30293 . -4) (undo-tree-id30294 . -4) (undo-tree-id30295 . -4) (undo-tree-id30296 . -4) (undo-tree-id30297 . -4) (undo-tree-id30298 . -4) (undo-tree-id30299 . -4) (undo-tree-id30300 . -4) (undo-tree-id30301 . -4) (undo-tree-id30302 . -4) (undo-tree-id30303 . -4) (undo-tree-id30304 . -4) (undo-tree-id30305 . -4) 7638 (7633 . 7638) (t 26156 58648 84358 395000)) nil (26156 58652 919106 555000) 0 nil])
([nil nil ((apply yas--snippet-revive 7319 7331 #s(yas--snippet nil nil #s(yas--exit 7331 nil) 153 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7331 nil) 153 nil nil nil nil)) (7319 . 7331) (#("get_points()$0" 0 14 (fontified nil)) . 7319) (7319 . 7333) (#("get_points()" 0 12 (fontified nil)) . -7319) (7319 . 7331) (7318 . 7319) (t 26156 58653 24771 220000)) nil (26156 58751 825368 238000) 0 nil])
([nil nil ((7464 . 7470) (#("to_pbm" 0 5 (fontified nil) 5 6 (fontified nil)) . 7464) (undo-tree-id30329 . 1) (7464 . 7469) (#("to_pbm" 0 6 (fontified nil)) . -7464) (7464 . 7470) (#("to_pb" 0 5 (fontified t)) . -7464) (undo-tree-id30330 . -5) (undo-tree-id30331 . -5) (undo-tree-id30332 . -5) (undo-tree-id30333 . -5) (undo-tree-id30334 . -5) (undo-tree-id30335 . -5) (undo-tree-id30336 . -5) (undo-tree-id30337 . -5) (undo-tree-id30338 . -5) (undo-tree-id30339 . -5) (undo-tree-id30340 . -5) (undo-tree-id30341 . -5) (undo-tree-id30342 . -5) (undo-tree-id30343 . -5) (undo-tree-id30344 . -5) (undo-tree-id30345 . -5) (undo-tree-id30346 . -5) 7469 (7468 . 7469) (#("g" 0 1 (fontified t)) . -7468) (undo-tree-id30347 . -1) 7469 (t 26156 58753 276653 620000)) nil (26156 58774 180778 560000) 0 nil] [nil nil ((5647 . 5648) (#("1" 0 1 (fontified t)) . -5647) (undo-tree-id30306 . -1) 5648 (t 26156 58699 376528 967000)) ((5647 . 5648) (#("0" 0 1 (fontified t)) . 5647) (t 26156 58743 175899 580000)) (26156 58743 93256 287000) 0 nil])
([nil nil ((7581 . 7582) (#("g" 0 1 (fontified t)) . -7581) (undo-tree-id30307 . -1) (undo-tree-id30308 . -1) (undo-tree-id30309 . -1) (undo-tree-id30310 . -1) (undo-tree-id30311 . -1) (undo-tree-id30312 . -1) (undo-tree-id30313 . -1) (undo-tree-id30314 . -1) (undo-tree-id30315 . -1) (undo-tree-id30316 . -1) (undo-tree-id30317 . -1) (undo-tree-id30318 . -1) (undo-tree-id30319 . -1) (undo-tree-id30320 . -1) (undo-tree-id30321 . -1) (undo-tree-id30322 . -1) (undo-tree-id30323 . -1) (undo-tree-id30324 . -1) (undo-tree-id30325 . -1) (undo-tree-id30326 . -1) (undo-tree-id30327 . -1) (undo-tree-id30328 . -1) 7582) nil (26156 58774 180730 749000) 0 nil])
nil
([nil nil ((7562 . 7563) (#("5" 0 1 (fontified t)) . -7562) (undo-tree-id30348 . -1) (undo-tree-id30349 . -1) 7563 (t 26156 58774 266193 973000)) nil (26156 58799 398662 97000) 0 nil])
([nil nil ((7562 . 7563) (#("4" 0 1 (fontified t)) . -7562) (undo-tree-id30350 . -1) 7563 (t 26156 58799 483998 906000)) nil (26156 58835 196873 648000) 0 nil])
([nil nil ((7562 . 7564) (#("3" 0 1 (fontified t)) . -7562) (undo-tree-id30351 . -1) 7563 (t 26156 58835 282479 892000)) nil (26156 58847 783015 562000) 0 nil])
([nil nil ((7562 . 7563) (#("1" 0 1 (fontified t)) . -7562) (undo-tree-id30352 . -1) (undo-tree-id30353 . -1) (undo-tree-id30354 . -1) (#("0" 0 1 (fontified t)) . -7563) (undo-tree-id30355 . -1) 7564 (t 26156 58847 891332 101000)) nil (26156 58872 755487 377000) 0 nil])
([nil nil ((#("200" 0 3 (fontified t)) . 7314) (undo-tree-id30356 . -2) (undo-tree-id30357 . -3) (t 26156 58872 876989 90000)) nil (26156 58895 912593 362000) 0 nil])
([nil nil ((7314 . 7317)) nil (26156 58895 912564 943000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7333) (undo-tree-id30360 . -1) (t 26156 58895 998486 327000)) nil (26156 58931 57307 275000) 0 nil])
([nil nil ((#("//   " 0 3 (fontified t face font-lock-comment-delimiter-face) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 5 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face)) . 7333) (undo-tree-id30358 . -4) (undo-tree-id30359 . -5)) nil (26156 58931 57301 149000) 0 nil])
([nil nil ((7333 . 7337)) nil (26156 58931 57279 972000) 0 nil])
([nil nil ((7410 . 7412) (7408 . 7410)) nil (26156 58931 57276 419000) 0 nil])
([nil nil ((7434 . 7439)) nil (26156 58931 57264 314000) 0 nil])
([nil nil ((7540 . 7545) (t 26156 58931 176701 176000)) nil (26156 58983 378899 403000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7620) (7540 . 7621) 7464) nil (26156 58983 378896 202000) 0 nil])
([nil nil ((7550 . 7551)) nil (26156 58983 378893 708000) 0 nil])
([nil nil ((7582 . 7583) (#("2" 0 1 (fontified t face font-lock-string-face)) . -7582) (undo-tree-id30379 . -1) 7583) nil (26156 58983 378891 204000) 0 nil])
([nil nil ((7687 . 7688) (#("m" 0 1 (fontified t)) . 7687) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7687 7688 nil nil nil t #s(yas--exit 7689 nil))) #s(yas--exit 7689 nil) 154 nil #s(yas--field 1 7687 7688 nil nil nil t #s(yas--exit 7689 nil)) nil nil)) (7670 . 7689) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 7670) (7670 . 7696) (#("sa" 0 2 (fontified nil)) . 7670) (7670 . 7672) (#("separate_and_set(…)" 0 19 (fontified nil)) . -7670) (7670 . 7689) (#("sa" 0 2 (fontified t)) . -7670) (undo-tree-id30374 . -2) (undo-tree-id30375 . -2) (undo-tree-id30376 . -2) 7672 (7669 . 7672) (7663 . 7669) (#("th" 0 2 (fontified nil)) . 7663) (7663 . 7665) (#("thing2" 0 6 (fontified nil)) . -7663) (7663 . 7669) (#("th" 0 2 (fontified t)) . -7663) (undo-tree-id30377 . -2) (undo-tree-id30378 . -2) 7665 (7663 . 7665) (7658 . 7663)) nil (26156 58983 378881 712000) 0 nil])
([nil nil ((7689 . 7690) (apply yas--snippet-revive 7670 7689 #s(yas--snippet nil (#s(yas--field 1 7687 7688 nil nil nil t #s(yas--exit 7689 nil))) #s(yas--exit 7689 nil) 154 nil #s(yas--field 1 7687 7688 nil nil nil t #s(yas--exit 7689 nil)) nil nil))) nil (26156 58983 378862 995000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7851) (7771 . 7852) 7722) nil (26156 58983 378858 614000) 0 nil])
([nil nil ((7812 . 7813) (#("3" 0 1 (fontified t face font-lock-string-face)) . -7812) (undo-tree-id30361 . -1) (undo-tree-id30362 . -1) (undo-tree-id30363 . -1) (undo-tree-id30364 . -1) (undo-tree-id30365 . -1) (undo-tree-id30366 . -1) (undo-tree-id30367 . -1) (undo-tree-id30368 . -1) (undo-tree-id30369 . -1) (undo-tree-id30370 . -1) (undo-tree-id30371 . -1) (undo-tree-id30372 . -1) (undo-tree-id30373 . -1) 7813) nil (26156 58983 378847 920000) 0 nil])
([nil nil ((apply 6 7892 7960 undo--wrap-and-run-primitive-undo 7892 7960 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7944) (#("// " 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face)) . -7892))) (t 26156 58983 451861 512000)) nil (26156 58986 594049 119000) 0 nil])
([nil nil ((7441 . 7442) (#("2" 0 1 (fontified t)) . -7441) (undo-tree-id30380 . -1) (undo-tree-id30381 . -1) (undo-tree-id30382 . -1) (undo-tree-id30383 . -1) (undo-tree-id30384 . -1) (undo-tree-id30385 . -1) (undo-tree-id30386 . -1) (undo-tree-id30387 . -1) (undo-tree-id30388 . -1) (undo-tree-id30389 . -1) (undo-tree-id30390 . -1) (undo-tree-id30391 . -1) (undo-tree-id30392 . -1) 7442 (t 26156 58986 704053 254000)) nil (26156 59021 771280 294000) 0 nil])
([nil nil ((apply -6 7628 7698 undo--wrap-and-run-primitive-undo 7628 7698 ((7666 . 7669) (7632 . 7635) 7628)) (t 26156 59021 858091 498000)) nil (26156 59054 577292 962000) 0 nil])
([nil nil ((5647 . 5648) (#("1" 0 1 (fontified t)) . -5647) (undo-tree-id30426 . -1) (undo-tree-id30427 . -1) (undo-tree-id30428 . -1) (undo-tree-id30429 . -1) (undo-tree-id30430 . -1) (undo-tree-id30431 . -1) (undo-tree-id30432 . -1) (undo-tree-id30433 . -1) (undo-tree-id30434 . -1) (undo-tree-id30435 . -1) (undo-tree-id30436 . -1) (undo-tree-id30437 . -1) (undo-tree-id30438 . -1) (undo-tree-id30439 . -1) 5648 (t 26156 59054 687940 776000)) nil (26156 59103 758835 561000) 0 nil])
([nil nil ((5661 . 5662) (#("0" 0 1 (fontified t)) . -5661) (undo-tree-id30393 . -1) (undo-tree-id30394 . -1) (undo-tree-id30395 . -1) (undo-tree-id30396 . -1) (undo-tree-id30397 . -1) (undo-tree-id30398 . -1) (undo-tree-id30399 . -1) (undo-tree-id30400 . -1) (undo-tree-id30401 . -1) (undo-tree-id30402 . -1) (undo-tree-id30403 . -1) (undo-tree-id30404 . -1) (undo-tree-id30405 . -1) (undo-tree-id30406 . -1) (undo-tree-id30407 . -1) (undo-tree-id30408 . -1) (undo-tree-id30409 . -1) (undo-tree-id30410 . -1) (undo-tree-id30411 . -1) (undo-tree-id30412 . -1) (undo-tree-id30413 . -1) (undo-tree-id30414 . -1) (undo-tree-id30415 . -1) (undo-tree-id30416 . -1) (undo-tree-id30417 . -1) (undo-tree-id30418 . -1) (undo-tree-id30419 . -1) (undo-tree-id30420 . -1) (undo-tree-id30421 . -1) (undo-tree-id30422 . -1) (undo-tree-id30423 . -1) (undo-tree-id30424 . -1) (undo-tree-id30425 . -1) 5662) nil (26156 59103 758797 789000) 0 nil])
([nil nil ((7410 . 7412) (#("2" 0 1 (fontified t)) . -7410) (undo-tree-id30451 . -1) (undo-tree-id30452 . -1) (undo-tree-id30453 . -1) (undo-tree-id30454 . -1) (undo-tree-id30455 . -1) (undo-tree-id30456 . -1) (undo-tree-id30457 . -1) (undo-tree-id30458 . -1) (undo-tree-id30459 . -1) (undo-tree-id30460 . -1) (undo-tree-id30461 . -1) (undo-tree-id30462 . -1) (undo-tree-id30463 . -1) (undo-tree-id30464 . -1) (undo-tree-id30465 . -1) (undo-tree-id30466 . -1) (undo-tree-id30467 . -1) (undo-tree-id30468 . -1) (undo-tree-id30469 . -1) (undo-tree-id30470 . -1) (undo-tree-id30471 . -1) (undo-tree-id30472 . -1) (undo-tree-id30473 . -1) (#("0" 0 1 (fontified t)) . -7411) (undo-tree-id30474 . -1) (undo-tree-id30475 . -1) (undo-tree-id30476 . -1) (undo-tree-id30477 . -1) (undo-tree-id30478 . -1) (undo-tree-id30479 . -1) (undo-tree-id30480 . -1) (undo-tree-id30481 . -1) (undo-tree-id30482 . -1) (undo-tree-id30483 . -1) (undo-tree-id30484 . -1) (undo-tree-id30485 . -1) (undo-tree-id30486 . -1) 7412 (t 26156 59103 842618 912000)) nil (26156 59132 974087 670000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 7437) (undo-tree-id30568 . -1) (undo-tree-id30569 . -1) (undo-tree-id30570 . -2)) nil (26156 59135 939626 887000) 0 nil] [nil nil ((#("100" 0 3 (fontified t)) . 7441) (undo-tree-id30440 . -2) (undo-tree-id30441 . -3) (undo-tree-id30442 . -3) (undo-tree-id30443 . -3) (undo-tree-id30444 . -3) (undo-tree-id30445 . -3) (undo-tree-id30446 . -3) (undo-tree-id30447 . -3) (undo-tree-id30448 . -3) (undo-tree-id30449 . -3) (undo-tree-id30450 . -3)) ((7441 . 7444)) (26156 59130 941415 863000) 0 nil])
([nil nil ((7437 . 7439)) nil (26156 59135 939595 660000) 0 nil])
([nil nil ((7441 . 7443)) ((#("50" 0 2 (fontified t)) . 7441) (undo-tree-id30487 . -1) (undo-tree-id30488 . -1) (undo-tree-id30489 . -1) (undo-tree-id30490 . -1) (undo-tree-id30491 . -1) (undo-tree-id30492 . -1) (undo-tree-id30493 . -1) (undo-tree-id30494 . -1) (undo-tree-id30495 . -1) (undo-tree-id30496 . -1) (undo-tree-id30497 . -1) (undo-tree-id30498 . -1) (undo-tree-id30499 . -1) (undo-tree-id30500 . -1) (undo-tree-id30501 . -1) (undo-tree-id30502 . -1) (undo-tree-id30503 . -1) (undo-tree-id30504 . -1) (undo-tree-id30505 . -1) (undo-tree-id30506 . -1) (undo-tree-id30507 . -1) (undo-tree-id30508 . -1) (undo-tree-id30509 . -1) (undo-tree-id30510 . -1) (undo-tree-id30511 . -1) (undo-tree-id30512 . -1) (undo-tree-id30513 . -1) (undo-tree-id30514 . -1) (undo-tree-id30515 . -1) (undo-tree-id30516 . -1) (undo-tree-id30517 . -1) (undo-tree-id30518 . -1) (undo-tree-id30519 . -1) (undo-tree-id30520 . -1) (undo-tree-id30521 . -1) (undo-tree-id30522 . -1) (undo-tree-id30523 . -1) (undo-tree-id30524 . -1) (undo-tree-id30525 . -1) (undo-tree-id30526 . -1) (undo-tree-id30527 . -1) (undo-tree-id30528 . -1) (undo-tree-id30529 . -1) (undo-tree-id30530 . -1) (undo-tree-id30531 . -1) (undo-tree-id30532 . -1) (undo-tree-id30533 . -1) (undo-tree-id30534 . -1) (undo-tree-id30535 . -1) (undo-tree-id30536 . -1) (undo-tree-id30537 . -1) (undo-tree-id30538 . -1) (undo-tree-id30539 . -1) (undo-tree-id30540 . -1) (undo-tree-id30541 . -1) (undo-tree-id30542 . -1) (undo-tree-id30543 . -1) (undo-tree-id30544 . -1) (undo-tree-id30545 . -1) (undo-tree-id30546 . -1) (undo-tree-id30547 . -1) (undo-tree-id30548 . -1) (undo-tree-id30549 . -1) (undo-tree-id30550 . -1) (undo-tree-id30551 . -1) (undo-tree-id30552 . -1) (undo-tree-id30553 . -1) (undo-tree-id30554 . -1) (undo-tree-id30555 . -1) (undo-tree-id30556 . -1) (undo-tree-id30557 . -1) (undo-tree-id30558 . -1) (undo-tree-id30559 . -1) (undo-tree-id30560 . -1) (undo-tree-id30561 . -1) (undo-tree-id30562 . -1) (undo-tree-id30563 . -1) (undo-tree-id30564 . -1) (undo-tree-id30565 . -1) (undo-tree-id30566 . -1) (undo-tree-id30567 . -1) (t 26156 59129 663985 144000)) (26156 59129 552942 907000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -5648) (undo-tree-id30593 . -1) (undo-tree-id30594 . -1) (undo-tree-id30595 . -1) (undo-tree-id30596 . -1) (undo-tree-id30597 . -1) (undo-tree-id30598 . -1) (undo-tree-id30599 . -1) (undo-tree-id30600 . -1) (undo-tree-id30601 . -1) (undo-tree-id30602 . -1) (undo-tree-id30603 . -1) (undo-tree-id30604 . -1) 5649 (5647 . 5649) (#("0" 0 1 (fontified t)) . -5647) (undo-tree-id30605 . -1) (undo-tree-id30606 . -1) (undo-tree-id30607 . -1) (undo-tree-id30608 . -1) (undo-tree-id30609 . -1) (undo-tree-id30610 . -1) (undo-tree-id30611 . -1) (undo-tree-id30612 . -1) (undo-tree-id30613 . -1) (undo-tree-id30614 . -1) (undo-tree-id30615 . -1) (undo-tree-id30616 . -1) (undo-tree-id30617 . -1) 5648 (t 26156 59136 28317 815000)) nil (26156 59169 365004 203000) 0 nil])
nil
([nil nil ((5661 . 5662) (#("1" 0 1 (fontified t)) . -5661) (undo-tree-id30571 . -1) (undo-tree-id30572 . -1) (undo-tree-id30573 . -1) (undo-tree-id30574 . -1) (undo-tree-id30575 . -1) (undo-tree-id30576 . -1) (undo-tree-id30577 . -1) (undo-tree-id30578 . -1) (undo-tree-id30579 . -1) (undo-tree-id30580 . -1) (undo-tree-id30581 . -1) (undo-tree-id30582 . -1) (undo-tree-id30583 . -1) (undo-tree-id30584 . -1) (undo-tree-id30585 . -1) (undo-tree-id30586 . -1) (undo-tree-id30587 . -1) (undo-tree-id30588 . -1) (undo-tree-id30589 . -1) (undo-tree-id30590 . -1) (undo-tree-id30591 . -1) (undo-tree-id30592 . -1) 5662) nil (26156 59169 364944 909000) 0 nil])
([nil nil ((7787 . 7788) (t 26156 59169 450039 446000)) nil (26156 59238 731138 422000) 0 nil])
([nil nil ((7902 . 7903) 7908 (t 26156 59238 845487 462000)) nil (26156 59244 157724 172000) 0 nil])
([nil nil ((7954 . 7955) 7961) nil (26156 59244 157712 408000) 0 nil])
([nil nil ((#(".get_points();" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 7318) (undo-tree-id30619 . -7) (undo-tree-id30620 . -7) (undo-tree-id30621 . -7) (undo-tree-id30622 . -1) (undo-tree-id30623 . -1) (undo-tree-id30624 . -1) (undo-tree-id30625 . -1) (undo-tree-id30626 . -1) (undo-tree-id30627 . -1) (undo-tree-id30628 . -1) (undo-tree-id30629 . -1) (undo-tree-id30630 . -1) (undo-tree-id30631 . -1) (undo-tree-id30632 . -1) (undo-tree-id30633 . -1) (undo-tree-id30634 . -1) (undo-tree-id30635 . -1) (undo-tree-id30636 . -1) (undo-tree-id30637 . -1) (undo-tree-id30638 . -1) (undo-tree-id30639 . -1) (undo-tree-id30640 . -1) (undo-tree-id30641 . -1) (undo-tree-id30642 . -1) (undo-tree-id30643 . -1) (undo-tree-id30644 . -1) (undo-tree-id30645 . -1) (undo-tree-id30646 . -14) (t 26156 59244 237748 713000)) nil (26156 59328 388787 635000) 0 nil])
([nil nil ((7318 . 7319)) nil (26156 59328 388289 763000) 0 nil])
([nil nil ((#(".get_points();" 0 1 (fontified t) 1 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (fontified t)) . 7432) (undo-tree-id30618 . -14)) nil (26156 59328 388285 245000) 0 nil])
([nil nil ((7432 . 7433)) nil (26156 59328 388258 436000) 0 nil])
([nil nil ((apply yas--snippet-revive 7445 7457 #s(yas--snippet nil nil #s(yas--exit 7457 nil) 155 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7457 nil) 155 nil nil nil nil)) (7445 . 7457) (#("get_points()$0" 0 14 (fontified nil)) . 7445) (7445 . 7459) (#("ge" 0 2 (fontified nil)) . 7445) (7445 . 7447) (#("get_points()" 0 12 (fontified nil)) . -7445) (7445 . 7457) (#("ge" 0 2 (fontified t)) . -7445) (undo-tree-id31068 . -2) (undo-tree-id31069 . -2) (undo-tree-id31070 . -2) (undo-tree-id31071 . -1) (undo-tree-id31072 . -1) (undo-tree-id31073 . -1) (undo-tree-id31074 . -1) (undo-tree-id31075 . -1) (undo-tree-id31076 . -1) (undo-tree-id31077 . -1) (undo-tree-id31078 . -1) (undo-tree-id31079 . -1) (undo-tree-id31080 . -2) (undo-tree-id31081 . -2) (undo-tree-id31082 . -2) (undo-tree-id31083 . -2) (undo-tree-id31084 . -2) (undo-tree-id31085 . -2) (undo-tree-id31086 . -2) (undo-tree-id31087 . -2) (undo-tree-id31088 . -2) (undo-tree-id31089 . -2) (undo-tree-id31090 . -2) (undo-tree-id31091 . -2) (undo-tree-id31092 . -2) (undo-tree-id31093 . -2) (undo-tree-id31094 . -2) (undo-tree-id31095 . -2) (undo-tree-id31096 . -2) (undo-tree-id31097 . -2) (undo-tree-id31098 . -2) (undo-tree-id31099 . -2) (undo-tree-id31100 . -2) (undo-tree-id31101 . -2) (undo-tree-id31102 . -2) (undo-tree-id31103 . -2) (undo-tree-id31104 . -2) (undo-tree-id31105 . -2) (undo-tree-id31106 . -2) (undo-tree-id31107 . -2) (undo-tree-id31108 . -2) (undo-tree-id31109 . -2) (undo-tree-id31110 . -2) (undo-tree-id31111 . -2) (undo-tree-id31112 . -2) (undo-tree-id31113 . -2) (undo-tree-id31114 . -2) (undo-tree-id31115 . -2) (undo-tree-id31116 . -2) (undo-tree-id31117 . -2) (undo-tree-id31118 . -2) (undo-tree-id31119 . -2) (undo-tree-id31120 . -2) (undo-tree-id31121 . -2) (undo-tree-id31122 . -2) (undo-tree-id31123 . -2) (undo-tree-id31124 . -2) (undo-tree-id31125 . -2) (undo-tree-id31126 . -2) (undo-tree-id31127 . -2) (undo-tree-id31128 . -2) (undo-tree-id31129 . -2) (undo-tree-id31130 . -2) (undo-tree-id31131 . -2) (undo-tree-id31132 . -2) (undo-tree-id31133 . -2) (undo-tree-id31134 . -2) (undo-tree-id31135 . -2) (undo-tree-id31136 . -2) (undo-tree-id31137 . -2) (undo-tree-id31138 . -2) (undo-tree-id31139 . -2) (undo-tree-id31140 . -2) (undo-tree-id31141 . -2) (undo-tree-id31142 . -2) (undo-tree-id31143 . -2) (undo-tree-id31144 . -2) (undo-tree-id31145 . -2) (undo-tree-id31146 . -2) (undo-tree-id31147 . -2) (undo-tree-id31148 . -2) (undo-tree-id31149 . -2) (undo-tree-id31150 . -2) (undo-tree-id31151 . -2) (undo-tree-id31152 . -2) (undo-tree-id31153 . -2) (undo-tree-id31154 . -2) (undo-tree-id31155 . -2) (undo-tree-id31156 . -2) (undo-tree-id31157 . -2) (undo-tree-id31158 . -2) (undo-tree-id31159 . -2) (undo-tree-id31160 . -2) (undo-tree-id31161 . -2) (undo-tree-id31162 . -2) (undo-tree-id31163 . -2) (undo-tree-id31164 . -2) (undo-tree-id31165 . -2) (undo-tree-id31166 . -2) 7447 (7444 . 7447) (t 26156 59328 497718 311000)) nil (26156 59345 337980 425000) 0 nil])
([nil nil ((7539 . 7540)) nil (26156 59345 337794 648000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -7542) (undo-tree-id30979 . -1) (undo-tree-id30980 . -1) (undo-tree-id30981 . -1) (undo-tree-id30982 . -1) (undo-tree-id30983 . 1) (undo-tree-id30984 . -1) (undo-tree-id30985 . -1) (undo-tree-id30986 . -1) (undo-tree-id30987 . -1) (undo-tree-id30988 . -1) (undo-tree-id30989 . -1) (undo-tree-id30990 . -1) (undo-tree-id30991 . -1) (undo-tree-id30992 . -1) (undo-tree-id30993 . -1) (undo-tree-id30994 . -1) (undo-tree-id30995 . -1) (undo-tree-id30996 . -1) (undo-tree-id30997 . -1) (undo-tree-id30998 . -1) (undo-tree-id30999 . -1) (undo-tree-id31000 . -1) (undo-tree-id31001 . -1) (undo-tree-id31002 . -1) (undo-tree-id31003 . -1) (undo-tree-id31004 . -1) (undo-tree-id31005 . -1) (undo-tree-id31006 . -1) (undo-tree-id31007 . -1) (undo-tree-id31008 . -1) (undo-tree-id31009 . -1) (undo-tree-id31010 . -1) (undo-tree-id31011 . -1) (undo-tree-id31012 . -1) (undo-tree-id31013 . -1) (undo-tree-id31014 . -1) (undo-tree-id31015 . -1) (undo-tree-id31016 . -1) (undo-tree-id31017 . -1) (undo-tree-id31018 . -1) (undo-tree-id31019 . -1) (undo-tree-id31020 . -1) (undo-tree-id31021 . -1) (undo-tree-id31022 . -1) (undo-tree-id31023 . -1) (undo-tree-id31024 . -1) (undo-tree-id31025 . -1) (undo-tree-id31026 . -1) (undo-tree-id31027 . -1) (undo-tree-id31028 . -1) (undo-tree-id31029 . -1) (undo-tree-id31030 . -1) (undo-tree-id31031 . -1) (undo-tree-id31032 . -1) (undo-tree-id31033 . -1) (undo-tree-id31034 . -1) (undo-tree-id31035 . -1) (undo-tree-id31036 . -1) (undo-tree-id31037 . -1) (undo-tree-id31038 . -1) (undo-tree-id31039 . -1) (undo-tree-id31040 . -1) (undo-tree-id31041 . -1) (undo-tree-id31042 . -1) (undo-tree-id31043 . -1) (undo-tree-id31044 . -1) (undo-tree-id31045 . -1) (undo-tree-id31046 . -1) (undo-tree-id31047 . -1) (undo-tree-id31048 . -1) (undo-tree-id31049 . -1) (undo-tree-id31050 . -1) (undo-tree-id31051 . -1) (undo-tree-id31052 . -1) (undo-tree-id31053 . -1) (undo-tree-id31054 . -1) (undo-tree-id31055 . -1) (undo-tree-id31056 . -1) (undo-tree-id31057 . -1) (undo-tree-id31058 . -1) (undo-tree-id31059 . -1) (undo-tree-id31060 . -1) (undo-tree-id31061 . -1) (undo-tree-id31062 . -1) (undo-tree-id31063 . -1) 7543 (#("x" 0 1 (fontified t)) . 7543) (undo-tree-id31064 . -1) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7542 7542 nil nil nil t #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) #s(yas--exit 7546 nil) 156 nil #s(yas--field 1 7542 7542 nil nil nil t #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) nil nil)) (7539 . 7548) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 7539) (7539 . 7560) (#("ge" 0 2 (fontified nil)) . 7539) (7539 . 7541) (#("get(…)" 0 6 (fontified nil)) . -7539) (7539 . 7545) (#("ge" 0 2 (fontified t)) . -7539) (undo-tree-id31065 . -2) (undo-tree-id31066 . -2) (undo-tree-id31067 . -2) 7541 (7539 . 7541)) nil (26156 59345 337782 297000) 0 nil])
([nil nil ((apply yas--snippet-revive 7539 7546 #s(yas--snippet nil (#s(yas--field 1 7542 7542 nil nil nil t #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) #s(yas--exit 7546 nil) 156 nil #s(yas--field 1 7542 7542 nil nil nil t #s(yas--field 2 7544 7545 nil nil nil nil #s(yas--exit 7546 nil))) nil nil))) nil (26156 59345 337594 150000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 7542) (undo-tree-id30974 . 1) (undo-tree-id30975 . -1) (undo-tree-id30976 . -1) (undo-tree-id30977 . -1) (undo-tree-id30978 . -1)) nil (26156 59345 337591 436000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7542) (undo-tree-id30971 . 1) (undo-tree-id30972 . -1) (undo-tree-id30973 . -1)) nil (26156 59345 337581 113000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 7542) (undo-tree-id30966 . 1) (undo-tree-id30967 . -1) (undo-tree-id30968 . -1) (undo-tree-id30969 . -1) (undo-tree-id30970 . -1)) nil (26156 59345 337573 400000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7542) (undo-tree-id30960 . 1) (undo-tree-id30961 . -1) (undo-tree-id30962 . -1) (undo-tree-id30963 . -1) (undo-tree-id30964 . -1) (undo-tree-id30965 . -1)) nil (26156 59345 337560 510000) 0 nil])
([nil nil ((apply yas--snippet-revive 7539 7551 #s(yas--snippet nil nil #s(yas--exit 7551 nil) 157 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7551 nil) 157 nil nil nil nil)) (7539 . 7551) (#("get_points()$0" 0 14 (fontified nil)) . 7539) (7539 . 7553) (#("get_" 0 4 (fontified nil)) . 7539) (7539 . 7543) (#("get_points()" 0 12 (fontified nil)) . -7539) (7539 . 7551) (#("get_" 0 4 (fontified t)) . -7539) (undo-tree-id30647 . -3) (undo-tree-id30648 . -3) (undo-tree-id30649 . -3) (undo-tree-id30650 . -4) (undo-tree-id30651 . -4) (undo-tree-id30652 . -3) (undo-tree-id30653 . -3) (undo-tree-id30654 . -3) (undo-tree-id30655 . -3) (undo-tree-id30656 . -3) (undo-tree-id30657 . -3) (undo-tree-id30658 . -3) (undo-tree-id30659 . -3) (undo-tree-id30660 . -3) (undo-tree-id30661 . -3) (undo-tree-id30662 . -3) (undo-tree-id30663 . -3) (undo-tree-id30664 . -3) (undo-tree-id30665 . -3) (undo-tree-id30666 . -3) (undo-tree-id30667 . -3) (undo-tree-id30668 . -3) (undo-tree-id30669 . -3) (undo-tree-id30670 . -3) (undo-tree-id30671 . -3) (undo-tree-id30672 . -3) (undo-tree-id30673 . -3) (undo-tree-id30674 . -3) (undo-tree-id30675 . -3) (undo-tree-id30676 . -3) (undo-tree-id30677 . -3) (undo-tree-id30678 . -3) (undo-tree-id30679 . -3) (undo-tree-id30680 . -3) (undo-tree-id30681 . -3) (undo-tree-id30682 . -3) (undo-tree-id30683 . -3) (undo-tree-id30684 . -3) (undo-tree-id30685 . -3) (undo-tree-id30686 . -3) (undo-tree-id30687 . -3) (undo-tree-id30688 . -3) (undo-tree-id30689 . -3) (undo-tree-id30690 . -3) (undo-tree-id30691 . -3) (undo-tree-id30692 . -3) (undo-tree-id30693 . -3) (undo-tree-id30694 . -3) (undo-tree-id30695 . -3) (undo-tree-id30696 . -3) (undo-tree-id30697 . -3) (undo-tree-id30698 . -3) (undo-tree-id30699 . -3) (undo-tree-id30700 . -3) (undo-tree-id30701 . -3) (undo-tree-id30702 . -3) (undo-tree-id30703 . -3) (undo-tree-id30704 . -3) (undo-tree-id30705 . -3) (undo-tree-id30706 . -3) (undo-tree-id30707 . -3) (undo-tree-id30708 . -3) (undo-tree-id30709 . -3) (undo-tree-id30710 . -3) (undo-tree-id30711 . -3) (undo-tree-id30712 . -3) (undo-tree-id30713 . -3) (undo-tree-id30714 . -3) (undo-tree-id30715 . -3) (undo-tree-id30716 . -3) (undo-tree-id30717 . -3) (undo-tree-id30718 . -3) (undo-tree-id30719 . -3) (undo-tree-id30720 . -3) (undo-tree-id30721 . -3) (undo-tree-id30722 . -3) (undo-tree-id30723 . -3) (undo-tree-id30724 . -3) (undo-tree-id30725 . -3) (undo-tree-id30726 . -3) (undo-tree-id30727 . -3) (undo-tree-id30728 . -3) (undo-tree-id30729 . -3) (undo-tree-id30730 . -3) (undo-tree-id30731 . -3) (undo-tree-id30732 . -3) (undo-tree-id30733 . -3) (undo-tree-id30734 . -3) (undo-tree-id30735 . -3) (undo-tree-id30736 . -3) (undo-tree-id30737 . -3) (undo-tree-id30738 . -3) (undo-tree-id30739 . -3) (undo-tree-id30740 . -3) (undo-tree-id30741 . -3) (undo-tree-id30742 . -3) (undo-tree-id30743 . -3) (undo-tree-id30744 . -3) (undo-tree-id30745 . -3) (undo-tree-id30746 . -3) (undo-tree-id30747 . -3) (undo-tree-id30748 . -3) (undo-tree-id30749 . -3) (undo-tree-id30750 . -2) (undo-tree-id30751 . -2) (undo-tree-id30752 . -2) (undo-tree-id30753 . -2) (undo-tree-id30754 . -2) (undo-tree-id30755 . -2) (undo-tree-id30756 . -2) (undo-tree-id30757 . -2) (undo-tree-id30758 . -2) (undo-tree-id30759 . -2) (undo-tree-id30760 . -2) (undo-tree-id30761 . -2) (undo-tree-id30762 . -2) (undo-tree-id30763 . -2) (undo-tree-id30764 . -2) (undo-tree-id30765 . -2) (undo-tree-id30766 . -2) (undo-tree-id30767 . -2) (undo-tree-id30768 . -2) (undo-tree-id30769 . -2) (undo-tree-id30770 . -2) (undo-tree-id30771 . -2) (undo-tree-id30772 . -3) (undo-tree-id30773 . -3) (undo-tree-id30774 . -3) (undo-tree-id30775 . -3) (undo-tree-id30776 . -3) (undo-tree-id30777 . -3) (undo-tree-id30778 . -3) (undo-tree-id30779 . -3) (undo-tree-id30780 . -3) (undo-tree-id30781 . -3) (undo-tree-id30782 . -3) (undo-tree-id30783 . -3) (undo-tree-id30784 . -3) (undo-tree-id30785 . -3) (undo-tree-id30786 . -3) (undo-tree-id30787 . -3) (undo-tree-id30788 . -3) (undo-tree-id30789 . -3) (undo-tree-id30790 . -3) (undo-tree-id30791 . -3) (undo-tree-id30792 . -3) (undo-tree-id30793 . -3) (undo-tree-id30794 . -3) (undo-tree-id30795 . -3) (undo-tree-id30796 . -3) (undo-tree-id30797 . -3) (undo-tree-id30798 . -3) (undo-tree-id30799 . -3) (undo-tree-id30800 . -3) (undo-tree-id30801 . -3) (undo-tree-id30802 . -3) (undo-tree-id30803 . -3) (undo-tree-id30804 . -3) (undo-tree-id30805 . -3) (undo-tree-id30806 . -3) (undo-tree-id30807 . -3) (undo-tree-id30808 . -3) (undo-tree-id30809 . -3) (undo-tree-id30810 . -3) (undo-tree-id30811 . -3) (undo-tree-id30812 . -3) (undo-tree-id30813 . -3) (undo-tree-id30814 . -3) (undo-tree-id30815 . -3) (undo-tree-id30816 . -3) (undo-tree-id30817 . -3) (undo-tree-id30818 . -3) (undo-tree-id30819 . -3) (undo-tree-id30820 . -3) (undo-tree-id30821 . -3) (undo-tree-id30822 . -3) (undo-tree-id30823 . -3) (undo-tree-id30824 . -3) (undo-tree-id30825 . -3) (undo-tree-id30826 . -3) (undo-tree-id30827 . -3) (undo-tree-id30828 . -3) (undo-tree-id30829 . -3) (undo-tree-id30830 . -3) (undo-tree-id30831 . -3) (undo-tree-id30832 . -3) (undo-tree-id30833 . -3) (undo-tree-id30834 . -3) (undo-tree-id30835 . -3) (undo-tree-id30836 . -3) (undo-tree-id30837 . -3) (undo-tree-id30838 . -3) (undo-tree-id30839 . -3) (undo-tree-id30840 . -3) (undo-tree-id30841 . -3) (undo-tree-id30842 . -3) (undo-tree-id30843 . -3) (undo-tree-id30844 . -3) (undo-tree-id30845 . -3) (undo-tree-id30846 . -3) (undo-tree-id30847 . -3) (undo-tree-id30848 . -3) (undo-tree-id30849 . -3) (undo-tree-id30850 . -3) (undo-tree-id30851 . -3) (undo-tree-id30852 . -3) (undo-tree-id30853 . -3) (undo-tree-id30854 . -3) (undo-tree-id30855 . -3) (undo-tree-id30856 . -3) (undo-tree-id30857 . -3) (undo-tree-id30858 . -3) (undo-tree-id30859 . -3) (undo-tree-id30860 . -3) (undo-tree-id30861 . -3) (undo-tree-id30862 . -3) (undo-tree-id30863 . -3) (undo-tree-id30864 . -3) (undo-tree-id30865 . -3) (undo-tree-id30866 . -3) (undo-tree-id30867 . -3) (undo-tree-id30868 . -4) (undo-tree-id30869 . -4) (undo-tree-id30870 . -4) (undo-tree-id30871 . -4) (undo-tree-id30872 . -4) (undo-tree-id30873 . -4) (undo-tree-id30874 . -4) (undo-tree-id30875 . -4) (undo-tree-id30876 . -4) (undo-tree-id30877 . -4) (undo-tree-id30878 . -4) (undo-tree-id30879 . -4) (undo-tree-id30880 . -4) (undo-tree-id30881 . -4) (undo-tree-id30882 . -4) (undo-tree-id30883 . -4) (undo-tree-id30884 . -4) (undo-tree-id30885 . -4) (undo-tree-id30886 . -4) (undo-tree-id30887 . -4) (undo-tree-id30888 . -4) (undo-tree-id30889 . -4) (undo-tree-id30890 . -4) (undo-tree-id30891 . -4) (undo-tree-id30892 . -4) (undo-tree-id30893 . -4) (undo-tree-id30894 . -4) (undo-tree-id30895 . -4) (undo-tree-id30896 . -4) (undo-tree-id30897 . -4) (undo-tree-id30898 . -4) (undo-tree-id30899 . -4) (undo-tree-id30900 . -4) (undo-tree-id30901 . -4) (undo-tree-id30902 . -4) (undo-tree-id30903 . -4) (undo-tree-id30904 . -4) (undo-tree-id30905 . -4) (undo-tree-id30906 . -4) (undo-tree-id30907 . -4) (undo-tree-id30908 . -4) (undo-tree-id30909 . -4) (undo-tree-id30910 . -4) (undo-tree-id30911 . -4) (undo-tree-id30912 . -4) (undo-tree-id30913 . -4) (undo-tree-id30914 . -4) (undo-tree-id30915 . -4) (undo-tree-id30916 . -4) (undo-tree-id30917 . -4) (undo-tree-id30918 . -4) (undo-tree-id30919 . -4) (undo-tree-id30920 . -4) (undo-tree-id30921 . -4) (undo-tree-id30922 . -4) (undo-tree-id30923 . -4) (undo-tree-id30924 . -4) (undo-tree-id30925 . -4) (undo-tree-id30926 . -4) (undo-tree-id30927 . -4) (undo-tree-id30928 . -4) (undo-tree-id30929 . -4) (undo-tree-id30930 . -4) (undo-tree-id30931 . -4) (undo-tree-id30932 . -4) (undo-tree-id30933 . -4) (undo-tree-id30934 . -4) (undo-tree-id30935 . -4) (undo-tree-id30936 . -4) (undo-tree-id30937 . -4) (undo-tree-id30938 . -4) (undo-tree-id30939 . -4) (undo-tree-id30940 . -4) (undo-tree-id30941 . -4) (undo-tree-id30942 . -4) (undo-tree-id30943 . -4) (undo-tree-id30944 . -4) (undo-tree-id30945 . -4) (undo-tree-id30946 . -4) (undo-tree-id30947 . -4) (undo-tree-id30948 . -4) (undo-tree-id30949 . -4) (undo-tree-id30950 . -4) (undo-tree-id30951 . -4) (undo-tree-id30952 . -4) (undo-tree-id30953 . -4) (undo-tree-id30954 . -4) (undo-tree-id30955 . -4) (undo-tree-id30956 . -4) (undo-tree-id30957 . -4) (undo-tree-id30958 . -4) (undo-tree-id30959 . -4) 7543 (7542 . 7543)) nil (26156 59345 337511 505000) 0 nil])
([nil nil ((7708 . 7709) (t 26156 59345 430492 182000)) nil (26156 59357 323645 662000) 0 nil])
([nil nil ((apply yas--snippet-revive 7708 7720 #s(yas--snippet nil nil #s(yas--exit 7720 nil) 158 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7720 nil) 158 nil nil nil nil)) (7708 . 7720) (#("get_points()$0" 0 14 (fontified nil)) . 7708) (7708 . 7722) (#("get" 0 3 (fontified nil)) . 7708) (7708 . 7711) (#("get_points()" 0 12 (fontified nil)) . -7708) (7708 . 7720) (#("get" 0 3 (fontified t)) . -7708) (undo-tree-id31187 . -3) (undo-tree-id31188 . -3) (undo-tree-id31189 . -1) (undo-tree-id31190 . -1) (undo-tree-id31191 . -1) (undo-tree-id31192 . -1) (undo-tree-id31193 . -1) (undo-tree-id31194 . -1) (undo-tree-id31195 . -1) (undo-tree-id31196 . -1) (undo-tree-id31197 . -1) (undo-tree-id31198 . -1) (undo-tree-id31199 . -2) (undo-tree-id31200 . -2) (undo-tree-id31201 . -2) (undo-tree-id31202 . -2) (undo-tree-id31203 . -2) (undo-tree-id31204 . -2) (undo-tree-id31205 . -2) (undo-tree-id31206 . -2) (undo-tree-id31207 . -2) (undo-tree-id31208 . -2) (undo-tree-id31209 . -2) (undo-tree-id31210 . -2) (undo-tree-id31211 . -2) (undo-tree-id31212 . -2) (undo-tree-id31213 . -2) (undo-tree-id31214 . -2) (undo-tree-id31215 . -2) (undo-tree-id31216 . -2) (undo-tree-id31217 . -2) (undo-tree-id31218 . -2) (undo-tree-id31219 . -2) (undo-tree-id31220 . -2) (undo-tree-id31221 . -2) (undo-tree-id31222 . -2) (undo-tree-id31223 . -2) (undo-tree-id31224 . -2) (undo-tree-id31225 . -2) (undo-tree-id31226 . -2) (undo-tree-id31227 . -2) (undo-tree-id31228 . -2) (undo-tree-id31229 . -2) (undo-tree-id31230 . -2) (undo-tree-id31231 . -2) (undo-tree-id31232 . -2) (undo-tree-id31233 . -2) (undo-tree-id31234 . -2) (undo-tree-id31235 . -2) (undo-tree-id31236 . -2) (undo-tree-id31237 . -2) (undo-tree-id31238 . -2) (undo-tree-id31239 . -2) (undo-tree-id31240 . -2) (undo-tree-id31241 . -2) (undo-tree-id31242 . -2) (undo-tree-id31243 . -2) (undo-tree-id31244 . -2) (undo-tree-id31245 . -2) (undo-tree-id31246 . -2) (undo-tree-id31247 . -3) (undo-tree-id31248 . -3) (undo-tree-id31249 . -3) (undo-tree-id31250 . -3) (undo-tree-id31251 . -3) (undo-tree-id31252 . -3) (undo-tree-id31253 . -3) (undo-tree-id31254 . -3) (undo-tree-id31255 . -3) (undo-tree-id31256 . -3) (undo-tree-id31257 . -3) (undo-tree-id31258 . -3) (undo-tree-id31259 . -3) (undo-tree-id31260 . -3) (undo-tree-id31261 . -3) (undo-tree-id31262 . -3) (undo-tree-id31263 . -3) (undo-tree-id31264 . -3) (undo-tree-id31265 . -3) (undo-tree-id31266 . -3) (undo-tree-id31267 . -3) (undo-tree-id31268 . -3) (undo-tree-id31269 . -3) (undo-tree-id31270 . -3) (undo-tree-id31271 . -3) (undo-tree-id31272 . -3) (undo-tree-id31273 . -3) (undo-tree-id31274 . -3) (undo-tree-id31275 . -3) (undo-tree-id31276 . -3) (undo-tree-id31277 . -3) (undo-tree-id31278 . -3) (undo-tree-id31279 . -3) (undo-tree-id31280 . -3) (undo-tree-id31281 . -3) (undo-tree-id31282 . -3) (undo-tree-id31283 . -3) (undo-tree-id31284 . -3) (undo-tree-id31285 . -3) (undo-tree-id31286 . -3) (undo-tree-id31287 . -3) (undo-tree-id31288 . -3) (undo-tree-id31289 . -3) (undo-tree-id31290 . -3) (undo-tree-id31291 . -3) (undo-tree-id31292 . -3) (undo-tree-id31293 . -3) (undo-tree-id31294 . -3) (undo-tree-id31295 . -3) (undo-tree-id31296 . -3) (undo-tree-id31297 . -3) (undo-tree-id31298 . -3) (undo-tree-id31299 . -3) (undo-tree-id31300 . -3) 7711 (7708 . 7711)) nil (26156 59357 323631 443000) 0 nil])
([nil nil ((7802 . 7803)) nil (26156 59357 323417 235000) 0 nil])
([nil nil ((apply yas--snippet-revive 7802 7814 #s(yas--snippet nil nil #s(yas--exit 7814 nil) 159 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7814 nil) 159 nil nil nil nil)) (7802 . 7814) (#("get_points()$0" 0 14 (fontified nil)) . 7802) (7802 . 7816) (#("ge" 0 2 (fontified nil)) . 7802) (7802 . 7804) (#("get_points()" 0 12 (fontified nil)) . -7802) (7802 . 7814) (#("ge" 0 2 (fontified t)) . -7802) (undo-tree-id31167 . -2) (undo-tree-id31168 . -2) (undo-tree-id31169 . -2) (undo-tree-id31170 . -2) (undo-tree-id31171 . -2) (undo-tree-id31172 . -2) (undo-tree-id31173 . -2) (undo-tree-id31174 . -2) (undo-tree-id31175 . -2) (undo-tree-id31176 . -2) (undo-tree-id31177 . -2) (undo-tree-id31178 . -2) (undo-tree-id31179 . -2) (undo-tree-id31180 . -2) (undo-tree-id31181 . -2) (undo-tree-id31182 . -2) (undo-tree-id31183 . -2) (undo-tree-id31184 . -2) (undo-tree-id31185 . -2) (undo-tree-id31186 . -2) 7804 (7802 . 7804)) nil (26156 59357 323403 811000) 0 nil])
([nil nil ((apply 6 7628 7692 undo--wrap-and-run-primitive-undo 7628 7692 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7663) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7632) 7628)) (t 26156 59357 407035 69000)) nil (26156 59383 210526 35000) 0 nil])
([nil nil ((apply -6 7627 7698 undo--wrap-and-run-primitive-undo 7627 7698 ((7666 . 7669) (7632 . 7635) 7627)) (t 26156 59383 296196 373000)) nil (26156 59426 708226 152000) 0 nil])
([nil nil ((7397 . 7399) (#("5" 0 1 (fontified t)) . -7397) (undo-tree-id31359 . -1) (#("0" 0 1 (fontified t)) . -7398) (undo-tree-id31360 . -1) (#(" " 0 1 (fontified t)) . -7399) (undo-tree-id31361 . -1) 7400) nil (26156 59426 708220 516000) 0 nil])
([nil nil ((7423 . 7424) (#("5" 0 1 (fontified t)) . -7423) (undo-tree-id31301 . -1) (undo-tree-id31302 . -1) (undo-tree-id31303 . -1) (undo-tree-id31304 . -1) (undo-tree-id31305 . -1) (undo-tree-id31306 . -1) (undo-tree-id31307 . -1) (undo-tree-id31308 . -1) (undo-tree-id31309 . -1) (undo-tree-id31310 . -1) (undo-tree-id31311 . -1) (undo-tree-id31312 . -1) (undo-tree-id31313 . -1) (undo-tree-id31314 . -1) (undo-tree-id31315 . -1) (undo-tree-id31316 . -1) (undo-tree-id31317 . -1) (undo-tree-id31318 . -1) (undo-tree-id31319 . -1) (undo-tree-id31320 . -1) (undo-tree-id31321 . -1) (undo-tree-id31322 . -1) (undo-tree-id31323 . -1) (undo-tree-id31324 . -1) (undo-tree-id31325 . -1) (undo-tree-id31326 . -1) (undo-tree-id31327 . -1) (undo-tree-id31328 . -1) (undo-tree-id31329 . -1) (undo-tree-id31330 . -1) (undo-tree-id31331 . -1) (undo-tree-id31332 . -1) (undo-tree-id31333 . -1) (undo-tree-id31334 . -1) (#("0" 0 1 (fontified t)) . -7424) (undo-tree-id31335 . -1) (undo-tree-id31336 . -1) (undo-tree-id31337 . -1) (undo-tree-id31338 . -1) (undo-tree-id31339 . -1) (undo-tree-id31340 . -1) (undo-tree-id31341 . -1) (undo-tree-id31342 . -1) (undo-tree-id31343 . -1) (undo-tree-id31344 . -1) (undo-tree-id31345 . -1) (undo-tree-id31346 . -1) (undo-tree-id31347 . -1) (undo-tree-id31348 . -1) (undo-tree-id31349 . -1) (undo-tree-id31350 . -1) (undo-tree-id31351 . -1) (undo-tree-id31352 . -1) (undo-tree-id31353 . -1) (undo-tree-id31354 . -1) (undo-tree-id31355 . -1) (undo-tree-id31356 . -1) (undo-tree-id31357 . -1) (undo-tree-id31358 . -1) 7425) nil (26156 59426 708199 884000) 0 nil])
([nil nil ((#(".get_points();" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 2071) (undo-tree-id31381 . -13) (undo-tree-id31382 . -13) (undo-tree-id31383 . -13) (undo-tree-id31384 . -13) (undo-tree-id31385 . -13) (undo-tree-id31386 . -13) (undo-tree-id31387 . -13) (undo-tree-id31388 . -13) (undo-tree-id31389 . -13) (undo-tree-id31390 . -13) (undo-tree-id31391 . -13) (undo-tree-id31392 . -13) (undo-tree-id31393 . -13) (undo-tree-id31394 . -13) (undo-tree-id31395 . -13) (undo-tree-id31396 . -13) (undo-tree-id31397 . -13) (undo-tree-id31398 . -13) (undo-tree-id31399 . -13) (undo-tree-id31400 . -13) (undo-tree-id31401 . -13) (undo-tree-id31402 . -13) (undo-tree-id31403 . -13) (undo-tree-id31404 . -13) (undo-tree-id31405 . -13) (undo-tree-id31406 . -13) (undo-tree-id31407 . -13) (undo-tree-id31408 . -14) (t 26156 59426 794111 847000)) nil (26156 61517 114351 489000) 0 nil])
([nil nil ((#(".get_points();" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t)) . 2092) (undo-tree-id31362 . -13) (undo-tree-id31363 . -13) (undo-tree-id31364 . -13) (undo-tree-id31365 . -13) (undo-tree-id31366 . -13) (undo-tree-id31367 . -13) (undo-tree-id31368 . -13) (undo-tree-id31369 . -13) (undo-tree-id31370 . -13) (undo-tree-id31371 . -13) (undo-tree-id31372 . -13) (undo-tree-id31373 . -13) (undo-tree-id31374 . -13) (undo-tree-id31375 . -13) (undo-tree-id31376 . -13) (undo-tree-id31377 . -13) (undo-tree-id31378 . -13) (undo-tree-id31379 . -13) (undo-tree-id31380 . -14)) nil (26156 61517 113859 845000) 0 nil])
([nil nil ((2071 . 2072)) nil (26156 61517 113805 355000) 0 nil])
([nil nil ((2093 . 2094)) nil (26156 61517 113793 982000) 0 nil])
([nil nil ((apply yas--snippet-revive 7293 7305 #s(yas--snippet nil nil #s(yas--exit 7305 nil) 160 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7305 nil) 160 nil nil nil nil)) (7293 . 7305) (#("get_points()$0" 0 14 (fontified nil)) . 7293) (7293 . 7307) (#("ge" 0 2 (fontified nil)) . 7293) (7293 . 7295) (#("get_points()" 0 12 (fontified nil)) . -7293) (7293 . 7305) (#("ge" 0 2 (fontified t)) . -7293) (undo-tree-id31528 . -1) (undo-tree-id31529 . -2) (undo-tree-id31530 . -2) (undo-tree-id31531 . -1) (undo-tree-id31532 . -1) (undo-tree-id31533 . -1) (undo-tree-id31534 . -1) (undo-tree-id31535 . -1) (undo-tree-id31536 . -1) (undo-tree-id31537 . -1) (undo-tree-id31538 . -1) (undo-tree-id31539 . -1) (undo-tree-id31540 . -1) (undo-tree-id31541 . -1) (undo-tree-id31542 . -1) (undo-tree-id31543 . -1) (undo-tree-id31544 . -1) (undo-tree-id31545 . -1) (undo-tree-id31546 . -1) (undo-tree-id31547 . -1) (undo-tree-id31548 . -1) (undo-tree-id31549 . -1) (undo-tree-id31550 . -1) (undo-tree-id31551 . -1) (undo-tree-id31552 . -1) (undo-tree-id31553 . -1) (undo-tree-id31554 . -1) (undo-tree-id31555 . -1) (undo-tree-id31556 . -1) (undo-tree-id31557 . -1) (undo-tree-id31558 . -1) (undo-tree-id31559 . -1) (undo-tree-id31560 . -1) (undo-tree-id31561 . -2) (undo-tree-id31562 . -2) (undo-tree-id31563 . -2) (undo-tree-id31564 . -2) (undo-tree-id31565 . -2) (undo-tree-id31566 . -2) (undo-tree-id31567 . -2) (undo-tree-id31568 . -2) (undo-tree-id31569 . -2) (undo-tree-id31570 . -2) (undo-tree-id31571 . -2) (undo-tree-id31572 . -2) (undo-tree-id31573 . -2) (undo-tree-id31574 . -2) (undo-tree-id31575 . -2) (undo-tree-id31576 . -2) (undo-tree-id31577 . -2) (undo-tree-id31578 . -2) (undo-tree-id31579 . -2) (undo-tree-id31580 . -2) (undo-tree-id31581 . -2) (undo-tree-id31582 . -2) (undo-tree-id31583 . -2) (undo-tree-id31584 . -2) (undo-tree-id31585 . -2) (undo-tree-id31586 . -2) (undo-tree-id31587 . -2) (undo-tree-id31588 . -2) (undo-tree-id31589 . -2) (undo-tree-id31590 . -2) (undo-tree-id31591 . -2) (undo-tree-id31592 . -2) (undo-tree-id31593 . -2) (undo-tree-id31594 . -2) (undo-tree-id31595 . -2) (undo-tree-id31596 . -2) (undo-tree-id31597 . -2) (undo-tree-id31598 . -2) (undo-tree-id31599 . -2) (undo-tree-id31600 . -2) (undo-tree-id31601 . -2) (undo-tree-id31602 . -2) (undo-tree-id31603 . -2) (undo-tree-id31604 . -2) (undo-tree-id31605 . -2) (undo-tree-id31606 . -2) (undo-tree-id31607 . -2) (undo-tree-id31608 . -2) (undo-tree-id31609 . -2) (undo-tree-id31610 . -2) (undo-tree-id31611 . -2) (undo-tree-id31612 . -2) (undo-tree-id31613 . -2) (undo-tree-id31614 . -2) (undo-tree-id31615 . -2) (undo-tree-id31616 . -2) (undo-tree-id31617 . -2) (undo-tree-id31618 . -2) (undo-tree-id31619 . -2) (undo-tree-id31620 . -2) (undo-tree-id31621 . -2) (undo-tree-id31622 . -2) (undo-tree-id31623 . -2) (undo-tree-id31624 . -2) (undo-tree-id31625 . -2) (undo-tree-id31626 . -2) (undo-tree-id31627 . -2) (undo-tree-id31628 . -2) (undo-tree-id31629 . -2) (undo-tree-id31630 . -2) (undo-tree-id31631 . -2) (undo-tree-id31632 . -2) (undo-tree-id31633 . -2) (undo-tree-id31634 . -2) (undo-tree-id31635 . -2) (undo-tree-id31636 . -2) (undo-tree-id31637 . -2) (undo-tree-id31638 . -2) (undo-tree-id31639 . -2) (undo-tree-id31640 . -2) (undo-tree-id31641 . -2) (undo-tree-id31642 . -2) (undo-tree-id31643 . -2) (undo-tree-id31644 . -2) (undo-tree-id31645 . -2) (undo-tree-id31646 . -2) 7295 (7292 . 7295) (t 26156 61517 225071 288000)) nil (26156 61528 52797 369000) 0 nil])
([nil nil ((apply yas--snippet-revive 7418 7430 #s(yas--snippet nil nil #s(yas--exit 7430 nil) 161 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7430 nil) 161 nil nil nil nil)) (7418 . 7430) (#("get_points()$0" 0 14 (fontified nil)) . 7418) (7418 . 7432) (#("ge" 0 2 (fontified nil)) . 7418) (7418 . 7420) (#("get_points()" 0 12 (fontified nil)) . -7418) (7418 . 7430) (#("ge" 0 2 (fontified t)) . -7418) (undo-tree-id31409 . -1) (undo-tree-id31410 . -2) (undo-tree-id31411 . -2) (undo-tree-id31412 . -1) (undo-tree-id31413 . -1) (undo-tree-id31414 . -1) (undo-tree-id31415 . -1) (undo-tree-id31416 . -1) (undo-tree-id31417 . -1) (undo-tree-id31418 . -1) (undo-tree-id31419 . -1) (undo-tree-id31420 . -1) (undo-tree-id31421 . -1) (undo-tree-id31422 . -1) (undo-tree-id31423 . -1) (undo-tree-id31424 . -1) (undo-tree-id31425 . -1) (undo-tree-id31426 . -1) (undo-tree-id31427 . -1) (undo-tree-id31428 . -1) (undo-tree-id31429 . -1) (undo-tree-id31430 . -1) (undo-tree-id31431 . -1) (undo-tree-id31432 . -1) (undo-tree-id31433 . -1) (undo-tree-id31434 . -1) (undo-tree-id31435 . -1) (undo-tree-id31436 . -1) (undo-tree-id31437 . -1) (undo-tree-id31438 . -1) (undo-tree-id31439 . -1) (undo-tree-id31440 . -1) (undo-tree-id31441 . -1) (undo-tree-id31442 . -2) (undo-tree-id31443 . -2) (undo-tree-id31444 . -2) (undo-tree-id31445 . -2) (undo-tree-id31446 . -2) (undo-tree-id31447 . -2) (undo-tree-id31448 . -2) (undo-tree-id31449 . -2) (undo-tree-id31450 . -2) (undo-tree-id31451 . -2) (undo-tree-id31452 . -2) (undo-tree-id31453 . -2) (undo-tree-id31454 . -2) (undo-tree-id31455 . -2) (undo-tree-id31456 . -2) (undo-tree-id31457 . -2) (undo-tree-id31458 . -2) (undo-tree-id31459 . -2) (undo-tree-id31460 . -2) (undo-tree-id31461 . -2) (undo-tree-id31462 . -2) (undo-tree-id31463 . -2) (undo-tree-id31464 . -2) (undo-tree-id31465 . -2) (undo-tree-id31466 . -2) (undo-tree-id31467 . -2) (undo-tree-id31468 . -2) (undo-tree-id31469 . -2) (undo-tree-id31470 . -2) (undo-tree-id31471 . -2) (undo-tree-id31472 . -2) (undo-tree-id31473 . -2) (undo-tree-id31474 . -2) (undo-tree-id31475 . -2) (undo-tree-id31476 . -2) (undo-tree-id31477 . -2) (undo-tree-id31478 . -2) (undo-tree-id31479 . -2) (undo-tree-id31480 . -2) (undo-tree-id31481 . -2) (undo-tree-id31482 . -2) (undo-tree-id31483 . -2) (undo-tree-id31484 . -2) (undo-tree-id31485 . -2) (undo-tree-id31486 . -2) (undo-tree-id31487 . -2) (undo-tree-id31488 . -2) (undo-tree-id31489 . -2) (undo-tree-id31490 . -2) (undo-tree-id31491 . -2) (undo-tree-id31492 . -2) (undo-tree-id31493 . -2) (undo-tree-id31494 . -2) (undo-tree-id31495 . -2) (undo-tree-id31496 . -2) (undo-tree-id31497 . -2) (undo-tree-id31498 . -2) (undo-tree-id31499 . -2) (undo-tree-id31500 . -2) (undo-tree-id31501 . -2) (undo-tree-id31502 . -2) (undo-tree-id31503 . -2) (undo-tree-id31504 . -2) (undo-tree-id31505 . -2) (undo-tree-id31506 . -2) (undo-tree-id31507 . -2) (undo-tree-id31508 . -2) (undo-tree-id31509 . -2) (undo-tree-id31510 . -2) (undo-tree-id31511 . -2) (undo-tree-id31512 . -2) (undo-tree-id31513 . -2) (undo-tree-id31514 . -2) (undo-tree-id31515 . -2) (undo-tree-id31516 . -2) (undo-tree-id31517 . -2) (undo-tree-id31518 . -2) (undo-tree-id31519 . -2) (undo-tree-id31520 . -2) (undo-tree-id31521 . -2) (undo-tree-id31522 . -2) (undo-tree-id31523 . -2) (undo-tree-id31524 . -2) (undo-tree-id31525 . -2) (undo-tree-id31526 . -2) (undo-tree-id31527 . -2) 7420 (7417 . 7420)) nil (26156 61528 52178 52000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 7443) (undo-tree-id31659 . -2) (undo-tree-id31660 . -3) (t 26156 61528 165234 761000)) nil (26156 61562 382548 72000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7443) (undo-tree-id31658 . -1)) nil (26156 61562 382541 25000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 7443) (undo-tree-id31656 . -5) (undo-tree-id31657 . -6)) nil (26156 61562 382535 964000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7443) (undo-tree-id31654 . -2) (undo-tree-id31655 . -3)) nil (26156 61562 382529 124000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 7524) (undo-tree-id31652 . -2) (undo-tree-id31653 . -3)) nil (26156 61562 382522 477000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7524) (undo-tree-id31651 . -1)) nil (26156 61562 382515 848000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 7524) (undo-tree-id31649 . -5) (undo-tree-id31650 . -6)) nil (26156 61562 382509 551000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7524) (undo-tree-id31647 . -2) (undo-tree-id31648 . -3)) nil (26156 61562 382494 652000) 0 nil])
([nil nil ((apply 6 7600 7664 undo--wrap-and-run-primitive-undo 7600 7664 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7635) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7604) 7600)) (t 26156 61562 469754 479000)) nil (26156 61584 19571 413000) 0 nil])
([nil nil ((7627 . 7628) (#("3" 0 1 (fontified t)) . -7627) (undo-tree-id31674 . -1) (undo-tree-id31675 . -1) (undo-tree-id31676 . -1) (undo-tree-id31677 . -1) (undo-tree-id31678 . -1) (undo-tree-id31679 . -1) (undo-tree-id31680 . -1) (undo-tree-id31681 . -1) (undo-tree-id31682 . -1) (undo-tree-id31683 . -1) (undo-tree-id31684 . -1) (undo-tree-id31685 . -1) (undo-tree-id31686 . -1) 7628 (t 26156 61584 142088 162000)) nil (26156 61604 815077 848000) 0 nil])
([nil nil ((7659 . 7660) (#("3" 0 1 (fontified t)) . -7659) (undo-tree-id31661 . -1) (undo-tree-id31662 . -1) (undo-tree-id31663 . -1) (undo-tree-id31664 . -1) (undo-tree-id31665 . -1) (undo-tree-id31666 . -1) (undo-tree-id31667 . -1) (undo-tree-id31668 . -1) (undo-tree-id31669 . -1) (undo-tree-id31670 . -1) (undo-tree-id31671 . -1) (undo-tree-id31672 . -1) (undo-tree-id31673 . -1) 7660) nil (26156 61604 815038 717000) 0 nil])
([nil nil ((5621 . 5622) (#("1" 0 1 (fontified t)) . 5621) (t 26156 61604 926411 858000)) nil (26156 61641 608220 305000) 0 nil])
([nil nil ((5635 . 5636) (#("0" 0 1 (fontified t)) . 5635)) nil (26156 61641 608206 826000) 0 nil])
([nil nil ((5621 . 5622) (#("0" 0 1 (fontified t)) . -5621) (undo-tree-id31720 . -1) (undo-tree-id31721 . -1) (undo-tree-id31722 . -1) (undo-tree-id31723 . -1) (undo-tree-id31724 . -1) (undo-tree-id31725 . -1) (undo-tree-id31726 . -1) (undo-tree-id31727 . -1) (undo-tree-id31728 . -1) (undo-tree-id31729 . -1) (undo-tree-id31730 . -1) (undo-tree-id31731 . -1) (undo-tree-id31732 . -1) (undo-tree-id31733 . -1) (undo-tree-id31734 . -1) (undo-tree-id31735 . -1) (undo-tree-id31736 . -1) (undo-tree-id31737 . -1) (undo-tree-id31738 . -1) (undo-tree-id31739 . -1) (undo-tree-id31740 . -1) (undo-tree-id31741 . -1) (undo-tree-id31742 . -1) (undo-tree-id31743 . -1) 5622 (t 26156 61641 714993 201000)) nil (26156 61663 174026 805000) 0 nil])
([nil nil ((5635 . 5636) (#("1" 0 1 (fontified t)) . -5635) (undo-tree-id31687 . -1) (undo-tree-id31688 . -1) (undo-tree-id31689 . -1) (undo-tree-id31690 . -1) (undo-tree-id31691 . -1) (undo-tree-id31692 . -1) (undo-tree-id31693 . -1) (undo-tree-id31694 . -1) (undo-tree-id31695 . -1) (undo-tree-id31696 . -1) (undo-tree-id31697 . -1) (undo-tree-id31698 . -1) (undo-tree-id31699 . -1) (undo-tree-id31700 . -1) (undo-tree-id31701 . -1) (undo-tree-id31702 . -1) (undo-tree-id31703 . -1) (undo-tree-id31704 . -1) (undo-tree-id31705 . -1) (undo-tree-id31706 . -1) (undo-tree-id31707 . -1) (undo-tree-id31708 . -1) (undo-tree-id31709 . -1) (undo-tree-id31710 . -1) (undo-tree-id31711 . -1) (undo-tree-id31712 . -1) (undo-tree-id31713 . -1) (undo-tree-id31714 . -1) (undo-tree-id31715 . -1) (undo-tree-id31716 . -1) (undo-tree-id31717 . -1) (undo-tree-id31718 . -1) (undo-tree-id31719 . -1) 5636) nil (26156 61663 173970 462000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 7674) (undo-tree-id31761 . -2) (undo-tree-id31762 . -2) (undo-tree-id31763 . -2) (undo-tree-id31764 . -2) (undo-tree-id31765 . -2) (undo-tree-id31766 . -2) (undo-tree-id31767 . -2) (undo-tree-id31768 . -2) (undo-tree-id31769 . -2) (undo-tree-id31770 . -2) (undo-tree-id31771 . -3) (t 26156 61663 283338 770000)) nil (26156 61722 831285 74000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7674) (undo-tree-id31760 . -1)) nil (26156 61722 831262 953000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 7674) (undo-tree-id31758 . -5) (undo-tree-id31759 . -6)) nil (26156 61722 831257 848000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7674) (undo-tree-id31755 . -1) (undo-tree-id31756 . -1) (undo-tree-id31757 . -1)) nil (26156 61722 831250 962000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7674) (undo-tree-id31753 . -1) (undo-tree-id31754 . -1)) nil (26156 61722 831242 657000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7674) (undo-tree-id31751 . -1) (undo-tree-id31752 . -1)) nil (26156 61722 831235 660000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 7755) (undo-tree-id31749 . -2) (undo-tree-id31750 . -3)) nil (26156 61722 831229 345000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7755) (undo-tree-id31748 . -1)) nil (26156 61722 831223 161000) 0 nil])
([nil nil ((#("points" 0 6 (fontified t)) . 7755) (undo-tree-id31746 . -5) (undo-tree-id31747 . -6)) nil (26156 61722 831217 212000) 0 nil])
([nil nil ((#("()." 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7755) (undo-tree-id31744 . -2) (undo-tree-id31745 . -3)) nil (26156 61722 831202 954000) 0 nil])
([nil nil ((apply -6 7600 7670 undo--wrap-and-run-primitive-undo 7600 7670 ((7638 . 7641) (7604 . 7607) 7600)) (t 26156 61722 940311 525000)) nil (26156 61742 266921 748000) 0 nil])
([nil nil ((apply 6 7600 7664 undo--wrap-and-run-primitive-undo 7600 7664 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7635) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7604) 7600)) (t 26156 61742 368633 355000)) nil (26156 61769 102284 925000) 0 nil])
([nil nil ((7627 . 7629) (#("5" 0 1 (fontified t)) . -7627) (undo-tree-id31785 . -1) (undo-tree-id31786 . -1) (undo-tree-id31787 . -1) (undo-tree-id31788 . -1) (undo-tree-id31789 . -1) (undo-tree-id31790 . -1) (undo-tree-id31791 . -1) (undo-tree-id31792 . -1) (undo-tree-id31793 . -1) (undo-tree-id31794 . -1) (undo-tree-id31795 . -1) (undo-tree-id31796 . -1) (undo-tree-id31797 . -1) 7628) nil (26156 61769 102280 166000) 0 nil])
([nil nil ((7660 . 7661) (#("5" 0 1 (fontified t)) . -7660) (undo-tree-id31772 . -1) (undo-tree-id31773 . -1) (undo-tree-id31774 . -1) (undo-tree-id31775 . -1) (undo-tree-id31776 . -1) (undo-tree-id31777 . -1) (undo-tree-id31778 . -1) (undo-tree-id31779 . -1) (undo-tree-id31780 . -1) (undo-tree-id31781 . -1) (undo-tree-id31782 . -1) (undo-tree-id31783 . -1) (undo-tree-id31784 . -1) 7661) nil (26156 61769 102250 313000) 0 nil])
([nil nil ((7661 . 7662)) nil (26156 61769 102200 923000) 0 nil])
([nil nil ((7384 . 7385) (#("1" 0 1 (fontified t)) . -7384) (undo-tree-id31798 . -1) 7385 (t 26156 61769 201081 612000)) nil (26156 61803 995176 393000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -7384) (undo-tree-id31799 . -1) (undo-tree-id31800 . -1) (undo-tree-id31801 . -1) (undo-tree-id31802 . -1) (undo-tree-id31803 . -1) (undo-tree-id31804 . -1) (undo-tree-id31805 . -1) (undo-tree-id31806 . -1) (undo-tree-id31807 . -1) (undo-tree-id31808 . -1) (undo-tree-id31809 . -1) (undo-tree-id31810 . -1) (undo-tree-id31811 . -1) 7385 (t 26156 61804 117671 165000)) nil (26156 61817 222160 1000) 0 nil])
([nil nil ((7384 . 7385) (#("5" 0 1 (fontified t)) . -7384) (undo-tree-id31812 . 1) (undo-tree-id31813 . 1) (undo-tree-id31814 . -1) (undo-tree-id31815 . -1) (undo-tree-id31816 . -1) (undo-tree-id31817 . -1) (undo-tree-id31818 . -1) (undo-tree-id31819 . -1) (undo-tree-id31820 . -1) (undo-tree-id31821 . -1) (undo-tree-id31822 . -1) (undo-tree-id31823 . -1) (undo-tree-id31824 . -1) (undo-tree-id31825 . -1) (undo-tree-id31826 . -1) 7385 (t 26156 61817 337896 129000)) nil (26156 61834 933486 433000) 0 nil])
([nil nil ((7385 . 7386)) nil (26156 61834 933430 513000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7433) (undo-tree-id31827 . -4) (undo-tree-id31828 . -4) (undo-tree-id31829 . -4) (undo-tree-id31830 . -4) (undo-tree-id31831 . -4) (undo-tree-id31832 . -4) (undo-tree-id31833 . -4) (undo-tree-id31834 . -4) (undo-tree-id31835 . -4) (undo-tree-id31836 . -4) (undo-tree-id31837 . -4) (undo-tree-id31838 . -4) (undo-tree-id31839 . -4) 7437 (7433 . 7437) (#("    " 0 4 (fontified nil)) . 7432) (undo-tree-id31840 . -4) (undo-tree-id31841 . -4) (undo-tree-id31842 . -4) (undo-tree-id31843 . -4) (undo-tree-id31844 . -4) (undo-tree-id31845 . -4) (undo-tree-id31846 . -4) (undo-tree-id31847 . -4) (undo-tree-id31848 . -4) (undo-tree-id31849 . -4) (undo-tree-id31850 . -4) (undo-tree-id31851 . -4) (undo-tree-id31852 . -4) (7431 . 7437) (t 26156 61835 14198 374000)) nil (26156 62166 356874 213000) 0 nil])
([nil nil ((apply -12 162 221 undo--wrap-and-run-primitive-undo 162 221 ((215 . 218) (200 . 203) (185 . 188) (162 . 165) 209)) (t 26156 62166 441437 362000)) nil (26156 62239 554667 600000) 0 nil])
([nil nil ((apply -96 755 1745 undo--wrap-and-run-primitive-undo 755 1745 ((1739 . 1742) (1729 . 1732) (1687 . 1690) (1653 . 1656) (1643 . 1646) (1637 . 1640) (1582 . 1585) (1526 . 1529) (1509 . 1512) (1443 . 1446) (1433 . 1436) (1405 . 1408) (1375 . 1378) (1338 . 1341) (1270 . 1273) (1260 . 1263) (1215 . 1218) (1126 . 1129) (1073 . 1076) (1063 . 1066) (1057 . 1060) (1028 . 1031) (998 . 1001) (981 . 984) (924 . 927) (914 . 917) (888 . 891) (848 . 851) (838 . 841) (804 . 807) (778 . 781) (756 . 759) 1649))) nil (26156 62239 554657 233000) 0 nil])
([nil nil ((#("
// impl Coordinate {

//     fn new() -> Self {
// 	Coordinate { x: 0.0, y: 0.0 }
//     }

//     fn from(x: f64, y:f64) -> Self {
// 	Coordinate { x , y  }
//     }

//     fn translate(&self, vector: Coordinate) -> Self {
// 	Coordinate {
// 	    x: self.x + vector.x,
// 	    y: self.y + vector.y
// 	}
//     }

//     fn rotate_origin(&self, angle: f64) -> Self {
// 	let transform_coord :Coordinate = Coordinate { x:self.x.cos() , y: self.y.sin() }; 

// 	self.transform_complex(transform_coord)

//     }

//     fn rotate(&self, through: Coordinate, angle: f64 ) -> Self {
// 	self.translate(through.negate())
// 	    .rotate_origin(angle)
// 	    .translate(through)
//     }

//     fn transform_complex(&self, complex: Coordinate) -> Self {
// 	Coordinate {
// 	    x: (self.x * complex.x) - (self.y * complex.y),
// 	    y: (self.x * complex.y) + (self.y * complex.x)
// 	}
//     }

//     fn negate(&self) -> Self {
// 	Coordinate { x: -self.x, y: -self.y }
//     }

// }

" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 8 (fontified t face font-lock-comment-face) 8 9 (fontified t face font-lock-comment-face) 9 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face) 21 22 (fontified t face font-lock-comment-face) 22 23 (fontified t) 23 26 (fontified t face font-lock-comment-delimiter-face) 26 30 (fontified t face font-lock-comment-delimiter-face) 30 32 (fontified t face font-lock-comment-face) 32 33 (fontified t face font-lock-comment-face) 33 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 40 (fontified t face font-lock-comment-face) 40 41 (syntax-table (1) fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face) 42 46 (fontified t face font-lock-comment-face) 46 47 (fontified t face font-lock-comment-face) 47 48 (fontified t face font-lock-comment-face) 48 49 (fontified t face font-lock-comment-face) 49 52 (fontified t face font-lock-comment-delimiter-face) 52 53 (fontified t face font-lock-comment-delimiter-face) 53 63 (fontified t face font-lock-comment-face) 63 64 (fontified t face font-lock-comment-face) 64 65 (fontified t face font-lock-comment-face) 65 66 (fontified t face font-lock-comment-face) 66 67 (fontified t face font-lock-comment-face) 67 74 (fontified t face font-lock-comment-face) 74 75 (fontified t face font-lock-comment-face) 75 81 (fontified t face font-lock-comment-face) 81 82 (fontified t face font-lock-comment-face) 82 83 (fontified t face font-lock-comment-face) 83 86 (fontified t face font-lock-comment-delimiter-face) 86 90 (fontified t face font-lock-comment-delimiter-face) 90 91 (fontified t face font-lock-comment-face) 91 92 (fontified t face font-lock-comment-face) 92 93 (fontified t) 93 96 (fontified t face font-lock-comment-delimiter-face) 96 100 (fontified t face font-lock-comment-delimiter-face) 100 102 (fontified t face font-lock-comment-face) 102 103 (fontified t face font-lock-comment-face) 103 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 109 (fontified t face font-lock-comment-face) 109 111 (fontified t face font-lock-comment-face) 111 114 (fontified t face font-lock-comment-face) 114 116 (fontified t face font-lock-comment-face) 116 117 (fontified t face font-lock-comment-face) 117 118 (fontified t face font-lock-comment-face) 118 121 (fontified t face font-lock-comment-face) 121 122 (fontified t face font-lock-comment-face) 122 124 (fontified t face font-lock-comment-face) 124 125 (syntax-table (1) fontified t face font-lock-comment-face) 125 126 (fontified t face font-lock-comment-face) 126 130 (fontified t face font-lock-comment-face) 130 131 (fontified t face font-lock-comment-face) 131 132 (fontified t face font-lock-comment-face) 132 133 (fontified t face font-lock-comment-face) 133 136 (fontified t face font-lock-comment-delimiter-face) 136 137 (fontified t face font-lock-comment-delimiter-face) 137 147 (fontified t face font-lock-comment-face) 147 148 (fontified t face font-lock-comment-face) 148 149 (fontified t face font-lock-comment-face) 149 157 (fontified t face font-lock-comment-face) 157 158 (fontified t face font-lock-comment-face) 158 159 (fontified t face font-lock-comment-face) 159 162 (fontified t face font-lock-comment-delimiter-face) 162 166 (fontified t face font-lock-comment-delimiter-face) 166 167 (fontified t face font-lock-comment-face) 167 168 (fontified t face font-lock-comment-face) 168 169 (fontified t) 169 172 (fontified t face font-lock-comment-delimiter-face) 172 176 (fontified t face font-lock-comment-delimiter-face) 176 178 (fontified t face font-lock-comment-face) 178 179 (fontified t face font-lock-comment-face) 179 188 (fontified t face font-lock-comment-face) 188 189 (fontified t face font-lock-comment-face) 189 190 (fontified t face font-lock-comment-face) 190 194 (fontified t face font-lock-comment-face) 194 196 (fontified t face font-lock-comment-face) 196 202 (fontified t face font-lock-comment-face) 202 204 (fontified t face font-lock-comment-face) 204 214 (fontified t face font-lock-comment-face) 214 215 (fontified t face font-lock-comment-face) 215 217 (fontified t face font-lock-comment-face) 217 218 (syntax-table (1) fontified t face font-lock-comment-face) 218 219 (fontified t face font-lock-comment-face) 219 223 (fontified t face font-lock-comment-face) 223 224 (fontified t face font-lock-comment-face) 224 225 (fontified t face font-lock-comment-face) 225 226 (fontified t face font-lock-comment-face) 226 229 (fontified t face font-lock-comment-delimiter-face) 229 230 (fontified t face font-lock-comment-delimiter-face) 230 240 (fontified t face font-lock-comment-face) 240 241 (fontified t face font-lock-comment-face) 241 242 (fontified t face font-lock-comment-face) 242 243 (fontified t face font-lock-comment-face) 243 246 (fontified t face font-lock-comment-delimiter-face) 246 251 (fontified t face font-lock-comment-delimiter-face) 251 252 (fontified t face font-lock-comment-face) 252 254 (fontified t face font-lock-comment-face) 254 258 (fontified t face font-lock-comment-face) 258 273 (fontified t face font-lock-comment-face) 273 276 (fontified t face font-lock-comment-delimiter-face) 276 281 (fontified t face font-lock-comment-delimiter-face) 281 282 (fontified t face font-lock-comment-face) 282 284 (fontified t face font-lock-comment-face) 284 288 (fontified t face font-lock-comment-face) 288 302 (fontified t face font-lock-comment-face) 302 305 (fontified t face font-lock-comment-delimiter-face) 305 306 (fontified t face font-lock-comment-delimiter-face) 306 307 (fontified t face font-lock-comment-face) 307 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-comment-delimiter-face) 311 315 (fontified t face font-lock-comment-delimiter-face) 315 316 (fontified t face font-lock-comment-face) 316 317 (fontified t face font-lock-comment-face) 317 318 (fontified t) 318 321 (fontified t face font-lock-comment-delimiter-face) 321 325 (fontified t face font-lock-comment-delimiter-face) 325 327 (fontified t face font-lock-comment-face) 327 328 (fontified t face font-lock-comment-face) 328 341 (fontified t face font-lock-comment-face) 341 342 (fontified t face font-lock-comment-face) 342 343 (fontified t face font-lock-comment-face) 343 347 (fontified t face font-lock-comment-face) 347 349 (fontified t face font-lock-comment-face) 349 354 (fontified t face font-lock-comment-face) 354 356 (fontified t face font-lock-comment-face) 356 359 (fontified t face font-lock-comment-face) 359 360 (fontified t face font-lock-comment-face) 360 362 (fontified t face font-lock-comment-face) 362 363 (syntax-table (1) fontified t face font-lock-comment-face) 363 364 (fontified t face font-lock-comment-face) 364 368 (fontified t face font-lock-comment-face) 368 369 (fontified t face font-lock-comment-face) 369 370 (fontified t face font-lock-comment-face) 370 371 (fontified t face font-lock-comment-face) 371 374 (fontified t face font-lock-comment-delimiter-face) 374 375 (fontified t face font-lock-comment-delimiter-face) 375 378 (fontified t face font-lock-comment-face) 378 379 (fontified t face font-lock-comment-face) 379 394 (fontified t face font-lock-comment-face) 394 396 (fontified t face font-lock-comment-face) 396 404 (fontified t face font-lock-comment-face) 404 406 (fontified t face font-lock-comment-face) 406 409 (fontified t face font-lock-comment-face) 409 419 (fontified t face font-lock-comment-face) 419 420 (fontified t face font-lock-comment-face) 420 421 (fontified t face font-lock-comment-face) 421 422 (fontified t face font-lock-comment-face) 422 423 (fontified t face font-lock-comment-face) 423 424 (fontified t face font-lock-comment-face) 424 428 (fontified t face font-lock-comment-face) 428 434 (fontified t face font-lock-comment-face) 434 435 (fontified t face font-lock-comment-face) 435 436 (fontified t face font-lock-comment-face) 436 439 (fontified t face font-lock-comment-face) 439 440 (fontified t face font-lock-comment-face) 440 442 (fontified t face font-lock-comment-face) 442 446 (fontified t face font-lock-comment-face) 446 452 (fontified t face font-lock-comment-face) 452 453 (fontified t face font-lock-comment-face) 453 454 (fontified t face font-lock-comment-face) 454 455 (fontified t face font-lock-comment-face) 455 456 (fontified t face font-lock-comment-face) 456 459 (fontified t face font-lock-comment-face) 459 460 (fontified t) 460 463 (fontified t face font-lock-comment-delimiter-face) 463 464 (fontified t face font-lock-comment-delimiter-face) 464 468 (fontified t face font-lock-comment-face) 468 486 (fontified t face font-lock-comment-face) 486 487 (fontified t face font-lock-comment-face) 487 502 (fontified t face font-lock-comment-face) 502 503 (fontified t face font-lock-comment-face) 503 504 (fontified t face font-lock-comment-face) 504 505 (fontified t) 505 508 (fontified t face font-lock-comment-delimiter-face) 508 512 (fontified t face font-lock-comment-delimiter-face) 512 513 (fontified t face font-lock-comment-face) 513 514 (fontified t face font-lock-comment-face) 514 515 (fontified t) 515 518 (fontified t face font-lock-comment-delimiter-face) 518 522 (fontified t face font-lock-comment-delimiter-face) 522 524 (fontified t face font-lock-comment-face) 524 525 (fontified t face font-lock-comment-face) 525 531 (fontified t face font-lock-comment-face) 531 532 (fontified t face font-lock-comment-face) 532 533 (fontified t face font-lock-comment-face) 533 536 (fontified t face font-lock-comment-face) 536 537 (fontified t face font-lock-comment-face) 537 539 (fontified t face font-lock-comment-face) 539 546 (fontified t face font-lock-comment-face) 546 548 (fontified t face font-lock-comment-face) 548 558 (fontified t face font-lock-comment-face) 558 560 (fontified t face font-lock-comment-face) 560 565 (fontified t face font-lock-comment-face) 565 567 (fontified t face font-lock-comment-face) 567 570 (fontified t face font-lock-comment-face) 570 571 (fontified t face font-lock-comment-face) 571 572 (fontified t face font-lock-comment-face) 572 574 (fontified t face font-lock-comment-face) 574 575 (syntax-table (1) fontified t face font-lock-comment-face) 575 576 (fontified t face font-lock-comment-face) 576 580 (fontified t face font-lock-comment-face) 580 581 (fontified t face font-lock-comment-face) 581 582 (fontified t face font-lock-comment-face) 582 583 (fontified t face font-lock-comment-face) 583 586 (fontified t face font-lock-comment-delimiter-face) 586 587 (fontified t face font-lock-comment-delimiter-face) 587 591 (fontified t face font-lock-comment-face) 591 601 (fontified t face font-lock-comment-face) 601 602 (fontified t face font-lock-comment-face) 602 616 (fontified t face font-lock-comment-face) 616 617 (fontified t face font-lock-comment-face) 617 618 (fontified t face font-lock-comment-face) 618 619 (fontified t face font-lock-comment-face) 619 620 (fontified t face font-lock-comment-face) 620 623 (fontified t face font-lock-comment-delimiter-face) 623 628 (fontified t face font-lock-comment-delimiter-face) 628 642 (fontified t face font-lock-comment-face) 642 643 (fontified t face font-lock-comment-face) 643 648 (fontified t face font-lock-comment-face) 648 649 (fontified t face font-lock-comment-face) 649 650 (fontified t face font-lock-comment-face) 650 653 (fontified t face font-lock-comment-delimiter-face) 653 658 (fontified t face font-lock-comment-delimiter-face) 658 668 (fontified t face font-lock-comment-face) 668 669 (fontified t face font-lock-comment-face) 669 676 (fontified t face font-lock-comment-face) 676 677 (fontified t face font-lock-comment-face) 677 678 (fontified t face font-lock-comment-face) 678 681 (fontified t face font-lock-comment-delimiter-face) 681 685 (fontified t face font-lock-comment-delimiter-face) 685 686 (fontified t face font-lock-comment-face) 686 687 (fontified t face font-lock-comment-face) 687 688 (fontified t) 688 691 (fontified t face font-lock-comment-delimiter-face) 691 695 (fontified t face font-lock-comment-delimiter-face) 695 697 (fontified t face font-lock-comment-face) 697 698 (fontified t face font-lock-comment-face) 698 715 (fontified t face font-lock-comment-face) 715 716 (fontified t face font-lock-comment-face) 716 717 (fontified t face font-lock-comment-face) 717 721 (fontified t face font-lock-comment-face) 721 723 (fontified t face font-lock-comment-face) 723 730 (fontified t face font-lock-comment-face) 730 732 (fontified t face font-lock-comment-face) 732 742 (fontified t face font-lock-comment-face) 742 743 (fontified t face font-lock-comment-face) 743 745 (fontified t face font-lock-comment-face) 745 746 (syntax-table (1) fontified t face font-lock-comment-face) 746 747 (fontified t face font-lock-comment-face) 747 751 (fontified t face font-lock-comment-face) 751 752 (fontified t face font-lock-comment-face) 752 753 (fontified t face font-lock-comment-face) 753 754 (fontified t face font-lock-comment-face) 754 757 (fontified t face font-lock-comment-delimiter-face) 757 758 (fontified t face font-lock-comment-delimiter-face) 758 768 (fontified t face font-lock-comment-face) 768 769 (fontified t face font-lock-comment-face) 769 770 (fontified t face font-lock-comment-face) 770 771 (fontified t face font-lock-comment-face) 771 774 (fontified t face font-lock-comment-delimiter-face) 774 779 (fontified t face font-lock-comment-delimiter-face) 779 780 (fontified t face font-lock-comment-face) 780 782 (fontified t face font-lock-comment-face) 782 783 (fontified t face font-lock-comment-face) 783 787 (fontified t face font-lock-comment-face) 787 801 (fontified t face font-lock-comment-face) 801 802 (fontified t face font-lock-comment-face) 802 805 (fontified t face font-lock-comment-face) 805 806 (fontified t face font-lock-comment-face) 806 810 (fontified t face font-lock-comment-face) 810 824 (fontified t face font-lock-comment-face) 824 825 (fontified t face font-lock-comment-face) 825 827 (fontified t face font-lock-comment-face) 827 830 (fontified t face font-lock-comment-delimiter-face) 830 835 (fontified t face font-lock-comment-delimiter-face) 835 836 (fontified t face font-lock-comment-face) 836 838 (fontified t face font-lock-comment-face) 838 839 (fontified t face font-lock-comment-face) 839 843 (fontified t face font-lock-comment-face) 843 857 (fontified t face font-lock-comment-face) 857 858 (fontified t face font-lock-comment-face) 858 861 (fontified t face font-lock-comment-face) 861 862 (fontified t face font-lock-comment-face) 862 866 (fontified t face font-lock-comment-face) 866 871 (fontified t face font-lock-comment-face) 871 880 (face font-lock-comment-face fontified t) 880 881 (face font-lock-comment-face fontified t) 881 882 (face font-lock-comment-face fontified t) 882 885 (fontified t face font-lock-comment-delimiter-face) 885 886 (fontified t face font-lock-comment-delimiter-face) 886 887 (fontified t face font-lock-comment-face) 887 888 (fontified t face font-lock-comment-face) 888 891 (fontified t face font-lock-comment-delimiter-face) 891 895 (fontified t face font-lock-comment-delimiter-face) 895 896 (fontified t face font-lock-comment-face) 896 897 (fontified t face font-lock-comment-face) 897 898 (fontified t) 898 901 (fontified t face font-lock-comment-delimiter-face) 901 905 (fontified t face font-lock-comment-delimiter-face) 905 907 (fontified t face font-lock-comment-face) 907 908 (fontified t face font-lock-comment-face) 908 914 (fontified t face font-lock-comment-face) 914 915 (fontified t face font-lock-comment-face) 915 916 (fontified t face font-lock-comment-face) 916 920 (fontified t face font-lock-comment-face) 920 921 (fontified t face font-lock-comment-face) 921 923 (fontified t face font-lock-comment-face) 923 924 (syntax-table (1) fontified t face font-lock-comment-face) 924 925 (fontified t face font-lock-comment-face) 925 929 (fontified t face font-lock-comment-face) 929 930 (fontified t face font-lock-comment-face) 930 931 (fontified t face font-lock-comment-face) 931 932 (fontified t face font-lock-comment-face) 932 935 (fontified t face font-lock-comment-delimiter-face) 935 936 (fontified t face font-lock-comment-delimiter-face) 936 946 (fontified t face font-lock-comment-face) 946 947 (fontified t face font-lock-comment-face) 947 948 (fontified t face font-lock-comment-face) 948 949 (fontified t face font-lock-comment-face) 949 950 (fontified t face font-lock-comment-face) 950 953 (fontified t face font-lock-comment-face) 953 957 (fontified t face font-lock-comment-face) 957 961 (fontified t face font-lock-comment-face) 961 962 (fontified t face font-lock-comment-face) 962 965 (fontified t face font-lock-comment-face) 965 969 (fontified t face font-lock-comment-face) 969 972 (fontified t face font-lock-comment-face) 972 973 (fontified t face font-lock-comment-face) 973 974 (fontified t face font-lock-comment-face) 974 977 (fontified t face font-lock-comment-delimiter-face) 977 981 (fontified t face font-lock-comment-delimiter-face) 981 982 (fontified t face font-lock-comment-face) 982 983 (fontified t face font-lock-comment-face) 983 984 (fontified t) 984 987 (fontified t face font-lock-comment-delimiter-face) 987 988 (fontified t face font-lock-comment-face) 988 989 (fontified t face font-lock-comment-face) 989 990 (fontified t)) . 755) (undo-tree-id31853 . -989) (undo-tree-id31854 . -989) (undo-tree-id31855 . -989) (undo-tree-id31856 . -984) (undo-tree-id31857 . -989) (t 26156 62239 662463 511000)) nil (26156 62269 327560 305000) 0 nil])
([nil nil ((apply 12 162 209 undo--wrap-and-run-primitive-undo 162 209 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -206) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -194) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -182) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -162)))) nil (26156 62269 327524 341000) 0 nil])
([nil nil ((#("
    // let mut next_thing = map_data.clone();

    // next_thing.make_black_rectangle(next_thing.width / 2, next_thing.height / 2, 3);

    // next_thing.to_pgm().write_as_binary(\"data3\").expect(\"couldn't write bitch\");


    // newimage.write_as_binary(\"data.pbm\").expect(\"couldn't write bitch\");


  //  thing2.to_pbm().write_as_binary(\"data4.pbm\").expect(\"couldn't write bitch\");
" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-comment-delimiter-face) 8 9 (fontified t face font-lock-comment-face) 9 11 (fontified t face font-lock-comment-face) 11 12 (fontified t face font-lock-comment-face) 12 15 (fontified t face font-lock-comment-face) 15 16 (fontified t face font-lock-comment-face) 16 22 (fontified t face font-lock-comment-face) 22 24 (fontified t face font-lock-comment-face) 24 26 (fontified t face font-lock-comment-face) 26 29 (fontified t face font-lock-comment-face) 29 34 (fontified t face font-lock-comment-face) 34 38 (fontified t face font-lock-comment-face) 38 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face font-lock-comment-face) 43 44 (fontified t face font-lock-comment-face) 44 45 (fontified t face font-lock-comment-face) 45 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 52 (fontified t) 52 55 (fontified t face font-lock-comment-delimiter-face) 55 66 (fontified t face font-lock-comment-face) 66 73 (fontified t face font-lock-comment-face) 73 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face) 87 98 (fontified t face font-lock-comment-face) 98 107 (fontified t face font-lock-comment-face) 107 109 (fontified t face font-lock-comment-face) 109 120 (fontified t face font-lock-comment-face) 120 128 (fontified t face font-lock-comment-face) 128 130 (fontified t face font-lock-comment-face) 130 133 (fontified t face font-lock-comment-face) 133 134 (fontified t face font-lock-comment-face) 134 136 (fontified t face font-lock-comment-face) 136 137 (fontified t) 137 141 (fontified t) 141 144 (fontified t face font-lock-comment-delimiter-face) 144 154 (fontified t face font-lock-comment-face) 154 155 (fontified t face font-lock-comment-face) 155 160 (fontified t face font-lock-comment-face) 160 161 (fontified t face font-lock-comment-face) 161 162 (fontified t face font-lock-comment-face) 162 163 (fontified t face font-lock-comment-face) 163 164 (fontified t face font-lock-comment-face) 164 170 (fontified t face font-lock-comment-face) 170 171 (fontified t face font-lock-comment-face) 171 179 (fontified t face font-lock-comment-face) 179 180 (fontified t face font-lock-comment-face) 180 184 (fontified t face font-lock-comment-face) 184 185 (fontified t face font-lock-comment-face) 185 187 (fontified t face font-lock-comment-face) 187 188 (fontified t face font-lock-comment-face) 188 189 (fontified t face font-lock-comment-face) 189 193 (fontified t face font-lock-comment-face) 193 195 (fontified t face font-lock-comment-face) 195 196 (fontified t face font-lock-comment-face) 196 203 (fontified t face font-lock-comment-face) 203 218 (fontified t face font-lock-comment-face) 218 219 (fontified t face font-lock-comment-face) 219 221 (fontified t face font-lock-comment-face) 221 222 (fontified t) 222 223 (fontified t) 223 227 (fontified t) 227 229 (fontified t face font-lock-comment-delimiter-face) 229 230 (fontified t face font-lock-comment-delimiter-face) 230 239 (fontified t face font-lock-comment-face) 239 244 (fontified t face font-lock-comment-face) 244 245 (fontified t face font-lock-comment-face) 245 247 (fontified t face font-lock-comment-face) 247 252 (fontified t face font-lock-comment-face) 252 254 (fontified t face font-lock-comment-face) 254 255 (fontified t face font-lock-comment-face) 255 262 (fontified t face font-lock-comment-face) 262 265 (fontified t face font-lock-comment-face) 265 266 (fontified t face font-lock-comment-face) 266 267 (fontified t face font-lock-comment-face) 267 269 (fontified t face font-lock-comment-face) 269 270 (fontified t face font-lock-comment-face) 270 273 (fontified t face font-lock-comment-face) 273 274 (fontified t face font-lock-comment-face) 274 275 (fontified t face font-lock-comment-face) 275 276 (fontified t face font-lock-comment-face) 276 278 (fontified t face font-lock-comment-face) 278 286 (fontified t face font-lock-comment-face) 286 291 (fontified t face font-lock-comment-face) 291 292 (fontified t face font-lock-comment-face) 292 296 (fontified t face font-lock-comment-face) 296 297 (fontified t face font-lock-comment-face) 297 299 (fontified t face font-lock-comment-face) 299 300 (fontified t) 300 301 (fontified t) 301 303 (fontified t) 303 306 (fontified t face font-lock-comment-delimiter-face) 306 307 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 307 310 (fontified t face font-lock-comment-face) 310 313 (face font-lock-comment-face fontified t) 313 314 (face font-lock-comment-face fontified t) 314 320 (face font-lock-comment-face fontified t) 320 321 (face font-lock-comment-face fontified t) 321 322 (face font-lock-comment-face fontified t) 322 323 (face font-lock-comment-face fontified t) 323 325 (face font-lock-comment-face fontified t) 325 326 (face font-lock-comment-face fontified t) 326 331 (face font-lock-comment-face fontified t) 331 338 (face font-lock-comment-face fontified t) 338 339 (face font-lock-comment-face fontified t) 339 349 (face font-lock-comment-face fontified t) 349 350 (face font-lock-comment-face fontified t) 350 351 (face font-lock-comment-face fontified t) 351 352 (face font-lock-comment-face fontified t) 352 355 (face font-lock-comment-face fontified t) 355 356 (face font-lock-comment-face fontified t) 356 357 (face font-lock-comment-face fontified t) 357 358 (face font-lock-comment-face fontified t) 358 359 (face font-lock-comment-face fontified t) 359 361 (face font-lock-comment-face fontified t) 361 364 (face font-lock-comment-face fontified t) 364 368 (face font-lock-comment-face fontified t) 368 369 (face font-lock-comment-face fontified t) 369 371 (face font-lock-comment-face fontified t) 371 381 (face font-lock-comment-face fontified t) 381 382 (face font-lock-comment-face fontified t) 382 383 (face font-lock-comment-face fontified t) 383 384 (face font-lock-comment-face fontified t)) . 7044) (undo-tree-id31858 . -383) (undo-tree-id31859 . -383) (undo-tree-id31860 . -383) (undo-tree-id31861 . -5) (undo-tree-id31862 . -383) (undo-tree-id31863 . -384) (undo-tree-id31864 . -383) (undo-tree-id31865 . -373) (undo-tree-id31866 . -373) (undo-tree-id31867 . -373) (undo-tree-id31868 . -373) (undo-tree-id31869 . -373) (undo-tree-id31870 . -373) (undo-tree-id31871 . -373) (undo-tree-id31872 . -373) (undo-tree-id31873 . -373) (undo-tree-id31874 . -373) (undo-tree-id31875 . -373) (undo-tree-id31876 . -373) (undo-tree-id31877 . -373) (undo-tree-id31878 . -373) (undo-tree-id31879 . -373) (undo-tree-id31880 . -373) (undo-tree-id31881 . -373) (undo-tree-id31882 . -373) (undo-tree-id31883 . -300) (undo-tree-id31884 . -300) (undo-tree-id31885 . -300) (undo-tree-id31886 . -300) (undo-tree-id31887 . -300) (undo-tree-id31888 . -300) (undo-tree-id31889 . -300) (undo-tree-id31890 . -300) (undo-tree-id31891 . -300) (undo-tree-id31892 . -300) (undo-tree-id31893 . -300) (undo-tree-id31894 . -300) (undo-tree-id31895 . -300) (undo-tree-id31896 . -300) (undo-tree-id31897 . -300) (undo-tree-id31898 . -300) (undo-tree-id31899 . -300) (undo-tree-id31900 . -300) (undo-tree-id31901 . -300) (undo-tree-id31902 . -300) (undo-tree-id31903 . -300) (undo-tree-id31904 . -300) (undo-tree-id31905 . -300) (undo-tree-id31906 . -300) (undo-tree-id31907 . -300) (undo-tree-id31908 . -300) (undo-tree-id31909 . -300) (undo-tree-id31910 . -300) (undo-tree-id31911 . -300) (undo-tree-id31912 . -300) (undo-tree-id31913 . -300) (undo-tree-id31914 . -300) (undo-tree-id31915 . -300) (undo-tree-id31916 . -300) (undo-tree-id31917 . -300) (undo-tree-id31918 . -300) (undo-tree-id31919 . -300) (undo-tree-id31920 . -300) (undo-tree-id31921 . -300) (undo-tree-id31922 . -300) (undo-tree-id31923 . -300) (undo-tree-id31924 . -379) (undo-tree-id31925 . -379) (undo-tree-id31926 . -379) (undo-tree-id31927 . -379) (undo-tree-id31928 . -379) (undo-tree-id31929 . -379) (undo-tree-id31930 . -379) (undo-tree-id31931 . -379) (undo-tree-id31932 . -379) (undo-tree-id31933 . -379) (undo-tree-id31934 . -379) (undo-tree-id31935 . -379) (undo-tree-id31936 . -379) (undo-tree-id31937 . -379) (undo-tree-id31938 . -379) (undo-tree-id31939 . -379) (undo-tree-id31940 . -379) (undo-tree-id31941 . -379) (undo-tree-id31942 . -379) (undo-tree-id31943 . -379) (undo-tree-id31944 . -379) (undo-tree-id31945 . -379) (undo-tree-id31946 . -379) (undo-tree-id31947 . -379) (undo-tree-id31948 . -379) (undo-tree-id31949 . -379) (undo-tree-id31950 . -379) (undo-tree-id31951 . -382) (undo-tree-id31952 . -382) (undo-tree-id31953 . -382) (undo-tree-id31954 . -382) (undo-tree-id31955 . -382) (undo-tree-id31956 . -382) (undo-tree-id31957 . -382) (undo-tree-id31958 . -382) (undo-tree-id31959 . -382) (undo-tree-id31960 . -382) (undo-tree-id31961 . -382) (undo-tree-id31962 . -382) (undo-tree-id31963 . -382) (undo-tree-id31964 . -382) (undo-tree-id31965 . -382) (undo-tree-id31966 . -382) (undo-tree-id31967 . -382) (undo-tree-id31968 . -382) (undo-tree-id31969 . -382) (undo-tree-id31970 . -382) (undo-tree-id31971 . -382) (undo-tree-id31972 . -382) (undo-tree-id31973 . -382) (undo-tree-id31974 . -382) (undo-tree-id31975 . -382) (undo-tree-id31976 . -382) (undo-tree-id31977 . -382) (undo-tree-id31978 . -383) (undo-tree-id31979 . -383) (undo-tree-id31980 . -383) (undo-tree-id31981 . -383) (undo-tree-id31982 . -383) (undo-tree-id31983 . -383) (undo-tree-id31984 . -383) (undo-tree-id31985 . -383) (undo-tree-id31986 . -383) (undo-tree-id31987 . -383) (undo-tree-id31988 . -383) (undo-tree-id31989 . -383) (undo-tree-id31990 . -383) (undo-tree-id31991 . -383) (undo-tree-id31992 . -383) (undo-tree-id31993 . -383) (undo-tree-id31994 . -383) (undo-tree-id31995 . -383) (undo-tree-id31996 . -383) (undo-tree-id31997 . -383) (undo-tree-id31998 . -383) (undo-tree-id31999 . -383) (undo-tree-id32000 . -383) (undo-tree-id32001 . -383) (undo-tree-id32002 . -383) (undo-tree-id32003 . -383) (undo-tree-id32004 . -383) (undo-tree-id32005 . -300) (undo-tree-id32006 . -300) (undo-tree-id32007 . -300) (undo-tree-id32008 . -300) (undo-tree-id32009 . -300) (undo-tree-id32010 . -300) (undo-tree-id32011 . -300) (undo-tree-id32012 . -300) (undo-tree-id32013 . -300) (undo-tree-id32014 . -383) (undo-tree-id32015 . -383) (undo-tree-id32016 . -383) (undo-tree-id32017 . -383) (undo-tree-id32018 . -383) (undo-tree-id32019 . -383) (undo-tree-id32020 . -383) (undo-tree-id32021 . -383) (undo-tree-id32022 . -383) (undo-tree-id32023 . -301) (undo-tree-id32024 . -383) (undo-tree-id32025 . -383) (undo-tree-id32026 . -383) (undo-tree-id32027 . -383) (undo-tree-id32028 . -383) (undo-tree-id32029 . -383) (undo-tree-id32030 . -383) (undo-tree-id32031 . -383) (undo-tree-id32032 . -383) (undo-tree-id32033 . -383) (undo-tree-id32034 . -383) (undo-tree-id32035 . -383) (undo-tree-id32036 . -383) (undo-tree-id32037 . -383) (undo-tree-id32038 . -383) (undo-tree-id32039 . -383) (undo-tree-id32040 . -383) (undo-tree-id32041 . -383) (undo-tree-id32042 . -383) (undo-tree-id32043 . -383) (undo-tree-id32044 . -383) (undo-tree-id32045 . -383) (undo-tree-id32046 . -383) (undo-tree-id32047 . -383) (undo-tree-id32048 . -383) (undo-tree-id32049 . -383) (undo-tree-id32050 . -383) (undo-tree-id32051 . -383) (undo-tree-id32052 . -383) (undo-tree-id32053 . -383) (undo-tree-id32054 . -383) (undo-tree-id32055 . -383) (undo-tree-id32056 . -384) 7427 (t 26156 62269 441401 42000)) nil (26156 62352 435628 39000) 0 nil])
([nil nil ((240 . 241) (t 26156 62352 546834 253000)) nil (26156 62849 433145 960000) 0 nil])
([nil nil ((#("Coordinate" 0 10 (fontified t face font-lock-type-face)) . 243) (undo-tree-id32066 . -9)) nil (26156 62849 433142 924000) 0 nil])
([nil nil ((243 . 248) (#("us" 0 2 (fontified nil)) . 243) (243 . 245) (#("usize" 0 5 (fontified nil)) . -243) (243 . 248) (#("us" 0 2 (fontified t)) . -243) (undo-tree-id32063 . -2) (undo-tree-id32064 . -2) (undo-tree-id32065 . -2) 245 (243 . 245)) nil (26156 62849 433136 660000) 0 nil])
([nil nil ((270 . 271) (265 . 270) (#("us" 0 2 (fontified nil)) . 265) (265 . 267) (#("usize" 0 5 (fontified nil)) . -265) (265 . 270) (#("us" 0 2 (fontified t)) . -265) (undo-tree-id32058 . -2) (undo-tree-id32059 . -2) 267 (262 . 267) (257 . 262) (#("i" 0 1 (fontified t)) . -257) (undo-tree-id32060 . -1) (#("t" 0 1 (fontified t)) . -258) (undo-tree-id32061 . -1) (#("o" 0 1 (fontified t)) . -259) (undo-tree-id32062 . -1) 260 (254 . 260) (249 . 254)) nil (26156 62849 433119 326000) 0 nil])
([nil nil ((270 . 271) (#(";" 0 1 (fontified t)) . -270) (undo-tree-id32057 . -1) 271) nil (26156 62849 433092 728000) 0 nil])
([nil nil ((#("struct LidarMeasurement {
    measurements: Vec<Coordinate> // points in polar coordinate 
} 

" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 23 (fontified t face font-lock-type-face) 23 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 30 (fontified t) 30 42 (fontified t face font-lock-variable-name-face) 42 44 (fontified t) 44 47 (fontified t face font-lock-type-face) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 58 (fontified t face font-lock-type-face) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 60 (fontified t) 60 63 (fontified t face font-lock-comment-delimiter-face) 63 91 (fontified t face font-lock-comment-face) 91 92 (fontified t face (rainbow-delimiters-depth-1-face)) 92 95 (fontified t)) . 366) (undo-tree-id32067 . -94) (undo-tree-id32068 . -94) (undo-tree-id32069 . -94) (undo-tree-id32070 . 70) (undo-tree-id32071 . -7) (undo-tree-id32072 . -23) (undo-tree-id32073 . -30) (undo-tree-id32074 . -42) (undo-tree-id32075 . -92) (undo-tree-id32076 . -92) (undo-tree-id32077 . -92) (undo-tree-id32078 . -92) (undo-tree-id32079 . -92) (undo-tree-id32080 . -92) (undo-tree-id32081 . -92) (undo-tree-id32082 . -92) (undo-tree-id32083 . -92) (undo-tree-id32084 . -94) (undo-tree-id32085 . -94) (undo-tree-id32086 . -94) (undo-tree-id32087 . -94) (undo-tree-id32088 . -94) (undo-tree-id32089 . -94) (undo-tree-id32090 . -94) (undo-tree-id32091 . -94) (undo-tree-id32092 . -94) (undo-tree-id32093 . -95) (undo-tree-id32094 . -95) (undo-tree-id32095 . -95) (undo-tree-id32096 . -95) (undo-tree-id32097 . -95) (undo-tree-id32098 . -95) (undo-tree-id32099 . -95) (undo-tree-id32100 . -95) (undo-tree-id32101 . -95) (undo-tree-id32102 . -95) (undo-tree-id32103 . -95) (undo-tree-id32104 . -95) (undo-tree-id32105 . -95) (undo-tree-id32106 . -95) (undo-tree-id32107 . -95) (undo-tree-id32108 . -95) (undo-tree-id32109 . -95) (undo-tree-id32110 . -95) (undo-tree-id32111 . -94) (undo-tree-id32112 . -94) (undo-tree-id32113 . -94) (undo-tree-id32114 . -94) (undo-tree-id32115 . -94) (undo-tree-id32116 . -94) (undo-tree-id32117 . -94) (undo-tree-id32118 . -94) (undo-tree-id32119 . -94) (undo-tree-id32120 . -95) (undo-tree-id32121 . -94) (undo-tree-id32122 . -94) (undo-tree-id32123 . -94) (undo-tree-id32124 . -94) (undo-tree-id32125 . -94) (undo-tree-id32126 . -94) (undo-tree-id32127 . -94) (undo-tree-id32128 . -94) (undo-tree-id32129 . -94) (undo-tree-id32130 . -94) (undo-tree-id32131 . -94) (undo-tree-id32132 . -94) (undo-tree-id32133 . -91) (undo-tree-id32134 . -91) (undo-tree-id32135 . -91) (undo-tree-id32136 . -91) (undo-tree-id32137 . -91) (undo-tree-id32138 . -91) (undo-tree-id32139 . -91) (undo-tree-id32140 . -91) (undo-tree-id32141 . -91) (undo-tree-id32142 . -26) (undo-tree-id32143 . -26) (undo-tree-id32144 . -26) (undo-tree-id32145 . -26) (undo-tree-id32146 . -26) (undo-tree-id32147 . -26) (undo-tree-id32148 . -26) (undo-tree-id32149 . -26) (undo-tree-id32150 . -26) (undo-tree-id32151 . -95) (t 26156 62849 543950 340000)) nil (26156 62854 848240 349000) 0 nil])
([nil nil ((#("trait Filterable {
    fn get_simulated_measurement(&self) -> LidarMeasurement;
    fn get_what_it_sees(&self) -> Map;
	
}

" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 16 (fontified t face font-lock-type-face) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 23 (fontified t) 23 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 51 (fontified t face font-lock-function-name-face) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t face rust-ampersand-face) 53 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 60 (fontified t) 60 61 (syntax-table (1) fontified t) 61 62 (fontified t) 62 78 (fontified t face font-lock-type-face) 78 84 (fontified t) 84 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 103 (fontified t face font-lock-function-name-face) 103 104 (fontified t face (rainbow-delimiters-depth-2-face)) 104 105 (fontified t face rust-ampersand-face) 105 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t face (rainbow-delimiters-depth-2-face)) 110 112 (fontified t) 112 113 (syntax-table (1) fontified t) 113 114 (fontified t) 114 117 (fontified t face font-lock-type-face) 117 118 (fontified t) 118 119 (fontified t) 119 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-1-face)) 122 124 (fontified t)) . 367) (undo-tree-id32152 . -123) (undo-tree-id32153 . -123) (undo-tree-id32154 . -123) (undo-tree-id32155 . -62) (undo-tree-id32156 . -78) (undo-tree-id32157 . -123) (t 26156 62854 935929 844000)) nil (26156 62861 470537 871000) 0 nil])
([nil nil ((#("
impl Filterable for Robot<'_> {
    fn get_simulated_measurement(&self) -> LidarMeasurement {
	todo!()
    }

" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 16 (fontified t face font-lock-type-face) 16 17 (fontified t) 17 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 26 (fontified t face font-lock-type-face) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 29 (fontified t face font-lock-variable-name-face) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-1-face)) 32 33 (fontified t) 33 37 (fontified t) 37 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 65 (fontified t face font-lock-function-name-face) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t face rust-ampersand-face) 67 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 74 (fontified t) 74 75 (syntax-table (1) fontified t) 75 76 (fontified t) 76 92 (fontified t face font-lock-type-face) 92 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-2-face)) 94 95 (fontified t) 95 96 (fontified t) 96 101 (fontified t face font-lock-preprocessor-face) 101 102 (fontified t face (rainbow-delimiters-depth-3-face)) 102 103 (fontified t face (rainbow-delimiters-depth-3-face)) 103 104 (fontified t) 104 108 (fontified t) 108 109 (fontified t face (rainbow-delimiters-depth-2-face)) 109 111 (fontified t)) . 368) (undo-tree-id32172 . -110) (undo-tree-id32173 . -110) (undo-tree-id32174 . -110) (undo-tree-id32175 . -1) (undo-tree-id32176 . -110) (t 26156 62861 555905 793000)) nil (26156 62868 107148 25000) 0 nil])
([nil nil ((#("    
    fn get_what_it_sees(&self) -> Map {
	todo!()
    }
}

" 0 5 (fontified t) 5 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-function-name-face) 23 28 (fontified t face font-lock-function-name-face) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t face rust-ampersand-face) 30 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 37 (fontified t) 37 38 (fontified t syntax-table (1)) 38 39 (fontified t) 39 42 (fontified t face font-lock-type-face) 42 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 46 (fontified t) 46 48 (fontified t face font-lock-preprocessor-face) 48 51 (fontified t face font-lock-preprocessor-face) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 53 (fontified t face (rainbow-delimiters-depth-3-face)) 53 54 (fontified t) 54 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-1-face)) 61 63 (fontified t)) . 368) (undo-tree-id32158 . -62) (undo-tree-id32159 . -62) (undo-tree-id32160 . -62) (undo-tree-id32161 . -63) (undo-tree-id32162 . -63) (undo-tree-id32163 . -63) (undo-tree-id32164 . -10) (undo-tree-id32165 . -20) (undo-tree-id32166 . -53) (undo-tree-id32167 . -54) (undo-tree-id32168 . -60) (undo-tree-id32169 . -61) (undo-tree-id32170 . -62) (undo-tree-id32171 . -63)) nil (26156 62868 107129 86000) 0 nil])
([nil nil ((apply -12 1219 1474 undo--wrap-and-run-primitive-undo 1219 1474 ((1436 . 1439) (1363 . 1366) (1294 . 1297) (1226 . 1229) 1219)) (t 26156 62868 215882 813000)) nil (26156 62880 963610 281000) 0 nil])
([nil nil ((#("use rand::distributions::OpenClosed01;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 37 (fontified t face font-lock-type-face) 37 38 (fontified t) 38 39 (fontified t)) . 25) (undo-tree-id32184 . -38) (undo-tree-id32185 . -4) (undo-tree-id32186 . -37) (undo-tree-id32187 . -38) (undo-tree-id32188 . -39) (undo-tree-id32189 . -39) (undo-tree-id32190 . -39) (t 26156 62881 47841 929000)) nil (26156 63304 788075 209000) 0 nil])
([nil nil ((42 . 46) (35 . 42) (#("p" 0 1 (fontified nil)) . 35) (35 . 36) (#("prelude" 0 7 (fontified nil)) . -35) (35 . 42) (#("p" 0 1 (fontified t)) . -35) (undo-tree-id32177 . -1) (undo-tree-id32178 . -1) (undo-tree-id32179 . -1) (undo-tree-id32180 . -1) (undo-tree-id32181 . -1) 36 (35 . 36) (33 . 35) (29 . 33) (#("ra" 0 2 (fontified nil)) . 29) (29 . 31) (#("rand" 0 4 (fontified nil)) . -29) (29 . 33) (#("ra" 0 2 (fontified t face font-lock-constant-face)) . -29) (undo-tree-id32182 . -2) (undo-tree-id32183 . -2) 31 (29 . 31) (25 . 29) (24 . 25)) nil (26156 63304 788047 911000) 0 nil])
([nil nil ((5528 . 5545) (t 26156 63304 896408 95000)) nil (26156 63399 917300 637000) 0 nil])
([nil nil ((5546 . 5550) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5546) (5546 . 5550) (5545 . 5547) (5543 . 5546) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -5543) (undo-tree-id32202 . -1) (undo-tree-id32203 . -1) (undo-tree-id32204 . -1) (undo-tree-id32205 . -1) (undo-tree-id32206 . -1) (undo-tree-id32207 . -1) (undo-tree-id32208 . -1) (undo-tree-id32209 . -1) (undo-tree-id32210 . -1) (undo-tree-id32211 . -1) (undo-tree-id32212 . -1) (undo-tree-id32213 . -1) (undo-tree-id32214 . -1) (undo-tree-id32215 . -1) (undo-tree-id32216 . -1) (undo-tree-id32217 . -1) (undo-tree-id32218 . -1) (undo-tree-id32219 . -1) (undo-tree-id32220 . -1) (undo-tree-id32221 . -1) (undo-tree-id32222 . -1) (undo-tree-id32223 . -1) (undo-tree-id32224 . -1) (undo-tree-id32225 . -1) (undo-tree-id32226 . -1) (undo-tree-id32227 . -1) (undo-tree-id32228 . -1) (undo-tree-id32229 . -1) (undo-tree-id32230 . -1) (undo-tree-id32231 . -1) (undo-tree-id32232 . -1) (undo-tree-id32233 . -1) (undo-tree-id32234 . -1) (undo-tree-id32235 . -1) (undo-tree-id32236 . -1) (undo-tree-id32237 . -1) (undo-tree-id32238 . -1) (undo-tree-id32239 . -1) (undo-tree-id32240 . -1) (undo-tree-id32241 . -1) (undo-tree-id32242 . -1) (undo-tree-id32243 . -1) (undo-tree-id32244 . -1) (undo-tree-id32245 . -1) (undo-tree-id32246 . -1) (undo-tree-id32247 . -1) (undo-tree-id32248 . -1) (undo-tree-id32249 . -1) (undo-tree-id32250 . -1) (undo-tree-id32251 . -1) (undo-tree-id32252 . -1) (undo-tree-id32253 . -1) (undo-tree-id32254 . -1) (undo-tree-id32255 . -1) (undo-tree-id32256 . -1) (undo-tree-id32257 . -1) (undo-tree-id32258 . -1) (undo-tree-id32259 . -1) (undo-tree-id32260 . -1) (undo-tree-id32261 . -1) (undo-tree-id32262 . -1) (undo-tree-id32263 . -1) (undo-tree-id32264 . -1) (undo-tree-id32265 . -1) (undo-tree-id32266 . -1) (undo-tree-id32267 . -1) (undo-tree-id32268 . -1) (undo-tree-id32269 . -1) (undo-tree-id32270 . -1) (undo-tree-id32271 . -1) (undo-tree-id32272 . -1) (undo-tree-id32273 . -1) (undo-tree-id32274 . -1) (undo-tree-id32275 . -1) (undo-tree-id32276 . -1) (undo-tree-id32277 . -1) (undo-tree-id32278 . -1) (undo-tree-id32279 . -1) (undo-tree-id32280 . -1) (undo-tree-id32281 . -1) (undo-tree-id32282 . -1) (undo-tree-id32283 . -1) (undo-tree-id32284 . -1) (undo-tree-id32285 . -1) (undo-tree-id32286 . -1) (undo-tree-id32287 . -1) (undo-tree-id32288 . -1) (undo-tree-id32289 . -1) (undo-tree-id32290 . -1) (undo-tree-id32291 . -1) (undo-tree-id32292 . -1) (undo-tree-id32293 . -1) (undo-tree-id32294 . -1) (undo-tree-id32295 . -1) (undo-tree-id32296 . -1) (undo-tree-id32297 . -1) (undo-tree-id32298 . -1) (undo-tree-id32299 . -1) (undo-tree-id32300 . -1) (undo-tree-id32301 . -1) (undo-tree-id32302 . -1) (undo-tree-id32303 . -1) (undo-tree-id32304 . -1) (undo-tree-id32305 . -1) (undo-tree-id32306 . -1) (undo-tree-id32307 . -1) (undo-tree-id32308 . -1) (undo-tree-id32309 . -1) (undo-tree-id32310 . -1) (undo-tree-id32311 . -1) (undo-tree-id32312 . -1) (undo-tree-id32313 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -5544) (undo-tree-id32314 . 1) (undo-tree-id32315 . -1) (undo-tree-id32316 . -1) (undo-tree-id32317 . 1) (undo-tree-id32318 . -1) (undo-tree-id32319 . -1) (undo-tree-id32320 . -1) (undo-tree-id32321 . -1) (undo-tree-id32322 . -1) (undo-tree-id32323 . -1) (undo-tree-id32324 . -1) (undo-tree-id32325 . -1) (undo-tree-id32326 . -1) (undo-tree-id32327 . -1) (undo-tree-id32328 . -1) (undo-tree-id32329 . -1) (undo-tree-id32330 . -1) (undo-tree-id32331 . -1) (undo-tree-id32332 . -1) (undo-tree-id32333 . -1) (undo-tree-id32334 . -1) (undo-tree-id32335 . -1) (undo-tree-id32336 . -1) (undo-tree-id32337 . -1) (undo-tree-id32338 . -1) (undo-tree-id32339 . -1) (undo-tree-id32340 . -1) (undo-tree-id32341 . -1) (undo-tree-id32342 . -1) (undo-tree-id32343 . -1) (undo-tree-id32344 . -1) (undo-tree-id32345 . -1) (undo-tree-id32346 . -1) (undo-tree-id32347 . -1) (undo-tree-id32348 . -1) (undo-tree-id32349 . -1) (undo-tree-id32350 . -1) (undo-tree-id32351 . -1) (undo-tree-id32352 . -1) (undo-tree-id32353 . -1) 5545) nil (26156 63399 917281 322000) 0 nil])
([nil nil ((5572 . 5573) (5567 . 5572) (#("us" 0 2 (fontified nil)) . 5567) (5567 . 5569) (#("usize" 0 5 (fontified nil)) . -5567) (5567 . 5572) (#("us" 0 2 (fontified t)) . -5567) (undo-tree-id32191 . -2) (undo-tree-id32192 . -2) (undo-tree-id32193 . -2) 5569 (5564 . 5569) (5559 . 5564) (5558 . 5559) (#(";" 0 1 (fontified t)) . -5558) (undo-tree-id32194 . -1) 5559 (5558 . 5559) (5553 . 5558) (#("us" 0 2 (fontified nil)) . 5553) (5553 . 5555) (#("usize" 0 5 (fontified nil)) . -5553) (5553 . 5558) (#("us" 0 2 (fontified t)) . -5553) (undo-tree-id32195 . -2) (undo-tree-id32196 . -2) (undo-tree-id32197 . -2) 5555 (5550 . 5555) (#("p" 0 1 (fontified t)) . -5550) (undo-tree-id32198 . -1) (undo-tree-id32199 . -1) (#("o" 0 1 (fontified t)) . -5551) (undo-tree-id32200 . -1) (undo-tree-id32201 . -1) 5552 (5550 . 5552)) nil (26156 63399 916793 682000) 0 nil])
([nil nil ((5575 . 5578) (t 26156 63400 32898 934000)) nil (26156 63435 326894 77000) 0 nil])
([nil nil ((5593 . 5597) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5593) (5593 . 5597) (5592 . 5594) (5577 . 5593) (#("s" 0 1 (fontified t)) . -5577) (undo-tree-id32390 . -1) (undo-tree-id32391 . -1) (#("t" 0 1 (fontified t)) . -5578) (undo-tree-id32392 . -1) (undo-tree-id32393 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -5579) (undo-tree-id32394 . -1) (undo-tree-id32395 . -1) (#("u" 0 1 (fontified t)) . -5580) (undo-tree-id32396 . -1) (undo-tree-id32397 . -1) (#("c" 0 1 (fontified t)) . -5581) (undo-tree-id32398 . -1) (undo-tree-id32399 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -5582) (undo-tree-id32400 . -1) (undo-tree-id32401 . -1) (#(" " 0 1 (fontified t)) . -5583) (undo-tree-id32402 . -1) (undo-tree-id32403 . -1) 5584 (apply yas--snippet-revive 5577 5584 #s(yas--snippet nil nil #s(yas--exit 5584 nil) 162 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5584 nil) 162 nil nil nil nil)) (5577 . 5584) (#("struct $0" 0 9 (fontified nil)) . 5577) (5577 . 5586) (#("stru" 0 4 (fontified nil)) . 5577) (5577 . 5581) (#("struct" 0 6 (fontified nil)) . -5577) (5577 . 5583) (#("stru" 0 4 (fontified t)) . -5577) (undo-tree-id32404 . -3) (undo-tree-id32405 . -4) (undo-tree-id32406 . -4) 5581 (5577 . 5581)) nil (26156 63435 326882 431000) 0 nil])
([nil nil ((6182 . 6185) (#("1" 0 1 (fontified t)) . -6182) (undo-tree-id32354 . -1) (undo-tree-id32355 . -1) (undo-tree-id32356 . -1) (undo-tree-id32357 . -1) (undo-tree-id32358 . -1) (undo-tree-id32359 . -1) (undo-tree-id32360 . -1) (undo-tree-id32361 . -1) (undo-tree-id32362 . -1) (undo-tree-id32363 . -1) (undo-tree-id32364 . -1) (undo-tree-id32365 . -1) (undo-tree-id32366 . -1) (undo-tree-id32367 . -1) (undo-tree-id32368 . -1) (undo-tree-id32369 . -1) (undo-tree-id32370 . -1) (undo-tree-id32371 . -1) (undo-tree-id32372 . -1) (undo-tree-id32373 . -1) (undo-tree-id32374 . -1) (undo-tree-id32375 . -1) (undo-tree-id32376 . -1) (#("0" 0 1 (fontified t)) . -6183) (undo-tree-id32377 . -1) (undo-tree-id32378 . -1) (undo-tree-id32379 . -1) (undo-tree-id32380 . -1) (undo-tree-id32381 . -1) (undo-tree-id32382 . -1) (undo-tree-id32383 . -1) (undo-tree-id32384 . -1) (undo-tree-id32385 . -1) (undo-tree-id32386 . -1) (undo-tree-id32387 . -1) (undo-tree-id32388 . -1) (undo-tree-id32389 . -1) 6184) nil (26156 63435 326828 352000) 0 nil])
([nil nil ((6182 . 6184) (#("1" 0 1 (fontified t)) . -6182) (undo-tree-id32407 . -1) (undo-tree-id32408 . -1) (undo-tree-id32409 . -1) (undo-tree-id32410 . -1) (undo-tree-id32411 . -1) (undo-tree-id32412 . -1) (undo-tree-id32413 . -1) (undo-tree-id32414 . -1) (undo-tree-id32415 . -1) (undo-tree-id32416 . -1) (undo-tree-id32417 . -1) (undo-tree-id32418 . -1) (undo-tree-id32419 . -1) (undo-tree-id32420 . -1) (undo-tree-id32421 . -1) (undo-tree-id32422 . -1) (undo-tree-id32423 . -1) (undo-tree-id32424 . -1) (undo-tree-id32425 . -1) (undo-tree-id32426 . -1) (undo-tree-id32427 . -1) (undo-tree-id32428 . -1) (undo-tree-id32429 . -1) (undo-tree-id32430 . -1) (undo-tree-id32431 . -1) (undo-tree-id32432 . -1) (undo-tree-id32433 . -1) (undo-tree-id32434 . -1) (undo-tree-id32435 . -1) (undo-tree-id32436 . -1) (undo-tree-id32437 . -1) (undo-tree-id32438 . -1) (undo-tree-id32439 . -1) (undo-tree-id32440 . -1) (undo-tree-id32441 . -1) (undo-tree-id32442 . -1) (undo-tree-id32443 . -1) (undo-tree-id32444 . -1) (undo-tree-id32445 . -1) (undo-tree-id32446 . -1) (undo-tree-id32447 . -1) (undo-tree-id32448 . -1) (undo-tree-id32449 . -1) (undo-tree-id32450 . -1) (undo-tree-id32451 . -1) (undo-tree-id32452 . -1) (undo-tree-id32453 . -1) (undo-tree-id32454 . -1) (undo-tree-id32455 . -1) (undo-tree-id32456 . -1) (undo-tree-id32457 . -1) (undo-tree-id32458 . -1) (undo-tree-id32459 . -1) (undo-tree-id32460 . -1) (undo-tree-id32461 . -1) (undo-tree-id32462 . -1) (undo-tree-id32463 . -1) (undo-tree-id32464 . -1) (undo-tree-id32465 . -1) (undo-tree-id32466 . -1) (undo-tree-id32467 . -1) (undo-tree-id32468 . -1) (undo-tree-id32469 . -1) (undo-tree-id32470 . -1) (undo-tree-id32471 . -1) (undo-tree-id32472 . -1) (undo-tree-id32473 . -1) (undo-tree-id32474 . -1) (undo-tree-id32475 . -1) (undo-tree-id32476 . -1) (undo-tree-id32477 . -1) (undo-tree-id32478 . -1) (undo-tree-id32479 . -1) (undo-tree-id32480 . -1) (undo-tree-id32481 . -1) (undo-tree-id32482 . -1) (undo-tree-id32483 . -1) (undo-tree-id32484 . -1) (undo-tree-id32485 . -1) (undo-tree-id32486 . -1) (undo-tree-id32487 . -1) (undo-tree-id32488 . -1) (undo-tree-id32489 . -1) (undo-tree-id32490 . -1) (undo-tree-id32491 . -1) (undo-tree-id32492 . -1) (undo-tree-id32493 . -1) (undo-tree-id32494 . -1) (undo-tree-id32495 . -1) (undo-tree-id32496 . -1) (undo-tree-id32497 . -1) (undo-tree-id32498 . -1) (undo-tree-id32499 . -1) (undo-tree-id32500 . -1) (undo-tree-id32501 . -1) (undo-tree-id32502 . -1) (undo-tree-id32503 . -1) (undo-tree-id32504 . -1) (undo-tree-id32505 . -1) (undo-tree-id32506 . -1) (undo-tree-id32507 . -1) (undo-tree-id32508 . -1) (undo-tree-id32509 . -1) (undo-tree-id32510 . -1) (undo-tree-id32511 . -1) (undo-tree-id32512 . -1) (undo-tree-id32513 . -1) (undo-tree-id32514 . -1) (undo-tree-id32515 . -1) (undo-tree-id32516 . -1) (undo-tree-id32517 . -1) (undo-tree-id32518 . -1) (undo-tree-id32519 . -1) (undo-tree-id32520 . -1) (undo-tree-id32521 . -1) (undo-tree-id32522 . -1) (undo-tree-id32523 . -1) (undo-tree-id32524 . -1) (undo-tree-id32525 . -1) (undo-tree-id32526 . -1) (undo-tree-id32527 . -1) (undo-tree-id32528 . -1) (undo-tree-id32529 . -1) (undo-tree-id32530 . -1) (undo-tree-id32531 . -1) (undo-tree-id32532 . -1) (undo-tree-id32533 . -1) (undo-tree-id32534 . -1) (undo-tree-id32535 . -1) (undo-tree-id32536 . -1) (undo-tree-id32537 . -1) (undo-tree-id32538 . -1) (undo-tree-id32539 . -1) (undo-tree-id32540 . -1) (undo-tree-id32541 . -1) (undo-tree-id32542 . -1) (undo-tree-id32543 . -1) (undo-tree-id32544 . -1) (undo-tree-id32545 . -1) (undo-tree-id32546 . -1) (undo-tree-id32547 . -1) (undo-tree-id32548 . -1) (undo-tree-id32549 . -1) (undo-tree-id32550 . -1) (undo-tree-id32551 . -1) (undo-tree-id32552 . -1) (undo-tree-id32553 . -1) (undo-tree-id32554 . -1) (undo-tree-id32555 . -1) (undo-tree-id32556 . -1) (undo-tree-id32557 . -1) (undo-tree-id32558 . -1) (undo-tree-id32559 . -1) (undo-tree-id32560 . -1) (undo-tree-id32561 . -1) (undo-tree-id32562 . -1) (undo-tree-id32563 . -1) (undo-tree-id32564 . -1) (undo-tree-id32565 . -1) (undo-tree-id32566 . -1) (undo-tree-id32567 . -1) (undo-tree-id32568 . -1) (undo-tree-id32569 . -1) (undo-tree-id32570 . -1) (undo-tree-id32571 . -1) (undo-tree-id32572 . -1) (undo-tree-id32573 . -1) (undo-tree-id32574 . -1) (undo-tree-id32575 . -1) (undo-tree-id32576 . -1) (undo-tree-id32577 . -1) (undo-tree-id32578 . -1) (undo-tree-id32579 . -1) (undo-tree-id32580 . -1) (undo-tree-id32581 . -1) (undo-tree-id32582 . -1) (undo-tree-id32583 . -1) (undo-tree-id32584 . -1) (undo-tree-id32585 . -1) (undo-tree-id32586 . -1) (undo-tree-id32587 . -1) (undo-tree-id32588 . -1) (undo-tree-id32589 . -1) (undo-tree-id32590 . -1) (undo-tree-id32591 . -1) (undo-tree-id32592 . -1) (undo-tree-id32593 . -1) (undo-tree-id32594 . -1) (undo-tree-id32595 . -1) (undo-tree-id32596 . -1) (undo-tree-id32597 . -1) (undo-tree-id32598 . -1) (undo-tree-id32599 . -1) (undo-tree-id32600 . -1) (undo-tree-id32601 . -1) (undo-tree-id32602 . -1) (undo-tree-id32603 . -1) (undo-tree-id32604 . -1) (undo-tree-id32605 . -1) (undo-tree-id32606 . -1) (undo-tree-id32607 . -1) (undo-tree-id32608 . -1) (undo-tree-id32609 . -1) (undo-tree-id32610 . -1) (undo-tree-id32611 . -1) (undo-tree-id32612 . -1) (undo-tree-id32613 . -1) (undo-tree-id32614 . -1) (undo-tree-id32615 . -1) (undo-tree-id32616 . -1) (undo-tree-id32617 . -1) (undo-tree-id32618 . -1) (undo-tree-id32619 . -1) (undo-tree-id32620 . -1) (undo-tree-id32621 . -1) (undo-tree-id32622 . -1) (undo-tree-id32623 . -1) (undo-tree-id32624 . -1) (undo-tree-id32625 . -1) (undo-tree-id32626 . -1) (undo-tree-id32627 . -1) (undo-tree-id32628 . -1) (undo-tree-id32629 . -1) (undo-tree-id32630 . -1) (undo-tree-id32631 . -1) (undo-tree-id32632 . -1) (undo-tree-id32633 . -1) (undo-tree-id32634 . -1) (undo-tree-id32635 . -1) (undo-tree-id32636 . -1) (undo-tree-id32637 . -1) (undo-tree-id32638 . -1) (undo-tree-id32639 . -1) (undo-tree-id32640 . -1) (undo-tree-id32641 . -1) (undo-tree-id32642 . -1) (undo-tree-id32643 . -1) (undo-tree-id32644 . -1) (undo-tree-id32645 . -1) (undo-tree-id32646 . -1) (undo-tree-id32647 . -1) (undo-tree-id32648 . -1) (undo-tree-id32649 . -1) (undo-tree-id32650 . -1) (undo-tree-id32651 . -1) (undo-tree-id32652 . -1) (undo-tree-id32653 . -1) (undo-tree-id32654 . -1) (undo-tree-id32655 . -1) (undo-tree-id32656 . -1) (undo-tree-id32657 . -1) (undo-tree-id32658 . -1) (undo-tree-id32659 . -1) (undo-tree-id32660 . -1) (undo-tree-id32661 . -1) (undo-tree-id32662 . -1) (undo-tree-id32663 . -1) (undo-tree-id32664 . -1) (undo-tree-id32665 . -1) (undo-tree-id32666 . -1) (undo-tree-id32667 . -1) (undo-tree-id32668 . -1) (undo-tree-id32669 . -1) (undo-tree-id32670 . -1) (undo-tree-id32671 . -1) (undo-tree-id32672 . -1) (undo-tree-id32673 . -1) (undo-tree-id32674 . -1) (undo-tree-id32675 . -1) (undo-tree-id32676 . -1) (undo-tree-id32677 . -1) (undo-tree-id32678 . -1) (undo-tree-id32679 . -1) (undo-tree-id32680 . -1) (undo-tree-id32681 . -1) (undo-tree-id32682 . -1) (undo-tree-id32683 . -1) (undo-tree-id32684 . -1) (undo-tree-id32685 . -1) (undo-tree-id32686 . -1) (undo-tree-id32687 . -1) (undo-tree-id32688 . -1) (undo-tree-id32689 . -1) (undo-tree-id32690 . -1) (undo-tree-id32691 . -1) (undo-tree-id32692 . -1) (undo-tree-id32693 . -1) (undo-tree-id32694 . -1) (undo-tree-id32695 . -1) (undo-tree-id32696 . -1) (undo-tree-id32697 . -1) (undo-tree-id32698 . -1) (undo-tree-id32699 . -1) (undo-tree-id32700 . -1) (undo-tree-id32701 . -1) (undo-tree-id32702 . -1) (undo-tree-id32703 . -1) (undo-tree-id32704 . -1) (undo-tree-id32705 . -1) (undo-tree-id32706 . -1) (undo-tree-id32707 . -1) (undo-tree-id32708 . -1) (undo-tree-id32709 . -1) (undo-tree-id32710 . -1) (undo-tree-id32711 . -1) (undo-tree-id32712 . -1) (undo-tree-id32713 . -1) (undo-tree-id32714 . -1) (undo-tree-id32715 . -1) (undo-tree-id32716 . -1) (undo-tree-id32717 . -1) (undo-tree-id32718 . -1) (undo-tree-id32719 . -1) (undo-tree-id32720 . -1) (undo-tree-id32721 . -1) (undo-tree-id32722 . -1) (undo-tree-id32723 . -1) (undo-tree-id32724 . -1) (undo-tree-id32725 . -1) (undo-tree-id32726 . -1) (undo-tree-id32727 . -1) (undo-tree-id32728 . -1) (undo-tree-id32729 . -1) (undo-tree-id32730 . -1) (undo-tree-id32731 . -1) (undo-tree-id32732 . -1) (undo-tree-id32733 . -1) (undo-tree-id32734 . -1) (undo-tree-id32735 . -1) (undo-tree-id32736 . -1) (undo-tree-id32737 . -1) (undo-tree-id32738 . -1) (undo-tree-id32739 . -1) (undo-tree-id32740 . -1) (undo-tree-id32741 . -1) (undo-tree-id32742 . -1) (undo-tree-id32743 . -1) (undo-tree-id32744 . -1) (undo-tree-id32745 . -1) (undo-tree-id32746 . -1) (undo-tree-id32747 . -1) (undo-tree-id32748 . -1) (undo-tree-id32749 . -1) (undo-tree-id32750 . -1) (undo-tree-id32751 . -1) (#("0" 0 1 (fontified t)) . -6183) (undo-tree-id32752 . -1) (undo-tree-id32753 . -1) (undo-tree-id32754 . -1) (undo-tree-id32755 . -1) (undo-tree-id32756 . -1) (undo-tree-id32757 . -1) (undo-tree-id32758 . -1) (undo-tree-id32759 . -1) (undo-tree-id32760 . -1) (undo-tree-id32761 . -1) (undo-tree-id32762 . -1) (undo-tree-id32763 . -1) (undo-tree-id32764 . -1) (undo-tree-id32765 . -1) (undo-tree-id32766 . -1) (undo-tree-id32767 . -1) (undo-tree-id32768 . -1) (undo-tree-id32769 . -1) (undo-tree-id32770 . -1) (undo-tree-id32771 . -1) (undo-tree-id32772 . -1) (undo-tree-id32773 . -1) (undo-tree-id32774 . -1) (undo-tree-id32775 . -1) (undo-tree-id32776 . -1) (undo-tree-id32777 . -1) (undo-tree-id32778 . -1) (undo-tree-id32779 . -1) (undo-tree-id32780 . -1) (undo-tree-id32781 . -1) (undo-tree-id32782 . -1) (undo-tree-id32783 . -1) (undo-tree-id32784 . -1) (undo-tree-id32785 . -1) (undo-tree-id32786 . -1) (undo-tree-id32787 . -1) (undo-tree-id32788 . -1) (undo-tree-id32789 . -1) (undo-tree-id32790 . -1) (undo-tree-id32791 . -1) (undo-tree-id32792 . -1) (undo-tree-id32793 . -1) (undo-tree-id32794 . -1) (undo-tree-id32795 . -1) (undo-tree-id32796 . -1) (undo-tree-id32797 . -1) (undo-tree-id32798 . -1) (undo-tree-id32799 . -1) (undo-tree-id32800 . -1) (undo-tree-id32801 . -1) (undo-tree-id32802 . -1) (undo-tree-id32803 . -1) (undo-tree-id32804 . -1) (undo-tree-id32805 . -1) (undo-tree-id32806 . -1) (undo-tree-id32807 . -1) (undo-tree-id32808 . -1) (undo-tree-id32809 . -1) (undo-tree-id32810 . -1) (undo-tree-id32811 . -1) (undo-tree-id32812 . -1) (undo-tree-id32813 . -1) (undo-tree-id32814 . -1) (undo-tree-id32815 . -1) (undo-tree-id32816 . -1) (undo-tree-id32817 . -1) (undo-tree-id32818 . -1) (undo-tree-id32819 . -1) (undo-tree-id32820 . -1) (undo-tree-id32821 . -1) (undo-tree-id32822 . -1) (undo-tree-id32823 . -1) (undo-tree-id32824 . -1) (undo-tree-id32825 . -1) (undo-tree-id32826 . -1) (undo-tree-id32827 . -1) (undo-tree-id32828 . -1) (undo-tree-id32829 . -1) (undo-tree-id32830 . -1) (undo-tree-id32831 . -1) (undo-tree-id32832 . -1) (undo-tree-id32833 . -1) (undo-tree-id32834 . -1) (undo-tree-id32835 . -1) (undo-tree-id32836 . -1) (undo-tree-id32837 . -1) (undo-tree-id32838 . -1) (undo-tree-id32839 . -1) (undo-tree-id32840 . -1) (undo-tree-id32841 . -1) (undo-tree-id32842 . -1) (undo-tree-id32843 . -1) (undo-tree-id32844 . -1) (undo-tree-id32845 . -1) (undo-tree-id32846 . -1) (undo-tree-id32847 . -1) (undo-tree-id32848 . -1) (undo-tree-id32849 . -1) (undo-tree-id32850 . -1) (undo-tree-id32851 . -1) (undo-tree-id32852 . -1) (undo-tree-id32853 . -1) (undo-tree-id32854 . -1) (undo-tree-id32855 . -1) (undo-tree-id32856 . -1) (undo-tree-id32857 . -1) (undo-tree-id32858 . -1) (undo-tree-id32859 . -1) (undo-tree-id32860 . -1) (undo-tree-id32861 . -1) (undo-tree-id32862 . -1) (undo-tree-id32863 . -1) (undo-tree-id32864 . -1) (undo-tree-id32865 . -1) (undo-tree-id32866 . -1) (undo-tree-id32867 . -1) (undo-tree-id32868 . -1) (undo-tree-id32869 . -1) (undo-tree-id32870 . -1) (undo-tree-id32871 . -1) (undo-tree-id32872 . -1) (undo-tree-id32873 . -1) (undo-tree-id32874 . -1) (undo-tree-id32875 . -1) (undo-tree-id32876 . -1) (undo-tree-id32877 . -1) (undo-tree-id32878 . -1) (undo-tree-id32879 . -1) (undo-tree-id32880 . -1) (undo-tree-id32881 . -1) (undo-tree-id32882 . -1) (undo-tree-id32883 . -1) (undo-tree-id32884 . -1) (undo-tree-id32885 . -1) (undo-tree-id32886 . -1) (undo-tree-id32887 . -1) (undo-tree-id32888 . -1) (undo-tree-id32889 . -1) (undo-tree-id32890 . -1) (undo-tree-id32891 . -1) (undo-tree-id32892 . -1) (undo-tree-id32893 . -1) (undo-tree-id32894 . -1) (undo-tree-id32895 . -1) (undo-tree-id32896 . -1) (undo-tree-id32897 . -1) (undo-tree-id32898 . -1) (undo-tree-id32899 . -1) (undo-tree-id32900 . -1) (undo-tree-id32901 . -1) (undo-tree-id32902 . -1) (undo-tree-id32903 . -1) (undo-tree-id32904 . -1) (undo-tree-id32905 . -1) (undo-tree-id32906 . -1) (undo-tree-id32907 . -1) (undo-tree-id32908 . -1) (undo-tree-id32909 . -1) (undo-tree-id32910 . -1) (undo-tree-id32911 . -1) (undo-tree-id32912 . -1) (undo-tree-id32913 . -1) (undo-tree-id32914 . -1) (undo-tree-id32915 . -1) (undo-tree-id32916 . -1) (undo-tree-id32917 . -1) (undo-tree-id32918 . -1) (undo-tree-id32919 . -1) (undo-tree-id32920 . -1) (undo-tree-id32921 . -1) (undo-tree-id32922 . -1) (undo-tree-id32923 . -1) (undo-tree-id32924 . -1) (undo-tree-id32925 . -1) (undo-tree-id32926 . -1) (undo-tree-id32927 . -1) (undo-tree-id32928 . -1) (undo-tree-id32929 . -1) (undo-tree-id32930 . -1) (undo-tree-id32931 . -1) (undo-tree-id32932 . -1) (undo-tree-id32933 . -1) (undo-tree-id32934 . -1) (undo-tree-id32935 . -1) (undo-tree-id32936 . -1) (undo-tree-id32937 . -1) (undo-tree-id32938 . -1) (undo-tree-id32939 . -1) (undo-tree-id32940 . -1) (undo-tree-id32941 . -1) (undo-tree-id32942 . -1) (undo-tree-id32943 . -1) (undo-tree-id32944 . -1) (undo-tree-id32945 . -1) (undo-tree-id32946 . -1) (undo-tree-id32947 . -1) (undo-tree-id32948 . -1) (undo-tree-id32949 . -1) (undo-tree-id32950 . -1) (undo-tree-id32951 . -1) (undo-tree-id32952 . -1) (undo-tree-id32953 . -1) (undo-tree-id32954 . -1) (undo-tree-id32955 . -1) (undo-tree-id32956 . -1) (undo-tree-id32957 . -1) (undo-tree-id32958 . -1) (undo-tree-id32959 . -1) (undo-tree-id32960 . -1) (undo-tree-id32961 . -1) (undo-tree-id32962 . -1) (undo-tree-id32963 . -1) (undo-tree-id32964 . -1) (undo-tree-id32965 . -1) (undo-tree-id32966 . -1) (undo-tree-id32967 . -1) (undo-tree-id32968 . -1) (undo-tree-id32969 . -1) (undo-tree-id32970 . -1) (undo-tree-id32971 . -1) (undo-tree-id32972 . -1) (undo-tree-id32973 . -1) (undo-tree-id32974 . -1) (undo-tree-id32975 . -1) (undo-tree-id32976 . -1) (undo-tree-id32977 . -1) (undo-tree-id32978 . -1) (undo-tree-id32979 . -1) (undo-tree-id32980 . -1) (undo-tree-id32981 . -1) (undo-tree-id32982 . -1) (undo-tree-id32983 . -1) (undo-tree-id32984 . -1) (undo-tree-id32985 . -1) (undo-tree-id32986 . -1) (undo-tree-id32987 . -1) (undo-tree-id32988 . -1) (undo-tree-id32989 . -1) (undo-tree-id32990 . -1) (undo-tree-id32991 . -1) (undo-tree-id32992 . -1) (undo-tree-id32993 . -1) (undo-tree-id32994 . -1) (undo-tree-id32995 . -1) (undo-tree-id32996 . -1) (undo-tree-id32997 . -1) (undo-tree-id32998 . -1) (undo-tree-id32999 . -1) (undo-tree-id33000 . -1) (undo-tree-id33001 . -1) (undo-tree-id33002 . -1) (undo-tree-id33003 . -1) (undo-tree-id33004 . -1) (undo-tree-id33005 . -1) (undo-tree-id33006 . -1) (undo-tree-id33007 . -1) (undo-tree-id33008 . -1) (undo-tree-id33009 . -1) (undo-tree-id33010 . -1) (undo-tree-id33011 . -1) (undo-tree-id33012 . -1) (undo-tree-id33013 . -1) (undo-tree-id33014 . -1) (undo-tree-id33015 . -1) (undo-tree-id33016 . -1) (undo-tree-id33017 . -1) (undo-tree-id33018 . -1) (undo-tree-id33019 . -1) (undo-tree-id33020 . -1) (undo-tree-id33021 . -1) (undo-tree-id33022 . -1) (undo-tree-id33023 . -1) (undo-tree-id33024 . -1) (undo-tree-id33025 . -1) (undo-tree-id33026 . -1) (undo-tree-id33027 . -1) (undo-tree-id33028 . -1) (undo-tree-id33029 . -1) (undo-tree-id33030 . -1) (undo-tree-id33031 . -1) (undo-tree-id33032 . -1) (undo-tree-id33033 . -1) (undo-tree-id33034 . -1) (undo-tree-id33035 . -1) (undo-tree-id33036 . -1) (undo-tree-id33037 . -1) (undo-tree-id33038 . -1) (undo-tree-id33039 . -1) (undo-tree-id33040 . -1) (undo-tree-id33041 . -1) (undo-tree-id33042 . -1) (undo-tree-id33043 . -1) (undo-tree-id33044 . -1) (undo-tree-id33045 . -1) (undo-tree-id33046 . -1) (undo-tree-id33047 . -1) (undo-tree-id33048 . -1) (undo-tree-id33049 . -1) (undo-tree-id33050 . -1) (undo-tree-id33051 . -1) (undo-tree-id33052 . -1) (undo-tree-id33053 . -1) (undo-tree-id33054 . -1) (undo-tree-id33055 . -1) (undo-tree-id33056 . -1) (undo-tree-id33057 . -1) (undo-tree-id33058 . -1) (undo-tree-id33059 . -1) (undo-tree-id33060 . -1) (undo-tree-id33061 . -1) (undo-tree-id33062 . -1) (undo-tree-id33063 . -1) (undo-tree-id33064 . -1) (undo-tree-id33065 . -1) (undo-tree-id33066 . -1) (undo-tree-id33067 . -1) (undo-tree-id33068 . -1) (undo-tree-id33069 . -1) (undo-tree-id33070 . -1) (undo-tree-id33071 . -1) (undo-tree-id33072 . -1) (undo-tree-id33073 . -1) (undo-tree-id33074 . -1) (undo-tree-id33075 . -1) (undo-tree-id33076 . -1) (undo-tree-id33077 . -1) (undo-tree-id33078 . -1) (undo-tree-id33079 . -1) (undo-tree-id33080 . -1) (undo-tree-id33081 . -1) (undo-tree-id33082 . -1) (undo-tree-id33083 . -1) (undo-tree-id33084 . -1) (undo-tree-id33085 . -1) (undo-tree-id33086 . -1) (#("0" 0 1 (fontified t)) . -6184) (undo-tree-id33087 . -1) (undo-tree-id33088 . -1) (undo-tree-id33089 . -1) (undo-tree-id33090 . -1) (undo-tree-id33091 . -1) (undo-tree-id33092 . -1) (undo-tree-id33093 . -1) (undo-tree-id33094 . -1) (undo-tree-id33095 . -1) (undo-tree-id33096 . -1) (undo-tree-id33097 . -1) (undo-tree-id33098 . -1) (undo-tree-id33099 . -1) 6185 (t 26156 63435 417104 654000)) nil (26156 63507 535292 742000) 0 nil])
([nil nil ((6182 . 6183) (#("5" 0 1 (fontified t)) . -6182) (undo-tree-id33100 . -1) (undo-tree-id33101 . -1) (undo-tree-id33102 . -1) (undo-tree-id33103 . -1) (undo-tree-id33104 . -1) (undo-tree-id33105 . -1) (undo-tree-id33106 . -1) (undo-tree-id33107 . -1) (undo-tree-id33108 . -1) (#("0" 0 1 (fontified t)) . -6183) (undo-tree-id33109 . -1) 6184 (t 26156 63507 625558 570000)) nil (26156 63534 137426 608000) 0 nil])
([nil nil ((6182 . 6185) (#("3" 0 1 (fontified t)) . -6182) (undo-tree-id33110 . -1) (undo-tree-id33111 . -1) (undo-tree-id33112 . -1) (undo-tree-id33113 . -1) (undo-tree-id33114 . -1) (undo-tree-id33115 . -1) (undo-tree-id33116 . -1) (undo-tree-id33117 . -1) (undo-tree-id33118 . -1) (undo-tree-id33119 . -1) (undo-tree-id33120 . -1) (undo-tree-id33121 . -1) (undo-tree-id33122 . -1) (undo-tree-id33123 . -1) (undo-tree-id33124 . -1) (undo-tree-id33125 . -1) (undo-tree-id33126 . -1) (undo-tree-id33127 . -1) (undo-tree-id33128 . -1) (undo-tree-id33129 . -1) (undo-tree-id33130 . -1) (undo-tree-id33131 . -1) (undo-tree-id33132 . -1) (undo-tree-id33133 . -1) (undo-tree-id33134 . -1) (undo-tree-id33135 . -1) (undo-tree-id33136 . -1) (undo-tree-id33137 . -1) (undo-tree-id33138 . -1) (undo-tree-id33139 . -1) (undo-tree-id33140 . -1) (undo-tree-id33141 . -1) (undo-tree-id33142 . -1) (undo-tree-id33143 . -1) (undo-tree-id33144 . -1) (undo-tree-id33145 . -1) (undo-tree-id33146 . -1) (undo-tree-id33147 . -1) (undo-tree-id33148 . -1) (undo-tree-id33149 . -1) (undo-tree-id33150 . -1) (undo-tree-id33151 . -1) (undo-tree-id33152 . -1) (undo-tree-id33153 . -1) (undo-tree-id33154 . -1) (undo-tree-id33155 . -1) (undo-tree-id33156 . -1) (undo-tree-id33157 . -1) (undo-tree-id33158 . -1) (undo-tree-id33159 . -1) (undo-tree-id33160 . -1) (undo-tree-id33161 . -1) (undo-tree-id33162 . -1) (undo-tree-id33163 . -1) (undo-tree-id33164 . -1) (undo-tree-id33165 . -1) (undo-tree-id33166 . -1) (undo-tree-id33167 . -1) (undo-tree-id33168 . -1) (undo-tree-id33169 . -1) (undo-tree-id33170 . -1) (undo-tree-id33171 . -1) (undo-tree-id33172 . -1) (undo-tree-id33173 . -1) (undo-tree-id33174 . -1) (undo-tree-id33175 . -1) (undo-tree-id33176 . -1) (undo-tree-id33177 . -1) (undo-tree-id33178 . -1) (undo-tree-id33179 . -1) (undo-tree-id33180 . -1) (undo-tree-id33181 . -1) (undo-tree-id33182 . -1) (undo-tree-id33183 . -1) (undo-tree-id33184 . -1) (undo-tree-id33185 . -1) (undo-tree-id33186 . -1) (undo-tree-id33187 . -1) (#("5" 0 1 (fontified t)) . -6183) (undo-tree-id33188 . -1) (undo-tree-id33189 . -1) (undo-tree-id33190 . -1) (undo-tree-id33191 . -1) (undo-tree-id33192 . -1) (undo-tree-id33193 . -1) (undo-tree-id33194 . -1) (undo-tree-id33195 . -1) (undo-tree-id33196 . -1) (undo-tree-id33197 . -1) (undo-tree-id33198 . -1) (undo-tree-id33199 . -1) (undo-tree-id33200 . -1) (undo-tree-id33201 . -1) (undo-tree-id33202 . -1) (undo-tree-id33203 . -1) (undo-tree-id33204 . -1) (undo-tree-id33205 . -1) (undo-tree-id33206 . -1) (undo-tree-id33207 . -1) (undo-tree-id33208 . -1) (undo-tree-id33209 . -1) (undo-tree-id33210 . -1) (undo-tree-id33211 . -1) (undo-tree-id33212 . -1) (undo-tree-id33213 . -1) (undo-tree-id33214 . -1) (undo-tree-id33215 . -1) (undo-tree-id33216 . -1) (undo-tree-id33217 . -1) (undo-tree-id33218 . -1) (undo-tree-id33219 . -1) (undo-tree-id33220 . -1) (undo-tree-id33221 . -1) (undo-tree-id33222 . -1) (undo-tree-id33223 . -1) (undo-tree-id33224 . -1) (undo-tree-id33225 . -1) (undo-tree-id33226 . -1) (undo-tree-id33227 . -1) (undo-tree-id33228 . -1) (undo-tree-id33229 . -1) (undo-tree-id33230 . -1) (undo-tree-id33231 . -1) (undo-tree-id33232 . -1) (undo-tree-id33233 . -1) (undo-tree-id33234 . -1) (undo-tree-id33235 . -1) (undo-tree-id33236 . -1) (undo-tree-id33237 . -1) (undo-tree-id33238 . -1) (undo-tree-id33239 . -1) (undo-tree-id33240 . -1) (undo-tree-id33241 . -1) (undo-tree-id33242 . -1) (undo-tree-id33243 . -1) (undo-tree-id33244 . -1) (undo-tree-id33245 . -1) 6184 (6182 . 6184) (#("5" 0 1 (fontified t)) . -6182) (undo-tree-id33246 . -1) (undo-tree-id33247 . -1) (undo-tree-id33248 . -1) (undo-tree-id33249 . -1) (undo-tree-id33250 . -1) (undo-tree-id33251 . -1) (undo-tree-id33252 . -1) (undo-tree-id33253 . -1) (undo-tree-id33254 . -1) (undo-tree-id33255 . -1) (undo-tree-id33256 . -1) (undo-tree-id33257 . -1) (undo-tree-id33258 . -1) 6183 (t 26156 63534 213736 273000)) nil (26156 63583 663476 343000) 0 nil])
([nil nil ((#("unwrap" 0 6 (fontified t)) . 4984) (undo-tree-id33353 . -5) (t 26156 63583 774081 301000)) nil (26156 63636 480190 930000) 0 nil])
([nil nil ((4984 . 4990) (#("e" 0 1 (fontified nil)) . 4984) (4984 . 4985) (#("expect" 0 6 (fontified nil)) . -4984) (4984 . 4990) (#("ex" 0 2 (fontified t)) . -4984) (undo-tree-id33269 . -2) (undo-tree-id33270 . -2) (undo-tree-id33271 . -1) (undo-tree-id33272 . -1) (undo-tree-id33273 . -1) (undo-tree-id33274 . -1) (undo-tree-id33275 . -1) (undo-tree-id33276 . -1) (undo-tree-id33277 . -1) (undo-tree-id33278 . -1) (undo-tree-id33279 . -1) (undo-tree-id33280 . -1) (undo-tree-id33281 . -1) (undo-tree-id33282 . -1) (undo-tree-id33283 . -1) (undo-tree-id33284 . -1) (undo-tree-id33285 . -1) (undo-tree-id33286 . -1) (undo-tree-id33287 . -1) (undo-tree-id33288 . -1) (undo-tree-id33289 . -1) (undo-tree-id33290 . -1) (undo-tree-id33291 . -1) (undo-tree-id33292 . -1) (undo-tree-id33293 . -1) (undo-tree-id33294 . -1) (undo-tree-id33295 . -1) (undo-tree-id33296 . -1) (undo-tree-id33297 . -1) (undo-tree-id33298 . -1) (undo-tree-id33299 . -1) (undo-tree-id33300 . -1) (undo-tree-id33301 . -1) (undo-tree-id33302 . -1) (undo-tree-id33303 . -1) (undo-tree-id33304 . -1) (undo-tree-id33305 . -1) (undo-tree-id33306 . -1) (undo-tree-id33307 . -1) (undo-tree-id33308 . -1) (undo-tree-id33309 . -1) (undo-tree-id33310 . -1) (undo-tree-id33311 . -1) (undo-tree-id33312 . -1) (undo-tree-id33313 . -1) (undo-tree-id33314 . -1) (undo-tree-id33315 . -1) (undo-tree-id33316 . -1) (undo-tree-id33317 . -1) (undo-tree-id33318 . -1) (undo-tree-id33319 . -1) (undo-tree-id33320 . -1) (undo-tree-id33321 . -1) (undo-tree-id33322 . -1) (undo-tree-id33323 . -1) (undo-tree-id33324 . -1) (undo-tree-id33325 . -1) (undo-tree-id33326 . -1) (undo-tree-id33327 . -1) (undo-tree-id33328 . -1) (undo-tree-id33329 . -1) (undo-tree-id33330 . -1) (undo-tree-id33331 . -1) (undo-tree-id33332 . -2) (undo-tree-id33333 . -2) (undo-tree-id33334 . -2) (undo-tree-id33335 . -2) (undo-tree-id33336 . -2) (undo-tree-id33337 . -2) (undo-tree-id33338 . -2) (undo-tree-id33339 . -2) (undo-tree-id33340 . -2) (undo-tree-id33341 . -2) (undo-tree-id33342 . -2) (undo-tree-id33343 . -2) (undo-tree-id33344 . -2) (undo-tree-id33345 . -2) (undo-tree-id33346 . -2) (undo-tree-id33347 . -2) (undo-tree-id33348 . -2) (undo-tree-id33349 . -2) (undo-tree-id33350 . -2) (undo-tree-id33351 . -2) (undo-tree-id33352 . -2) 4986 (4984 . 4986)) nil (26156 63636 480177 549000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5011) (5011 . 5012) (#("}" 0 1 (fontified nil face font-lock-string-face)) . -5011) (5011 . 5012) (5010 . 5012) (#("i" 0 1 (fontified t face font-lock-string-face)) . -5010) (undo-tree-id33259 . -1) 5011 (5010 . 5011) (#("}" 0 1 (fontified nil)) . -5009) (5009 . 5010) (#("}" 0 1 (fontified nil face font-lock-string-face)) . -5009) (5009 . 5010) (4996 . 5010) (#("o" 0 1 (fontified t face font-lock-string-face)) . -4996) (undo-tree-id33260 . -1) (undo-tree-id33261 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -4997) (undo-tree-id33262 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -4998) (undo-tree-id33263 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -4999) (undo-tree-id33264 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -5000) (undo-tree-id33265 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -5001) (undo-tree-id33266 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5002) (undo-tree-id33267 . -1) 5003 (4995 . 5003) (#("w" 0 1 (fontified t face font-lock-string-face)) . -4995) (undo-tree-id33268 . -1) 4996 (4992 . 4996) (4991 . 4993) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . -4991) (4991 . 4992)) nil (26156 63636 480010 15000) 0 nil])
([nil nil ((5010 . 5011)) nil (26156 63636 479962 240000) 0 nil])
([nil nil ((5009 . 5010)) nil (26156 63636 479959 5000) 0 nil])
([nil nil ((5013 . 5014)) nil (26156 63636 479948 414000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4983) (t 26156 63636 594467 177000)) nil (26156 63680 226312 990000) 0 nil])
([nil nil ((#("expect" 0 6 (fontified t)) . 4983) (undo-tree-id33414 . -5)) nil (26156 63680 226309 958000) 0 nil])
([nil nil ((#("(\"" 0 1 (fontified t face (rainbow-delimiters-depth-8-face)) 1 2 (fontified t face font-lock-string-face)) . 4983) (undo-tree-id33412 . -1) (undo-tree-id33413 . -1)) nil (26156 63680 226305 537000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t)) . 4983) (undo-tree-id33411 . -2)) nil (26156 63680 226299 705000) 0 nil])
([nil nil ((#("doesnt" 0 6 (fontified t)) . 4983) (undo-tree-id33410 . -5)) nil (26156 63680 226295 393000) 0 nil])
([nil nil ((#("' " 0 2 (fontified t)) . 4983) (undo-tree-id33409 . -1)) nil (26156 63680 226291 519000) 0 nil])
([nil nil ((#("work " 0 5 (fontified t)) . 4983) (undo-tree-id33408 . -4)) nil (26156 63680 226287 851000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 4983)) nil (26156 63680 226283 984000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 4983)) nil (26156 63680 226282 92000) 0 nil])
([nil nil ((#("} " 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 2 (fontified t)) . 4983) (undo-tree-id33407 . -1)) nil (26156 63680 226279 546000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 4983)) nil (26156 63680 226275 611000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 4983)) nil (26156 63680 226272 651000) 0 nil])
([nil nil ((#("}\") " 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 4983) (undo-tree-id33405 . -3) (undo-tree-id33406 . 4)) nil (26156 63680 226269 941000) 0 nil])
([nil nil ((apply yas--snippet-revive 4984 4992 #s(yas--snippet nil nil #s(yas--exit 4992 nil) 163 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4992 nil) 163 nil nil nil nil)) (4984 . 4992) (#("unwrap()$0" 0 10 (fontified nil)) . 4984) (4984 . 4994) (#("un" 0 2 (fontified nil)) . 4984) (4984 . 4986) (#("unwrap()" 0 8 (fontified nil)) . -4984) (4984 . 4992) (#("un" 0 2 (fontified t)) . -4984) (undo-tree-id33402 . -2) (undo-tree-id33403 . -2) (undo-tree-id33404 . -2) 4986 (4983 . 4986)) nil (26156 63680 226261 503000) 0 nil])
([nil nil ((4992 . 4993)) nil (26156 63680 226244 348000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified t)) . -4942) (undo-tree-id33401 . -7) 4949 (4941 . 4949)) nil (26156 63680 226241 418000) 0 nil])
([nil nil ((4942 . 4949)) nil (26156 63680 226236 140000) 0 nil])
([nil nil ((4974 . 4978) 4977) nil (26156 63680 226234 46000) 0 nil])
([nil nil ((5012 . 5016) (#("                            " 0 28 (fontified t)) . 5012) 5043) nil (26156 63680 226230 952000) 0 nil])
([nil nil ((5037 . 5041) (#("                            " 0 4 (fontified t) 4 28 (fontified t)) . 5037) 5070) nil (26156 63680 226227 26000) 0 nil])
([nil nil ((5072 . 5076)) nil (26156 63680 226223 680000) 0 nil])
([nil nil ((4943 . 4950) (#("			    " 0 7 (fontified nil)) . 4942) (undo-tree-id33357 . -7) (undo-tree-id33358 . -3) (undo-tree-id33359 . -3) (undo-tree-id33360 . -3) (undo-tree-id33361 . -3) (undo-tree-id33362 . -3) (undo-tree-id33363 . -3) (undo-tree-id33364 . -3) (undo-tree-id33365 . -3) (undo-tree-id33366 . -3) (undo-tree-id33367 . -3) (undo-tree-id33368 . -3) (undo-tree-id33369 . -3) (undo-tree-id33370 . -3) (undo-tree-id33371 . -3) (undo-tree-id33372 . -3) (undo-tree-id33373 . -3) (undo-tree-id33374 . -3) (undo-tree-id33375 . -3) (undo-tree-id33376 . -3) (undo-tree-id33377 . -3) (undo-tree-id33378 . -7) (undo-tree-id33379 . -7) (undo-tree-id33380 . -7) (undo-tree-id33381 . -7) (undo-tree-id33382 . -7) (undo-tree-id33383 . -7) (undo-tree-id33384 . -7) (undo-tree-id33385 . -7) (undo-tree-id33386 . -7) (undo-tree-id33387 . -7) (undo-tree-id33388 . -7) (undo-tree-id33389 . -7) (undo-tree-id33390 . -7) (undo-tree-id33391 . -7) (undo-tree-id33392 . -7) (undo-tree-id33393 . -7) (undo-tree-id33394 . -7) (undo-tree-id33395 . -7) (undo-tree-id33396 . -7) (undo-tree-id33397 . -7) (undo-tree-id33398 . -7) (undo-tree-id33399 . -7) (undo-tree-id33400 . -7) (4949 . 4950)) nil (26156 63680 226216 702000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4966) (4966 . 4967) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -4966) (4966 . 4967) (4962 . 4967) (#("}" 0 1 (fontified nil)) . -4961) (4961 . 4962) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -4961) (4961 . 4962) (4960 . 4962) (4959 . 4961) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . -4959) (4959 . 4960) (apply yas--snippet-revive 4950 4960 #s(yas--snippet nil nil #s(yas--exit 4959 nil) 164 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4959 nil) 164 nil nil nil nil)) (4950 . 4960) (#("println!($0)" 0 12 (fontified nil)) . 4950) (4950 . 4962) (#("pr" 0 2 (fontified nil)) . 4950) (4950 . 4952) (#("println!(…)" 0 11 (fontified nil)) . -4950) (4950 . 4961) (#("pr" 0 2 (fontified t)) . -4950) (undo-tree-id33354 . -2) (undo-tree-id33355 . -2) 4952 (4950 . 4952) (4943 . 4950) (#("			    " 0 7 (fontified nil)) . 4942) (undo-tree-id33356 . -7) (4949 . 4950) (4942 . 4949)) nil (26156 63680 226124 761000) 0 nil])
([nil nil ((4969 . 4970)) nil (26156 63680 226091 899000) 0 nil])
([nil nil ((4961 . 4962)) nil (26156 63680 226088 959000) 0 nil])
([nil nil ((4967 . 4968)) nil (26156 63680 226077 835000) 0 nil])
([nil nil ((5021 . 5022) (#("x" 0 1 (fontified t)) . -5021) (undo-tree-id33428 . -1) (undo-tree-id33429 . -1) 5022 (t 26156 63680 330799 572000)) nil (26156 63732 40685 639000) 0 nil])
([nil nil ((5024 . 5025) (#("y" 0 1 (fontified t)) . -5024) (undo-tree-id33415 . -1) (undo-tree-id33416 . -1) (undo-tree-id33417 . -1) (undo-tree-id33418 . -1) (undo-tree-id33419 . -1) (undo-tree-id33420 . -1) (undo-tree-id33421 . -1) (undo-tree-id33422 . -1) (undo-tree-id33423 . -1) (undo-tree-id33424 . -1) (undo-tree-id33425 . -1) (undo-tree-id33426 . -1) (undo-tree-id33427 . -1) 5025) nil (26156 63732 40669 199000) 0 nil])
([nil nil ((5419 . 5420) (#("x" 0 1 (fontified t)) . -5419) (undo-tree-id33443 . -1) (undo-tree-id33444 . -1) (undo-tree-id33445 . -1) (undo-tree-id33446 . -1) (undo-tree-id33447 . -1) (undo-tree-id33448 . -1) (undo-tree-id33449 . -1) (undo-tree-id33450 . -1) (undo-tree-id33451 . -1) (undo-tree-id33452 . -1) (undo-tree-id33453 . -1) (undo-tree-id33454 . -1) (undo-tree-id33455 . -1) 5420 (t 26156 63732 151207 107000)) nil (26156 63742 647417 999000) 0 nil])
([nil nil ((5422 . 5423) (#("y" 0 1 (fontified t)) . -5422) (undo-tree-id33430 . -1) (undo-tree-id33431 . -1) (undo-tree-id33432 . -1) (undo-tree-id33433 . -1) (undo-tree-id33434 . -1) (undo-tree-id33435 . -1) (undo-tree-id33436 . -1) (undo-tree-id33437 . -1) (undo-tree-id33438 . -1) (undo-tree-id33439 . -1) (undo-tree-id33440 . -1) (undo-tree-id33441 . -1) (undo-tree-id33442 . -1) 5423) nil (26156 63742 647381 188000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 6181) (undo-tree-id33456 . -1) (undo-tree-id33457 . -1) (t 26156 63742 735292 54000)) nil (26156 63806 940720 395000) 0 nil])
([nil nil ((5597 . 5607) (#("b" 0 1 (fontified t)) . -5597) (undo-tree-id33591 . -1) 5598 (5597 . 5598) (#("b" 0 1 (fontified t)) . -5597) (undo-tree-id33592 . -1) (undo-tree-id33593 . -1) (#(" " 0 1 (fontified t)) . -5598) (undo-tree-id33594 . -1) (undo-tree-id33595 . -1) 5599 (5596 . 5599) (t 26156 63807 31819 559000)) nil (26156 63958 212412 185000) 0 nil])
([nil nil ((5618 . 5619) (5619 . 5623) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5618) (5618 . 5619) (5617 . 5619) (5615 . 5618) (5611 . 5615) (#("Sel" 0 3 (fontified nil)) . 5611) (5611 . 5614) (#("Self" 0 4 (fontified nil)) . -5611) (5611 . 5615) (#("Sel" 0 3 (fontified t face font-lock-type-face)) . -5611) (undo-tree-id33489 . -3) (undo-tree-id33490 . -3) (undo-tree-id33491 . -2) (undo-tree-id33492 . -2) (undo-tree-id33493 . -2) (undo-tree-id33494 . -2) (undo-tree-id33495 . -2) (undo-tree-id33496 . -2) (undo-tree-id33497 . -2) (undo-tree-id33498 . -2) (undo-tree-id33499 . -2) (undo-tree-id33500 . -2) (undo-tree-id33501 . -2) (undo-tree-id33502 . -2) (undo-tree-id33503 . -2) (undo-tree-id33504 . -2) (undo-tree-id33505 . -2) (undo-tree-id33506 . -2) (undo-tree-id33507 . -2) (undo-tree-id33508 . -2) (undo-tree-id33509 . -2) (undo-tree-id33510 . -2) (undo-tree-id33511 . -3) (undo-tree-id33512 . -3) (undo-tree-id33513 . -3) (undo-tree-id33514 . -3) (undo-tree-id33515 . -3) (undo-tree-id33516 . -3) (undo-tree-id33517 . -3) (undo-tree-id33518 . -3) (undo-tree-id33519 . -3) (undo-tree-id33520 . -3) (undo-tree-id33521 . -3) (undo-tree-id33522 . -3) (undo-tree-id33523 . -3) (undo-tree-id33524 . -3) (undo-tree-id33525 . -3) (undo-tree-id33526 . -3) (undo-tree-id33527 . -3) (undo-tree-id33528 . -3) (undo-tree-id33529 . -3) (undo-tree-id33530 . -3) (undo-tree-id33531 . -3) (undo-tree-id33532 . -3) (undo-tree-id33533 . -3) (undo-tree-id33534 . -3) (undo-tree-id33535 . -3) (undo-tree-id33536 . -3) (undo-tree-id33537 . -3) (undo-tree-id33538 . -3) (undo-tree-id33539 . -3) (undo-tree-id33540 . -3) (undo-tree-id33541 . -3) (undo-tree-id33542 . -3) (undo-tree-id33543 . -3) (undo-tree-id33544 . -3) (undo-tree-id33545 . -3) (undo-tree-id33546 . -3) (undo-tree-id33547 . -3) (undo-tree-id33548 . -3) (undo-tree-id33549 . -3) (undo-tree-id33550 . -3) (undo-tree-id33551 . -3) (undo-tree-id33552 . -3) (undo-tree-id33553 . -3) (undo-tree-id33554 . -3) (undo-tree-id33555 . -3) (undo-tree-id33556 . -3) (undo-tree-id33557 . -3) (undo-tree-id33558 . -3) (undo-tree-id33559 . -3) (undo-tree-id33560 . -3) (undo-tree-id33561 . -3) (undo-tree-id33562 . -3) (undo-tree-id33563 . -3) (undo-tree-id33564 . -3) (undo-tree-id33565 . -3) (undo-tree-id33566 . -3) (undo-tree-id33567 . -3) (undo-tree-id33568 . -3) (undo-tree-id33569 . -3) (undo-tree-id33570 . -3) (undo-tree-id33571 . -3) (undo-tree-id33572 . -3) (undo-tree-id33573 . -3) (undo-tree-id33574 . -3) (undo-tree-id33575 . -3) (undo-tree-id33576 . -3) (undo-tree-id33577 . -3) (undo-tree-id33578 . -3) (undo-tree-id33579 . -3) (undo-tree-id33580 . -3) (undo-tree-id33581 . -3) (undo-tree-id33582 . -3) (undo-tree-id33583 . -3) (undo-tree-id33584 . -3) (undo-tree-id33585 . -3) (undo-tree-id33586 . -3) (undo-tree-id33587 . -3) (undo-tree-id33588 . -3) (undo-tree-id33589 . -3) (undo-tree-id33590 . -3) 5614 (5607 . 5614)) nil (26156 63958 212324 127000) 0 nil])
([nil nil ((5651 . 5656) (#("us" 0 2 (fontified nil)) . 5651) (5651 . 5653) (#("usize" 0 5 (fontified nil)) . -5651) (5651 . 5656) (#("us" 0 2 (fontified t)) . -5651) (undo-tree-id33458 . -2) (undo-tree-id33459 . -2) (undo-tree-id33460 . -2) 5653 (5648 . 5653) (#("n" 0 1 (fontified t)) . -5648) (undo-tree-id33461 . -1) (undo-tree-id33462 . -1) 5649 (5645 . 5649) (#("x" 0 1 (fontified t)) . -5645) (undo-tree-id33463 . -1) (undo-tree-id33464 . -1) (#("m" 0 1 (fontified t)) . -5646) (undo-tree-id33465 . -1) (undo-tree-id33466 . -1) (#("i" 0 1 (fontified t)) . -5647) (undo-tree-id33467 . -1) (undo-tree-id33468 . -1) (#("n" 0 1 (fontified t)) . -5648) (undo-tree-id33469 . -1) (undo-tree-id33470 . -1) 5649 (5645 . 5649) (#("z" 0 1 (fontified t)) . -5645) (undo-tree-id33471 . -1) (undo-tree-id33472 . -1) 5646 (5643 . 5646) (5638 . 5643) (#("us" 0 2 (fontified nil)) . 5638) (5638 . 5640) (#("usize" 0 5 (fontified nil)) . -5638) (5638 . 5643) (#("us" 0 2 (fontified t)) . -5638) (undo-tree-id33473 . -2) (undo-tree-id33474 . -2) (undo-tree-id33475 . -2) 5640 (5637 . 5640) (5632 . 5637) (#("y" 0 1 (fontified t)) . -5632) (undo-tree-id33476 . -1) (undo-tree-id33477 . -1) (#("m" 0 1 (fontified t)) . -5633) (undo-tree-id33478 . -1) (undo-tree-id33479 . -1) (#("i" 0 1 (fontified t)) . -5634) (undo-tree-id33480 . -1) (undo-tree-id33481 . -1) 5635 (5630 . 5635) (5625 . 5630) (#("us" 0 2 (fontified nil)) . 5625) (5625 . 5627) (#("usize" 0 5 (fontified nil)) . -5625) (5625 . 5630) (#("us" 0 2 (fontified t)) . -5625) (undo-tree-id33482 . -2) (undo-tree-id33483 . -2) (undo-tree-id33484 . -2) 5627 (5617 . 5627) (5612 . 5617) (#("us" 0 2 (fontified nil)) . 5612) (5612 . 5614) (#("usize" 0 5 (fontified nil)) . -5612) (5612 . 5617) (#("us" 0 2 (fontified t)) . -5612) (undo-tree-id33485 . -2) (undo-tree-id33486 . -2) 5614 (5610 . 5614) (5606 . 5610) (#(":" 0 1 (fontified t)) . -5606) (undo-tree-id33487 . -1) (undo-tree-id33488 . -1) 5607 (5606 . 5607)) nil (26156 63958 212085 793000) 0 nil])
([nil nil ((35 . 38) (#("R" 0 1 (fontified nil)) . 35) (35 . 36) (#("Rng" 0 3 (fontified nil)) . -35) (35 . 38) (#("R" 0 1 (fontified t face font-lock-type-face)) . -35) (undo-tree-id33596 . -1) (undo-tree-id33597 . -1) (undo-tree-id33598 . -1) (undo-tree-id33599 . -1) (undo-tree-id33600 . -1) (undo-tree-id33601 . -1) (undo-tree-id33602 . -1) (undo-tree-id33603 . -1) (undo-tree-id33604 . -1) (undo-tree-id33605 . -1) (undo-tree-id33606 . -1) (undo-tree-id33607 . -1) (undo-tree-id33608 . -1) (undo-tree-id33609 . -1) 36 (35 . 36) (#("p" 0 1 (fontified t)) . -35) (undo-tree-id33610 . -1) (undo-tree-id33611 . -1) (#("r" 0 1 (fontified t)) . -36) (undo-tree-id33612 . -1) (undo-tree-id33613 . -1) (#("e" 0 1 (fontified t)) . -37) (undo-tree-id33614 . -1) (undo-tree-id33615 . -1) (#("l" 0 1 (fontified t)) . -38) (undo-tree-id33616 . -1) (undo-tree-id33617 . -1) (#("u" 0 1 (fontified t)) . -39) (undo-tree-id33618 . -1) (undo-tree-id33619 . -1) (#("d" 0 1 (fontified t)) . -40) (undo-tree-id33620 . -1) (undo-tree-id33621 . -1) (#("e" 0 1 (fontified t)) . -41) (undo-tree-id33622 . -1) (undo-tree-id33623 . -1) (#(":" 0 1 (fontified t)) . -42) (undo-tree-id33624 . -1) (undo-tree-id33625 . -1) (#(":" 0 1 (fontified t)) . -43) (undo-tree-id33626 . -1) (undo-tree-id33627 . -1) (#("*" 0 1 (fontified t)) . -44) (undo-tree-id33628 . -1) (undo-tree-id33629 . -1) 45 (t 26156 63958 333128 102000)) nil (26156 64006 535666 5000) 0 nil])
([nil nil ((5527 . 5528) (#("p" 0 1 (fontified t face font-lock-type-face)) . 5527) (undo-tree-id33630 . -1) (t 26156 64006 649562 704000)) nil (26156 64024 661871 573000) 0 nil])
([nil nil ((5721 . 5722) (apply yas--snippet-revive 5700 5721 #s(yas--snippet nil (#s(yas--field 1 5710 5720 nil nil nil t #s(yas--exit 5721 nil))) #s(yas--exit 5721 nil) 166 nil #s(yas--field 1 5710 5720 nil nil nil t #s(yas--exit 5721 nil)) nil nil)) (5716 . 5720) (#("xma" 0 3 (fontified nil)) . 5716) (undo-tree-id33805 . -3) (5716 . 5719) (#("xmax" 0 4 (fontified nil)) . -5716) (undo-tree-id33806 . -4) (5716 . 5720) (#("xma" 0 3 (fontified t)) . -5716) (undo-tree-id33807 . -1) (undo-tree-id33808 . -3) (undo-tree-id33809 . -3) (undo-tree-id33810 . -3) (undo-tree-id33811 . -3) (undo-tree-id33812 . -3) (undo-tree-id33813 . -3) (undo-tree-id33814 . -3) (undo-tree-id33815 . -3) (undo-tree-id33816 . -3) (undo-tree-id33817 . -3) (undo-tree-id33818 . -3) (undo-tree-id33819 . -3) (undo-tree-id33820 . -3) (undo-tree-id33821 . -3) (undo-tree-id33822 . -3) (undo-tree-id33823 . -3) (undo-tree-id33824 . -3) (undo-tree-id33825 . -3) (undo-tree-id33826 . -3) (undo-tree-id33827 . -3) (undo-tree-id33828 . -3) (undo-tree-id33829 . -3) (undo-tree-id33830 . -3) (undo-tree-id33831 . -3) (undo-tree-id33832 . -3) (undo-tree-id33833 . -3) 5719 (5714 . 5719) (5710 . 5714) (#("xmi" 0 3 (fontified nil)) . 5710) (undo-tree-id33834 . -3) (5710 . 5713) (#("xmin" 0 4 (fontified nil)) . -5710) (undo-tree-id33835 . -4) (5710 . 5714) (#("xmi" 0 3 (fontified t)) . -5710) (undo-tree-id33836 . -3) (undo-tree-id33837 . -3) (undo-tree-id33838 . -3) 5713 (5711 . 5713) (#("range" 0 5 (fontified nil)) . 5711) (undo-tree-id33839 . -5) (5710 . 5711) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5710 5720 nil nil nil t #s(yas--exit 5721 nil))) #s(yas--exit 5721 nil) 166 nil #s(yas--field 1 5710 5720 nil nil nil t #s(yas--exit 5721 nil)) nil nil)) (5700 . 5716) (#("gen_range(${1:range})$0" 0 23 (fontified nil)) . 5700) (5700 . 5723) (#("gen" 0 3 (fontified nil)) . 5700) (5700 . 5703) (#("gen_range(…) (as Rng)" 0 21 (fontified nil)) . -5700) (5700 . 5721) (#("gen" 0 3 (fontified t)) . -5700) (undo-tree-id33840 . -1) (undo-tree-id33841 . -3) (undo-tree-id33842 . -3) 5703 (5699 . 5703) (apply yas--snippet-revive 5687 5699 #s(yas--snippet nil nil #s(yas--exit 5699 nil) 165 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5699 nil) 165 nil nil nil nil)) (5687 . 5699) (#("thread_rng()$0" 0 14 (fontified nil)) . 5687) (5687 . 5701) (#("th" 0 2 (fontified nil)) . 5687) (5687 . 5689) (#("thread_rng()" 0 12 (fontified nil)) . -5687) (5687 . 5699) (#("th" 0 2 (fontified t)) . -5687) (undo-tree-id33843 . -1) (undo-tree-id33844 . -2) (undo-tree-id33845 . -2) 5689 (5685 . 5689) (5681 . 5685) (#("t" 0 1 (fontified t)) . -5681) (undo-tree-id33846 . -1) (undo-tree-id33847 . -1) 5682 (5678 . 5682) (5673 . 5678) (5674 . 5675) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 5673) (5673 . 5678) (5672 . 5674) (5670 . 5673) (5662 . 5670) (#("P" 0 1 (fontified nil)) . 5662) (5662 . 5663) (#("Particle" 0 8 (fontified nil)) . -5662) (5662 . 5670) (#("P" 0 1 (fontified t face font-lock-type-face)) . -5662) (undo-tree-id33848 . -1) (undo-tree-id33849 . -1) 5663 (5662 . 5663) (t 26156 64024 777727 571000)) nil (26156 64070 844050 207000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5727 . 5728) (#("
" 0 1 (fontified nil)) . -5772) (5722 . 5773) 5721) nil (26156 64070 843709 537000) 0 nil])
([nil nil ((#("	    x: rand::thread_rng().gen_range(xmin..xmax),
" 0 4 (fontified t) 4 5 (fontified t rear-nonsticky t) 5 6 (fontified t face font-lock-variable-name-face) 6 8 (fontified t) 8 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-4-face)) 25 26 (fontified t face (rainbow-delimiters-depth-4-face)) 26 27 (fontified t) 27 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-4-face)) 37 43 (fontified t) 43 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 49 (fontified t) 49 50 (fontified t)) . 5723) (undo-tree-id33687 . -49) (undo-tree-id33688 . 1) (undo-tree-id33689 . -12) (undo-tree-id33690 . -12) (undo-tree-id33691 . -5) (undo-tree-id33692 . -5) (undo-tree-id33693 . -5) (undo-tree-id33694 . -5) (undo-tree-id33695 . -5) (undo-tree-id33696 . -5) (undo-tree-id33697 . -5) (undo-tree-id33698 . -5) (undo-tree-id33699 . -5) (undo-tree-id33700 . -5) (undo-tree-id33701 . -5) (undo-tree-id33702 . -5) (undo-tree-id33703 . -5) (undo-tree-id33704 . -5) (undo-tree-id33705 . -5) (undo-tree-id33706 . -5) (undo-tree-id33707 . -5) (undo-tree-id33708 . -5) (undo-tree-id33709 . -5) (undo-tree-id33710 . -5) (undo-tree-id33711 . -5) (undo-tree-id33712 . -5) (undo-tree-id33713 . -5) (undo-tree-id33714 . -5) (undo-tree-id33715 . -5) (undo-tree-id33716 . -5) (undo-tree-id33717 . -5) (undo-tree-id33718 . -5) (undo-tree-id33719 . -5) (undo-tree-id33720 . -5) (undo-tree-id33721 . -6) (undo-tree-id33722 . -6) (undo-tree-id33723 . -6) (undo-tree-id33724 . -6) (undo-tree-id33725 . -6) (undo-tree-id33726 . -6) (undo-tree-id33727 . -6) (undo-tree-id33728 . -6) (undo-tree-id33729 . -6) (undo-tree-id33730 . -8) (undo-tree-id33731 . -8) (undo-tree-id33732 . -8) (undo-tree-id33733 . -8) (undo-tree-id33734 . -8) (undo-tree-id33735 . -8) (undo-tree-id33736 . -8) (undo-tree-id33737 . -8) (undo-tree-id33738 . -8) (undo-tree-id33739 . -12) (undo-tree-id33740 . -12) (undo-tree-id33741 . -12) (undo-tree-id33742 . -12) (undo-tree-id33743 . -12) (undo-tree-id33744 . -12) (undo-tree-id33745 . -12) (undo-tree-id33746 . -12) (undo-tree-id33747 . -12) (undo-tree-id33748 . -12) (undo-tree-id33749 . -12) (undo-tree-id33750 . -12) (undo-tree-id33751 . -12) (undo-tree-id33752 . -12) (undo-tree-id33753 . -12) (undo-tree-id33754 . -12) (undo-tree-id33755 . -12) (undo-tree-id33756 . -12) (undo-tree-id33757 . -12) (undo-tree-id33758 . -12) (undo-tree-id33759 . -12) (undo-tree-id33760 . -12) (undo-tree-id33761 . -12) (undo-tree-id33762 . -12) (undo-tree-id33763 . -12) (undo-tree-id33764 . -12) (undo-tree-id33765 . -12) (undo-tree-id33766 . -12) (undo-tree-id33767 . -12) (undo-tree-id33768 . -12) (undo-tree-id33769 . -12) (undo-tree-id33770 . -12) (undo-tree-id33771 . -8) (undo-tree-id33772 . -12) (undo-tree-id33773 . -12) (undo-tree-id33774 . -12) (undo-tree-id33775 . -12) (undo-tree-id33776 . -12) (undo-tree-id33777 . -12) (undo-tree-id33778 . -12) (undo-tree-id33779 . -12) (undo-tree-id33780 . -12) (undo-tree-id33781 . -12) (undo-tree-id33782 . -12) (undo-tree-id33783 . -12) (undo-tree-id33784 . -12) (undo-tree-id33785 . -12) (undo-tree-id33786 . -12) (undo-tree-id33787 . -12) (undo-tree-id33788 . -12) (undo-tree-id33789 . -12) (undo-tree-id33790 . -12) (undo-tree-id33791 . -12) (undo-tree-id33792 . -12) (undo-tree-id33793 . -12) (undo-tree-id33794 . -12) (undo-tree-id33795 . -12) (undo-tree-id33796 . -12) (undo-tree-id33797 . -12) (undo-tree-id33798 . -12) (undo-tree-id33799 . -12) (undo-tree-id33800 . -12) (undo-tree-id33801 . -12) (undo-tree-id33802 . -12) (undo-tree-id33803 . -12) (undo-tree-id33804 . -50) 5735) nil (26156 64070 843693 797000) 0 nil])
([nil nil ((5766 . 5770) (#("yma" 0 3 (fontified nil)) . 5766) (undo-tree-id33631 . -3) (5766 . 5769) (#("ymax" 0 4 (fontified nil)) . -5766) (undo-tree-id33632 . -4) (5766 . 5770) (#("yma" 0 3 (fontified t)) . -5766) (undo-tree-id33633 . -1) (undo-tree-id33634 . -3) (undo-tree-id33635 . -3) (undo-tree-id33636 . -3) (undo-tree-id33637 . -3) (undo-tree-id33638 . -3) (undo-tree-id33639 . -3) (undo-tree-id33640 . -3) (undo-tree-id33641 . -3) (undo-tree-id33642 . -3) (undo-tree-id33643 . -3) (undo-tree-id33644 . -3) (undo-tree-id33645 . -3) (undo-tree-id33646 . -3) (undo-tree-id33647 . -3) (undo-tree-id33648 . -3) (undo-tree-id33649 . -3) (undo-tree-id33650 . -3) (undo-tree-id33651 . -3) (undo-tree-id33652 . -3) (undo-tree-id33653 . -3) (undo-tree-id33654 . -3) (undo-tree-id33655 . -3) (undo-tree-id33656 . -3) (undo-tree-id33657 . -3) (undo-tree-id33658 . -3) (undo-tree-id33659 . -3) (undo-tree-id33660 . -3) (undo-tree-id33661 . -3) (undo-tree-id33662 . -3) (undo-tree-id33663 . -3) (undo-tree-id33664 . -3) (undo-tree-id33665 . -3) (undo-tree-id33666 . -3) (undo-tree-id33667 . -3) (undo-tree-id33668 . -3) (undo-tree-id33669 . -3) (undo-tree-id33670 . -3) 5769 (5764 . 5769) (5760 . 5764) (#("ym" 0 2 (fontified nil)) . 5760) (undo-tree-id33671 . -2) (5760 . 5762) (#("ymin" 0 4 (fontified nil)) . -5760) (undo-tree-id33672 . -4) (5760 . 5764) (#("ym" 0 2 (fontified t)) . -5760) (undo-tree-id33673 . -2) (undo-tree-id33674 . -2) (undo-tree-id33675 . -2) 5762 (5761 . 5762) (#("range" 0 5 (fontified nil)) . 5761) (undo-tree-id33676 . -5) (5760 . 5761) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil))) #s(yas--exit 5771 nil) 168 nil #s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil)) nil nil)) (5750 . 5766) (#("gen_range(${1:range})$0" 0 23 (fontified nil)) . 5750) (5750 . 5773) (#("ge" 0 2 (fontified nil)) . 5750) (5750 . 5752) (#("gen_range(…) (as Rng)" 0 21 (fontified nil)) . -5750) (5750 . 5771) (#("ge" 0 2 (fontified t)) . -5750) (undo-tree-id33677 . -2) (undo-tree-id33678 . -2) (undo-tree-id33679 . -2) 5752 (5749 . 5752) (apply yas--snippet-revive 5737 5749 #s(yas--snippet nil nil #s(yas--exit 5749 nil) 167 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5749 nil) 167 nil nil nil nil)) (5737 . 5749) (#("thread_rng()$0" 0 14 (fontified nil)) . 5737) (5737 . 5751) (#("thr" 0 3 (fontified nil)) . 5737) (5737 . 5740) (#("thread_rng()" 0 12 (fontified nil)) . -5737) (5737 . 5749) (#("thr" 0 3 (fontified t)) . -5737) (undo-tree-id33680 . -1) (undo-tree-id33681 . -3) (undo-tree-id33682 . -3) 5740 (5729 . 5740) (#("L" 0 1 (fontified t)) . -5729) (undo-tree-id33683 . -1) (undo-tree-id33684 . -1) 5730 (5729 . 5730) (#(";" 0 1 (fontified t)) . -5729) (undo-tree-id33685 . -1) (undo-tree-id33686 . -1) 5730 (5728 . 5730) (5722 . 5728)) nil (26156 64070 844911 68000) 0 nil])
([nil nil ((apply yas--snippet-revive 5750 5771 #s(yas--snippet nil (#s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil))) #s(yas--exit 5771 nil) 168 nil #s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil)) nil nil))) nil (26156 64073 790918 280000) 0 nil] [nil nil ((5771 . 5772) (apply yas--snippet-revive 5750 5771 #s(yas--snippet nil (#s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil))) #s(yas--exit 5771 nil) 168 nil #s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil))) #s(yas--exit 5771 nil) 168 nil #s(yas--field 1 5760 5770 nil nil nil t #s(yas--exit 5771 nil)) nil nil)) (#("," 0 1 (fontified t)) . 5771)) (26156 64070 843051 821000) 0 nil])
([nil nil ((5771 . 5772)) nil (26156 64073 790907 220000) 0 nil])
nil
([nil nil ((5574 . 5575) (#("p" 0 1 (fontified t)) . 5574) (t 26156 64073 909273 267000)) nil (26156 64083 904689 437000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5777) (undo-tree-id33932 . -1) (undo-tree-id33933 . -1) (undo-tree-id33934 . -1) (undo-tree-id33935 . -1) (undo-tree-id33936 . -1) (undo-tree-id33937 . -1) (undo-tree-id33938 . -1) (undo-tree-id33939 . -1) (undo-tree-id33940 . -1) (undo-tree-id33941 . -1) (undo-tree-id33942 . -1) (undo-tree-id33943 . -1) (undo-tree-id33944 . -1) (undo-tree-id33945 . -1) (undo-tree-id33946 . -1) (undo-tree-id33947 . -1) (undo-tree-id33948 . -1) (undo-tree-id33949 . -1) (undo-tree-id33950 . -1) (undo-tree-id33951 . -1) (undo-tree-id33952 . -1) (undo-tree-id33953 . -1) (undo-tree-id33954 . -1) 5778 (5777 . 5778) (#("	" 0 1 (fontified nil)) . 5776) (undo-tree-id33955 . -1) (undo-tree-id33956 . -1) (undo-tree-id33957 . -1) (undo-tree-id33958 . -1) (undo-tree-id33959 . -1) (undo-tree-id33960 . -1) (undo-tree-id33961 . -1) (undo-tree-id33962 . -1) (undo-tree-id33963 . -1) (undo-tree-id33964 . -1) (undo-tree-id33965 . -1) (undo-tree-id33966 . -1) (undo-tree-id33967 . -1) (undo-tree-id33968 . -1) (undo-tree-id33969 . -1) (undo-tree-id33970 . -1) (undo-tree-id33971 . -1) (undo-tree-id33972 . -1) (undo-tree-id33973 . -1) (undo-tree-id33974 . -1) (undo-tree-id33975 . -1) (undo-tree-id33976 . -1) (undo-tree-id33977 . -1) (5775 . 5778) (t 26156 64083 992241 322000)) nil (26156 64115 27719 106000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5776) (undo-tree-id33888 . 1) (undo-tree-id33889 . -1) (undo-tree-id33890 . -1) (undo-tree-id33891 . -1) (undo-tree-id33892 . -1) (undo-tree-id33893 . -1) (undo-tree-id33894 . -1) (undo-tree-id33895 . -1) (undo-tree-id33896 . -1) (undo-tree-id33897 . -1) (undo-tree-id33898 . -1) (undo-tree-id33899 . -1) (undo-tree-id33900 . -1) (undo-tree-id33901 . -1) (undo-tree-id33902 . -1) (undo-tree-id33903 . -1) (undo-tree-id33904 . -1) (undo-tree-id33905 . -1) (undo-tree-id33906 . -1) (undo-tree-id33907 . -1) (undo-tree-id33908 . -1) (undo-tree-id33909 . -1) (undo-tree-id33910 . -1) (undo-tree-id33911 . -1) (undo-tree-id33912 . -1) (undo-tree-id33913 . -1) (undo-tree-id33914 . -1) (undo-tree-id33915 . -1) (undo-tree-id33916 . -1) (undo-tree-id33917 . -1) (undo-tree-id33918 . -1) (undo-tree-id33919 . -1) (undo-tree-id33920 . -1) (undo-tree-id33921 . -1) (undo-tree-id33922 . -1) (undo-tree-id33923 . -1) (undo-tree-id33924 . -1) (undo-tree-id33925 . -1) (undo-tree-id33926 . -1) (undo-tree-id33927 . -1) (undo-tree-id33928 . -1) (undo-tree-id33929 . -1) (undo-tree-id33930 . -1) (undo-tree-id33931 . -1)) nil (26156 64115 27635 72000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5776) (undo-tree-id33885 . 1) (undo-tree-id33886 . 1) (undo-tree-id33887 . -1)) nil (26156 64115 27557 43000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5783) (undo-tree-id33850 . -4) (undo-tree-id33851 . -4) (undo-tree-id33852 . -4) (undo-tree-id33853 . -4) (undo-tree-id33854 . -4) (undo-tree-id33855 . -4) (undo-tree-id33856 . -4) (undo-tree-id33857 . -4) (undo-tree-id33858 . -4) (undo-tree-id33859 . -4) (undo-tree-id33860 . -4) (undo-tree-id33861 . -4) 5787 (5783 . 5787) (#("    " 0 4 (fontified nil)) . 5782) (undo-tree-id33862 . -4) (undo-tree-id33863 . -4) (undo-tree-id33864 . -4) (undo-tree-id33865 . -4) (undo-tree-id33866 . -4) (undo-tree-id33867 . -4) (undo-tree-id33868 . -4) (undo-tree-id33869 . -4) (undo-tree-id33870 . -4) (undo-tree-id33871 . -4) (undo-tree-id33872 . -4) (undo-tree-id33873 . -4) (undo-tree-id33874 . -4) (undo-tree-id33875 . -4) (undo-tree-id33876 . -4) (undo-tree-id33877 . -4) (undo-tree-id33878 . -4) (undo-tree-id33879 . -4) (undo-tree-id33880 . -4) (undo-tree-id33881 . -4) (undo-tree-id33882 . -4) (undo-tree-id33883 . -4) (undo-tree-id33884 . -4) (5781 . 5787)) nil (26156 64115 27539 656000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 5585) (5585 . 5589) (5585 . 5586) (t 26156 64115 113172 250000)) nil (26156 64118 382269 870000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5785) (undo-tree-id33978 . -4) (undo-tree-id33979 . -4) (undo-tree-id33980 . -4) (undo-tree-id33981 . -4) (undo-tree-id33982 . -4) (undo-tree-id33983 . -4) (undo-tree-id33984 . -4) (undo-tree-id33985 . -4) (undo-tree-id33986 . -4) (undo-tree-id33987 . -4) (undo-tree-id33988 . -4) (undo-tree-id33989 . -4) (undo-tree-id33990 . -4) (undo-tree-id33991 . -4) (undo-tree-id33992 . -4) (undo-tree-id33993 . -4) (undo-tree-id33994 . -4) (undo-tree-id33995 . -4) (undo-tree-id33996 . -4) (undo-tree-id33997 . -4) (undo-tree-id33998 . -4) (undo-tree-id33999 . -4) (undo-tree-id34000 . -4) 5789 (5785 . 5789) (#("    " 0 4 (fontified nil)) . 5784) (undo-tree-id34001 . -4) (undo-tree-id34002 . -4) (undo-tree-id34003 . -4) (undo-tree-id34004 . -4) (undo-tree-id34005 . -4) (undo-tree-id34006 . -4) (undo-tree-id34007 . -4) (undo-tree-id34008 . -4) (undo-tree-id34009 . -4) (undo-tree-id34010 . -4) (undo-tree-id34011 . -4) (undo-tree-id34012 . -4) (undo-tree-id34013 . -4) (undo-tree-id34014 . -4) (undo-tree-id34015 . -4) (undo-tree-id34016 . -4) (undo-tree-id34017 . -4) (undo-tree-id34018 . -4) (undo-tree-id34019 . -4) (undo-tree-id34020 . -4) (undo-tree-id34021 . -4) (undo-tree-id34022 . -4) (undo-tree-id34023 . -4) (5784 . 5789) (#("    " 0 4 (fontified nil)) . 5783) (undo-tree-id34024 . -4) (undo-tree-id34025 . -4) (undo-tree-id34026 . -4) (undo-tree-id34027 . -4) (undo-tree-id34028 . -4) (undo-tree-id34029 . -4) (undo-tree-id34030 . -4) (undo-tree-id34031 . -4) (undo-tree-id34032 . -4) (undo-tree-id34033 . -4) (undo-tree-id34034 . -4) (undo-tree-id34035 . -4) (undo-tree-id34036 . -4) (undo-tree-id34037 . -4) (undo-tree-id34038 . -4) (undo-tree-id34039 . -4) (undo-tree-id34040 . -4) (undo-tree-id34041 . -4) (undo-tree-id34042 . -4) (undo-tree-id34043 . -4) (undo-tree-id34044 . -4) (undo-tree-id34045 . -4) (undo-tree-id34046 . -4) (5782 . 5788) (t 26156 64118 468851 498000)) nil (26156 64123 298672 76000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5784) (t 26156 64123 388384 733000)) nil (26156 64170 759952 186000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5784) (undo-tree-id34047 . 1) (undo-tree-id34048 . -1)) nil (26156 64170 759946 111000) 0 nil])
([nil nil ((apply -45 6056 6968 undo--wrap-and-run-primitive-undo 6056 6968 ((6949 . 6952) (6894 . 6897) (6852 . 6855) (6767 . 6770) (6684 . 6687) (6647 . 6650) (6612 . 6615) (6522 . 6525) (6439 . 6442) (6308 . 6311) (6190 . 6193) (6148 . 6151) (6110 . 6113) (6090 . 6093) (6069 . 6072) 6056))) nil (26156 64170 759913 645000) 0 nil])
([nil nil ((6059 . 6063) (#("    " 0 4 (fontified nil)) . 6058) (undo-tree-id34297 . -4) (undo-tree-id34298 . -4) (undo-tree-id34299 . -4) (undo-tree-id34300 . -4) (undo-tree-id34301 . -4) (undo-tree-id34302 . -4) (undo-tree-id34303 . -4) (undo-tree-id34304 . -4) (undo-tree-id34305 . -4) (undo-tree-id34306 . -4) (undo-tree-id34307 . -4) (undo-tree-id34308 . -4) (undo-tree-id34309 . -4) (6058 . 6063) (#("    " 0 4 (fontified nil)) . 6057) (undo-tree-id34310 . -4) (undo-tree-id34311 . -4) (6061 . 6062) (t 26156 64170 848087 77000)) nil (26156 64201 496855 169000) 0 nil])
([nil nil ((6092 . 6094) (6089 . 6092) (#("new" 0 3 (fontified nil)) . 6089) (6089 . 6092) (#("new" 0 3 (fontified t)) . -6089) (undo-tree-id34214 . -3) (undo-tree-id34215 . -3) (undo-tree-id34216 . -3) (undo-tree-id34217 . -2) (undo-tree-id34218 . -2) (undo-tree-id34219 . -2) (undo-tree-id34220 . -2) (undo-tree-id34221 . -2) (undo-tree-id34222 . -2) (undo-tree-id34223 . -2) (undo-tree-id34224 . -2) (undo-tree-id34225 . -2) (undo-tree-id34226 . -2) (undo-tree-id34227 . -2) (undo-tree-id34228 . -2) (undo-tree-id34229 . -2) (undo-tree-id34230 . -2) (undo-tree-id34231 . -2) (undo-tree-id34232 . -2) (undo-tree-id34233 . -2) (undo-tree-id34234 . -2) (undo-tree-id34235 . -2) (undo-tree-id34236 . -2) (undo-tree-id34237 . -2) (undo-tree-id34238 . -2) (undo-tree-id34239 . -2) (undo-tree-id34240 . -2) (undo-tree-id34241 . -2) (undo-tree-id34242 . -2) (undo-tree-id34243 . -2) (undo-tree-id34244 . -2) (undo-tree-id34245 . -2) (undo-tree-id34246 . -2) (undo-tree-id34247 . -2) (undo-tree-id34248 . -3) (undo-tree-id34249 . -3) (undo-tree-id34250 . -3) (undo-tree-id34251 . -3) (undo-tree-id34252 . -3) (undo-tree-id34253 . -3) (undo-tree-id34254 . -3) (undo-tree-id34255 . -3) (undo-tree-id34256 . -3) (undo-tree-id34257 . -3) (undo-tree-id34258 . -3) (undo-tree-id34259 . -3) (undo-tree-id34260 . -3) (undo-tree-id34261 . -3) (undo-tree-id34262 . -3) (undo-tree-id34263 . -3) (undo-tree-id34264 . -3) (undo-tree-id34265 . -3) (undo-tree-id34266 . -3) (undo-tree-id34267 . -3) (undo-tree-id34268 . -3) (undo-tree-id34269 . -3) (undo-tree-id34270 . -3) (undo-tree-id34271 . -3) (undo-tree-id34272 . -3) (undo-tree-id34273 . -3) (undo-tree-id34274 . -3) (undo-tree-id34275 . -3) (undo-tree-id34276 . -3) (undo-tree-id34277 . -3) (undo-tree-id34278 . -3) (undo-tree-id34279 . -3) (undo-tree-id34280 . -3) (undo-tree-id34281 . -3) (undo-tree-id34282 . -3) (undo-tree-id34283 . -3) (undo-tree-id34284 . -3) (undo-tree-id34285 . -3) (undo-tree-id34286 . -3) (undo-tree-id34287 . -3) (undo-tree-id34288 . -3) (undo-tree-id34289 . -3) (undo-tree-id34290 . -3) 6092 (6090 . 6092) (6087 . 6090) (6084 . 6087) (#("Ve" 0 2 (fontified nil)) . 6084) (6084 . 6086) (#("Vec" 0 3 (fontified nil)) . -6084) (6084 . 6087) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -6084) (undo-tree-id34291 . -1) (undo-tree-id34292 . -2) (undo-tree-id34293 . -2) 6086 (6082 . 6086) (#("-" 0 1 (fontified t)) . -6082) (undo-tree-id34294 . -1) 6083 (6081 . 6083) (6080 . 6081) (#("=" 0 1 (fontified t)) . -6080) (undo-tree-id34295 . -1) (undo-tree-id34296 . -1) 6081 (6062 . 6081) (6058 . 6062)) nil (26156 64201 496814 430000) 0 nil])
([nil nil ((6094 . 6095)) nil (26156 64201 496577 103000) 0 nil])
([nil nil ((6082 . 6088) (#("Ve" 0 2 (fontified nil)) . 6082) (6082 . 6084) (#("Vec<_>" 0 6 (fontified nil)) . -6082) (6082 . 6088) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -6082) (undo-tree-id34181 . -2) (undo-tree-id34182 . -2) (undo-tree-id34183 . -2) (undo-tree-id34184 . -2) (undo-tree-id34185 . -2) (undo-tree-id34186 . -2) (undo-tree-id34187 . -2) (undo-tree-id34188 . -2) (undo-tree-id34189 . -2) (undo-tree-id34190 . -2) (undo-tree-id34191 . -2) (undo-tree-id34192 . -2) (undo-tree-id34193 . -2) (undo-tree-id34194 . -2) (undo-tree-id34195 . -2) (undo-tree-id34196 . -2) (undo-tree-id34197 . -2) (undo-tree-id34198 . -2) (undo-tree-id34199 . -2) (undo-tree-id34200 . -2) (undo-tree-id34201 . -2) (undo-tree-id34202 . -2) (undo-tree-id34203 . -2) (undo-tree-id34204 . -2) (undo-tree-id34205 . -2) (undo-tree-id34206 . -2) (undo-tree-id34207 . -2) (undo-tree-id34208 . -2) (undo-tree-id34209 . -2) (undo-tree-id34210 . -2) (undo-tree-id34211 . -2) (undo-tree-id34212 . -2) (undo-tree-id34213 . -2) 6084 (6080 . 6084)) nil (26156 64201 496570 843000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6086) (undo-tree-id34168 . -1) (undo-tree-id34169 . -1) (undo-tree-id34170 . -1) (undo-tree-id34171 . -1) (undo-tree-id34172 . -1) (undo-tree-id34173 . -1) (undo-tree-id34174 . -1) (undo-tree-id34175 . -1) (undo-tree-id34176 . -1) (undo-tree-id34177 . -1) (undo-tree-id34178 . -1) (undo-tree-id34179 . -1) (undo-tree-id34180 . -1)) nil (26156 64201 496509 254000) 0 nil])
([nil nil ((6086 . 6094) (#("Parti" 0 5 (fontified nil)) . 6086) (6086 . 6091) (#("Particle" 0 8 (fontified nil)) . -6086) (6086 . 6094) (#("Parti" 0 5 (fontified t face font-lock-type-face)) . -6086) (undo-tree-id34049 . -5) (undo-tree-id34050 . -5) (undo-tree-id34051 . -3) (undo-tree-id34052 . -3) (undo-tree-id34053 . -3) (undo-tree-id34054 . -3) (undo-tree-id34055 . -3) (undo-tree-id34056 . -3) (undo-tree-id34057 . -3) (undo-tree-id34058 . -3) (undo-tree-id34059 . -3) (undo-tree-id34060 . -3) (undo-tree-id34061 . -3) (undo-tree-id34062 . -4) (undo-tree-id34063 . -4) (undo-tree-id34064 . -4) (undo-tree-id34065 . -4) (undo-tree-id34066 . -4) (undo-tree-id34067 . -4) (undo-tree-id34068 . -4) (undo-tree-id34069 . -4) (undo-tree-id34070 . -4) (undo-tree-id34071 . -4) (undo-tree-id34072 . -5) (undo-tree-id34073 . -5) (undo-tree-id34074 . -5) (undo-tree-id34075 . -5) (undo-tree-id34076 . -5) (undo-tree-id34077 . -5) (undo-tree-id34078 . -5) (undo-tree-id34079 . -5) (undo-tree-id34080 . -5) (undo-tree-id34081 . -5) (undo-tree-id34082 . -5) (undo-tree-id34083 . -5) (undo-tree-id34084 . -5) (undo-tree-id34085 . -5) (undo-tree-id34086 . -5) (undo-tree-id34087 . -5) (undo-tree-id34088 . -5) (undo-tree-id34089 . -5) (undo-tree-id34090 . -5) (undo-tree-id34091 . -5) (undo-tree-id34092 . -5) (undo-tree-id34093 . -5) (undo-tree-id34094 . -5) (undo-tree-id34095 . -5) (undo-tree-id34096 . -5) (undo-tree-id34097 . -5) (undo-tree-id34098 . -5) (undo-tree-id34099 . -5) (undo-tree-id34100 . -5) (undo-tree-id34101 . -5) (undo-tree-id34102 . -5) (undo-tree-id34103 . -5) (undo-tree-id34104 . -5) (undo-tree-id34105 . -5) (undo-tree-id34106 . -5) (undo-tree-id34107 . -5) (undo-tree-id34108 . -5) (undo-tree-id34109 . -5) (undo-tree-id34110 . -5) (undo-tree-id34111 . -5) (undo-tree-id34112 . -5) (undo-tree-id34113 . -5) (undo-tree-id34114 . -5) (undo-tree-id34115 . -5) (undo-tree-id34116 . -5) (undo-tree-id34117 . -5) (undo-tree-id34118 . -5) (undo-tree-id34119 . -5) (undo-tree-id34120 . -5) (undo-tree-id34121 . -5) (undo-tree-id34122 . -5) (undo-tree-id34123 . -5) (undo-tree-id34124 . -5) (undo-tree-id34125 . -5) (undo-tree-id34126 . -5) (undo-tree-id34127 . -5) (undo-tree-id34128 . -5) (undo-tree-id34129 . -5) (undo-tree-id34130 . -5) (undo-tree-id34131 . -5) (undo-tree-id34132 . -5) (undo-tree-id34133 . -5) (undo-tree-id34134 . -5) (undo-tree-id34135 . -5) (undo-tree-id34136 . -5) (undo-tree-id34137 . -5) (undo-tree-id34138 . -5) (undo-tree-id34139 . -5) (undo-tree-id34140 . -5) (undo-tree-id34141 . -5) (undo-tree-id34142 . -5) (undo-tree-id34143 . -5) (undo-tree-id34144 . -5) (undo-tree-id34145 . -5) (undo-tree-id34146 . -5) (undo-tree-id34147 . -5) (undo-tree-id34148 . -5) (undo-tree-id34149 . -5) (undo-tree-id34150 . -5) (undo-tree-id34151 . -5) (undo-tree-id34152 . -5) (undo-tree-id34153 . -5) 6091 (6089 . 6091) (#("t" 0 1 (fontified t face font-lock-type-face)) . -6089) (undo-tree-id34154 . -1) (undo-tree-id34155 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -6090) (undo-tree-id34156 . -1) (undo-tree-id34157 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -6091) (undo-tree-id34158 . -1) (undo-tree-id34159 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -6092) (undo-tree-id34160 . -1) (undo-tree-id34161 . -1) (#("E" 0 1 (fontified t face font-lock-type-face)) . -6093) (undo-tree-id34162 . -1) (undo-tree-id34163 . -1) (#("q" 0 1 (fontified t face font-lock-type-face)) . -6094) (undo-tree-id34164 . -1) (undo-tree-id34165 . -1) 6095 (6086 . 6095) (#("Pa" 0 2 (fontified nil)) . 6086) (6086 . 6088) (#("PartialEq (alias ==, !=)" 0 24 (fontified nil)) . -6086) (6086 . 6110) (#("Pa" 0 2 (fontified t face font-lock-type-face)) . -6086) (undo-tree-id34166 . -2) (undo-tree-id34167 . -2) 6088 (6086 . 6088)) nil (26156 64201 496461 191000) 0 nil])
([nil nil ((5821 . 5829) (#("Par" 0 3 (fontified nil)) . 5821) (5821 . 5824) (#("Particle" 0 8 (fontified nil)) . -5821) (5821 . 5829) (#("Par" 0 3 (fontified t face font-lock-type-face)) . -5821) (undo-tree-id34467 . -3) (undo-tree-id34468 . -3) 5824 (5821 . 5824) (apply yas--snippet-revive 5817 5822 #s(yas--snippet nil nil #s(yas--exit 5821 nil) 169 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5821 nil) 169 nil nil nil nil)) (5817 . 5822) (#("Vec<$0>" 0 7 (fontified nil)) . 5817) (5817 . 5824) (#("Ve" 0 2 (fontified nil)) . 5817) (5817 . 5819) (#("Vec<…>" 0 6 (fontified nil)) . -5817) (5817 . 5823) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -5817) (undo-tree-id34469 . -2) (undo-tree-id34470 . -2) 5819 (5806 . 5819) (#(":" 0 1 (fontified t)) . -5806) (undo-tree-id34471 . -1) 5807 (5806 . 5807) (5789 . 5807) (t 26156 64201 613489 500000)) nil (26156 64261 68629 914000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5831) (undo-tree-id34465 . -1) (undo-tree-id34466 . -1) 5832 (5831 . 5832) (5830 . 5831)) nil (26156 64261 68606 771000) 0 nil])
([nil nil ((5831 . 5832)) nil (26156 64261 68599 369000) 0 nil])
([nil nil ((5859 . 5864) (#("us" 0 2 (fontified nil)) . 5859) (5859 . 5861) (#("usize" 0 5 (fontified nil)) . -5859) (5859 . 5864) (#("us" 0 2 (fontified t)) . -5859) (undo-tree-id34356 . -2) (undo-tree-id34357 . -2) (undo-tree-id34358 . -1) (undo-tree-id34359 . -1) (undo-tree-id34360 . -1) (undo-tree-id34361 . -1) (undo-tree-id34362 . -1) (undo-tree-id34363 . -1) (undo-tree-id34364 . -1) (undo-tree-id34365 . -1) (undo-tree-id34366 . -1) (undo-tree-id34367 . -1) (undo-tree-id34368 . -1) (undo-tree-id34369 . -1) (undo-tree-id34370 . -1) (undo-tree-id34371 . -1) (undo-tree-id34372 . -1) (undo-tree-id34373 . -1) (undo-tree-id34374 . -1) (undo-tree-id34375 . -1) (undo-tree-id34376 . -1) (undo-tree-id34377 . -1) (undo-tree-id34378 . -2) (undo-tree-id34379 . -2) (undo-tree-id34380 . -2) (undo-tree-id34381 . -2) (undo-tree-id34382 . -2) (undo-tree-id34383 . -2) (undo-tree-id34384 . -2) (undo-tree-id34385 . -2) (undo-tree-id34386 . -2) (undo-tree-id34387 . -2) (undo-tree-id34388 . -2) (undo-tree-id34389 . -2) (undo-tree-id34390 . -2) (undo-tree-id34391 . -2) (undo-tree-id34392 . -2) (undo-tree-id34393 . -2) (undo-tree-id34394 . -2) (undo-tree-id34395 . -2) (undo-tree-id34396 . -2) (undo-tree-id34397 . -2) (undo-tree-id34398 . -2) (undo-tree-id34399 . -2) (undo-tree-id34400 . -2) (undo-tree-id34401 . -2) (undo-tree-id34402 . -2) (undo-tree-id34403 . -2) (undo-tree-id34404 . -2) (undo-tree-id34405 . -2) (undo-tree-id34406 . -2) (undo-tree-id34407 . -2) (undo-tree-id34408 . -2) (undo-tree-id34409 . -2) (undo-tree-id34410 . -2) (undo-tree-id34411 . -2) (undo-tree-id34412 . -2) (undo-tree-id34413 . -2) (undo-tree-id34414 . -2) (undo-tree-id34415 . -2) (undo-tree-id34416 . -2) (undo-tree-id34417 . -2) (undo-tree-id34418 . -2) (undo-tree-id34419 . -2) (undo-tree-id34420 . -2) (undo-tree-id34421 . -2) (undo-tree-id34422 . -2) (undo-tree-id34423 . -2) (undo-tree-id34424 . -2) (undo-tree-id34425 . -2) (undo-tree-id34426 . -2) (undo-tree-id34427 . -2) (undo-tree-id34428 . -2) (undo-tree-id34429 . -2) (undo-tree-id34430 . -2) (undo-tree-id34431 . -2) (undo-tree-id34432 . -2) (undo-tree-id34433 . -2) (undo-tree-id34434 . -2) (undo-tree-id34435 . -2) (undo-tree-id34436 . -2) (undo-tree-id34437 . -2) (undo-tree-id34438 . -2) (undo-tree-id34439 . -2) (undo-tree-id34440 . -2) (undo-tree-id34441 . -2) (undo-tree-id34442 . -2) (undo-tree-id34443 . -2) (undo-tree-id34444 . -2) (undo-tree-id34445 . -2) (undo-tree-id34446 . -2) (undo-tree-id34447 . -2) (undo-tree-id34448 . -2) (undo-tree-id34449 . -2) (undo-tree-id34450 . -2) (undo-tree-id34451 . -2) (undo-tree-id34452 . -2) (undo-tree-id34453 . -2) (undo-tree-id34454 . -2) (undo-tree-id34455 . -2) (undo-tree-id34456 . -2) 5861 (5854 . 5861) (5852 . 5854) (5847 . 5852) (#("us" 0 2 (fontified nil)) . 5847) (5847 . 5849) (#("usize" 0 5 (fontified nil)) . -5847) (5847 . 5852) (#("us" 0 2 (fontified t)) . -5847) (undo-tree-id34457 . -2) (undo-tree-id34458 . -2) 5849 (5841 . 5849) (5836 . 5841) (#("us" 0 2 (fontified nil)) . 5836) (5836 . 5838) (#("usize" 0 5 (fontified nil)) . -5836) (5836 . 5841) (#("us" 0 2 (fontified t)) . -5836) (undo-tree-id34459 . -2) (undo-tree-id34460 . -2) 5838 (5833 . 5838) (#("v" 0 1 (fontified t)) . -5833) (undo-tree-id34461 . -1) (undo-tree-id34462 . -1) (#("o" 0 1 (fontified t)) . -5834) (undo-tree-id34463 . -1) (#("o" 0 1 (fontified t)) . -5835) (undo-tree-id34464 . -1) 5836 (5832 . 5836)) nil (26156 64261 68579 3000) 0 nil])
([nil nil ((5868 . 5872) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5868) (5868 . 5872) (5867 . 5869) (5865 . 5868) (#(";" 0 1 (fontified t)) . -5865) (undo-tree-id34312 . -1) (undo-tree-id34313 . -1) (undo-tree-id34314 . -1) (undo-tree-id34315 . -1) (undo-tree-id34316 . -1) (undo-tree-id34317 . -1) (undo-tree-id34318 . -1) (undo-tree-id34319 . -1) (undo-tree-id34320 . -1) (undo-tree-id34321 . -1) (undo-tree-id34322 . -1) (undo-tree-id34323 . -1) (undo-tree-id34324 . -1) (undo-tree-id34325 . -1) (undo-tree-id34326 . -1) (undo-tree-id34327 . -1) (undo-tree-id34328 . -1) (undo-tree-id34329 . -1) (undo-tree-id34330 . -1) (undo-tree-id34331 . -1) (undo-tree-id34332 . -1) (undo-tree-id34333 . -1) (undo-tree-id34334 . -1) (undo-tree-id34335 . -1) (undo-tree-id34336 . -1) (undo-tree-id34337 . -1) (undo-tree-id34338 . -1) (undo-tree-id34339 . -1) (undo-tree-id34340 . -1) (undo-tree-id34341 . -1) (undo-tree-id34342 . -1) (undo-tree-id34343 . -1) (undo-tree-id34344 . -1) (undo-tree-id34345 . -1) (undo-tree-id34346 . -1) (undo-tree-id34347 . -1) (undo-tree-id34348 . -1) (undo-tree-id34349 . -1) (undo-tree-id34350 . -1) (undo-tree-id34351 . -1) (undo-tree-id34352 . -1) (undo-tree-id34353 . -1) (undo-tree-id34354 . -1) (undo-tree-id34355 . -1) 5866 (5865 . 5866)) nil (26156 64261 67807 370000) 0 nil])
([nil nil ((6215 . 6217) (#("u" 0 1 (fontified nil)) . 6215) (6215 . 6216) (#("u8" 0 2 (fontified nil)) . -6215) (6215 . 6217) (#("u" 0 1 (fontified t)) . -6215) (undo-tree-id34542 . -1) (undo-tree-id34543 . -1) 6216 (6215 . 6216) (apply yas--snippet-revive 6211 6216 #s(yas--snippet nil nil #s(yas--exit 6215 nil) 170 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6215 nil) 170 nil nil nil nil)) (6211 . 6216) (#("Vec<$0>" 0 7 (fontified nil)) . 6211) (6211 . 6218) (#("Ve" 0 2 (fontified nil)) . 6211) (6211 . 6213) (#("Vec<…>" 0 6 (fontified nil)) . -6211) (6211 . 6217) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -6211) (undo-tree-id34544 . -1) (undo-tree-id34545 . -2) (undo-tree-id34546 . -2) 6213 (6211 . 6213) (#("z" 0 1 (fontified t)) . -6211) (undo-tree-id34547 . -1) (#("v" 0 1 (fontified t)) . -6212) (undo-tree-id34548 . -1) 6213 (6209 . 6213) (#(" " 0 1 (fontified t)) . -6209) (undo-tree-id34549 . -1) 6210 (6202 . 6210) (6198 . 6202) (#("    " 0 4 (fontified nil)) . 6197) (undo-tree-id34550 . -4) (6197 . 6202) (#("    " 0 4 (fontified nil)) . 6196) (undo-tree-id34551 . -4) (6200 . 6201) (t 26156 64261 184844 803000)) nil (26156 64347 113000 844000) 0 nil])
([nil nil ((6231 . 6233) (apply yas--snippet-revive 6226 6231 #s(yas--snippet nil nil #s(yas--exit 6231 nil) 171 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6231 nil) 171 nil nil nil nil)) (6226 . 6231) (#("new()$0" 0 7 (fontified nil)) . 6226) (6226 . 6233) (#("new" 0 3 (fontified nil)) . 6226) (6226 . 6229) (#("new()" 0 5 (fontified nil)) . -6226) (6226 . 6231) (#("new" 0 3 (fontified t)) . -6226) (undo-tree-id34531 . -3) (undo-tree-id34532 . -3) (undo-tree-id34533 . -3) (undo-tree-id34534 . -3) 6229 (6224 . 6229) (6221 . 6224) (#("Ve" 0 2 (fontified nil)) . 6221) (6221 . 6223) (#("Vec" 0 3 (fontified nil)) . -6221) (6221 . 6224) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -6221) (undo-tree-id34535 . -1) (undo-tree-id34536 . -2) (undo-tree-id34537 . -2) (undo-tree-id34538 . -2) 6223 (6218 . 6223) (#(":" 0 1 (fontified t)) . -6218) (undo-tree-id34539 . -1) (#(" " 0 1 (fontified t)) . -6219) (undo-tree-id34540 . -1) 6220 (6218 . 6220) (#(" " 0 1 (fontified t)) . -6218) (undo-tree-id34541 . -1) 6219 (6218 . 6219)) nil (26156 64347 112961 347000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6244) (undo-tree-id34505 . -1) (undo-tree-id34506 . -1) (undo-tree-id34507 . -1) (undo-tree-id34508 . -1) (undo-tree-id34509 . -1) (undo-tree-id34510 . -1) (undo-tree-id34511 . -1) (undo-tree-id34512 . -1) (undo-tree-id34513 . -1) (undo-tree-id34514 . -1) (undo-tree-id34515 . -1) (undo-tree-id34516 . -1) (undo-tree-id34517 . -1) (undo-tree-id34518 . -1) (undo-tree-id34519 . -1) (undo-tree-id34520 . -1) (undo-tree-id34521 . -1) (undo-tree-id34522 . -1) (undo-tree-id34523 . -1) (undo-tree-id34524 . -1) (undo-tree-id34525 . -1) (undo-tree-id34526 . -1) (undo-tree-id34527 . -1) (undo-tree-id34528 . -1) (undo-tree-id34529 . -1) 6245 (6244 . 6245) (6239 . 6245) (6235 . 6239) (#("    " 0 4 (fontified nil)) . 6234) (undo-tree-id34530 . -4) (6233 . 6239)) nil (26156 64347 112929 295000) 0 nil])
([nil nil ((6206 . 6210)) nil (26156 64347 112884 96000) 0 nil])
([nil nil ((6282 . 6287) (6283 . 6284) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 6282) (6282 . 6287) (6281 . 6283) (6276 . 6282) (6275 . 6276) (6273 . 6275) (#(" " 0 1 (fontified t)) . -6273) (undo-tree-id34472 . -1) (undo-tree-id34473 . -1) 6274 (6272 . 6274) (#("9" 0 1 (fontified t)) . -6272) (undo-tree-id34474 . -1) (#("0" 0 1 (fontified t)) . -6273) (undo-tree-id34475 . -1) 6274 (6264 . 6274) (6263 . 6264) (6262 . 6263) (6263 . 6267) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6262) (6262 . 6263) (6261 . 6263) (6256 . 6262) (6255 . 6256) (6252 . 6255) (#("1" 0 1 (fontified t)) . -6252) (undo-tree-id34476 . -1) (undo-tree-id34477 . -1) (#("." 0 1 (fontified t)) . -6253) (undo-tree-id34478 . -1) (undo-tree-id34479 . -1) 6254 (#("." 0 1 (fontified t)) . -6254) (undo-tree-id34480 . -1) (undo-tree-id34481 . -1) 6255 (6247 . 6255) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6247) (undo-tree-id34482 . -1) (undo-tree-id34483 . -1) (undo-tree-id34484 . -1) (undo-tree-id34485 . -1) (undo-tree-id34486 . -1) (undo-tree-id34487 . -1) (undo-tree-id34488 . -1) (undo-tree-id34489 . -1) (undo-tree-id34490 . -1) (undo-tree-id34491 . -1) (undo-tree-id34492 . -1) (undo-tree-id34493 . -1) (undo-tree-id34494 . -1) (undo-tree-id34495 . -1) (undo-tree-id34496 . -1) (undo-tree-id34497 . -1) (undo-tree-id34498 . -1) (undo-tree-id34499 . -1) (undo-tree-id34500 . -1) (undo-tree-id34501 . -1) (undo-tree-id34502 . -1) (undo-tree-id34503 . -1) (undo-tree-id34504 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 6248)) nil (26156 64347 112866 789000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6239) (undo-tree-id34562 . -4) 6243 (6239 . 6243) (#("    " 0 4 (fontified nil)) . 6238) (undo-tree-id34563 . -4) (6237 . 6243) (t 26156 64347 230935 860000)) nil (26156 64427 572110 154000) 0 nil])
([nil nil ((6239 . 6243)) nil (26156 64427 572102 696000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 6303) (6302 . 6303) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6302 6303 nil nil nil t #s(yas--exit 6304 nil))) #s(yas--exit 6304 nil) 172 nil #s(yas--field 1 6302 6303 nil nil nil t #s(yas--exit 6304 nil)) nil nil)) (6297 . 6308) (#("push(${1:value})$0" 0 18 (fontified nil)) . 6297) (6297 . 6315) (#("pu" 0 2 (fontified nil)) . 6297) (6297 . 6299) (#("push(…)" 0 7 (fontified nil)) . -6297) (6297 . 6304) (#("pu" 0 2 (fontified t)) . -6297) (undo-tree-id34552 . -2) (undo-tree-id34553 . -2) 6299 (6298 . 6299) (6296 . 6298) (6293 . 6296) (#("ne" 0 2 (fontified nil)) . 6293) (6293 . 6295) (#("new" 0 3 (fontified nil)) . -6293) (6293 . 6296) (#("ne" 0 2 (fontified t)) . -6293) (undo-tree-id34554 . -2) (undo-tree-id34555 . -2) 6295 (6293 . 6295) (#("v" 0 1 (fontified t)) . -6293) (undo-tree-id34556 . -1) (undo-tree-id34557 . -1) (undo-tree-id34558 . -1) (#("e" 0 1 (fontified t)) . -6294) (undo-tree-id34559 . -1) (undo-tree-id34560 . -1) (undo-tree-id34561 . -1) 6295 (6293 . 6295)) nil (26156 64427 572091 826000) 0 nil])
([nil nil ((6304 . 6305) (apply yas--snippet-revive 6297 6304 #s(yas--snippet nil (#s(yas--field 1 6302 6303 nil nil nil t #s(yas--exit 6304 nil))) #s(yas--exit 6304 nil) 172 nil #s(yas--field 1 6302 6303 nil nil nil t #s(yas--exit 6304 nil)) nil nil))) nil (26156 64427 572037 530000) 0 nil])
([nil nil ((6320 . 6324) (t 26156 64427 662150 615000)) nil (26156 64473 598062 148000) 0 nil])
([nil nil ((6302 . 6305) (#("0" 0 1 (fontified t)) . -6302) (undo-tree-id34564 . -1) (undo-tree-id34565 . -1) (undo-tree-id34566 . -1) (undo-tree-id34567 . -1) (undo-tree-id34568 . -1) (undo-tree-id34569 . -1) (undo-tree-id34570 . -1) (undo-tree-id34571 . -1) (undo-tree-id34572 . -1) (undo-tree-id34573 . -1) (undo-tree-id34574 . -1) (undo-tree-id34575 . -1) (undo-tree-id34576 . -1) 6303) nil (26156 64473 598050 662000) 0 nil])
([nil nil ((6332 . 6337) (6323 . 6332) (6319 . 6323) (#("    " 0 4 (fontified nil)) . 6318) (undo-tree-id34666 . -4) (6318 . 6323) (#("    " 0 4 (fontified nil)) . 6317) (undo-tree-id34667 . -4) (6321 . 6322) (t 26156 64473 711690 199000)) nil (26156 64512 672122 585000) 0 nil])
([nil nil ((6270 . 6271) (apply yas--snippet-revive 6258 6270 #s(yas--snippet nil nil #s(yas--exit 6270 nil) 173 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6270 nil) 173 nil nil nil nil)) (6258 . 6270) (#("get_buffer()$0" 0 14 (fontified nil)) . 6258) (6258 . 6272) (#("ge" 0 2 (fontified nil)) . 6258) (6258 . 6260) (#("get_buffer()" 0 12 (fontified nil)) . -6258) (6258 . 6270) (#("ge" 0 2 (fontified t)) . -6258) (undo-tree-id34577 . -1) (undo-tree-id34578 . -2) (undo-tree-id34579 . -2) (undo-tree-id34580 . -1) (undo-tree-id34581 . -1) (undo-tree-id34582 . -1) (undo-tree-id34583 . -1) (undo-tree-id34584 . -1) (undo-tree-id34585 . -1) (undo-tree-id34586 . -1) (undo-tree-id34587 . -1) (undo-tree-id34588 . -1) (undo-tree-id34589 . -1) (undo-tree-id34590 . -1) (undo-tree-id34591 . -1) (undo-tree-id34592 . -1) (undo-tree-id34593 . -1) (undo-tree-id34594 . -1) (undo-tree-id34595 . -1) (undo-tree-id34596 . -1) (undo-tree-id34597 . -1) (undo-tree-id34598 . -1) (undo-tree-id34599 . -1) (undo-tree-id34600 . -1) (undo-tree-id34601 . -1) (undo-tree-id34602 . -1) (undo-tree-id34603 . -1) (undo-tree-id34604 . -1) (undo-tree-id34605 . -1) (undo-tree-id34606 . -1) (undo-tree-id34607 . -1) (undo-tree-id34608 . -1) (undo-tree-id34609 . -1) (undo-tree-id34610 . -1) (undo-tree-id34611 . -1) (undo-tree-id34612 . -1) (undo-tree-id34613 . -1) (undo-tree-id34614 . -1) (undo-tree-id34615 . -1) (undo-tree-id34616 . -1) (undo-tree-id34617 . -2) (undo-tree-id34618 . -2) (undo-tree-id34619 . -2) (undo-tree-id34620 . -2) (undo-tree-id34621 . -2) (undo-tree-id34622 . -2) (undo-tree-id34623 . -2) (undo-tree-id34624 . -2) (undo-tree-id34625 . -2) (undo-tree-id34626 . -2) (undo-tree-id34627 . -2) (undo-tree-id34628 . -2) (undo-tree-id34629 . -2) (undo-tree-id34630 . -2) (undo-tree-id34631 . -2) (undo-tree-id34632 . -2) (undo-tree-id34633 . -2) (undo-tree-id34634 . -2) (undo-tree-id34635 . -2) (undo-tree-id34636 . -2) (undo-tree-id34637 . -2) (undo-tree-id34638 . -2) (undo-tree-id34639 . -2) (undo-tree-id34640 . -2) (undo-tree-id34641 . -2) (undo-tree-id34642 . -2) (undo-tree-id34643 . -2) (undo-tree-id34644 . -2) (undo-tree-id34645 . -2) (undo-tree-id34646 . -2) (undo-tree-id34647 . -2) (undo-tree-id34648 . -2) (undo-tree-id34649 . -2) (undo-tree-id34650 . -2) (undo-tree-id34651 . -2) (undo-tree-id34652 . -2) (undo-tree-id34653 . -2) (undo-tree-id34654 . -2) (undo-tree-id34655 . -2) (undo-tree-id34656 . -2) (undo-tree-id34657 . -2) (undo-tree-id34658 . -2) (undo-tree-id34659 . -2) (undo-tree-id34660 . -2) 6260 (6258 . 6260) (6257 . 6258) (6254 . 6257) (#("c" 0 1 (fontified t)) . -6254) (undo-tree-id34661 . -1) (undo-tree-id34662 . -1) (#("a" 0 1 (fontified t)) . -6255) (undo-tree-id34663 . -1) (undo-tree-id34664 . -1) 6256 (6251 . 6256) (#(" " 0 1 (fontified t)) . -6251) (undo-tree-id34665 . -1) 6252 (6250 . 6252) (6243 . 6250)) nil (26156 64512 672096 436000) 0 nil])
([nil nil ((6374 . 6379) (#("wi" 0 2 (fontified nil)) . 6374) (6374 . 6376) (#("width" 0 5 (fontified nil)) . -6374) (6374 . 6379) (#("wi" 0 2 (fontified t)) . -6374) (undo-tree-id34676 . -1) (undo-tree-id34677 . -2) (undo-tree-id34678 . -2) (undo-tree-id34679 . -1) (undo-tree-id34680 . -1) (undo-tree-id34681 . -1) (undo-tree-id34682 . -1) (undo-tree-id34683 . -1) (undo-tree-id34684 . -1) (undo-tree-id34685 . -1) (undo-tree-id34686 . -1) (undo-tree-id34687 . -1) (undo-tree-id34688 . -1) (undo-tree-id34689 . -1) (undo-tree-id34690 . -1) (undo-tree-id34691 . -1) (undo-tree-id34692 . -1) (undo-tree-id34693 . -1) (undo-tree-id34694 . -1) (undo-tree-id34695 . -1) (undo-tree-id34696 . -1) (undo-tree-id34697 . -1) (undo-tree-id34698 . -1) (undo-tree-id34699 . -1) (undo-tree-id34700 . -1) (undo-tree-id34701 . -1) (undo-tree-id34702 . -1) (undo-tree-id34703 . -1) (undo-tree-id34704 . -1) (undo-tree-id34705 . -1) (undo-tree-id34706 . -1) (undo-tree-id34707 . -1) (undo-tree-id34708 . -1) (undo-tree-id34709 . -2) (undo-tree-id34710 . -2) (undo-tree-id34711 . -2) (undo-tree-id34712 . -2) (undo-tree-id34713 . -2) (undo-tree-id34714 . -2) (undo-tree-id34715 . -2) (undo-tree-id34716 . -2) (undo-tree-id34717 . -2) (undo-tree-id34718 . -2) (undo-tree-id34719 . -2) (undo-tree-id34720 . -2) (undo-tree-id34721 . -2) (undo-tree-id34722 . -2) (undo-tree-id34723 . -2) (undo-tree-id34724 . -2) (undo-tree-id34725 . -2) (undo-tree-id34726 . -2) (undo-tree-id34727 . -2) (undo-tree-id34728 . -2) (undo-tree-id34729 . -2) (undo-tree-id34730 . -2) (undo-tree-id34731 . -2) (undo-tree-id34732 . -2) (undo-tree-id34733 . -2) (undo-tree-id34734 . -2) (undo-tree-id34735 . -2) (undo-tree-id34736 . -2) (undo-tree-id34737 . -2) (undo-tree-id34738 . -2) (undo-tree-id34739 . -2) 6376 (6373 . 6376) (6365 . 6373) (#("ma" 0 2 (fontified nil)) . 6365) (6365 . 6367) (#("map_data" 0 8 (fontified nil)) . -6365) (6365 . 6373) (#("ma" 0 2 (fontified t)) . -6365) (undo-tree-id34740 . -2) (undo-tree-id34741 . -2) (undo-tree-id34742 . -2) 6367 (6365 . 6367) (t 26156 64512 785745 555000)) nil (26156 64546 885497 732000) 0 nil])
([nil nil ((6388 . 6389) (6389 . 6393) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6388) (6388 . 6389) (6387 . 6389) (6379 . 6388)) nil (26156 64546 885362 215000) 0 nil])
([nil nil ((6418 . 6424) (6412 . 6418) (#("he" 0 2 (fontified nil)) . 6412) (6412 . 6414) (#("height" 0 6 (fontified nil)) . -6412) (6412 . 6418) (#("he" 0 2 (fontified t)) . -6412) (undo-tree-id34668 . -1) (undo-tree-id34669 . -2) (undo-tree-id34670 . -2) 6414 (6411 . 6414) (#(" " 0 1 (fontified t)) . -6411) (undo-tree-id34671 . -1) 6412 (6411 . 6412) (#(" " 0 1 (fontified t)) . -6411) (undo-tree-id34672 . -1) 6412 (6411 . 6412) (6403 . 6411) (#("ma" 0 2 (fontified nil)) . 6403) (6403 . 6405) (#("map_data" 0 8 (fontified nil)) . -6403) (6403 . 6411) (#("ma" 0 2 (fontified t)) . -6403) (undo-tree-id34673 . -2) (undo-tree-id34674 . -2) (undo-tree-id34675 . -2) 6405 (6389 . 6405)) nil (26156 64546 885350 295000) 0 nil])
([nil nil ((6427 . 6432) (6428 . 6429) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 6427) (6427 . 6432) (6426 . 6428) (6424 . 6427)) nil (26156 64546 885297 808000) 0 nil])
([nil nil ((6436 . 6437) (6435 . 6437) (6432 . 6435) (#("new" 0 3 (fontified nil)) . 6432) (6432 . 6435) (#("new" 0 3 (fontified t)) . -6432) (undo-tree-id35076 . -3) (undo-tree-id35077 . -3) (undo-tree-id35078 . -3) (undo-tree-id35079 . -3) (undo-tree-id35080 . -3) (undo-tree-id35081 . -3) (undo-tree-id35082 . -3) (undo-tree-id35083 . -3) (undo-tree-id35084 . -3) (undo-tree-id35085 . -3) (undo-tree-id35086 . -3) (undo-tree-id35087 . -3) (undo-tree-id35088 . -3) (undo-tree-id35089 . -3) (undo-tree-id35090 . -3) (undo-tree-id35091 . -3) (undo-tree-id35092 . -3) (undo-tree-id35093 . -3) (undo-tree-id35094 . -3) (undo-tree-id35095 . -3) (undo-tree-id35096 . -3) (undo-tree-id35097 . -3) (undo-tree-id35098 . -3) (undo-tree-id35099 . -3) (undo-tree-id35100 . -3) (undo-tree-id35101 . -3) (undo-tree-id35102 . -3) (undo-tree-id35103 . -3) (undo-tree-id35104 . -3) (undo-tree-id35105 . -3) (undo-tree-id35106 . -3) (undo-tree-id35107 . -3) (undo-tree-id35108 . -3) (undo-tree-id35109 . -3) (undo-tree-id35110 . -3) (undo-tree-id35111 . -3) (undo-tree-id35112 . -3) (undo-tree-id35113 . -3) (undo-tree-id35114 . -3) (undo-tree-id35115 . -3) (undo-tree-id35116 . -3) (undo-tree-id35117 . -3) (undo-tree-id35118 . -3) (undo-tree-id35119 . -3) (undo-tree-id35120 . -3) (undo-tree-id35121 . -3) (undo-tree-id35122 . -3) (undo-tree-id35123 . -3) (undo-tree-id35124 . -3) (undo-tree-id35125 . -3) (undo-tree-id35126 . -3) (undo-tree-id35127 . -3) (undo-tree-id35128 . -3) (undo-tree-id35129 . -3) (undo-tree-id35130 . -3) (undo-tree-id35131 . -3) (undo-tree-id35132 . -3) (undo-tree-id35133 . -3) (undo-tree-id35134 . -3) (undo-tree-id35135 . -3) (undo-tree-id35136 . -3) (undo-tree-id35137 . -3) (undo-tree-id35138 . -3) (undo-tree-id35139 . -3) (undo-tree-id35140 . -3) (undo-tree-id35141 . -3) (undo-tree-id35142 . -3) 6435 (6432 . 6435) (t 26156 64547 142 543000)) nil (26156 64575 342053 65000) 0 nil])
([nil nil ((6439 . 6440) (6438 . 6440)) nil (26156 64575 341934 954000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -6444) (undo-tree-id35048 . -1) (undo-tree-id35049 . -1) (undo-tree-id35050 . -1) (undo-tree-id35051 . -1) (undo-tree-id35052 . -1) (undo-tree-id35053 . -1) (undo-tree-id35054 . -1) (undo-tree-id35055 . -1) (undo-tree-id35056 . -1) (undo-tree-id35057 . -1) (undo-tree-id35058 . -1) (undo-tree-id35059 . -1) (undo-tree-id35060 . -1) (undo-tree-id35061 . -1) (undo-tree-id35062 . -1) (undo-tree-id35063 . -1) (undo-tree-id35064 . -1) (undo-tree-id35065 . -1) (undo-tree-id35066 . -1) (undo-tree-id35067 . -1) (undo-tree-id35068 . -1) (undo-tree-id35069 . -1) (undo-tree-id35070 . -1) (undo-tree-id35071 . -1) (#("u" 0 1 (fontified t)) . -6445) (undo-tree-id35072 . -1) (undo-tree-id35073 . -1) (undo-tree-id35074 . -1) (undo-tree-id35075 . -1) 6446 (6444 . 6446) (6441 . 6444)) nil (26156 64575 341929 432000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -6437) (undo-tree-id35012 . -1) (undo-tree-id35013 . -1) (undo-tree-id35014 . -1) (undo-tree-id35015 . -1) (undo-tree-id35016 . -1) (undo-tree-id35017 . -1) (undo-tree-id35018 . -1) (undo-tree-id35019 . -1) (undo-tree-id35020 . -1) (undo-tree-id35021 . -1) (undo-tree-id35022 . -1) (undo-tree-id35023 . -1) (undo-tree-id35024 . -1) (undo-tree-id35025 . -1) (undo-tree-id35026 . -1) (undo-tree-id35027 . -1) (undo-tree-id35028 . -1) (undo-tree-id35029 . -1) (undo-tree-id35030 . -1) (undo-tree-id35031 . -1) (undo-tree-id35032 . -1) (undo-tree-id35033 . -1) (undo-tree-id35034 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -6438) (undo-tree-id35035 . -1) (undo-tree-id35036 . -1) (undo-tree-id35037 . -1) (undo-tree-id35038 . -1) (undo-tree-id35039 . -1) (undo-tree-id35040 . -1) (undo-tree-id35041 . -1) (undo-tree-id35042 . -1) (undo-tree-id35043 . -1) (undo-tree-id35044 . -1) (undo-tree-id35045 . -1) (undo-tree-id35046 . -1) (undo-tree-id35047 . -1) 6439) nil (26156 64575 341875 790000) 0 nil])
([nil nil ((#("	    new[ij] = 
" 0 5 (fontified t) 5 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 15 (fontified t) 15 16 (fontified t)) . 6427) (undo-tree-id34743 . -15) (undo-tree-id34744 . 6) (undo-tree-id34745 . -15) (undo-tree-id34746 . -8) (undo-tree-id34747 . -7) (undo-tree-id34748 . -5) (undo-tree-id34749 . -5) (undo-tree-id34750 . -5) (undo-tree-id34751 . -5) (undo-tree-id34752 . -5) (undo-tree-id34753 . -5) (undo-tree-id34754 . -5) (undo-tree-id34755 . -5) (undo-tree-id34756 . -5) (undo-tree-id34757 . -5) (undo-tree-id34758 . -5) (undo-tree-id34759 . -5) (undo-tree-id34760 . -5) (undo-tree-id34761 . -5) (undo-tree-id34762 . -5) (undo-tree-id34763 . -5) (undo-tree-id34764 . -5) (undo-tree-id34765 . -5) (undo-tree-id34766 . -5) (undo-tree-id34767 . -5) (undo-tree-id34768 . -5) (undo-tree-id34769 . -5) (undo-tree-id34770 . -5) (undo-tree-id34771 . -5) (undo-tree-id34772 . -5) (undo-tree-id34773 . -5) (undo-tree-id34774 . -5) (undo-tree-id34775 . -5) (undo-tree-id34776 . -5) (undo-tree-id34777 . -5) (undo-tree-id34778 . -5) (undo-tree-id34779 . -5) (undo-tree-id34780 . -5) (undo-tree-id34781 . -5) (undo-tree-id34782 . -5) (undo-tree-id34783 . -5) (undo-tree-id34784 . -5) (undo-tree-id34785 . -5) (undo-tree-id34786 . -5) (undo-tree-id34787 . -5) (undo-tree-id34788 . -5) (undo-tree-id34789 . -5) (undo-tree-id34790 . -5) (undo-tree-id34791 . -5) (undo-tree-id34792 . -5) (undo-tree-id34793 . -5) (undo-tree-id34794 . -5) (undo-tree-id34795 . -5) (undo-tree-id34796 . -5) (undo-tree-id34797 . -5) (undo-tree-id34798 . -5) (undo-tree-id34799 . -5) (undo-tree-id34800 . -5) (undo-tree-id34801 . -5) (undo-tree-id34802 . -5) (undo-tree-id34803 . -5) (undo-tree-id34804 . -5) (undo-tree-id34805 . -5) (undo-tree-id34806 . -5) (undo-tree-id34807 . -5) (undo-tree-id34808 . -5) (undo-tree-id34809 . -5) (undo-tree-id34810 . -5) (undo-tree-id34811 . 1) (undo-tree-id34812 . -15) (undo-tree-id34813 . -15) (undo-tree-id34814 . -15) (undo-tree-id34815 . -15) (undo-tree-id34816 . -15) (undo-tree-id34817 . -15) (undo-tree-id34818 . -15) (undo-tree-id34819 . -15) (undo-tree-id34820 . -15) (undo-tree-id34821 . -15) (undo-tree-id34822 . -15) (undo-tree-id34823 . -15) (undo-tree-id34824 . -15) (undo-tree-id34825 . -15) (undo-tree-id34826 . -15) (undo-tree-id34827 . -15) (undo-tree-id34828 . -15) (undo-tree-id34829 . -15) (undo-tree-id34830 . -15) (undo-tree-id34831 . -15) (undo-tree-id34832 . -15) (undo-tree-id34833 . -15) (undo-tree-id34834 . -15) (undo-tree-id34835 . -15) (undo-tree-id34836 . -15) (undo-tree-id34837 . -15) (undo-tree-id34838 . -15) (undo-tree-id34839 . -15) (undo-tree-id34840 . -15) (undo-tree-id34841 . -15) (undo-tree-id34842 . -15) (undo-tree-id34843 . -15) (undo-tree-id34844 . -15) (undo-tree-id34845 . -15) (undo-tree-id34846 . -15) (undo-tree-id34847 . -15) (undo-tree-id34848 . -15) (undo-tree-id34849 . -15) (undo-tree-id34850 . -15) (undo-tree-id34851 . -15) (undo-tree-id34852 . -15) (undo-tree-id34853 . -15) (undo-tree-id34854 . -15) (undo-tree-id34855 . -15) (undo-tree-id34856 . -15) (undo-tree-id34857 . -15) (undo-tree-id34858 . -15) (undo-tree-id34859 . -15) (undo-tree-id34860 . -15) (undo-tree-id34861 . -15) (undo-tree-id34862 . -15) (undo-tree-id34863 . -15) (undo-tree-id34864 . -15) (undo-tree-id34865 . -14) (undo-tree-id34866 . -14) (undo-tree-id34867 . -14) (undo-tree-id34868 . -14) (undo-tree-id34869 . -14) (undo-tree-id34870 . -14) (undo-tree-id34871 . -14) (undo-tree-id34872 . -14) (undo-tree-id34873 . -14) (undo-tree-id34874 . -14) (undo-tree-id34875 . -14) (undo-tree-id34876 . -14) (undo-tree-id34877 . -14) (undo-tree-id34878 . -14) (undo-tree-id34879 . -14) (undo-tree-id34880 . -14) (undo-tree-id34881 . -14) (undo-tree-id34882 . -14) (undo-tree-id34883 . -14) (undo-tree-id34884 . -14) (undo-tree-id34885 . -14) (undo-tree-id34886 . -14) (undo-tree-id34887 . -10) (undo-tree-id34888 . -10) (undo-tree-id34889 . -10) (undo-tree-id34890 . -10) (undo-tree-id34891 . -10) (undo-tree-id34892 . -10) (undo-tree-id34893 . -10) (undo-tree-id34894 . -10) (undo-tree-id34895 . -10) (undo-tree-id34896 . -10) (undo-tree-id34897 . -10) (undo-tree-id34898 . -10) (undo-tree-id34899 . -10) (undo-tree-id34900 . -10) (undo-tree-id34901 . -10) (undo-tree-id34902 . -10) (undo-tree-id34903 . -10) (undo-tree-id34904 . -10) (undo-tree-id34905 . -10) (undo-tree-id34906 . -10) (undo-tree-id34907 . -10) (undo-tree-id34908 . -10) (undo-tree-id34909 . -10) (undo-tree-id34910 . -10) (undo-tree-id34911 . -10) (undo-tree-id34912 . -10) (undo-tree-id34913 . -10) (undo-tree-id34914 . -10) (undo-tree-id34915 . -10) (undo-tree-id34916 . -10) (undo-tree-id34917 . -10) (undo-tree-id34918 . -14) (undo-tree-id34919 . -15) (undo-tree-id34920 . -10) (undo-tree-id34921 . -10) (undo-tree-id34922 . -10) (undo-tree-id34923 . -10) (undo-tree-id34924 . -10) (undo-tree-id34925 . -10) (undo-tree-id34926 . -10) (undo-tree-id34927 . -10) (undo-tree-id34928 . -10) (undo-tree-id34929 . -10) (undo-tree-id34930 . -10) (undo-tree-id34931 . -10) (undo-tree-id34932 . -10) (undo-tree-id34933 . -10) (undo-tree-id34934 . -10) (undo-tree-id34935 . -10) (undo-tree-id34936 . -10) (undo-tree-id34937 . -10) (undo-tree-id34938 . -10) (undo-tree-id34939 . -10) (undo-tree-id34940 . -10) (undo-tree-id34941 . -10) (undo-tree-id34942 . -10) (undo-tree-id34943 . -10) (undo-tree-id34944 . -10) (undo-tree-id34945 . -10) (undo-tree-id34946 . -10) (undo-tree-id34947 . -10) (undo-tree-id34948 . -10) (undo-tree-id34949 . -10) (undo-tree-id34950 . -10) (undo-tree-id34951 . -10) (undo-tree-id34952 . -10) (undo-tree-id34953 . -10) (undo-tree-id34954 . -10) (undo-tree-id34955 . -10) (undo-tree-id34956 . -10) (undo-tree-id34957 . -10) (undo-tree-id34958 . -10) (undo-tree-id34959 . -10) (undo-tree-id34960 . -10) (undo-tree-id34961 . -10) (undo-tree-id34962 . -10) (undo-tree-id34963 . -10) (undo-tree-id34964 . -10) (undo-tree-id34965 . -9) (undo-tree-id34966 . -9) (undo-tree-id34967 . -9) (undo-tree-id34968 . -9) (undo-tree-id34969 . -9) (undo-tree-id34970 . -9) (undo-tree-id34971 . -9) (undo-tree-id34972 . -9) (undo-tree-id34973 . -9) (undo-tree-id34974 . -9) (undo-tree-id34975 . -9) (undo-tree-id34976 . -9) (undo-tree-id34977 . -9) (undo-tree-id34978 . -9) (undo-tree-id34979 . -9) (undo-tree-id34980 . -9) (undo-tree-id34981 . -9) (undo-tree-id34982 . -9) (undo-tree-id34983 . -9) (undo-tree-id34984 . -9) (undo-tree-id34985 . -9) (undo-tree-id34986 . -9) (undo-tree-id34987 . -8) (undo-tree-id34988 . -8) (undo-tree-id34989 . -8) (undo-tree-id34990 . -8) (undo-tree-id34991 . -8) (undo-tree-id34992 . -8) (undo-tree-id34993 . -8) (undo-tree-id34994 . -8) (undo-tree-id34995 . -8) (undo-tree-id34996 . -8) (undo-tree-id34997 . -8) (undo-tree-id34998 . -8) (undo-tree-id34999 . -7) (undo-tree-id35000 . -7) (undo-tree-id35001 . -7) (undo-tree-id35002 . -7) (undo-tree-id35003 . -7) (undo-tree-id35004 . -7) (undo-tree-id35005 . -7) (undo-tree-id35006 . -7) (undo-tree-id35007 . -7) (undo-tree-id35008 . -7) (undo-tree-id35009 . -7) (undo-tree-id35010 . -7) (undo-tree-id35011 . -16) 6434) nil (26156 64575 341722 311000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -6273) (undo-tree-id35143 . -4) (undo-tree-id35144 . -4) (undo-tree-id35145 . -4) 6277 (6273 . 6277) (#("    " 0 4 (fontified nil)) . 6272) (undo-tree-id35146 . -4) (undo-tree-id35147 . -4) (6271 . 6277) (t 26156 64575 458875 596000)) nil (26156 64583 9468 675000) 0 nil])
([nil nil ((6273 . 6277)) nil (26156 64583 9428 87000) 0 nil])
([nil nil ((6277 . 6281) (t 26156 64583 122544 255000)) nil (26156 64626 799629 268000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6300 6306 nil nil nil nil #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil)))) #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil))) #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil))) #s(yas--exit 6322 nil) 174 nil #s(yas--field 1 6300 6306 nil nil nil nil #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil)))) nil nil)) (6296 . 6322) (#("new(${1:buffer}, ${2:height}, ${3:width})$0" 0 43 (fontified nil)) . 6296) (6296 . 6339) (#("ne" 0 2 (fontified nil)) . 6296) (6296 . 6298) (#("new(…)" 0 6 (fontified nil)) . -6296) (6296 . 6302) (#("ne" 0 2 (fontified t)) . -6296) (undo-tree-id35171 . -2) (undo-tree-id35172 . -2) (undo-tree-id35173 . -2) 6298 (6297 . 6298) (6294 . 6297) (6291 . 6294) (#("M" 0 1 (fontified nil)) . 6291) (6291 . 6292) (#("Map" 0 3 (fontified nil)) . -6291) (6291 . 6294) (#("M" 0 1 (fontified t face font-lock-type-face)) . -6291) (undo-tree-id35174 . -1) (undo-tree-id35175 . -1) 6292 (#("A" 0 1 (fontified t face font-lock-type-face)) . -6292) (undo-tree-id35176 . -1) (undo-tree-id35177 . -1) 6293 (6286 . 6293) (6284 . 6286) (6283 . 6284) (6281 . 6283)) nil (26156 64626 799621 552000) 0 nil])
([nil nil ((apply yas--snippet-revive 6296 6322 #s(yas--snippet nil (#s(yas--field 1 6300 6306 nil nil nil nil #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil)))) #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil))) #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil))) #s(yas--exit 6322 nil) 174 nil #s(yas--field 1 6300 6306 nil nil nil nil #s(yas--field 2 6308 6314 nil nil nil nil #s(yas--field 3 6316 6321 nil nil nil nil #s(yas--exit 6322 nil)))) nil nil))) nil (26156 64626 799598 849000) 0 nil])
([nil nil ((#("    let new_map = Map::new(buffer, height, width)
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t)) . 6273) (undo-tree-id35165 . -49) (undo-tree-id35166 . 23) (undo-tree-id35167 . -26) (undo-tree-id35168 . -26) (undo-tree-id35169 . -26) (undo-tree-id35170 . -27) 6299) nil (26156 64626 799595 845000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6350 . 6351) (#("
" 0 1 (fontified nil)) . -6396) (6346 . 6397)) nil (26156 64626 799581 956000) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . 6374) (undo-tree-id35164 . -5)) nil (26156 64626 799579 175000) 0 nil])
([nil nil ((6374 . 6377) (#("new" 0 3 (fontified nil)) . 6374) (6374 . 6377) (#("new" 0 3 (fontified t)) . -6374) (undo-tree-id35150 . -3) (undo-tree-id35151 . -3) 6377 (6374 . 6377) (#("v" 0 1 (fontified t)) . -6374) (undo-tree-id35152 . -1) (undo-tree-id35153 . -1) (#("e" 0 1 (fontified t)) . -6375) (undo-tree-id35154 . -1) (undo-tree-id35155 . -1) (#("c" 0 1 (fontified t)) . -6376) (undo-tree-id35156 . -1) (undo-tree-id35157 . -1) (#("!" 0 1 (fontified t)) . -6377) (undo-tree-id35158 . -1) (undo-tree-id35159 . -1) 6378 (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6378) (undo-tree-id35160 . -1) (undo-tree-id35161 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 6379) (apply yas--snippet-revive 6374 6380 #s(yas--snippet nil nil #s(yas--exit 6379 nil) 175 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6379 nil) 175 nil nil nil nil)) (6374 . 6380) (#("vec![$0]" 0 8 (fontified nil)) . 6374) (6374 . 6382) (#("ve" 0 2 (fontified nil)) . 6374) (6374 . 6376) (#("vec![…]" 0 7 (fontified nil)) . -6374) (6374 . 6381) (#("ve" 0 2 (fontified t)) . -6374) (undo-tree-id35162 . -2) (undo-tree-id35163 . -2) 6376 (6374 . 6376)) nil (26156 64626 799567 840000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . 6379) (undo-tree-id35149 . -5)) nil (26156 64626 799533 947000) 0 nil])
([nil nil ((6379 . 6383)) nil (26156 64626 799530 329000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . 6385) (undo-tree-id35148 . -4)) nil (26156 64626 799526 438000) 0 nil])
([nil nil ((6385 . 6388)) nil (26156 64626 799508 164000) 0 nil])
([nil nil ((6388 . 6389)) nil (26156 64626 799504 916000) 0 nil])
([nil nil ((6390 . 6391)) nil (26156 64626 799494 448000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -6473) (undo-tree-id35655 . -5) 6478 (6472 . 6478) (t 26156 64626 920726 786000)) nil (26156 64696 253964 763000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -6478) (undo-tree-id35635 . -1) (undo-tree-id35636 . -1) 6479 (#("e" 0 1 (fontified t)) . -6479) (undo-tree-id35637 . -1) (undo-tree-id35638 . -1) (#("w" 0 1 (fontified t)) . -6480) (undo-tree-id35639 . -1) (undo-tree-id35640 . -1) (#("." 0 1 (fontified t)) . -6481) (undo-tree-id35641 . -1) (undo-tree-id35642 . -1) (#("g" 0 1 (fontified t)) . -6482) (undo-tree-id35643 . -1) (undo-tree-id35644 . -1) (#("e" 0 1 (fontified t)) . -6483) (undo-tree-id35645 . -1) (undo-tree-id35646 . -1) 6484 (6482 . 6484) (#("s" 0 1 (fontified t)) . -6482) (undo-tree-id35647 . -1) (undo-tree-id35648 . -1) (#("e" 0 1 (fontified t)) . -6483) (undo-tree-id35649 . -1) (undo-tree-id35650 . -1) (#("t" 0 1 (fontified t)) . -6484) (undo-tree-id35651 . -1) (undo-tree-id35652 . -1) 6485 (6481 . 6485) (6478 . 6481) (#("ne" 0 2 (fontified nil)) . 6478) (6478 . 6480) (#("new" 0 3 (fontified nil)) . -6478) (6478 . 6481) (#("ne" 0 2 (fontified t)) . -6478) (undo-tree-id35653 . -2) (undo-tree-id35654 . -2) 6480 (6478 . 6480) (6473 . 6478)) nil (26156 64696 253954 22000) 0 nil])
([nil nil ((6482 . 6487) (#("g" 0 1 (fontified t)) . -6482) (undo-tree-id35623 . -1) (undo-tree-id35624 . -1) (undo-tree-id35625 . -1) (#("e" 0 1 (fontified t)) . -6483) (undo-tree-id35626 . -1) (undo-tree-id35627 . -1) (undo-tree-id35628 . -1) (#("t" 0 1 (fontified t)) . -6484) (undo-tree-id35629 . -1) (undo-tree-id35630 . -1) (undo-tree-id35631 . -1) 6485 (6482 . 6485) (6481 . 6482) (#("/" 0 1 (fontified t)) . -6481) (undo-tree-id35632 . -1) 6482 (6481 . 6482) (6478 . 6481) (#("ne" 0 2 (fontified nil)) . 6478) (6478 . 6480) (#("new" 0 3 (fontified nil)) . -6478) (6478 . 6481) (#("ne" 0 2 (fontified t)) . -6478) (undo-tree-id35633 . -2) (undo-tree-id35634 . -2) 6480 (6478 . 6480)) nil (26156 64696 253907 392000) 0 nil])
([nil nil ((6490 . 6491) (#(" " 0 1 (fontified t)) . -6490) (undo-tree-id35621 . -1) (undo-tree-id35622 . -1) 6491 (6489 . 6491) (6486 . 6489)) nil (26156 64696 253878 834000) 0 nil])
([nil nil ((6486 . 6487) (#("9" 0 1 (fontified t)) . -6486) (undo-tree-id35216 . -1) (undo-tree-id35217 . -1) (undo-tree-id35218 . -1) (undo-tree-id35219 . -1) (undo-tree-id35220 . -1) (undo-tree-id35221 . -1) (undo-tree-id35222 . -1) (undo-tree-id35223 . -1) (undo-tree-id35224 . -1) (undo-tree-id35225 . -1) (undo-tree-id35226 . -1) (undo-tree-id35227 . -1) 6487 (6486 . 6487) (#("3" 0 1 (fontified t)) . -6486) (undo-tree-id35228 . -1) (undo-tree-id35229 . -1) (undo-tree-id35230 . -1) (undo-tree-id35231 . -1) (undo-tree-id35232 . -1) (undo-tree-id35233 . -1) (undo-tree-id35234 . -1) (undo-tree-id35235 . -1) (undo-tree-id35236 . -1) (undo-tree-id35237 . -1) (undo-tree-id35238 . -1) (undo-tree-id35239 . -1) (undo-tree-id35240 . -1) (undo-tree-id35241 . -1) (undo-tree-id35242 . -1) (undo-tree-id35243 . -1) (undo-tree-id35244 . -1) (undo-tree-id35245 . -1) (undo-tree-id35246 . -1) (undo-tree-id35247 . -1) (undo-tree-id35248 . -1) (undo-tree-id35249 . -1) (undo-tree-id35250 . -1) (undo-tree-id35251 . -1) (undo-tree-id35252 . -1) (undo-tree-id35253 . -1) (undo-tree-id35254 . -1) (undo-tree-id35255 . -1) (undo-tree-id35256 . -1) (undo-tree-id35257 . -1) (undo-tree-id35258 . -1) (undo-tree-id35259 . -1) (undo-tree-id35260 . -1) (undo-tree-id35261 . -1) (undo-tree-id35262 . -1) (undo-tree-id35263 . -1) (undo-tree-id35264 . -1) (undo-tree-id35265 . -1) (undo-tree-id35266 . -1) (undo-tree-id35267 . -1) (undo-tree-id35268 . -1) (undo-tree-id35269 . -1) (undo-tree-id35270 . -1) (undo-tree-id35271 . -1) (undo-tree-id35272 . -1) (undo-tree-id35273 . -1) (undo-tree-id35274 . -1) (undo-tree-id35275 . -1) (undo-tree-id35276 . -1) (undo-tree-id35277 . -1) (undo-tree-id35278 . -1) (undo-tree-id35279 . -1) (undo-tree-id35280 . -1) (undo-tree-id35281 . -1) (undo-tree-id35282 . -1) (undo-tree-id35283 . -1) (undo-tree-id35284 . -1) (undo-tree-id35285 . -1) (undo-tree-id35286 . -1) (undo-tree-id35287 . -1) (undo-tree-id35288 . -1) (undo-tree-id35289 . -1) (undo-tree-id35290 . -1) (undo-tree-id35291 . -1) (undo-tree-id35292 . -1) (undo-tree-id35293 . -1) (undo-tree-id35294 . -1) (undo-tree-id35295 . -1) (undo-tree-id35296 . -1) (undo-tree-id35297 . -1) (undo-tree-id35298 . -1) (undo-tree-id35299 . -1) (undo-tree-id35300 . -1) (undo-tree-id35301 . -1) (undo-tree-id35302 . -1) (undo-tree-id35303 . -1) (undo-tree-id35304 . -1) (undo-tree-id35305 . -1) (undo-tree-id35306 . -1) (undo-tree-id35307 . -1) (undo-tree-id35308 . -1) (undo-tree-id35309 . -1) (undo-tree-id35310 . -1) (undo-tree-id35311 . -1) (undo-tree-id35312 . -1) (undo-tree-id35313 . -1) (undo-tree-id35314 . -1) (undo-tree-id35315 . -1) (undo-tree-id35316 . -1) (undo-tree-id35317 . -1) (undo-tree-id35318 . -1) (undo-tree-id35319 . -1) (undo-tree-id35320 . -1) (undo-tree-id35321 . -1) (undo-tree-id35322 . -1) (undo-tree-id35323 . -1) (undo-tree-id35324 . -1) (undo-tree-id35325 . -1) (undo-tree-id35326 . -1) (undo-tree-id35327 . -1) (undo-tree-id35328 . -1) (undo-tree-id35329 . -1) (undo-tree-id35330 . -1) (undo-tree-id35331 . -1) (undo-tree-id35332 . -1) (undo-tree-id35333 . -1) (undo-tree-id35334 . -1) (undo-tree-id35335 . -1) (undo-tree-id35336 . -1) (undo-tree-id35337 . -1) (#("0" 0 1 (fontified t)) . -6487) (undo-tree-id35338 . -1) (undo-tree-id35339 . -1) (undo-tree-id35340 . -1) (undo-tree-id35341 . -1) (undo-tree-id35342 . -1) (undo-tree-id35343 . -1) (undo-tree-id35344 . -1) (undo-tree-id35345 . -1) (undo-tree-id35346 . -1) (undo-tree-id35347 . -1) (undo-tree-id35348 . -1) (undo-tree-id35349 . -1) (undo-tree-id35350 . -1) (undo-tree-id35351 . -1) (undo-tree-id35352 . -1) (undo-tree-id35353 . -1) (undo-tree-id35354 . -1) (undo-tree-id35355 . -1) (undo-tree-id35356 . -1) (undo-tree-id35357 . -1) (undo-tree-id35358 . -1) (undo-tree-id35359 . -1) (undo-tree-id35360 . -1) (undo-tree-id35361 . -1) (undo-tree-id35362 . -1) (undo-tree-id35363 . -1) (undo-tree-id35364 . -1) (undo-tree-id35365 . -1) (undo-tree-id35366 . -1) (undo-tree-id35367 . -1) (undo-tree-id35368 . -1) (undo-tree-id35369 . -1) (undo-tree-id35370 . -1) (undo-tree-id35371 . -1) (undo-tree-id35372 . -1) (undo-tree-id35373 . -1) (undo-tree-id35374 . -1) (undo-tree-id35375 . -1) (undo-tree-id35376 . -1) (undo-tree-id35377 . -1) (undo-tree-id35378 . -1) (undo-tree-id35379 . -1) (undo-tree-id35380 . -1) (undo-tree-id35381 . -1) (undo-tree-id35382 . -1) (undo-tree-id35383 . -1) (undo-tree-id35384 . -1) (undo-tree-id35385 . -1) (undo-tree-id35386 . -1) (undo-tree-id35387 . -1) (undo-tree-id35388 . -1) (undo-tree-id35389 . -1) (undo-tree-id35390 . -1) (undo-tree-id35391 . -1) (undo-tree-id35392 . -1) (undo-tree-id35393 . -1) (undo-tree-id35394 . -1) (undo-tree-id35395 . -1) (undo-tree-id35396 . -1) (undo-tree-id35397 . -1) (undo-tree-id35398 . -1) (undo-tree-id35399 . -1) (undo-tree-id35400 . -1) (undo-tree-id35401 . -1) (undo-tree-id35402 . -1) (undo-tree-id35403 . -1) (undo-tree-id35404 . -1) (undo-tree-id35405 . -1) (undo-tree-id35406 . -1) (undo-tree-id35407 . -1) (undo-tree-id35408 . -1) (undo-tree-id35409 . -1) (undo-tree-id35410 . -1) (undo-tree-id35411 . -1) (undo-tree-id35412 . -1) (undo-tree-id35413 . -1) (undo-tree-id35414 . -1) (undo-tree-id35415 . -1) (undo-tree-id35416 . -1) (undo-tree-id35417 . -1) (undo-tree-id35418 . -1) (undo-tree-id35419 . -1) (undo-tree-id35420 . -1) (undo-tree-id35421 . -1) (undo-tree-id35422 . -1) (undo-tree-id35423 . -1) (undo-tree-id35424 . -1) (undo-tree-id35425 . -1) (undo-tree-id35426 . -1) (undo-tree-id35427 . -1) (undo-tree-id35428 . -1) (undo-tree-id35429 . -1) (undo-tree-id35430 . -1) (undo-tree-id35431 . -1) (undo-tree-id35432 . -1) (undo-tree-id35433 . -1) (undo-tree-id35434 . -1) (undo-tree-id35435 . -1) (undo-tree-id35436 . -1) (undo-tree-id35437 . -1) (#("0" 0 1 (fontified t)) . -6488) (undo-tree-id35438 . -1) (undo-tree-id35439 . -1) (undo-tree-id35440 . -1) (undo-tree-id35441 . -1) (undo-tree-id35442 . -1) (undo-tree-id35443 . -1) (undo-tree-id35444 . -1) (undo-tree-id35445 . -1) (undo-tree-id35446 . -1) (undo-tree-id35447 . -1) (undo-tree-id35448 . -1) (undo-tree-id35449 . -1) (undo-tree-id35450 . -1) (undo-tree-id35451 . -1) (undo-tree-id35452 . -1) (undo-tree-id35453 . -1) (undo-tree-id35454 . -1) (undo-tree-id35455 . -1) (undo-tree-id35456 . -1) (undo-tree-id35457 . -1) (undo-tree-id35458 . -1) (undo-tree-id35459 . -1) (undo-tree-id35460 . -1) (undo-tree-id35461 . -1) (undo-tree-id35462 . -1) (undo-tree-id35463 . -1) (undo-tree-id35464 . -1) (undo-tree-id35465 . -1) (undo-tree-id35466 . -1) (undo-tree-id35467 . -1) (undo-tree-id35468 . -1) (undo-tree-id35469 . -1) (undo-tree-id35470 . -1) (undo-tree-id35471 . -1) (undo-tree-id35472 . -1) (undo-tree-id35473 . -1) (undo-tree-id35474 . -1) (undo-tree-id35475 . -1) (undo-tree-id35476 . -1) (undo-tree-id35477 . -1) (undo-tree-id35478 . -1) (undo-tree-id35479 . -1) (undo-tree-id35480 . -1) (undo-tree-id35481 . -1) (undo-tree-id35482 . -1) (undo-tree-id35483 . -1) (undo-tree-id35484 . -1) (undo-tree-id35485 . -1) (undo-tree-id35486 . -1) (undo-tree-id35487 . -1) (undo-tree-id35488 . -1) (undo-tree-id35489 . -1) (undo-tree-id35490 . -1) (undo-tree-id35491 . -1) (undo-tree-id35492 . -1) (undo-tree-id35493 . -1) (undo-tree-id35494 . -1) (undo-tree-id35495 . -1) (undo-tree-id35496 . -1) (undo-tree-id35497 . -1) (undo-tree-id35498 . -1) (undo-tree-id35499 . -1) (undo-tree-id35500 . -1) (undo-tree-id35501 . -1) (undo-tree-id35502 . -1) (undo-tree-id35503 . -1) (undo-tree-id35504 . -1) (undo-tree-id35505 . -1) (undo-tree-id35506 . -1) (undo-tree-id35507 . -1) (undo-tree-id35508 . -1) (undo-tree-id35509 . -1) (undo-tree-id35510 . -1) (undo-tree-id35511 . -1) (undo-tree-id35512 . -1) (undo-tree-id35513 . -1) (undo-tree-id35514 . -1) (undo-tree-id35515 . -1) (undo-tree-id35516 . -1) (undo-tree-id35517 . -1) (undo-tree-id35518 . -1) (undo-tree-id35519 . -1) (undo-tree-id35520 . -1) (undo-tree-id35521 . -1) (undo-tree-id35522 . -1) (undo-tree-id35523 . -1) (undo-tree-id35524 . -1) (undo-tree-id35525 . -1) (undo-tree-id35526 . -1) (undo-tree-id35527 . -1) (#("+" 0 1 (fontified t)) . -6489) (undo-tree-id35528 . -1) (undo-tree-id35529 . -1) (undo-tree-id35530 . -1) (undo-tree-id35531 . -1) (undo-tree-id35532 . -1) (undo-tree-id35533 . -1) (undo-tree-id35534 . -1) (undo-tree-id35535 . -1) (undo-tree-id35536 . -1) (undo-tree-id35537 . -1) (undo-tree-id35538 . -1) (undo-tree-id35539 . -1) (undo-tree-id35540 . -1) (undo-tree-id35541 . -1) (undo-tree-id35542 . -1) (undo-tree-id35543 . -1) (undo-tree-id35544 . -1) (undo-tree-id35545 . -1) (undo-tree-id35546 . -1) (undo-tree-id35547 . -1) (undo-tree-id35548 . -1) (undo-tree-id35549 . -1) (undo-tree-id35550 . -1) (undo-tree-id35551 . -1) (undo-tree-id35552 . -1) (undo-tree-id35553 . -1) (undo-tree-id35554 . -1) (undo-tree-id35555 . -1) (undo-tree-id35556 . -1) (undo-tree-id35557 . -1) (undo-tree-id35558 . -1) (undo-tree-id35559 . -1) (undo-tree-id35560 . -1) (undo-tree-id35561 . -1) (undo-tree-id35562 . -1) (undo-tree-id35563 . -1) (undo-tree-id35564 . -1) (undo-tree-id35565 . -1) (undo-tree-id35566 . -1) (undo-tree-id35567 . -1) (undo-tree-id35568 . -1) (undo-tree-id35569 . -1) (undo-tree-id35570 . -1) (undo-tree-id35571 . -1) (undo-tree-id35572 . -1) (undo-tree-id35573 . -1) (undo-tree-id35574 . -1) (undo-tree-id35575 . -1) (undo-tree-id35576 . -1) (undo-tree-id35577 . -1) (undo-tree-id35578 . -1) (undo-tree-id35579 . -1) (undo-tree-id35580 . -1) (undo-tree-id35581 . -1) (undo-tree-id35582 . -1) (undo-tree-id35583 . -1) (undo-tree-id35584 . -1) (undo-tree-id35585 . -1) (undo-tree-id35586 . -1) (undo-tree-id35587 . -1) (undo-tree-id35588 . -1) (undo-tree-id35589 . -1) (undo-tree-id35590 . -1) (undo-tree-id35591 . -1) (undo-tree-id35592 . -1) (undo-tree-id35593 . -1) (undo-tree-id35594 . -1) (undo-tree-id35595 . -1) (undo-tree-id35596 . -1) (undo-tree-id35597 . -1) (undo-tree-id35598 . -1) (undo-tree-id35599 . -1) (undo-tree-id35600 . -1) (undo-tree-id35601 . -1) (undo-tree-id35602 . -1) (undo-tree-id35603 . -1) (undo-tree-id35604 . -1) (undo-tree-id35605 . -1) (undo-tree-id35606 . -1) (undo-tree-id35607 . -1) (#("i" 0 1 (fontified t)) . -6490) (undo-tree-id35608 . -1) (undo-tree-id35609 . -1) (undo-tree-id35610 . -1) (undo-tree-id35611 . -1) (undo-tree-id35612 . -1) (undo-tree-id35613 . -1) (undo-tree-id35614 . -1) (undo-tree-id35615 . -1) (undo-tree-id35616 . -1) (undo-tree-id35617 . -1) (undo-tree-id35618 . -1) (undo-tree-id35619 . -1) (undo-tree-id35620 . -1) 6491) nil (26156 64696 253831 490000) 0 nil])
([nil nil ((apply yas--snippet-revive 6500 6519 #s(yas--snippet nil (#s(yas--field 1 6504 6511 nil nil nil t #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil))) #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil))) #s(yas--exit 6519 nil) 176 nil #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil)) nil nil)) (6514 . 6518) (#("y" 0 1 (fontified nil)) . 6514) (undo-tree-id35204 . -1) (6513 . 6514) (6505 . 6511) (#("x" 0 1 (fontified nil)) . 6505) (undo-tree-id35205 . -1) (6504 . 6505) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6504 6511 nil nil nil t #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil))) #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil))) #s(yas--exit 6519 nil) 176 nil #s(yas--field 2 6513 6518 nil nil nil t #s(yas--exit 6519 nil)) nil nil)) (6500 . 6509) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 6500) (6500 . 6521) (#("ge" 0 2 (fontified nil)) . 6500) (6500 . 6502) (#("get(…)" 0 6 (fontified nil)) . -6500) (6500 . 6506) (#("ge" 0 2 (fontified t)) . -6500) (undo-tree-id35206 . -1) (undo-tree-id35207 . -2) (undo-tree-id35208 . -2) 6502 (6500 . 6502) (#("s" 0 1 (fontified t)) . -6500) (undo-tree-id35209 . -1) (undo-tree-id35210 . -1) (undo-tree-id35211 . -1) (#("e" 0 1 (fontified t)) . -6501) (undo-tree-id35212 . -1) (undo-tree-id35213 . -1) 6502 (6499 . 6502) (6491 . 6499) (#("ma" 0 2 (fontified nil)) . 6491) (6491 . 6493) (#("map_data" 0 8 (fontified nil)) . -6491) (6491 . 6499) (#("ma" 0 2 (fontified t)) . -6491) (undo-tree-id35214 . -2) (undo-tree-id35215 . -2) 6493 (6491 . 6493) (6487 . 6491)) nil (26156 64696 252132 528000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6531) (undo-tree-id35178 . -4) (undo-tree-id35179 . -4) (undo-tree-id35180 . -4) (undo-tree-id35181 . -4) (undo-tree-id35182 . -4) (undo-tree-id35183 . -4) (undo-tree-id35184 . -4) (undo-tree-id35185 . -4) (undo-tree-id35186 . -4) (undo-tree-id35187 . -4) (undo-tree-id35188 . -4) (undo-tree-id35189 . -4) (undo-tree-id35190 . -4) 6535 (6531 . 6535) (#("    " 0 4 (fontified nil)) . 6530) (undo-tree-id35191 . -4) (undo-tree-id35192 . -4) (undo-tree-id35193 . -4) (undo-tree-id35194 . -4) (undo-tree-id35195 . -4) (undo-tree-id35196 . -4) (undo-tree-id35197 . -4) (undo-tree-id35198 . -4) (undo-tree-id35199 . -4) (undo-tree-id35200 . -4) (undo-tree-id35201 . -4) (undo-tree-id35202 . -4) (undo-tree-id35203 . -4) (6529 . 6535)) nil (26156 64696 252088 973000) 0 nil])
([nil nil ((6481 . 6485) (t 26156 64696 374090 318000)) nil (26156 64707 688339 679000) 0 nil])
([nil nil ((6524 . 6525) (t 26156 64707 805682 983000)) nil (26156 64711 782852 944000) 0 nil])
([nil nil ((#("i,j, map_data.get(i - 300, j-300));" 0 5 (fontified t) 5 14 (fontified t) 14 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 25 (fontified t) 25 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-5-face)) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t)) . 6490) (undo-tree-id35964 . -33) (undo-tree-id35965 . -18) (undo-tree-id35966 . -34) (undo-tree-id35967 . -34) (undo-tree-id35968 . -34) (undo-tree-id35969 . -34) (undo-tree-id35970 . -34) (undo-tree-id35971 . -34) (undo-tree-id35972 . -34) (undo-tree-id35973 . -34) (undo-tree-id35974 . -34) (undo-tree-id35975 . -34) (undo-tree-id35976 . -34) (undo-tree-id35977 . -34) (undo-tree-id35978 . -34) (undo-tree-id35979 . -34) (undo-tree-id35980 . -34) (undo-tree-id35981 . -34) (undo-tree-id35982 . -34) (undo-tree-id35983 . -34) (undo-tree-id35984 . -34) (undo-tree-id35985 . -34) (undo-tree-id35986 . -34) (undo-tree-id35987 . -34) (undo-tree-id35988 . -34) (undo-tree-id35989 . -34) (undo-tree-id35990 . -34) (undo-tree-id35991 . -34) (undo-tree-id35992 . -34) (undo-tree-id35993 . -34) (undo-tree-id35994 . -34) (undo-tree-id35995 . -34) (undo-tree-id35996 . -34) (undo-tree-id35997 . -34) (undo-tree-id35998 . -34) (undo-tree-id35999 . -5) (undo-tree-id36000 . -33) (undo-tree-id36001 . -34) (undo-tree-id36002 . -34) (undo-tree-id36003 . -34) (undo-tree-id36004 . -34) (undo-tree-id36005 . -34) (undo-tree-id36006 . -34) (undo-tree-id36007 . -34) (undo-tree-id36008 . -34) (undo-tree-id36009 . -34) (undo-tree-id36010 . -34) (undo-tree-id36011 . -34) (undo-tree-id36012 . -34) (undo-tree-id36013 . -34) (undo-tree-id36014 . -34) (undo-tree-id36015 . -34) (undo-tree-id36016 . -34) (undo-tree-id36017 . -34) (undo-tree-id36018 . -34) (undo-tree-id36019 . -34) (undo-tree-id36020 . -34) (undo-tree-id36021 . -34) (undo-tree-id36022 . -34) (undo-tree-id36023 . -34) (undo-tree-id36024 . -34) (undo-tree-id36025 . -34) (undo-tree-id36026 . -34) (undo-tree-id36027 . -34) (undo-tree-id36028 . -34) (undo-tree-id36029 . -34) (undo-tree-id36030 . -34) (undo-tree-id36031 . -34) (undo-tree-id36032 . -34) (undo-tree-id36033 . -34) (undo-tree-id36034 . -34) (undo-tree-id36035 . -1) (undo-tree-id36036 . -18) (undo-tree-id36037 . -19) (undo-tree-id36038 . -35) (t 26156 64711 901538 764000)) nil (26156 64747 292616 710000) 0 nil])
([nil nil ((6523 . 6524) (apply yas--snippet-revive 6486 6523 #s(yas--snippet nil (#s(yas--field 1 6490 6491 nil nil nil t #s(yas--field 2 6493 6494 nil nil nil t #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)))) #s(yas--field 2 6493 6494 nil nil nil t #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil))) #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil))) #s(yas--exit 6523 nil) 177 nil #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)) nil nil)) (apply yas--snippet-revive 6505 6522 #s(yas--snippet nil (#s(yas--field 1 6509 6514 nil nil nil t #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil))) #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil))) #s(yas--exit 6522 nil) 178 nil #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil)) #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)) nil)) (6517 . 6521) (#("y" 0 1 (fontified nil)) . 6517) (undo-tree-id35656 . -1) (6516 . 6517) (6512 . 6514) (#("0" 0 1 (fontified t)) . -6512) (undo-tree-id35657 . -1) (undo-tree-id35658 . -1) (undo-tree-id35659 . -1) (#("9" 0 1 (fontified t)) . -6513) (undo-tree-id35660 . -1) (undo-tree-id35661 . -1) (undo-tree-id35662 . -1) 6514 (6510 . 6514) (#("x" 0 1 (fontified nil)) . 6510) (undo-tree-id35663 . -1) (6509 . 6510) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6509 6514 nil nil nil t #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil))) #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil))) #s(yas--exit 6522 nil) 178 nil #s(yas--field 2 6516 6521 nil nil nil t #s(yas--exit 6522 nil)) #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)) nil)) (6505 . 6514) (#("get(${1:x}, ${2:y})$0" 0 21 (fontified nil)) . 6505) (undo-tree-id35664 . -21) (6505 . 6526) (#("ge" 0 2 (fontified nil)) . 6505) (undo-tree-id35665 . -2) (6505 . 6507) (#("get(…)" 0 6 (fontified nil)) . -6505) (undo-tree-id35666 . -6) (6505 . 6511) (#("ge" 0 2 (fontified t)) . -6505) (undo-tree-id35667 . -1) (undo-tree-id35668 . -2) (undo-tree-id35669 . -2) (undo-tree-id35670 . -2) 6507 (6504 . 6507) (6496 . 6504) (#("ma" 0 2 (fontified nil)) . 6496) (undo-tree-id35671 . -2) (6496 . 6498) (#("map_data" 0 8 (fontified nil)) . -6496) (undo-tree-id35672 . -8) (6496 . 6504) (#("ma" 0 2 (fontified t)) . -6496) (undo-tree-id35673 . -2) (undo-tree-id35674 . -2) (undo-tree-id35675 . -2) 6498 (6497 . 6498) (#("val" 0 3 (fontified nil)) . 6497) (undo-tree-id35676 . -3) (6496 . 6497) (#("y" 0 1 (fontified nil)) . 6494) (undo-tree-id35677 . -1) (6493 . 6494) (#("x" 0 1 (fontified nil)) . 6491) (undo-tree-id35678 . -1) (6490 . 6491) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6490 6491 nil nil nil t #s(yas--field 2 6493 6494 nil nil nil t #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)))) #s(yas--field 2 6493 6494 nil nil nil t #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil))) #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil))) #s(yas--exit 6523 nil) 177 nil #s(yas--field 3 6496 6522 nil nil nil t #s(yas--exit 6523 nil)) nil nil)) (6486 . 6500) (#("set(${1:x}, ${2:y}, ${3:val})$0" 0 31 (fontified nil)) . 6486) (6486 . 6517) (#("se" 0 2 (fontified nil)) . 6486) (6486 . 6488) (#("set(…)" 0 6 (fontified nil)) . -6486) (6486 . 6492) (#("se" 0 2 (fontified t)) . -6486) (undo-tree-id35679 . -2) (undo-tree-id35680 . -2) 6488 (6486 . 6488) (#("s" 0 1 (fontified t)) . -6486) (undo-tree-id35681 . -1) (undo-tree-id35682 . -1) (undo-tree-id35683 . -1) (undo-tree-id35684 . -1) (undo-tree-id35685 . -1) (undo-tree-id35686 . -1) (undo-tree-id35687 . -1) (undo-tree-id35688 . -1) (undo-tree-id35689 . -1) (undo-tree-id35690 . -1) (undo-tree-id35691 . -1) (undo-tree-id35692 . -1) (undo-tree-id35693 . -1) (undo-tree-id35694 . -1) (undo-tree-id35695 . -1) (undo-tree-id35696 . -1) (undo-tree-id35697 . -1) (undo-tree-id35698 . -1) (undo-tree-id35699 . -1) (undo-tree-id35700 . -1) (undo-tree-id35701 . -1) (undo-tree-id35702 . -1) (undo-tree-id35703 . -1) (undo-tree-id35704 . -1) (undo-tree-id35705 . -1) (undo-tree-id35706 . -1) (undo-tree-id35707 . -1) (undo-tree-id35708 . -1) (undo-tree-id35709 . -1) (undo-tree-id35710 . -1) (undo-tree-id35711 . -1) (undo-tree-id35712 . -1) (undo-tree-id35713 . -1) (undo-tree-id35714 . -1) (undo-tree-id35715 . -1) (undo-tree-id35716 . -1) (undo-tree-id35717 . -1) (undo-tree-id35718 . -1) (undo-tree-id35719 . -1) (undo-tree-id35720 . -1) (undo-tree-id35721 . -1) (undo-tree-id35722 . -1) (undo-tree-id35723 . -1) (undo-tree-id35724 . -1) (undo-tree-id35725 . -1) (undo-tree-id35726 . -1) (undo-tree-id35727 . -1) (undo-tree-id35728 . -1) (undo-tree-id35729 . -1) (undo-tree-id35730 . -1) (undo-tree-id35731 . -1) (undo-tree-id35732 . -1) (undo-tree-id35733 . -1) (undo-tree-id35734 . -1) (undo-tree-id35735 . -1) (undo-tree-id35736 . -1) (undo-tree-id35737 . -1) (undo-tree-id35738 . -1) (undo-tree-id35739 . -1) (undo-tree-id35740 . -1) (undo-tree-id35741 . -1) (undo-tree-id35742 . -1) (undo-tree-id35743 . -1) (undo-tree-id35744 . -1) (undo-tree-id35745 . -1) (undo-tree-id35746 . -1) (undo-tree-id35747 . -1) (undo-tree-id35748 . -1) (undo-tree-id35749 . -1) (undo-tree-id35750 . -1) (undo-tree-id35751 . -1) (#("e" 0 1 (fontified t)) . -6487) (undo-tree-id35752 . -1) (undo-tree-id35753 . -1) (undo-tree-id35754 . -1) (undo-tree-id35755 . -1) (undo-tree-id35756 . -1) (undo-tree-id35757 . -1) (undo-tree-id35758 . -1) (undo-tree-id35759 . -1) (undo-tree-id35760 . -1) (undo-tree-id35761 . -1) (undo-tree-id35762 . -1) (undo-tree-id35763 . -1) (undo-tree-id35764 . -1) (undo-tree-id35765 . -1) (undo-tree-id35766 . -1) (undo-tree-id35767 . -1) (undo-tree-id35768 . -1) (undo-tree-id35769 . -1) (undo-tree-id35770 . -1) (undo-tree-id35771 . -1) (undo-tree-id35772 . -1) (undo-tree-id35773 . -1) (undo-tree-id35774 . -1) (undo-tree-id35775 . -1) (undo-tree-id35776 . -1) (undo-tree-id35777 . -1) (undo-tree-id35778 . -1) (undo-tree-id35779 . -1) (undo-tree-id35780 . -1) (undo-tree-id35781 . -1) (undo-tree-id35782 . -1) (undo-tree-id35783 . -1) (undo-tree-id35784 . -1) (undo-tree-id35785 . -1) (undo-tree-id35786 . -1) (undo-tree-id35787 . -1) (undo-tree-id35788 . -1) (undo-tree-id35789 . -1) (undo-tree-id35790 . -1) (undo-tree-id35791 . -1) (undo-tree-id35792 . -1) (undo-tree-id35793 . -1) (undo-tree-id35794 . -1) (undo-tree-id35795 . -1) (undo-tree-id35796 . -1) (undo-tree-id35797 . -1) (undo-tree-id35798 . -1) (undo-tree-id35799 . -1) (undo-tree-id35800 . -1) (undo-tree-id35801 . -1) (undo-tree-id35802 . -1) (undo-tree-id35803 . -1) (undo-tree-id35804 . -1) (undo-tree-id35805 . -1) (undo-tree-id35806 . -1) (undo-tree-id35807 . -1) (undo-tree-id35808 . -1) (undo-tree-id35809 . -1) (undo-tree-id35810 . -1) (undo-tree-id35811 . -1) (undo-tree-id35812 . -1) (undo-tree-id35813 . -1) (undo-tree-id35814 . -1) (undo-tree-id35815 . -1) (undo-tree-id35816 . -1) (undo-tree-id35817 . -1) (undo-tree-id35818 . -1) (undo-tree-id35819 . -1) (undo-tree-id35820 . -1) (undo-tree-id35821 . -1) (undo-tree-id35822 . -1) (#("t" 0 1 (fontified t)) . -6488) (undo-tree-id35823 . -1) (undo-tree-id35824 . -1) (undo-tree-id35825 . -1) (undo-tree-id35826 . -1) (undo-tree-id35827 . -1) (undo-tree-id35828 . -1) (undo-tree-id35829 . -1) (undo-tree-id35830 . -1) (undo-tree-id35831 . -1) (undo-tree-id35832 . -1) (undo-tree-id35833 . -1) (undo-tree-id35834 . -1) (undo-tree-id35835 . -1) (undo-tree-id35836 . -1) (undo-tree-id35837 . -1) (undo-tree-id35838 . -1) (undo-tree-id35839 . -1) (undo-tree-id35840 . -1) (undo-tree-id35841 . -1) (undo-tree-id35842 . -1) (undo-tree-id35843 . -1) (undo-tree-id35844 . -1) (undo-tree-id35845 . -1) (undo-tree-id35846 . -1) (undo-tree-id35847 . -1) (undo-tree-id35848 . -1) (undo-tree-id35849 . -1) (undo-tree-id35850 . -1) (undo-tree-id35851 . -1) (undo-tree-id35852 . -1) (undo-tree-id35853 . -1) (undo-tree-id35854 . -1) (undo-tree-id35855 . -1) (undo-tree-id35856 . -1) (undo-tree-id35857 . -1) (undo-tree-id35858 . -1) (undo-tree-id35859 . -1) (undo-tree-id35860 . -1) (undo-tree-id35861 . -1) (undo-tree-id35862 . -1) (undo-tree-id35863 . -1) (undo-tree-id35864 . -1) (undo-tree-id35865 . -1) (undo-tree-id35866 . -1) (undo-tree-id35867 . -1) (undo-tree-id35868 . -1) (undo-tree-id35869 . -1) (undo-tree-id35870 . -1) (undo-tree-id35871 . -1) (undo-tree-id35872 . -1) (undo-tree-id35873 . -1) (undo-tree-id35874 . -1) (undo-tree-id35875 . -1) (undo-tree-id35876 . -1) (undo-tree-id35877 . -1) (undo-tree-id35878 . -1) (undo-tree-id35879 . -1) (undo-tree-id35880 . -1) (undo-tree-id35881 . -1) (undo-tree-id35882 . -1) (undo-tree-id35883 . -1) (undo-tree-id35884 . -1) (undo-tree-id35885 . -1) (undo-tree-id35886 . -1) (undo-tree-id35887 . -1) (undo-tree-id35888 . -1) (undo-tree-id35889 . -1) (undo-tree-id35890 . -1) (undo-tree-id35891 . -1) (undo-tree-id35892 . -1) (undo-tree-id35893 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -6489) (undo-tree-id35894 . -1) (undo-tree-id35895 . -1) (undo-tree-id35896 . -1) (undo-tree-id35897 . -1) (undo-tree-id35898 . -1) (undo-tree-id35899 . -1) (undo-tree-id35900 . -1) (undo-tree-id35901 . -1) (undo-tree-id35902 . -1) (undo-tree-id35903 . -1) (undo-tree-id35904 . -1) (undo-tree-id35905 . -1) (undo-tree-id35906 . -1) (undo-tree-id35907 . -1) (undo-tree-id35908 . -1) (undo-tree-id35909 . -1) (undo-tree-id35910 . -1) (undo-tree-id35911 . -1) (undo-tree-id35912 . -1) (undo-tree-id35913 . -1) (undo-tree-id35914 . -1) (undo-tree-id35915 . -1) (undo-tree-id35916 . -1) (undo-tree-id35917 . -1) (undo-tree-id35918 . -1) (undo-tree-id35919 . -1) (undo-tree-id35920 . -1) (undo-tree-id35921 . -1) (undo-tree-id35922 . -1) (undo-tree-id35923 . -1) (undo-tree-id35924 . -1) (undo-tree-id35925 . -1) (undo-tree-id35926 . -1) (undo-tree-id35927 . -1) (undo-tree-id35928 . -1) (undo-tree-id35929 . -1) (undo-tree-id35930 . -1) (undo-tree-id35931 . -1) (undo-tree-id35932 . -1) (undo-tree-id35933 . -1) (undo-tree-id35934 . -1) (undo-tree-id35935 . -1) (undo-tree-id35936 . -1) (undo-tree-id35937 . -1) (undo-tree-id35938 . -1) (undo-tree-id35939 . -1) (undo-tree-id35940 . -1) (undo-tree-id35941 . -1) (undo-tree-id35942 . -1) (undo-tree-id35943 . -1) (undo-tree-id35944 . -1) (undo-tree-id35945 . -1) (undo-tree-id35946 . -1) (undo-tree-id35947 . -1) (undo-tree-id35948 . -1) (undo-tree-id35949 . -1) (undo-tree-id35950 . -1) (undo-tree-id35951 . -1) (undo-tree-id35952 . -1) (undo-tree-id35953 . -1) (undo-tree-id35954 . -1) (undo-tree-id35955 . -1) (undo-tree-id35956 . -1) (undo-tree-id35957 . -1) (undo-tree-id35958 . -1) (undo-tree-id35959 . -1) (undo-tree-id35960 . -1) (undo-tree-id35961 . -1) (undo-tree-id35962 . -1) (undo-tree-id35963 . -1) 6490) nil (26156 64747 292417 841000) 0 nil])
([nil nil ((apply yas--snippet-revive 6523 6531 #s(yas--snippet nil nil #s(yas--exit 6531 nil) 179 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6531 nil) 179 nil nil nil nil)) (6523 . 6531) (#("unwrap()$0" 0 10 (fontified nil)) . 6523) (6523 . 6533) (#("un" 0 2 (fontified nil)) . 6523) (6523 . 6525) (#("unwrap()" 0 8 (fontified nil)) . -6523) (6523 . 6531) (#("un" 0 2 (fontified t)) . -6523) (undo-tree-id36039 . -1) (undo-tree-id36040 . -2) (undo-tree-id36041 . -2) (undo-tree-id36042 . -2) (undo-tree-id36043 . -2) (undo-tree-id36044 . -2) (undo-tree-id36045 . -2) (undo-tree-id36046 . -2) (undo-tree-id36047 . -2) (undo-tree-id36048 . -2) (undo-tree-id36049 . -2) (undo-tree-id36050 . -2) (undo-tree-id36051 . -2) (undo-tree-id36052 . -2) (undo-tree-id36053 . -2) 6525 (6522 . 6525) (t 26156 64747 408325 566000)) nil (26156 64750 60566 525000) 0 nil])
([nil nil ((6355 . 6359) (t 26156 64750 152234 497000)) nil (26156 64759 307133 661000) 0 nil])
([nil nil ((apply yas--snippet-revive 6560 6568 #s(yas--snippet nil nil #s(yas--exit 6568 nil) 180 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6568 nil) 180 nil nil nil nil)) (6560 . 6568) (#("to_pgm()$0" 0 10 (fontified nil)) . 6560) (6560 . 6570) (#("to" 0 2 (fontified nil)) . 6560) (6560 . 6562) (#("to_pgm()" 0 8 (fontified nil)) . -6560) (6560 . 6568) (#("to" 0 2 (fontified t)) . -6560) (undo-tree-id36060 . -2) (undo-tree-id36061 . -2) (undo-tree-id36062 . -2) 6562 (6560 . 6562) (6559 . 6560) (6552 . 6559) (#("new" 0 3 (fontified nil)) . 6552) (6552 . 6555) (#("new_map" 0 7 (fontified nil)) . -6552) (6552 . 6559) (#("new" 0 3 (fontified t)) . -6552) (undo-tree-id36063 . -3) (undo-tree-id36064 . -3) (undo-tree-id36065 . -3) 6555 (6554 . 6555) (6552 . 6554) (6548 . 6552) (#("    " 0 4 (fontified nil)) . 6547) (undo-tree-id36066 . -4) (6551 . 6552) (6547 . 6551) (t 26156 64759 423929 551000)) nil (26156 64788 621165 831000) 0 nil])
([nil nil ((6563 . 6564) (6579 . 6580) (6557 . 6563) (6552 . 6557)) nil (26156 64788 621142 451000) 0 nil])
([nil nil ((6616 . 6623) (6610 . 6616) (6609 . 6611) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6609) (#("path" 0 4 (fontified nil)) . 6610) (6609 . 6610) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6609 6624 nil nil nil t #s(yas--exit 6625 nil))) #s(yas--exit 6625 nil) 181 nil #s(yas--field 1 6609 6624 nil nil nil t #s(yas--exit 6625 nil)) nil nil)) (6593 . 6614) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 6593) (6593 . 6621) (#("wr" 0 2 (fontified nil)) . 6593) (6593 . 6595) (#("write_as_binary(…)" 0 18 (fontified nil)) . -6593) (6593 . 6611) (#("wr" 0 2 (fontified t)) . -6593) (undo-tree-id36054 . -1) (undo-tree-id36055 . -2) (undo-tree-id36056 . -2) 6595 (6594 . 6595) (6592 . 6594) (6587 . 6592) (#("ima" 0 3 (fontified nil)) . 6587) (6587 . 6590) (#("image" 0 5 (fontified nil)) . -6587) (6587 . 6592) (#("ima" 0 3 (fontified t)) . -6587) (undo-tree-id36057 . -3) (undo-tree-id36058 . -3) 6590 (6587 . 6590) (6583 . 6587) (#("    " 0 4 (fontified nil)) . 6582) (undo-tree-id36059 . -4) (6581 . 6587)) nil (26156 64788 621130 783000) 0 nil])
([nil nil ((6625 . 6626) (apply yas--snippet-revive 6593 6625 #s(yas--snippet nil (#s(yas--field 1 6609 6624 nil nil nil t #s(yas--exit 6625 nil))) #s(yas--exit 6625 nil) 181 nil #s(yas--field 1 6609 6624 nil nil nil t #s(yas--exit 6625 nil)) nil nil))) nil (26156 64788 621078 188000) 0 nil])
([nil nil ((#(" let particles_list: Vec<Particle>  = Vec::new();


    let mut new: Vec<u8> = Vec::new() ;

    let mbuf = cat.get_buffer();


    for i in 0..1000 {
	for j in 0..1000 {
	    new.push(224);
	}
    }

    let mut new_map = Map::new(new, 1000, 1000);

    for i in 300..map_data.width + 300 {
	for j in 300..map_data.height + 300 {
	    new_map.set(i, j, map_data.get(i-300, j-300).unwrap());
	}
    }

    let image = new_map.to_pgm();

    image.write_as_binary(\"bettermap.pgm\");

    " 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 19 (fontified t face font-lock-variable-name-face) 19 21 (fontified t) 21 24 (fontified t face font-lock-type-face) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 33 (fontified t face font-lock-type-face) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 38 (fontified t) 38 41 (fontified t face font-lock-type-face) 41 43 (fontified t) 43 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 56 (fontified t) 56 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 63 (fontified t face font-lock-keyword-face) 63 64 (fontified t) 64 67 (fontified t face font-lock-variable-name-face) 67 69 (fontified t) 69 72 (fontified t face font-lock-type-face) 72 73 (fontified t face (rainbow-delimiters-depth-2-face)) 73 75 (fontified t face font-lock-type-face) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 79 (fontified t) 79 82 (fontified t face font-lock-type-face) 82 84 (fontified t) 84 87 (fontified t) 87 88 (fontified t face (rainbow-delimiters-depth-2-face)) 88 89 (fontified t face (rainbow-delimiters-depth-2-face)) 89 92 (fontified t) 92 93 (fontified t) 93 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 105 (fontified t face font-lock-variable-name-face) 105 112 (fontified t) 112 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-2-face)) 123 124 (fontified t face (rainbow-delimiters-depth-2-face)) 124 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 132 (fontified t) 132 135 (fontified t face font-lock-keyword-face) 135 136 (fontified t) 136 137 (fontified t face font-lock-variable-name-face) 137 138 (fontified t) 138 140 (fontified t face font-lock-keyword-face) 140 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-2-face)) 150 151 (fontified t) 151 152 (fontified t) 152 155 (fontified t face font-lock-keyword-face) 155 156 (fontified t) 156 157 (fontified t face font-lock-variable-name-face) 157 158 (fontified t) 158 160 (fontified t face font-lock-keyword-face) 160 169 (fontified t) 169 170 (fontified t face (rainbow-delimiters-depth-3-face)) 170 171 (fontified t) 171 176 (fontified t) 176 180 (fontified t) 180 184 (fontified t) 184 185 (fontified t face (rainbow-delimiters-depth-4-face)) 185 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-4-face)) 189 190 (fontified t) 190 191 (fontified t) 191 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-3-face)) 193 194 (fontified t) 194 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-2-face)) 199 200 (fontified t) 200 201 (fontified t) 201 204 (fontified t) 204 205 (rear-nonsticky t fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 220 (fontified t face font-lock-variable-name-face) 220 223 (fontified t) 223 226 (fontified t face font-lock-type-face) 226 228 (fontified t) 228 231 (fontified t) 231 232 (fontified t face (rainbow-delimiters-depth-2-face)) 232 235 (fontified t) 235 247 (fontified t) 247 248 (fontified t face (rainbow-delimiters-depth-2-face)) 248 249 (fontified t) 249 250 (fontified t) 250 251 (fontified t) 251 255 (fontified t) 255 258 (fontified t face font-lock-keyword-face) 258 259 (fontified t) 259 260 (fontified t face font-lock-variable-name-face) 260 261 (fontified t) 261 263 (fontified t face font-lock-keyword-face) 263 269 (fontified t) 269 278 (fontified t) 278 290 (fontified t) 290 291 (fontified t face (rainbow-delimiters-depth-2-face)) 291 292 (fontified t) 292 293 (fontified t) 293 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 298 (fontified t face font-lock-variable-name-face) 298 299 (fontified t) 299 301 (fontified t face font-lock-keyword-face) 301 307 (fontified t) 307 316 (fontified t) 316 329 (fontified t) 329 330 (fontified t face (rainbow-delimiters-depth-3-face)) 330 331 (fontified t) 331 336 (fontified t) 336 344 (fontified t) 344 347 (fontified t) 347 348 (fontified t face (rainbow-delimiters-depth-4-face)) 348 349 (fontified t) 349 354 (fontified t) 354 363 (fontified t) 363 366 (fontified t) 366 367 (fontified t face (rainbow-delimiters-depth-5-face)) 367 372 (fontified t) 372 379 (fontified t) 379 380 (fontified t face (rainbow-delimiters-depth-5-face)) 380 381 (fontified t) 381 387 (fontified t) 387 388 (fontified t face (rainbow-delimiters-depth-5-face)) 388 389 (fontified t face (rainbow-delimiters-depth-5-face)) 389 390 (fontified t face (rainbow-delimiters-depth-4-face)) 390 391 (fontified t) 391 392 (fontified t) 392 393 (fontified t) 393 394 (fontified t face (rainbow-delimiters-depth-3-face)) 394 395 (fontified t) 395 399 (fontified t) 399 400 (fontified t face (rainbow-delimiters-depth-2-face)) 400 401 (fontified t) 401 402 (fontified t) 402 406 (fontified t) 406 409 (fontified t face font-lock-keyword-face) 409 410 (fontified t) 410 415 (fontified t face font-lock-variable-name-face) 415 418 (fontified t) 418 425 (fontified t) 425 426 (fontified t) 426 432 (fontified t) 432 433 (fontified t face (rainbow-delimiters-depth-2-face)) 433 434 (fontified t face (rainbow-delimiters-depth-2-face)) 434 436 (fontified t) 436 437 (fontified t) 437 441 (fontified t) 441 447 (fontified t) 447 462 (fontified t) 462 463 (fontified t face (rainbow-delimiters-depth-2-face)) 463 478 (fontified t face font-lock-string-face) 478 479 (fontified t face (rainbow-delimiters-depth-2-face)) 479 480 (fontified t) 480 481 (fontified t) 481 482 (fontified t) 482 486 (fontified t)) . 6146) (undo-tree-id36067 . -485) (undo-tree-id36068 . -485) (undo-tree-id36069 . 6) (undo-tree-id36070 . -485) (undo-tree-id36071 . -194) (undo-tree-id36072 . -479) (undo-tree-id36073 . -463) (undo-tree-id36074 . 9) (undo-tree-id36075 . -485) (undo-tree-id36076 . -5) (undo-tree-id36077 . -19) (undo-tree-id36078 . -5) (undo-tree-id36079 . -19) (undo-tree-id36080 . -101) (undo-tree-id36081 . -105) (undo-tree-id36082 . -101) (undo-tree-id36083 . -105) (undo-tree-id36084 . -136) (undo-tree-id36085 . -137) (undo-tree-id36086 . -136) (undo-tree-id36087 . -137) (undo-tree-id36088 . -156) (undo-tree-id36089 . -157) (undo-tree-id36090 . -156) (undo-tree-id36091 . -157) (undo-tree-id36092 . -441) (undo-tree-id36093 . -479) (undo-tree-id36094 . -441) (undo-tree-id36095 . -442) (undo-tree-id36096 . -485) (undo-tree-id36097 . -485) (undo-tree-id36098 . -485) (undo-tree-id36099 . -485) (undo-tree-id36100 . -485) (undo-tree-id36101 . -485) (undo-tree-id36102 . -485) (undo-tree-id36103 . -485) (undo-tree-id36104 . -485) (undo-tree-id36105 . -485) (undo-tree-id36106 . -485) (undo-tree-id36107 . -486) (undo-tree-id36108 . -485) (undo-tree-id36109 . -485) (undo-tree-id36110 . -485) (undo-tree-id36111 . -485) (undo-tree-id36112 . -485) (undo-tree-id36113 . -485) (undo-tree-id36114 . -485) (undo-tree-id36115 . -485) (undo-tree-id36116 . -485) (undo-tree-id36117 . -485) (undo-tree-id36118 . -485) (undo-tree-id36119 . -485) (undo-tree-id36120 . -481) (undo-tree-id36121 . -481) (undo-tree-id36122 . -481) (undo-tree-id36123 . -481) (undo-tree-id36124 . -481) (undo-tree-id36125 . -481) (undo-tree-id36126 . -481) (undo-tree-id36127 . -481) (undo-tree-id36128 . -481) (undo-tree-id36129 . -481) (undo-tree-id36130 . -481) (undo-tree-id36131 . -481) (undo-tree-id36132 . -481) (undo-tree-id36133 . -481) (undo-tree-id36134 . -481) (undo-tree-id36135 . -481) (undo-tree-id36136 . -481) (undo-tree-id36137 . -481) (undo-tree-id36138 . -481) (undo-tree-id36139 . -481) (undo-tree-id36140 . -481) (undo-tree-id36141 . -481) (undo-tree-id36142 . -481) (undo-tree-id36143 . -481) (undo-tree-id36144 . -481) (undo-tree-id36145 . -481) (undo-tree-id36146 . -481) (undo-tree-id36147 . -481) (undo-tree-id36148 . -481) (undo-tree-id36149 . -481) (undo-tree-id36150 . -481) (undo-tree-id36151 . -440) (undo-tree-id36152 . -440) (undo-tree-id36153 . -440) (undo-tree-id36154 . -440) (undo-tree-id36155 . -440) (undo-tree-id36156 . -440) (undo-tree-id36157 . -440) (undo-tree-id36158 . -440) (undo-tree-id36159 . -440) (undo-tree-id36160 . -436) (undo-tree-id36161 . -436) (undo-tree-id36162 . -436) (undo-tree-id36163 . -436) (undo-tree-id36164 . -436) (undo-tree-id36165 . -436) (undo-tree-id36166 . -436) (undo-tree-id36167 . -436) (undo-tree-id36168 . -436) (undo-tree-id36169 . -405) (undo-tree-id36170 . -405) (undo-tree-id36171 . -405) (undo-tree-id36172 . -405) (undo-tree-id36173 . -405) (undo-tree-id36174 . -405) (undo-tree-id36175 . -405) (undo-tree-id36176 . -405) (undo-tree-id36177 . -405) (undo-tree-id36178 . -401) (undo-tree-id36179 . -401) (undo-tree-id36180 . -401) (undo-tree-id36181 . -401) (undo-tree-id36182 . -401) (undo-tree-id36183 . -401) (undo-tree-id36184 . -401) (undo-tree-id36185 . -401) (undo-tree-id36186 . -401) (undo-tree-id36187 . -398) (undo-tree-id36188 . -398) (undo-tree-id36189 . -398) (undo-tree-id36190 . -398) (undo-tree-id36191 . -398) (undo-tree-id36192 . -398) (undo-tree-id36193 . -398) (undo-tree-id36194 . -398) (undo-tree-id36195 . -398) (undo-tree-id36196 . -393) (undo-tree-id36197 . -393) (undo-tree-id36198 . -393) (undo-tree-id36199 . -393) (undo-tree-id36200 . -393) (undo-tree-id36201 . -393) (undo-tree-id36202 . -393) (undo-tree-id36203 . -393) (undo-tree-id36204 . -393) (undo-tree-id36205 . -332) (undo-tree-id36206 . -332) (undo-tree-id36207 . -332) (undo-tree-id36208 . -332) (undo-tree-id36209 . -332) (undo-tree-id36210 . -332) (undo-tree-id36211 . -332) (undo-tree-id36212 . -332) (undo-tree-id36213 . -332) (undo-tree-id36214 . -293) (undo-tree-id36215 . -293) (undo-tree-id36216 . -293) (undo-tree-id36217 . -293) (undo-tree-id36218 . -293) (undo-tree-id36219 . -293) (undo-tree-id36220 . -293) (undo-tree-id36221 . -293) (undo-tree-id36222 . -293) (undo-tree-id36223 . -254) (undo-tree-id36224 . -254) (undo-tree-id36225 . -254) (undo-tree-id36226 . -254) (undo-tree-id36227 . -254) (undo-tree-id36228 . -254) (undo-tree-id36229 . -254) (undo-tree-id36230 . -254) (undo-tree-id36231 . -254) (undo-tree-id36232 . -250) (undo-tree-id36233 . -250) (undo-tree-id36234 . -250) (undo-tree-id36235 . -250) (undo-tree-id36236 . -250) (undo-tree-id36237 . -250) (undo-tree-id36238 . -250) (undo-tree-id36239 . -250) (undo-tree-id36240 . -250) (undo-tree-id36241 . -204) (undo-tree-id36242 . -204) (undo-tree-id36243 . -204) (undo-tree-id36244 . -204) (undo-tree-id36245 . -204) (undo-tree-id36246 . -204) (undo-tree-id36247 . -204) (undo-tree-id36248 . -204) (undo-tree-id36249 . -204) (undo-tree-id36250 . -200) (undo-tree-id36251 . -200) (undo-tree-id36252 . -200) (undo-tree-id36253 . -200) (undo-tree-id36254 . -200) (undo-tree-id36255 . -200) (undo-tree-id36256 . -200) (undo-tree-id36257 . -200) (undo-tree-id36258 . -200) (undo-tree-id36259 . -197) (undo-tree-id36260 . -197) (undo-tree-id36261 . -197) (undo-tree-id36262 . -197) (undo-tree-id36263 . -197) (undo-tree-id36264 . -197) (undo-tree-id36265 . -197) (undo-tree-id36266 . -197) (undo-tree-id36267 . -197) (undo-tree-id36268 . -192) (undo-tree-id36269 . -192) (undo-tree-id36270 . -192) (undo-tree-id36271 . -192) (undo-tree-id36272 . -192) (undo-tree-id36273 . -192) (undo-tree-id36274 . -192) (undo-tree-id36275 . -192) (undo-tree-id36276 . -192) (undo-tree-id36277 . -192) (undo-tree-id36278 . -172) (undo-tree-id36279 . -172) (undo-tree-id36280 . -172) (undo-tree-id36281 . -172) (undo-tree-id36282 . -172) (undo-tree-id36283 . -172) (undo-tree-id36284 . -172) (undo-tree-id36285 . -172) (undo-tree-id36286 . -172) (undo-tree-id36287 . -152) (undo-tree-id36288 . -152) (undo-tree-id36289 . -152) (undo-tree-id36290 . -152) (undo-tree-id36291 . -152) (undo-tree-id36292 . -152) (undo-tree-id36293 . -152) (undo-tree-id36294 . -152) (undo-tree-id36295 . -152) (undo-tree-id36296 . -131) (undo-tree-id36297 . -131) (undo-tree-id36298 . -131) (undo-tree-id36299 . -131) (undo-tree-id36300 . -131) (undo-tree-id36301 . -131) (undo-tree-id36302 . -131) (undo-tree-id36303 . -131) (undo-tree-id36304 . -131) (undo-tree-id36305 . -127) (undo-tree-id36306 . -127) (undo-tree-id36307 . -127) (undo-tree-id36308 . -127) (undo-tree-id36309 . -127) (undo-tree-id36310 . -127) (undo-tree-id36311 . -127) (undo-tree-id36312 . -127) (undo-tree-id36313 . -127) (undo-tree-id36314 . -126) (undo-tree-id36315 . -126) (undo-tree-id36316 . -126) (undo-tree-id36317 . -126) (undo-tree-id36318 . -126) (undo-tree-id36319 . -126) (undo-tree-id36320 . -126) (undo-tree-id36321 . -126) (undo-tree-id36322 . -126) (undo-tree-id36323 . -96) (undo-tree-id36324 . -96) (undo-tree-id36325 . -96) (undo-tree-id36326 . -96) (undo-tree-id36327 . -96) (undo-tree-id36328 . -96) (undo-tree-id36329 . -96) (undo-tree-id36330 . -96) (undo-tree-id36331 . -96) (undo-tree-id36332 . -92) (undo-tree-id36333 . -92) (undo-tree-id36334 . -92) (undo-tree-id36335 . -92) (undo-tree-id36336 . -92) (undo-tree-id36337 . -92) (undo-tree-id36338 . -92) (undo-tree-id36339 . -92) (undo-tree-id36340 . -92) (undo-tree-id36341 . -55) (undo-tree-id36342 . -55) (undo-tree-id36343 . -55) (undo-tree-id36344 . -55) (undo-tree-id36345 . -55) (undo-tree-id36346 . -55) (undo-tree-id36347 . -55) (undo-tree-id36348 . -55) (undo-tree-id36349 . -55) (undo-tree-id36350 . -51) (undo-tree-id36351 . -51) (undo-tree-id36352 . -51) (undo-tree-id36353 . -51) (undo-tree-id36354 . -51) (undo-tree-id36355 . -51) (undo-tree-id36356 . -51) (undo-tree-id36357 . -51) (undo-tree-id36358 . -51) (undo-tree-id36359 . -51) (undo-tree-id36360 . -51) (undo-tree-id36361 . -51) (undo-tree-id36362 . -51) (undo-tree-id36363 . -51) (undo-tree-id36364 . -51) (undo-tree-id36365 . -51) (undo-tree-id36366 . -51) (undo-tree-id36367 . -51) (undo-tree-id36368 . -51) (undo-tree-id36369 . -51) (undo-tree-id36370 . -51) (undo-tree-id36371 . -51) (undo-tree-id36372 . -51) (undo-tree-id36373 . -51) (undo-tree-id36374 . -51) (undo-tree-id36375 . -51) (undo-tree-id36376 . -51) (undo-tree-id36377 . -51) (undo-tree-id36378 . -51) (undo-tree-id36379 . -51) (undo-tree-id36380 . -51) (undo-tree-id36381 . -51) (undo-tree-id36382 . -51) (undo-tree-id36383 . -51) (undo-tree-id36384 . -51) (undo-tree-id36385 . -51) (undo-tree-id36386 . -51) (undo-tree-id36387 . -51) (undo-tree-id36388 . -51) (undo-tree-id36389 . -51) (undo-tree-id36390 . -51) (undo-tree-id36391 . -50) (undo-tree-id36392 . -50) (undo-tree-id36393 . -50) (undo-tree-id36394 . -50) (undo-tree-id36395 . -50) (undo-tree-id36396 . -50) (undo-tree-id36397 . -50) (undo-tree-id36398 . -50) (undo-tree-id36399 . -50) (undo-tree-id36400 . -50) (undo-tree-id36401 . -50) (undo-tree-id36402 . -50) (undo-tree-id36403 . -50) (undo-tree-id36404 . -50) (undo-tree-id36405 . -50) (undo-tree-id36406 . -50) (undo-tree-id36407 . -50) (undo-tree-id36408 . -50) (undo-tree-id36409 . -51) (undo-tree-id36410 . -51) (undo-tree-id36411 . -51) (undo-tree-id36412 . -51) (undo-tree-id36413 . -51) (undo-tree-id36414 . -51) (undo-tree-id36415 . -51) (undo-tree-id36416 . -51) (undo-tree-id36417 . -51) (undo-tree-id36418 . -50) (undo-tree-id36419 . -50) (undo-tree-id36420 . -50) (undo-tree-id36421 . -50) (undo-tree-id36422 . -50) (undo-tree-id36423 . -50) (undo-tree-id36424 . -50) (undo-tree-id36425 . -50) (undo-tree-id36426 . -50) (undo-tree-id36427 . -486) (t 26156 64788 710993 575000)) nil (26156 64852 874033 341000) 0 nil])
([nil nil ((#("saved" 0 5 (fontified t face font-lock-string-face)) . 5976) (undo-tree-id36428 . -4) (t 26156 64852 965076 19000)) nil (26156 64863 372531 802000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 5976)) nil (26156 64863 372511 428000) 0 nil])
([nil nil ((5979 . 5982) (5976 . 5979)) nil (26156 64863 372499 540000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6142) (undo-tree-id36429 . -4) (undo-tree-id36430 . -4) (undo-tree-id36431 . -4) (undo-tree-id36432 . -4) (undo-tree-id36433 . -4) (undo-tree-id36434 . -4) (undo-tree-id36435 . -4) (undo-tree-id36436 . -4) (undo-tree-id36437 . -4) (undo-tree-id36438 . -4) (undo-tree-id36439 . -4) (undo-tree-id36440 . -4) (undo-tree-id36441 . -4) (undo-tree-id36442 . -4) (undo-tree-id36443 . -4) (undo-tree-id36444 . -4) (undo-tree-id36445 . -4) (undo-tree-id36446 . -4) (undo-tree-id36447 . -4) (undo-tree-id36448 . -4) (undo-tree-id36449 . -4) (undo-tree-id36450 . -4) (undo-tree-id36451 . -4) (undo-tree-id36452 . -4) (undo-tree-id36453 . -4) (undo-tree-id36454 . -4) (undo-tree-id36455 . -4) (undo-tree-id36456 . -4) (undo-tree-id36457 . -4) (undo-tree-id36458 . -4) (undo-tree-id36459 . -4) (undo-tree-id36460 . -4) (undo-tree-id36461 . -4) (undo-tree-id36462 . -4) (undo-tree-id36463 . -4) 6146 (6142 . 6146) (#("    " 0 4 (fontified nil)) . 6141) (6141 . 6145) (6141 . 6142) (t 26156 64863 492778 479000)) nil (26156 64876 251038 690000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t)) . -6142) (undo-tree-id36464 . -1) (undo-tree-id36465 . -1) (undo-tree-id36466 . -1) (undo-tree-id36467 . -1) (undo-tree-id36468 . -1) (undo-tree-id36469 . -1) (undo-tree-id36470 . -1) (undo-tree-id36471 . -1) (undo-tree-id36472 . -1) (undo-tree-id36473 . -1) (undo-tree-id36474 . -1) (undo-tree-id36475 . -1) (undo-tree-id36476 . -1) (undo-tree-id36477 . -1) (undo-tree-id36478 . -1) (undo-tree-id36479 . -1) (undo-tree-id36480 . -1) (undo-tree-id36481 . -1) (undo-tree-id36482 . -1) (undo-tree-id36483 . -1) (undo-tree-id36484 . -1) (undo-tree-id36485 . -1) (undo-tree-id36486 . -1) (undo-tree-id36487 . -1) (undo-tree-id36488 . -1) (undo-tree-id36489 . -1) (undo-tree-id36490 . -1) (undo-tree-id36491 . -1) (undo-tree-id36492 . -1) (undo-tree-id36493 . -1) (undo-tree-id36494 . -1) (undo-tree-id36495 . -1) (undo-tree-id36496 . -1) (undo-tree-id36497 . -1) (undo-tree-id36498 . -1) (undo-tree-id36499 . -1) (undo-tree-id36500 . -1) (undo-tree-id36501 . -1) (undo-tree-id36502 . -1) (undo-tree-id36503 . -1) (undo-tree-id36504 . -1) (undo-tree-id36505 . -1) (undo-tree-id36506 . -1) (undo-tree-id36507 . -1) (undo-tree-id36508 . -1) (undo-tree-id36509 . -1) 6143 (6142 . 6143) (t 26156 64876 336421 459000)) nil (26156 65212 728462 565000) 0 nil])
([nil nil ((5874 . 5879) (#("us" 0 2 (fontified nil)) . 5874) (5874 . 5876) (#("usize" 0 5 (fontified nil)) . -5874) (5874 . 5879) (#("us" 0 2 (fontified t)) . -5874) (undo-tree-id36510 . -2) (undo-tree-id36511 . -2) (undo-tree-id36512 . -2) (undo-tree-id36513 . -1) (undo-tree-id36514 . -1) (undo-tree-id36515 . -1) (undo-tree-id36516 . -1) (undo-tree-id36517 . -1) (undo-tree-id36518 . -1) (undo-tree-id36519 . -1) (undo-tree-id36520 . -1) (undo-tree-id36521 . -1) (undo-tree-id36522 . -1) (undo-tree-id36523 . -1) (undo-tree-id36524 . -1) (undo-tree-id36525 . -1) (undo-tree-id36526 . -1) (undo-tree-id36527 . -1) (undo-tree-id36528 . -1) (undo-tree-id36529 . -1) (undo-tree-id36530 . -1) (undo-tree-id36531 . -1) (undo-tree-id36532 . -1) (undo-tree-id36533 . -1) (undo-tree-id36534 . -1) (undo-tree-id36535 . -1) (undo-tree-id36536 . -1) (undo-tree-id36537 . -1) (undo-tree-id36538 . -1) (undo-tree-id36539 . -1) (undo-tree-id36540 . -1) (undo-tree-id36541 . -1) (undo-tree-id36542 . -1) (undo-tree-id36543 . -1) (undo-tree-id36544 . -1) (undo-tree-id36545 . -1) (undo-tree-id36546 . -1) (undo-tree-id36547 . -1) (undo-tree-id36548 . -1) (undo-tree-id36549 . -1) (undo-tree-id36550 . -1) (undo-tree-id36551 . -1) (undo-tree-id36552 . -1) (undo-tree-id36553 . -1) (undo-tree-id36554 . -1) (undo-tree-id36555 . -1) (undo-tree-id36556 . -1) (undo-tree-id36557 . -1) (undo-tree-id36558 . -1) (undo-tree-id36559 . -1) (undo-tree-id36560 . -1) (undo-tree-id36561 . -1) (undo-tree-id36562 . -1) (undo-tree-id36563 . -1) (undo-tree-id36564 . -1) (undo-tree-id36565 . -1) (undo-tree-id36566 . -1) (undo-tree-id36567 . -1) (undo-tree-id36568 . -1) (undo-tree-id36569 . -1) (undo-tree-id36570 . -1) (undo-tree-id36571 . -1) (undo-tree-id36572 . -1) (undo-tree-id36573 . -1) (undo-tree-id36574 . -1) (undo-tree-id36575 . -1) (undo-tree-id36576 . -1) (undo-tree-id36577 . -1) (undo-tree-id36578 . -1) (undo-tree-id36579 . -1) (undo-tree-id36580 . -1) (undo-tree-id36581 . -1) (undo-tree-id36582 . -1) (undo-tree-id36583 . -1) (undo-tree-id36584 . -1) (undo-tree-id36585 . -1) (undo-tree-id36586 . -1) (undo-tree-id36587 . -1) (undo-tree-id36588 . -1) (undo-tree-id36589 . -1) (undo-tree-id36590 . -1) (undo-tree-id36591 . -1) (undo-tree-id36592 . -1) (undo-tree-id36593 . -1) (undo-tree-id36594 . -1) (undo-tree-id36595 . -1) (undo-tree-id36596 . -1) (undo-tree-id36597 . -1) (undo-tree-id36598 . -1) (undo-tree-id36599 . -1) (undo-tree-id36600 . -1) (undo-tree-id36601 . -1) (undo-tree-id36602 . -1) (undo-tree-id36603 . -1) (undo-tree-id36604 . -1) (undo-tree-id36605 . -1) (undo-tree-id36606 . -1) (undo-tree-id36607 . -1) (undo-tree-id36608 . -1) (undo-tree-id36609 . -1) (undo-tree-id36610 . -1) (undo-tree-id36611 . -1) (undo-tree-id36612 . -1) (undo-tree-id36613 . -1) (undo-tree-id36614 . -1) (undo-tree-id36615 . -1) (undo-tree-id36616 . -2) (undo-tree-id36617 . -2) (undo-tree-id36618 . -2) (undo-tree-id36619 . -2) (undo-tree-id36620 . -2) (undo-tree-id36621 . -2) (undo-tree-id36622 . -2) (undo-tree-id36623 . -2) (undo-tree-id36624 . -2) (undo-tree-id36625 . -2) (undo-tree-id36626 . -2) (undo-tree-id36627 . -2) (undo-tree-id36628 . -2) (undo-tree-id36629 . -2) (undo-tree-id36630 . -2) (undo-tree-id36631 . -2) (undo-tree-id36632 . -2) (undo-tree-id36633 . -2) (undo-tree-id36634 . -2) (undo-tree-id36635 . -2) (undo-tree-id36636 . -2) (undo-tree-id36637 . -2) (undo-tree-id36638 . -2) (undo-tree-id36639 . -2) (undo-tree-id36640 . -2) (undo-tree-id36641 . -2) (undo-tree-id36642 . -2) (undo-tree-id36643 . -2) (undo-tree-id36644 . -2) (undo-tree-id36645 . -2) (undo-tree-id36646 . -2) 5876 (5864 . 5876) (t 26156 65212 824944 665000)) nil (26156 65236 740370 163000) 0 nil])
([nil nil ((5908 . 5909) (5909 . 5913) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5908) (5908 . 5909) (5907 . 5909) (5905 . 5908) (5899 . 5905) (#("nu" 0 2 (fontified nil)) . 5899) (5899 . 5901) (#("number" 0 6 (fontified nil)) . -5899) (5899 . 5905) (#("nu" 0 2 (fontified t)) . -5899) (undo-tree-id36860 . -2) (undo-tree-id36861 . -2) (undo-tree-id36862 . -2) 5901 (5897 . 5901) (5896 . 5897) (#("n" 0 1 (fontified t)) . -5896) (undo-tree-id36863 . -1) (undo-tree-id36864 . -1) (undo-tree-id36865 . -1) (#("u" 0 1 (fontified t)) . -5897) (undo-tree-id36866 . -1) (undo-tree-id36867 . -1) (undo-tree-id36868 . -1) 5898 (5888 . 5898) (#("p" 0 1 (fontified t)) . -5888) (undo-tree-id36869 . -1) (#("o" 0 1 (fontified t)) . -5889) (undo-tree-id36870 . -1) (#("r" 0 1 (fontified t)) . -5890) (undo-tree-id36871 . -1) (#(" " 0 1 (fontified t)) . -5891) (undo-tree-id36872 . -1) 5892 (5887 . 5892) (t 26156 65236 856519 260000)) nil (26156 65319 556334 14000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5911) (undo-tree-id36858 . -1) (undo-tree-id36859 . -1) 5912 (5911 . 5912) (5909 . 5911) 5908) nil (26156 65319 556295 619000) 0 nil])
([nil nil ((5910 . 5911) (#("	" 0 1 (fontified nil)) . 5909) (undo-tree-id36856 . -1) (5909 . 5911) (#("	" 0 1 (fontified nil)) . 5908) (undo-tree-id36857 . -1) (5909 . 5910)) nil (26156 65319 556284 179000) 0 nil])
([nil nil ((5909 . 5910)) nil (26156 65319 556277 770000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 5911) (undo-tree-id36854 . -1) (undo-tree-id36855 . -2)) nil (26156 65319 556275 558000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 5909) (undo-tree-id36851 . -1) (undo-tree-id36852 . 1) (undo-tree-id36853 . -2)) nil (26156 65319 556269 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5908) (undo-tree-id36850 . -1)) nil (26156 65319 556261 828000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -5909) (undo-tree-id36841 . -1) (#("o" 0 1 (fontified t)) . -5910) (undo-tree-id36842 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -5911) (undo-tree-id36843 . -1) (#(" " 0 1 (fontified t)) . -5912) (undo-tree-id36844 . -1) (#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -5913) (undo-tree-id36845 . -1) (#(" " 0 1 (fontified t)) . -5914) (undo-tree-id36846 . -1) (#("i" 0 1 (fontified t)) . -5915) (undo-tree-id36847 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -5916) (undo-tree-id36848 . -1) (#(" " 0 1 (fontified t)) . -5917) (undo-tree-id36849 . -1) 5918 (5909 . 5918)) nil (26156 65319 556254 34000) 0 nil])
([nil nil ((apply yas--snippet-revive 5914 5975 #s(yas--snippet nil (#s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil))) #s(yas--exit 5975 nil) 182 nil #s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil)) nil nil)) (apply yas--snippet-revive 5929 5974 #s(yas--snippet nil (#s(yas--field 1 5936 5944 nil nil nil t #s(yas--field 2 5946 5953 nil nil nil t #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))))) #s(yas--field 2 5946 5953 nil nil nil t #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil)))) #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))) #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))) #s(yas--exit 5974 nil) 183 nil #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil)) #s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil)) nil)) (5970 . 5973) (#("rad" 0 3 (fontified nil)) . 5970) (undo-tree-id36647 . -3) (5970 . 5973) (#("rad" 0 3 (fontified t)) . -5970) (undo-tree-id36648 . -3) (undo-tree-id36649 . -3) (undo-tree-id36650 . -3) (undo-tree-id36651 . -1) (undo-tree-id36652 . -1) (undo-tree-id36653 . -1) (undo-tree-id36654 . -1) (undo-tree-id36655 . -1) (undo-tree-id36656 . -1) (undo-tree-id36657 . -1) (undo-tree-id36658 . -1) (undo-tree-id36659 . -1) (undo-tree-id36660 . -1) (undo-tree-id36661 . -1) (undo-tree-id36662 . -1) (undo-tree-id36663 . -1) (undo-tree-id36664 . -1) (undo-tree-id36665 . -1) (undo-tree-id36666 . -1) (undo-tree-id36667 . -1) (undo-tree-id36668 . -1) (undo-tree-id36669 . -1) (undo-tree-id36670 . -1) (undo-tree-id36671 . -1) (undo-tree-id36672 . -1) (undo-tree-id36673 . -1) (undo-tree-id36674 . -1) (undo-tree-id36675 . -1) (undo-tree-id36676 . -1) (undo-tree-id36677 . -1) (undo-tree-id36678 . -2) (undo-tree-id36679 . -2) (undo-tree-id36680 . -2) (undo-tree-id36681 . -2) (undo-tree-id36682 . -2) (undo-tree-id36683 . -2) (undo-tree-id36684 . -2) (undo-tree-id36685 . -2) (undo-tree-id36686 . -2) (undo-tree-id36687 . -3) (undo-tree-id36688 . -3) (undo-tree-id36689 . -3) (undo-tree-id36690 . -3) (undo-tree-id36691 . -3) (undo-tree-id36692 . -3) (undo-tree-id36693 . -3) (undo-tree-id36694 . -3) (undo-tree-id36695 . -3) (undo-tree-id36696 . -3) (undo-tree-id36697 . -3) (undo-tree-id36698 . -3) (undo-tree-id36699 . -3) (undo-tree-id36700 . -3) (undo-tree-id36701 . -3) (undo-tree-id36702 . -3) (undo-tree-id36703 . -3) (undo-tree-id36704 . -3) (undo-tree-id36705 . -3) (undo-tree-id36706 . -3) (undo-tree-id36707 . -3) (undo-tree-id36708 . -3) (undo-tree-id36709 . -3) (undo-tree-id36710 . -3) (undo-tree-id36711 . -3) (undo-tree-id36712 . -3) (undo-tree-id36713 . -3) (undo-tree-id36714 . -3) (undo-tree-id36715 . -3) (undo-tree-id36716 . -3) (undo-tree-id36717 . -3) (undo-tree-id36718 . -3) (undo-tree-id36719 . -3) (undo-tree-id36720 . -3) (undo-tree-id36721 . -3) (undo-tree-id36722 . -3) (undo-tree-id36723 . -3) (undo-tree-id36724 . -3) (undo-tree-id36725 . -3) (undo-tree-id36726 . -3) (undo-tree-id36727 . -3) (undo-tree-id36728 . -3) (undo-tree-id36729 . -3) (undo-tree-id36730 . -3) (undo-tree-id36731 . -3) (undo-tree-id36732 . -3) (undo-tree-id36733 . -3) (undo-tree-id36734 . -3) (undo-tree-id36735 . -3) (undo-tree-id36736 . -3) (undo-tree-id36737 . -3) (undo-tree-id36738 . -3) (undo-tree-id36739 . -3) (undo-tree-id36740 . -3) (undo-tree-id36741 . -3) (undo-tree-id36742 . -3) (undo-tree-id36743 . -3) (undo-tree-id36744 . -3) (undo-tree-id36745 . -3) (undo-tree-id36746 . -3) (undo-tree-id36747 . -3) (undo-tree-id36748 . -3) (undo-tree-id36749 . -3) (undo-tree-id36750 . -3) (undo-tree-id36751 . -3) (undo-tree-id36752 . -3) (undo-tree-id36753 . -3) (undo-tree-id36754 . -3) (undo-tree-id36755 . -3) (undo-tree-id36756 . -3) (undo-tree-id36757 . -3) (undo-tree-id36758 . -3) (undo-tree-id36759 . -3) (undo-tree-id36760 . -3) (undo-tree-id36761 . -3) (undo-tree-id36762 . -3) (undo-tree-id36763 . -3) (undo-tree-id36764 . -3) (undo-tree-id36765 . -3) (undo-tree-id36766 . -3) (undo-tree-id36767 . -3) (undo-tree-id36768 . -3) (undo-tree-id36769 . -3) (undo-tree-id36770 . -3) (undo-tree-id36771 . -3) 5973 (5966 . 5973) (#("ymax" 0 4 (fontified nil)) . 5966) (undo-tree-id36772 . -4) (5965 . 5966) (5960 . 5963) (#("rad" 0 3 (fontified nil)) . 5960) (undo-tree-id36773 . -3) (5960 . 5963) (#("rad" 0 3 (fontified t)) . -5960) (undo-tree-id36774 . -3) (undo-tree-id36775 . -3) (undo-tree-id36776 . -3) 5963 (5956 . 5963) (5955 . 5956) (#("r" 0 1 (fontified t)) . -5955) (undo-tree-id36777 . -1) (undo-tree-id36778 . -1) (undo-tree-id36779 . -1) 5956 (5955 . 5956) (#("x" 0 1 (fontified t)) . -5955) (undo-tree-id36780 . -1) (undo-tree-id36781 . -1) (undo-tree-id36782 . -1) (undo-tree-id36783 . -1) (#("c" 0 1 (fontified t)) . -5956) (undo-tree-id36784 . -1) (undo-tree-id36785 . -1) (undo-tree-id36786 . -1) (#(" " 0 1 (fontified t)) . -5957) (undo-tree-id36787 . -1) (undo-tree-id36788 . -1) (undo-tree-id36789 . -1) (#("-" 0 1 (fontified t)) . -5958) (undo-tree-id36790 . -1) (undo-tree-id36791 . -1) (undo-tree-id36792 . -1) (#(" " 0 1 (fontified t)) . -5959) (undo-tree-id36793 . -1) (undo-tree-id36794 . -1) (undo-tree-id36795 . -1) (#("r" 0 1 (fontified t)) . -5960) (undo-tree-id36796 . -1) (undo-tree-id36797 . -1) (undo-tree-id36798 . -1) (#("a" 0 1 (fontified t)) . -5961) (undo-tree-id36799 . -1) (undo-tree-id36800 . -1) (undo-tree-id36801 . -1) (#("d" 0 1 (fontified t)) . -5962) (undo-tree-id36802 . -1) (undo-tree-id36803 . -1) (undo-tree-id36804 . -1) 5963 (5957 . 5963) (#("-" 0 1 (fontified t)) . -5957) (undo-tree-id36805 . -1) (undo-tree-id36806 . -1) (undo-tree-id36807 . -1) 5958 (5956 . 5958) (#("v" 0 1 (fontified t)) . -5956) (undo-tree-id36808 . -1) (undo-tree-id36809 . -1) (undo-tree-id36810 . -1) 5957 (5956 . 5957) (#("ymin" 0 4 (fontified nil)) . 5956) (undo-tree-id36811 . -4) (5955 . 5956) (5950 . 5953) (#("ra" 0 2 (fontified nil)) . 5950) (undo-tree-id36812 . -2) (5950 . 5952) (#("rad" 0 3 (fontified t)) . -5950) (undo-tree-id36813 . -3) (undo-tree-id36814 . -3) (undo-tree-id36815 . -3) 5953 (5952 . 5953) (5947 . 5952) (#("v" 0 1 (fontified t)) . -5947) (undo-tree-id36816 . -1) (undo-tree-id36817 . -1) (undo-tree-id36818 . -1) 5948 (5947 . 5948) (#("xmax" 0 4 (fontified nil)) . 5947) (undo-tree-id36819 . -4) (5946 . 5947) (5941 . 5944) (#("rad" 0 3 (fontified nil)) . 5941) (undo-tree-id36820 . -3) (5941 . 5944) (#("rad" 0 3 (fontified t)) . -5941) (undo-tree-id36821 . -3) (undo-tree-id36822 . -3) (undo-tree-id36823 . -3) 5944 (5937 . 5944) (#("xmin" 0 4 (fontified nil)) . 5937) (undo-tree-id36824 . -4) (5936 . 5937) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5936 5944 nil nil nil t #s(yas--field 2 5946 5953 nil nil nil t #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))))) #s(yas--field 2 5946 5953 nil nil nil t #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil)))) #s(yas--field 3 5955 5963 nil nil nil t #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))) #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil))) #s(yas--exit 5974 nil) 183 nil #s(yas--field 4 5965 5973 nil nil nil t #s(yas--exit 5974 nil)) #s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil)) nil)) (5929 . 5959) (#("random(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})$0" 0 52 (fontified nil)) . 5929) (undo-tree-id36825 . -52) (5929 . 5981) (#("ran" 0 3 (fontified nil)) . 5929) (undo-tree-id36826 . -3) (5929 . 5932) (#("random(…)" 0 9 (fontified nil)) . -5929) (undo-tree-id36827 . -9) (5929 . 5938) (#("ran" 0 3 (fontified t)) . -5929) (undo-tree-id36828 . -1) (undo-tree-id36829 . -3) (undo-tree-id36830 . -3) (undo-tree-id36831 . -3) 5932 (5927 . 5932) (5919 . 5927) (#("Par" 0 3 (fontified nil)) . 5919) (undo-tree-id36832 . -3) (5919 . 5922) (#("Particle" 0 8 (fontified nil)) . -5919) (undo-tree-id36833 . -8) (5919 . 5927) (#("Par" 0 3 (fontified t face font-lock-type-face)) . -5919) (undo-tree-id36834 . -1) (undo-tree-id36835 . -3) (undo-tree-id36836 . -3) (undo-tree-id36837 . -3) 5922 (5920 . 5922) (#("value" 0 5 (fontified nil)) . 5920) (undo-tree-id36838 . -5) (5919 . 5920) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil))) #s(yas--exit 5975 nil) 182 nil #s(yas--field 1 5919 5974 nil nil nil t #s(yas--exit 5975 nil)) nil nil)) (5914 . 5925) (#("push(${1:value})$0" 0 18 (fontified nil)) . 5914) (5914 . 5932) (#("pu" 0 2 (fontified nil)) . 5914) (5914 . 5916) (#("push(…)" 0 7 (fontified nil)) . -5914) (5914 . 5921) (#("pu" 0 2 (fontified t)) . -5914) (undo-tree-id36839 . -2) (undo-tree-id36840 . -2) 5916 (5909 . 5916)) nil (26156 65319 556192 488000) 0 nil])
([nil nil ((5975 . 5976)) nil (26156 65319 555189 719000) 0 nil])
([nil nil ((6253 . 6257) (t 26156 65319 647135 733000)) nil (26157 2473 921444 669000) 0 nil])
([nil nil ((6252 . 6256)) nil (26157 2473 921441 981000) 0 nil])
([nil nil ((6276 . 6286) (6256 . 6276) (#("l" 0 1 (fontified t)) . -6256) (undo-tree-id36904 . -1) (#("e" 0 1 (fontified t)) . -6257) (undo-tree-id36905 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -6258) (undo-tree-id36906 . -1) (#(" " 0 1 (fontified t)) . -6259) (undo-tree-id36907 . -1) 6260 (6256 . 6260)) nil (26157 2473 921436 923000) 0 nil])
([nil nil ((6307 . 6320) (#("pa" 0 2 (fontified nil)) . 6307) (6307 . 6309) (#("particle_list" 0 13 (fontified nil)) . -6307) (6307 . 6320) (#("pa" 0 2 (fontified t)) . -6307) (undo-tree-id36880 . -2) (undo-tree-id36881 . -2) 6309 (6308 . 6309) (#("list" 0 4 (fontified nil)) . 6308) (6307 . 6308) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6307 6320 nil nil nil t #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil)))))) #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))))) #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil)))) #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))) #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))) #s(yas--exit 6342 nil) 184 nil #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))))) nil nil)) (6293 . 6333) (#("add_particles(${1:list}, ${2:xc}, ${3:yc}, ${4:rad}, ${5:number})$0" 0 67 (fontified nil)) . 6293) (6293 . 6360) (#("ad" 0 2 (fontified nil)) . 6293) (6293 . 6295) (#("add_particles(…)" 0 16 (fontified nil)) . -6293) (6293 . 6309) (#("ad" 0 2 (fontified t)) . -6293) (undo-tree-id36882 . -2) (undo-tree-id36883 . -2) 6295 (6293 . 6295) (#("p" 0 1 (fontified t)) . -6293) (undo-tree-id36884 . -1) (undo-tree-id36885 . -1) (undo-tree-id36886 . -1) (#("a" 0 1 (fontified t)) . -6294) (undo-tree-id36887 . -1) (undo-tree-id36888 . -1) (undo-tree-id36889 . -1) 6295 (6293 . 6295) (6292 . 6293) (#(" " 0 1 (fontified t)) . -6292) (undo-tree-id36890 . -1) (undo-tree-id36891 . -1) (undo-tree-id36892 . -1) (#("p" 0 1 (fontified t)) . -6293) (undo-tree-id36893 . -1) (undo-tree-id36894 . -1) (undo-tree-id36895 . -1) (#("a" 0 1 (fontified t)) . -6294) (undo-tree-id36896 . -1) (undo-tree-id36897 . -1) (undo-tree-id36898 . -1) 6295 (6293 . 6295) (#("p" 0 1 (fontified t)) . -6293) (undo-tree-id36899 . -1) (undo-tree-id36900 . -1) (#("a" 0 1 (fontified t)) . -6294) (undo-tree-id36901 . -1) (undo-tree-id36902 . -1) 6295 (6293 . 6295) (6289 . 6293) (#("    " 0 4 (fontified nil)) . 6288) (undo-tree-id36903 . -4) (6287 . 6293) (6286 . 6287)) nil (26157 2473 921413 581000) 0 nil])
([nil nil ((apply yas--snippet-revive 6293 6342 #s(yas--snippet nil (#s(yas--field 1 6307 6320 nil nil nil t #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil)))))) #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))))) #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil)))) #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))) #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))) #s(yas--exit 6342 nil) 184 nil #s(yas--field 2 6322 6324 nil nil nil nil #s(yas--field 3 6326 6328 nil nil nil nil #s(yas--field 4 6330 6333 nil nil nil nil #s(yas--field 5 6335 6341 nil nil nil nil #s(yas--exit 6342 nil))))) nil nil))) nil (26157 2473 921352 523000) 0 nil])
([nil nil ((6311 . 6312) (6307 . 6311)) nil (26157 2473 921349 478000) 0 nil])
([nil nil ((#("xc" 0 2 (fontified t)) . 6327) (undo-tree-id36879 . -1)) nil (26157 2473 921346 544000) 0 nil])
([nil nil ((6327 . 6330)) nil (26157 2473 921343 433000) 0 nil])
([nil nil ((#("yc" 0 2 (fontified t)) . 6332) (undo-tree-id36877 . -1) (undo-tree-id36878 . -2)) nil (26157 2473 921341 307000) 0 nil])
([nil nil ((6332 . 6335)) nil (26157 2473 921336 68000) 0 nil])
([nil nil ((#("rad" 0 3 (fontified t)) . 6337) (undo-tree-id36875 . -2) (undo-tree-id36876 . -3)) nil (26157 2473 921333 449000) 0 nil])
([nil nil ((6337 . 6339)) nil (26157 2473 921327 277000) 0 nil])
([nil nil ((#("number" 0 6 (fontified t)) . 6341) (undo-tree-id36873 . -5) (undo-tree-id36874 . -6)) nil (26157 2473 921323 299000) 0 nil])
([nil nil ((6341 . 6344)) nil (26157 2473 921302 913000) 0 nil])
([nil nil ((6345 . 6346)) nil (26157 2473 921292 657000) 0 nil])
([nil nil ((6260 . 6264) (t 26157 2474 11738 968000)) nil (26157 2483 150862 448000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6353) (undo-tree-id36947 . -4) 6357 (6353 . 6357) (#("    " 0 4 (fontified nil)) . 6352) (undo-tree-id36948 . -4) (6352 . 6357) (#("    " 0 4 (fontified nil)) . 6351) (undo-tree-id36949 . -4) (6355 . 6356) (t 26157 2483 247976 725000)) nil (26157 2540 126039 633000) 0 nil])
([nil nil ((6388 . 6389) (6389 . 6393) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6388) (6388 . 6389) (6387 . 6389) (6385 . 6388) (6372 . 6385) (#("pa" 0 2 (fontified nil)) . 6372) (6372 . 6374) (#("particle_list" 0 13 (fontified nil)) . -6372) (6372 . 6385) (#("pa" 0 2 (fontified t)) . -6372) (undo-tree-id36945 . -2) (undo-tree-id36946 . -2) 6374 (6357 . 6374) (6356 . 6357) (6352 . 6356)) nil (26157 2540 125559 811000) 0 nil])
([nil nil ((6445 . 6446) (apply yas--snippet-revive 6398 6445 #s(yas--snippet nil (#s(yas--field 1 6419 6429 nil nil nil t #s(yas--field 2 6431 6441 nil nil nil t #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil)))) #s(yas--field 2 6431 6441 nil nil nil t #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil))) #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil))) #s(yas--exit 6445 nil) 185 nil #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil)) nil nil)) (#("rad" 0 3 (fontified nil)) . 6444) (undo-tree-id36908 . -3) (6443 . 6444) (6440 . 6441) (#("y" 0 1 (fontified t)) . -6440) (undo-tree-id36909 . -1) (undo-tree-id36910 . -1) (undo-tree-id36911 . -1) 6441 (6439 . 6441) (6431 . 6439) (#("pa" 0 2 (fontified nil)) . 6431) (undo-tree-id36912 . -2) (6431 . 6433) (#("particle" 0 8 (fontified nil)) . -6431) (undo-tree-id36913 . -8) (6431 . 6439) (#("pa" 0 2 (fontified t)) . -6431) (undo-tree-id36914 . -2) (undo-tree-id36915 . -2) (undo-tree-id36916 . -2) (undo-tree-id36917 . -2) 6433 (6432 . 6433) (#("y" 0 1 (fontified nil)) . 6432) (undo-tree-id36918 . -1) (6431 . 6432) (6428 . 6429) (#("x" 0 1 (fontified nil)) . -6428) (undo-tree-id36919 . -1) (6428 . 6429) (6427 . 6428) (6419 . 6427) (#("pa" 0 2 (fontified nil)) . 6419) (undo-tree-id36920 . -2) (6419 . 6421) (#("particle" 0 8 (fontified nil)) . -6419) (undo-tree-id36921 . -8) (6419 . 6427) (#("pa" 0 2 (fontified t)) . -6419) (undo-tree-id36922 . -2) (undo-tree-id36923 . -2) (undo-tree-id36924 . -2) (undo-tree-id36925 . -2) 6421 (6420 . 6421) (#("x" 0 1 (fontified nil)) . 6420) (undo-tree-id36926 . -1) (6419 . 6420) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6419 6429 nil nil nil t #s(yas--field 2 6431 6441 nil nil nil t #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil)))) #s(yas--field 2 6431 6441 nil nil nil t #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil))) #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil))) #s(yas--exit 6445 nil) 185 nil #s(yas--field 3 6443 6444 nil nil nil t #s(yas--exit 6445 nil)) nil nil)) (6398 . 6429) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 6398) (6398 . 6446) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -6398) (6398 . 6421) (#("r" 0 1 (fontified t)) . -6398) (undo-tree-id36927 . -1) (undo-tree-id36928 . -1) (undo-tree-id36929 . -1) (#("e" 0 1 (fontified t)) . -6399) (undo-tree-id36930 . -1) (undo-tree-id36931 . -1) (undo-tree-id36932 . -1) 6400 (6398 . 6400) (6397 . 6398) (#("." 0 1 (fontified t)) . -6397) (undo-tree-id36933 . -1) (undo-tree-id36934 . -1) (undo-tree-id36935 . -1) (#("a" 0 1 (fontified t)) . -6398) (undo-tree-id36936 . -1) (undo-tree-id36937 . -1) (undo-tree-id36938 . -1) (#("d" 0 1 (fontified t)) . -6399) (undo-tree-id36939 . -1) (undo-tree-id36940 . -1) (#("d" 0 1 (fontified t)) . -6400) (undo-tree-id36941 . -1) (undo-tree-id36942 . -1) 6401 (6400 . 6401) (6397 . 6400) (6389 . 6397) (#("map" 0 3 (fontified nil)) . 6389) (6389 . 6392) (#("map_data" 0 8 (fontified nil)) . -6389) (6389 . 6397) (#("map" 0 3 (fontified t)) . -6389) (undo-tree-id36943 . -3) (undo-tree-id36944 . -3) 6392 (6389 . 6392)) nil (26157 2540 125523 244000) 0 nil])
([nil nil ((6197 . 6201) (t 26157 2540 221424 21000)) nil (26157 2548 504574 578000) 0 nil])
([nil nil ((6513 . 6514) (apply yas--snippet-revive 6481 6513 #s(yas--snippet nil (#s(yas--field 1 6497 6512 nil nil nil t #s(yas--exit 6513 nil))) #s(yas--exit 6513 nil) 187 nil #s(yas--field 1 6497 6512 nil nil nil t #s(yas--exit 6513 nil)) nil nil)) (6508 . 6511) (6498 . 6508) (6497 . 6499) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6497) (undo-tree-id36994 . -1) (#("path" 0 4 (fontified nil)) . 6498) (undo-tree-id36995 . -4) (6497 . 6498) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6497 6512 nil nil nil t #s(yas--exit 6513 nil))) #s(yas--exit 6513 nil) 187 nil #s(yas--field 1 6497 6512 nil nil nil t #s(yas--exit 6513 nil)) nil nil)) (6481 . 6502) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 6481) (6481 . 6509) (#("w" 0 1 (fontified nil)) . 6481) (6481 . 6482) (#("write_as_binary(…)" 0 18 (fontified nil)) . -6481) (6481 . 6499) (#("w" 0 1 (fontified t)) . -6481) (undo-tree-id36996 . -1) (undo-tree-id36997 . -1) (undo-tree-id36998 . -1) 6482 (6480 . 6482) (apply yas--snippet-revive 6472 6480 #s(yas--snippet nil nil #s(yas--exit 6480 nil) 186 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6480 nil) 186 nil nil nil nil)) (6472 . 6480) (#("to_pgm()$0" 0 10 (fontified nil)) . 6472) (6472 . 6482) (#("tp" 0 2 (fontified nil)) . 6472) (6472 . 6474) (#("to_pgm()" 0 8 (fontified nil)) . -6472) (6472 . 6480) (#("tp" 0 2 (fontified t)) . -6472) (undo-tree-id36999 . -2) (undo-tree-id37000 . -2) (undo-tree-id37001 . -2) 6474 (6472 . 6474) (#("t" 0 1 (fontified t)) . -6472) (undo-tree-id37002 . -1) (undo-tree-id37003 . -1) (undo-tree-id37004 . -1) (#("o" 0 1 (fontified t)) . -6473) (undo-tree-id37005 . -1) (undo-tree-id37006 . -1) (undo-tree-id37007 . -1) 6474 (6471 . 6474) (6463 . 6471) (#("map" 0 3 (fontified nil)) . 6463) (6463 . 6466) (#("map_data" 0 8 (fontified nil)) . -6463) (6463 . 6471) (#("map" 0 3 (fontified t)) . -6463) (undo-tree-id37008 . -3) (undo-tree-id37009 . -3) 6466 (6463 . 6466) (6459 . 6463) (#("    " 0 4 (fontified nil)) . 6458) (undo-tree-id37010 . -3) (undo-tree-id37011 . -3) (undo-tree-id37012 . -3) (undo-tree-id37013 . -4) (6462 . 6463) (6461 . 6462) 6460 (t 26157 2548 625634 837000)) nil (26157 2572 386059 721000) 0 nil])
([nil nil ((apply yas--snippet-revive 6514 6522 #s(yas--snippet nil nil #s(yas--exit 6522 nil) 188 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6522 nil) 188 nil nil nil nil)) (6514 . 6522) (#("unwrap()$0" 0 10 (fontified nil)) . 6514) (6514 . 6524) (#("un" 0 2 (fontified nil)) . 6514) (6514 . 6516) (#("unwrap()" 0 8 (fontified nil)) . -6514) (6514 . 6522) (#("un" 0 2 (fontified t)) . -6514) (undo-tree-id36950 . -2) (undo-tree-id36951 . -2) (undo-tree-id36952 . -2) (undo-tree-id36953 . -1) (undo-tree-id36954 . -1) (undo-tree-id36955 . -1) (undo-tree-id36956 . -1) (undo-tree-id36957 . -1) (undo-tree-id36958 . -1) (undo-tree-id36959 . -1) (undo-tree-id36960 . -1) (undo-tree-id36961 . -1) (undo-tree-id36962 . -2) (undo-tree-id36963 . -2) (undo-tree-id36964 . -2) (undo-tree-id36965 . -2) (undo-tree-id36966 . -2) (undo-tree-id36967 . -2) (undo-tree-id36968 . -2) (undo-tree-id36969 . -2) (undo-tree-id36970 . -2) (undo-tree-id36971 . -2) (undo-tree-id36972 . -2) (undo-tree-id36973 . -2) (undo-tree-id36974 . -2) (undo-tree-id36975 . -2) (undo-tree-id36976 . -2) (undo-tree-id36977 . -2) (undo-tree-id36978 . -2) (undo-tree-id36979 . -2) (undo-tree-id36980 . -2) (undo-tree-id36981 . -2) (undo-tree-id36982 . -2) (undo-tree-id36983 . -2) (undo-tree-id36984 . -2) (undo-tree-id36985 . -2) (undo-tree-id36986 . -2) (undo-tree-id36987 . -2) (undo-tree-id36988 . -2) (undo-tree-id36989 . -2) (undo-tree-id36990 . -2) (undo-tree-id36991 . -2) (undo-tree-id36992 . -2) (undo-tree-id36993 . -2) 6516 (6513 . 6516)) nil (26157 2572 385989 9000) 0 nil])
([nil nil ((6335 . 6336) (#("4" 0 1 (fontified t)) . -6335) (undo-tree-id37079 . -1) (undo-tree-id37080 . -1) (undo-tree-id37081 . -1) (undo-tree-id37082 . -1) (undo-tree-id37083 . -1) (undo-tree-id37084 . -1) (undo-tree-id37085 . -1) (undo-tree-id37086 . -1) (undo-tree-id37087 . -1) (undo-tree-id37088 . -1) (undo-tree-id37089 . -1) (undo-tree-id37090 . -1) (undo-tree-id37091 . -1) (undo-tree-id37092 . -1) (undo-tree-id37093 . -1) (undo-tree-id37094 . -1) (undo-tree-id37095 . -1) (undo-tree-id37096 . -1) (undo-tree-id37097 . -1) (undo-tree-id37098 . -1) (undo-tree-id37099 . -1) (undo-tree-id37100 . -1) (undo-tree-id37101 . -1) (undo-tree-id37102 . -1) (undo-tree-id37103 . -1) (undo-tree-id37104 . -1) (undo-tree-id37105 . -1) (undo-tree-id37106 . -1) (undo-tree-id37107 . -1) (undo-tree-id37108 . -1) (undo-tree-id37109 . -1) (undo-tree-id37110 . -1) (undo-tree-id37111 . -1) (undo-tree-id37112 . -1) (undo-tree-id37113 . -1) (undo-tree-id37114 . -1) (undo-tree-id37115 . -1) 6336 (t 26157 2572 478229 630000)) nil (26157 2629 514526 727000) 0 nil])
([nil nil ((6335 . 6336) (#("g" 0 1 (fontified t)) . -6335) (undo-tree-id37078 . -1) 6336) nil (26157 2629 514454 537000) 0 nil])
([nil nil ((6340 . 6341) (#("g" 0 1 (fontified t)) . -6340) (undo-tree-id37014 . -1) (undo-tree-id37015 . -1) (undo-tree-id37016 . -1) (undo-tree-id37017 . -1) (undo-tree-id37018 . -1) (undo-tree-id37019 . -1) (undo-tree-id37020 . -1) (undo-tree-id37021 . -1) (undo-tree-id37022 . -1) (undo-tree-id37023 . -1) (undo-tree-id37024 . -1) (undo-tree-id37025 . -1) (undo-tree-id37026 . -1) (undo-tree-id37027 . -1) (undo-tree-id37028 . -1) (undo-tree-id37029 . -1) (undo-tree-id37030 . -1) (undo-tree-id37031 . -1) (undo-tree-id37032 . -1) (undo-tree-id37033 . -1) (undo-tree-id37034 . -1) (undo-tree-id37035 . -1) (undo-tree-id37036 . -1) (undo-tree-id37037 . -1) (undo-tree-id37038 . -1) (undo-tree-id37039 . -1) (undo-tree-id37040 . -1) (undo-tree-id37041 . -1) (undo-tree-id37042 . -1) (undo-tree-id37043 . -1) (undo-tree-id37044 . -1) (undo-tree-id37045 . -1) (undo-tree-id37046 . -1) (undo-tree-id37047 . -1) (undo-tree-id37048 . -1) (undo-tree-id37049 . -1) (undo-tree-id37050 . -1) (undo-tree-id37051 . -1) (undo-tree-id37052 . -1) (undo-tree-id37053 . -1) (undo-tree-id37054 . -1) (undo-tree-id37055 . -1) (undo-tree-id37056 . -1) (undo-tree-id37057 . -1) (undo-tree-id37058 . -1) (undo-tree-id37059 . -1) (undo-tree-id37060 . -1) (undo-tree-id37061 . -1) (undo-tree-id37062 . -1) (undo-tree-id37063 . -1) (undo-tree-id37064 . -1) 6341 (6340 . 6341) (#("4" 0 1 (fontified t)) . -6340) (undo-tree-id37065 . -1) (undo-tree-id37066 . -1) (undo-tree-id37067 . -1) (undo-tree-id37068 . -1) (undo-tree-id37069 . -1) (undo-tree-id37070 . -1) (undo-tree-id37071 . -1) (undo-tree-id37072 . -1) (undo-tree-id37073 . -1) (undo-tree-id37074 . -1) (undo-tree-id37075 . -1) (undo-tree-id37076 . -1) (undo-tree-id37077 . -1) 6341) nil (26157 2629 514436 57000) 0 nil])
([nil nil ((6352 . 6353) (t 26157 2629 635202 172000)) nil (26157 2648 890748 971000) 0 nil])
([nil nil ((6461 . 6465) (#("    " 0 4 (fontified nil)) . 6460) (undo-tree-id37122 . -4) (undo-tree-id37123 . -4) (undo-tree-id37124 . -4) (undo-tree-id37125 . -4) (undo-tree-id37126 . -4) (undo-tree-id37127 . -4) (undo-tree-id37128 . -4) (undo-tree-id37129 . -4) (undo-tree-id37130 . -4) (undo-tree-id37131 . -4) (undo-tree-id37132 . -4) (undo-tree-id37133 . -4) (undo-tree-id37134 . -4) (6460 . 6465) (#("    " 0 4 (fontified nil)) . 6459) (undo-tree-id37135 . -4) (undo-tree-id37136 . -4) (undo-tree-id37137 . -4) (undo-tree-id37138 . -4) (undo-tree-id37139 . -4) (undo-tree-id37140 . -4) (undo-tree-id37141 . -4) (undo-tree-id37142 . -4) (undo-tree-id37143 . -4) (undo-tree-id37144 . -4) (undo-tree-id37145 . -4) (undo-tree-id37146 . -4) (6463 . 6464) (6459 . 6463) (t 26157 2649 16695 994000)) nil (26157 2708 295521 301000) 0 nil])
([nil nil ((6508 . 6511) (6504 . 6508) (6502 . 6504) (6499 . 6502) (#("5" 0 1 (fontified t)) . -6499) (undo-tree-id37116 . -1) (#("0" 0 1 (fontified t)) . -6500) (undo-tree-id37117 . -1) 6501 (6499 . 6501) (#("7" 0 1 (fontified t)) . -6499) (undo-tree-id37118 . -1) 6500 (6498 . 6500) (6495 . 6498) (#("s" 0 1 (fontified t)) . -6495) (undo-tree-id37119 . -1) 6496 (6495 . 6496) (6494 . 6495) (6495 . 6499) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6494) (6494 . 6495) (6493 . 6495) (6491 . 6494) (6483 . 6491) (#("Pa" 0 2 (fontified nil)) . 6483) (6483 . 6485) (#("Particle" 0 8 (fontified nil)) . -6483) (6483 . 6491) (#("Pa" 0 2 (fontified t face font-lock-type-face)) . -6483) (undo-tree-id37120 . -2) (undo-tree-id37121 . -2) 6485 (6464 . 6485) (6460 . 6464)) nil (26157 2708 295467 602000) 0 nil])
([nil nil ((6517 . 6518) (t 26157 2708 393567 124000)) nil (26157 2709 833947 515000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6589) (undo-tree-id37437 . -4) (undo-tree-id37438 . -4) 6593 (6588 . 6593) (t 26157 2709 929393 130000)) nil (26157 2754 127999 333000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6256) (undo-tree-id37411 . -4) (undo-tree-id37412 . -4) (undo-tree-id37413 . -4) (undo-tree-id37414 . -4) (undo-tree-id37415 . -4) (undo-tree-id37416 . -4) (undo-tree-id37417 . -4) (undo-tree-id37418 . -4) (undo-tree-id37419 . -4) (undo-tree-id37420 . -4) (undo-tree-id37421 . -4) (undo-tree-id37422 . -4) (undo-tree-id37423 . -4) 6260 (6256 . 6260) (#("    " 0 4 (fontified nil)) . 6255) (undo-tree-id37424 . -4) (undo-tree-id37425 . -4) (undo-tree-id37426 . -4) (undo-tree-id37427 . -4) (undo-tree-id37428 . -4) (undo-tree-id37429 . -4) (undo-tree-id37430 . -4) (undo-tree-id37431 . -4) (undo-tree-id37432 . -4) (undo-tree-id37433 . -4) (undo-tree-id37434 . -4) (undo-tree-id37435 . -4) (undo-tree-id37436 . -4) (6254 . 6260)) nil (26157 2754 127987 946000) 0 nil])
([nil nil ((6255 . 6259)) nil (26157 2754 127933 528000) 0 nil])
([nil nil ((6344 . 6345) (apply yas--snippet-revive 6337 6344 #s(yas--snippet nil nil #s(yas--exit 6344 nil) 190 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6344 nil) 190 nil nil nil nil)) (6337 . 6344) (#("clone()$0" 0 9 (fontified nil)) . 6337) (6337 . 6346) (#("cl" 0 2 (fontified nil)) . 6337) (6337 . 6339) (#("clone() (as Clone)" 0 18 (fontified nil)) . -6337) (6337 . 6355) (#("cl" 0 2 (fontified t)) . -6337) (undo-tree-id37147 . -1) (undo-tree-id37148 . -2) (undo-tree-id37149 . -2) (undo-tree-id37150 . -1) (undo-tree-id37151 . -1) (undo-tree-id37152 . -1) (undo-tree-id37153 . -1) (undo-tree-id37154 . -1) (undo-tree-id37155 . -1) (undo-tree-id37156 . -1) (undo-tree-id37157 . -1) (undo-tree-id37158 . -1) (undo-tree-id37159 . -1) (undo-tree-id37160 . -1) (undo-tree-id37161 . -1) (undo-tree-id37162 . -1) (undo-tree-id37163 . -1) (undo-tree-id37164 . -1) (undo-tree-id37165 . -1) (undo-tree-id37166 . -1) (undo-tree-id37167 . -1) (undo-tree-id37168 . -1) (undo-tree-id37169 . -1) (undo-tree-id37170 . -1) (undo-tree-id37171 . -1) (undo-tree-id37172 . -1) (undo-tree-id37173 . -1) (undo-tree-id37174 . -1) (undo-tree-id37175 . -1) (undo-tree-id37176 . -1) (undo-tree-id37177 . -1) (undo-tree-id37178 . -1) (undo-tree-id37179 . -1) (undo-tree-id37180 . -2) (undo-tree-id37181 . -2) (undo-tree-id37182 . -2) (undo-tree-id37183 . -2) (undo-tree-id37184 . -2) (undo-tree-id37185 . -2) (undo-tree-id37186 . -2) (undo-tree-id37187 . -2) (undo-tree-id37188 . -2) (undo-tree-id37189 . -2) (undo-tree-id37190 . -2) (undo-tree-id37191 . -2) (undo-tree-id37192 . -2) (undo-tree-id37193 . -2) (undo-tree-id37194 . -2) (undo-tree-id37195 . -2) (undo-tree-id37196 . -2) (undo-tree-id37197 . -2) (undo-tree-id37198 . -2) (undo-tree-id37199 . -2) (undo-tree-id37200 . -2) (undo-tree-id37201 . -2) (undo-tree-id37202 . -2) (undo-tree-id37203 . -2) (undo-tree-id37204 . -2) (undo-tree-id37205 . -2) (undo-tree-id37206 . -2) (undo-tree-id37207 . -2) (undo-tree-id37208 . -2) (undo-tree-id37209 . -2) (undo-tree-id37210 . -2) 6339 (6336 . 6339) (6328 . 6336) (#("ma" 0 2 (fontified nil)) . 6328) (6328 . 6330) (#("map_data" 0 8 (fontified nil)) . -6328) (6328 . 6336) (#("ma" 0 2 (fontified t)) . -6328) (undo-tree-id37211 . -2) (undo-tree-id37212 . -2) (undo-tree-id37213 . -2) (undo-tree-id37214 . -2) (undo-tree-id37215 . -2) (undo-tree-id37216 . -2) (undo-tree-id37217 . -2) (undo-tree-id37218 . -2) (undo-tree-id37219 . -2) (undo-tree-id37220 . -2) (undo-tree-id37221 . -2) (undo-tree-id37222 . -2) (undo-tree-id37223 . -2) (undo-tree-id37224 . -2) (undo-tree-id37225 . -2) (undo-tree-id37226 . -2) (undo-tree-id37227 . -2) (undo-tree-id37228 . -2) (undo-tree-id37229 . -2) (undo-tree-id37230 . -2) (undo-tree-id37231 . -2) (undo-tree-id37232 . -2) (undo-tree-id37233 . -2) (undo-tree-id37234 . -2) (undo-tree-id37235 . -2) (undo-tree-id37236 . -2) (undo-tree-id37237 . -2) (undo-tree-id37238 . -2) (undo-tree-id37239 . -2) (undo-tree-id37240 . -2) (undo-tree-id37241 . -2) (undo-tree-id37242 . -2) (undo-tree-id37243 . -2) (undo-tree-id37244 . -2) (undo-tree-id37245 . -2) (undo-tree-id37246 . -2) (undo-tree-id37247 . -2) (undo-tree-id37248 . -2) (undo-tree-id37249 . -2) (undo-tree-id37250 . -2) (undo-tree-id37251 . -2) (undo-tree-id37252 . -2) (undo-tree-id37253 . -2) (undo-tree-id37254 . -2) (undo-tree-id37255 . -2) (undo-tree-id37256 . -2) (undo-tree-id37257 . -2) (undo-tree-id37258 . -2) (undo-tree-id37259 . -2) (undo-tree-id37260 . -2) (undo-tree-id37261 . -2) (undo-tree-id37262 . -2) (undo-tree-id37263 . -2) (undo-tree-id37264 . -2) (undo-tree-id37265 . -2) (undo-tree-id37266 . -2) (undo-tree-id37267 . -2) (undo-tree-id37268 . -2) (undo-tree-id37269 . -2) (undo-tree-id37270 . -2) (undo-tree-id37271 . -2) (undo-tree-id37272 . -2) (undo-tree-id37273 . -2) (undo-tree-id37274 . -2) (undo-tree-id37275 . -2) (undo-tree-id37276 . -2) (undo-tree-id37277 . -2) (undo-tree-id37278 . -2) (undo-tree-id37279 . -2) (undo-tree-id37280 . -2) (undo-tree-id37281 . -2) (undo-tree-id37282 . -2) (undo-tree-id37283 . -2) 6330 (6326 . 6330) (#("-" 0 1 (fontified t)) . -6326) (undo-tree-id37284 . -1) (undo-tree-id37285 . -1) (undo-tree-id37286 . -1) (undo-tree-id37287 . -1) (undo-tree-id37288 . -1) (undo-tree-id37289 . -1) (undo-tree-id37290 . -1) (undo-tree-id37291 . -1) (undo-tree-id37292 . -1) (undo-tree-id37293 . -1) (undo-tree-id37294 . -1) (undo-tree-id37295 . -1) (undo-tree-id37296 . -1) (undo-tree-id37297 . -1) (undo-tree-id37298 . -1) (undo-tree-id37299 . -1) (undo-tree-id37300 . -1) (undo-tree-id37301 . -1) (undo-tree-id37302 . -1) (undo-tree-id37303 . -1) (undo-tree-id37304 . -1) (undo-tree-id37305 . -1) (undo-tree-id37306 . -1) (undo-tree-id37307 . -1) (undo-tree-id37308 . -1) (undo-tree-id37309 . -1) (undo-tree-id37310 . -1) (undo-tree-id37311 . -1) (undo-tree-id37312 . -1) (undo-tree-id37313 . -1) (undo-tree-id37314 . -1) (undo-tree-id37315 . -1) (undo-tree-id37316 . -1) (undo-tree-id37317 . -1) (undo-tree-id37318 . -1) 6327 (6326 . 6327) (#("-" 0 1 (fontified t)) . -6326) (undo-tree-id37319 . -1) (undo-tree-id37320 . -1) (undo-tree-id37321 . -1) (undo-tree-id37322 . -1) (undo-tree-id37323 . -1) (undo-tree-id37324 . -1) (undo-tree-id37325 . -1) (undo-tree-id37326 . -1) (undo-tree-id37327 . -1) (undo-tree-id37328 . -1) (undo-tree-id37329 . -1) (undo-tree-id37330 . -1) (undo-tree-id37331 . -1) (undo-tree-id37332 . -1) (undo-tree-id37333 . -1) (undo-tree-id37334 . -1) (undo-tree-id37335 . -1) (undo-tree-id37336 . -1) (undo-tree-id37337 . -1) (undo-tree-id37338 . -1) (undo-tree-id37339 . -1) (undo-tree-id37340 . -1) (undo-tree-id37341 . -1) (undo-tree-id37342 . -1) (undo-tree-id37343 . -1) (undo-tree-id37344 . -1) (undo-tree-id37345 . -1) (undo-tree-id37346 . -1) (undo-tree-id37347 . -1) (undo-tree-id37348 . -1) (undo-tree-id37349 . -1) (undo-tree-id37350 . -1) (#(" " 0 1 (fontified t)) . -6327) (undo-tree-id37351 . -1) (undo-tree-id37352 . -1) (undo-tree-id37353 . -1) (undo-tree-id37354 . -1) (undo-tree-id37355 . -1) (undo-tree-id37356 . -1) (undo-tree-id37357 . -1) (undo-tree-id37358 . -1) (undo-tree-id37359 . -1) (undo-tree-id37360 . -1) (undo-tree-id37361 . -1) (undo-tree-id37362 . -1) 6328 (6325 . 6328) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -6325) (undo-tree-id37363 . -1) (undo-tree-id37364 . -1) (undo-tree-id37365 . -1) (undo-tree-id37366 . -1) (undo-tree-id37367 . -1) (undo-tree-id37368 . -1) (undo-tree-id37369 . -1) (undo-tree-id37370 . -1) (undo-tree-id37371 . -1) (undo-tree-id37372 . -1) (undo-tree-id37373 . -1) (undo-tree-id37374 . -1) (undo-tree-id37375 . -1) (undo-tree-id37376 . -1) (undo-tree-id37377 . -1) (undo-tree-id37378 . -1) (undo-tree-id37379 . -1) (undo-tree-id37380 . -1) (undo-tree-id37381 . -1) (undo-tree-id37382 . -1) (undo-tree-id37383 . -1) (undo-tree-id37384 . -1) (undo-tree-id37385 . -1) (undo-tree-id37386 . -1) (undo-tree-id37387 . -1) (undo-tree-id37388 . -1) (undo-tree-id37389 . -1) (undo-tree-id37390 . -1) (undo-tree-id37391 . -1) (undo-tree-id37392 . -1) (undo-tree-id37393 . -1) (undo-tree-id37394 . -1) (undo-tree-id37395 . -1) (undo-tree-id37396 . -1) (undo-tree-id37397 . -1) 6326 (6321 . 6326) (6308 . 6321) (6304 . 6308) (#("    " 0 4 (fontified nil)) . 6303) (undo-tree-id37398 . -4) (6302 . 6308) (6301 . 6302) (apply yas--snippet-revive 6294 6301 #s(yas--snippet nil nil #s(yas--exit 6301 nil) 189 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6301 nil) 189 nil nil nil nil)) (6294 . 6301) (#("clone()$0" 0 9 (fontified nil)) . 6294) (6294 . 6303) (#("cl" 0 2 (fontified nil)) . 6294) (6294 . 6296) (#("clone() (as Clone)" 0 18 (fontified nil)) . -6294) (6294 . 6312) (#("cl" 0 2 (fontified t)) . -6294) (undo-tree-id37399 . -1) (undo-tree-id37400 . -2) (undo-tree-id37401 . -2) 6296 (6293 . 6296) (#("`" 0 1 (fontified t)) . -6293) (undo-tree-id37402 . -1) (undo-tree-id37403 . -1) 6294 (6293 . 6294) (6285 . 6293) (#("ma" 0 2 (fontified nil)) . 6285) (6285 . 6287) (#("map_data" 0 8 (fontified nil)) . -6285) (6285 . 6293) (#("ma" 0 2 (fontified t)) . -6285) (undo-tree-id37404 . -2) (undo-tree-id37405 . -2) 6287 (6285 . 6287) (6264 . 6285) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -6264) (undo-tree-id37406 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -6265) (undo-tree-id37407 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -6266) (undo-tree-id37408 . -1) 6267 (6260 . 6267) (6256 . 6260) (#("    " 0 4 (fontified nil)) . 6255) (undo-tree-id37409 . -4) (undo-tree-id37410 . -4) (6259 . 6260)) nil (26157 2754 127881 935000) 0 nil])
([nil nil ((#("rad" 0 3 (fontified nil)) . 6759) (undo-tree-id37439 . -3) (6758 . 6759) (6755 . 6756) (#("y" 0 1 (fontified nil)) . 6755) (undo-tree-id37440 . -1) (6755 . 6756) (#("y" 0 1 (fontified t)) . -6755) (undo-tree-id37441 . -1) (undo-tree-id37442 . -1) (undo-tree-id37443 . -1) (undo-tree-id37444 . -1) (undo-tree-id37445 . -1) (undo-tree-id37446 . -1) (undo-tree-id37447 . -1) (undo-tree-id37448 . -1) (undo-tree-id37449 . -1) (undo-tree-id37450 . -1) (undo-tree-id37451 . -1) (undo-tree-id37452 . -1) (undo-tree-id37453 . -1) (undo-tree-id37454 . -1) (undo-tree-id37455 . -1) (undo-tree-id37456 . -1) (undo-tree-id37457 . -1) (undo-tree-id37458 . -1) (undo-tree-id37459 . -1) (undo-tree-id37460 . -1) (undo-tree-id37461 . -1) (undo-tree-id37462 . -1) (undo-tree-id37463 . -1) (undo-tree-id37464 . -1) (undo-tree-id37465 . -1) (undo-tree-id37466 . -1) (undo-tree-id37467 . -1) (undo-tree-id37468 . -1) (undo-tree-id37469 . -1) (undo-tree-id37470 . -1) (undo-tree-id37471 . -1) (undo-tree-id37472 . -1) (undo-tree-id37473 . -1) (undo-tree-id37474 . -1) (undo-tree-id37475 . -1) 6756 (6754 . 6756) (6742 . 6754) (#("re" 0 2 (fontified nil)) . 6742) (undo-tree-id37476 . -2) (6742 . 6744) (#("realparticle" 0 12 (fontified nil)) . -6742) (undo-tree-id37477 . -12) (6742 . 6754) (#("re" 0 2 (fontified t)) . -6742) (undo-tree-id37478 . -2) (undo-tree-id37479 . -2) (undo-tree-id37480 . -2) 6744 (6743 . 6744) (#("y" 0 1 (fontified nil)) . 6743) (undo-tree-id37481 . -1) (6742 . 6743) (6739 . 6740) (#("x" 0 1 (fontified nil)) . 6739) (undo-tree-id37482 . -1) (6739 . 6740) (#("x" 0 1 (fontified t)) . -6739) (undo-tree-id37483 . -1) (undo-tree-id37484 . -1) (undo-tree-id37485 . -1) (undo-tree-id37486 . -1) 6740 (6738 . 6740) (6726 . 6738) (#("re" 0 2 (fontified nil)) . 6726) (undo-tree-id37487 . -2) (6726 . 6728) (#("realparticle" 0 12 (fontified nil)) . -6726) (undo-tree-id37488 . -12) (6726 . 6738) (#("re" 0 2 (fontified t)) . -6726) (undo-tree-id37489 . -2) (undo-tree-id37490 . -2) (undo-tree-id37491 . -2) 6728 (6727 . 6728) (#("x" 0 1 (fontified nil)) . 6727) (undo-tree-id37492 . -1) (6726 . 6727) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6726 6740 nil nil nil t #s(yas--field 2 6742 6756 nil nil nil t #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil)))) #s(yas--field 2 6742 6756 nil nil nil t #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil))) #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil))) #s(yas--exit 6760 nil) 191 nil #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil)) nil nil)) (6705 . 6736) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 6705) (6705 . 6753) (#("mak" 0 3 (fontified nil)) . 6705) (6705 . 6708) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -6705) (6705 . 6728) (#("mak" 0 3 (fontified t)) . -6705) (undo-tree-id37493 . -1) (undo-tree-id37494 . -3) (undo-tree-id37495 . -3) 6708 (6707 . 6708) (6704 . 6707) (6686 . 6704) (#("ro" 0 2 (fontified nil)) . 6686) (6686 . 6688) (#("robot_location_map" 0 18 (fontified nil)) . -6686) (6686 . 6704) (#("ro" 0 2 (fontified t)) . -6686) (undo-tree-id37496 . -2) (undo-tree-id37497 . -2) 6688 (6686 . 6688) (#("m" 0 1 (fontified t)) . -6686) (undo-tree-id37498 . -1) (undo-tree-id37499 . -1) (#("a" 0 1 (fontified t)) . -6687) (undo-tree-id37500 . -1) (undo-tree-id37501 . -1) (#("p" 0 1 (fontified t)) . -6688) (undo-tree-id37502 . -1) (undo-tree-id37503 . -1) (#("_" 0 1 (fontified t)) . -6689) (undo-tree-id37504 . -1) (undo-tree-id37505 . -1) (#("d" 0 1 (fontified t)) . -6690) (undo-tree-id37506 . -1) (undo-tree-id37507 . -1) (#("a" 0 1 (fontified t)) . -6691) (undo-tree-id37508 . -1) (undo-tree-id37509 . -1) (#("t" 0 1 (fontified t)) . -6692) (undo-tree-id37510 . -1) (undo-tree-id37511 . -1) (#("a" 0 1 (fontified t)) . -6693) (undo-tree-id37512 . -1) (undo-tree-id37513 . -1) 6694 (6686 . 6694) (#("ma" 0 2 (fontified nil)) . 6686) (6686 . 6688) (#("map_data" 0 8 (fontified nil)) . -6686) (6686 . 6694) (#("ma" 0 2 (fontified t)) . -6686) (undo-tree-id37514 . -2) (undo-tree-id37515 . -2) 6688 (6686 . 6688) (6682 . 6686) (#("    " 0 4 (fontified nil)) . 6681) (6681 . 6685) (6681 . 6682) (t 26157 2754 248584 51000)) nil (26157 2782 782772 959000) 0 nil])
([nil nil ((6760 . 6761) (apply yas--snippet-revive 6705 6760 #s(yas--snippet nil (#s(yas--field 1 6726 6740 nil nil nil t #s(yas--field 2 6742 6756 nil nil nil t #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil)))) #s(yas--field 2 6742 6756 nil nil nil t #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil))) #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil))) #s(yas--exit 6760 nil) 191 nil #s(yas--field 3 6758 6759 nil nil nil t #s(yas--exit 6760 nil)) nil nil))) nil (26157 2782 782578 414000) 0 nil])
([nil nil ((6264 . 6268) (t 26157 2782 877684 377000)) nil (26157 2794 123709 851000) 0 nil])
([nil nil ((6316 . 6320)) nil (26157 2794 123698 350000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6768) (undo-tree-id37516 . -1) (undo-tree-id37517 . -1) (undo-tree-id37518 . -1) (undo-tree-id37519 . -1) (undo-tree-id37520 . -1) (undo-tree-id37521 . -1) (undo-tree-id37522 . -1) (undo-tree-id37523 . -1) (undo-tree-id37524 . -1) (undo-tree-id37525 . -1) (undo-tree-id37526 . -1) (undo-tree-id37527 . -1) (undo-tree-id37528 . -1) (undo-tree-id37529 . -1) (undo-tree-id37530 . -1) (undo-tree-id37531 . -1) (undo-tree-id37532 . -1) (undo-tree-id37533 . -1) (undo-tree-id37534 . -1) (undo-tree-id37535 . -1) (undo-tree-id37536 . -1) (undo-tree-id37537 . -1) (undo-tree-id37538 . -1) (undo-tree-id37539 . -1) (#("t" 0 1 (fontified t)) . -6769) (undo-tree-id37540 . -1) (undo-tree-id37541 . -1) (undo-tree-id37542 . -1) (undo-tree-id37543 . -1) (#("o" 0 1 (fontified t)) . -6770) (undo-tree-id37544 . -1) (undo-tree-id37545 . -1) (undo-tree-id37546 . -1) 6771 (6769 . 6771) (#("." 0 1 (fontified t)) . -6769) (undo-tree-id37547 . -1) (undo-tree-id37548 . -1) 6770 (6769 . 6770) (6768 . 6769) (t 26157 2794 244575 732000)) nil (26157 2804 506046 842000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6771) (undo-tree-id37800 . -4) (undo-tree-id37801 . -4) (undo-tree-id37802 . -4) (undo-tree-id37803 . -4) (undo-tree-id37804 . -4) (undo-tree-id37805 . -4) (undo-tree-id37806 . -4) (undo-tree-id37807 . -4) (undo-tree-id37808 . -4) (undo-tree-id37809 . -4) (undo-tree-id37810 . -4) (undo-tree-id37811 . -4) (undo-tree-id37812 . -4) (undo-tree-id37813 . -4) (undo-tree-id37814 . -4) (undo-tree-id37815 . -4) (undo-tree-id37816 . -4) (undo-tree-id37817 . -4) (undo-tree-id37818 . -4) (undo-tree-id37819 . -4) (undo-tree-id37820 . -4) (undo-tree-id37821 . -4) (undo-tree-id37822 . -4) (undo-tree-id37823 . -4) (undo-tree-id37824 . -4) (undo-tree-id37825 . -4) (undo-tree-id37826 . -4) (undo-tree-id37827 . -4) (undo-tree-id37828 . -4) (undo-tree-id37829 . -4) (undo-tree-id37830 . -4) (undo-tree-id37831 . -4) (undo-tree-id37832 . -4) (undo-tree-id37833 . -4) (undo-tree-id37834 . -4) 6775 (6771 . 6775) (#("    " 0 4 (fontified nil)) . 6770) (6770 . 6774) (6770 . 6771) (t 26157 2804 599586 166000)) nil (26157 2825 877162 267000) 0 nil])
([nil nil ((6825 . 6829) (6820 . 6825) (6819 . 6821) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6819) (undo-tree-id37634 . -1) (#("path" 0 4 (fontified nil)) . 6820) (undo-tree-id37635 . -4) (6819 . 6820) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6819 6830 nil nil nil t #s(yas--exit 6831 nil))) #s(yas--exit 6831 nil) 194 nil #s(yas--field 1 6819 6830 nil nil nil t #s(yas--exit 6831 nil)) #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil)) (6803 . 6824) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 6803) (undo-tree-id37636 . -28) (undo-tree-id37637 . -28) (undo-tree-id37638 . 28) (undo-tree-id37639 . 28) (6803 . 6831) (#("wr" 0 2 (fontified nil)) . 6803) (undo-tree-id37640 . -2) (undo-tree-id37641 . -2) (undo-tree-id37642 . 2) (undo-tree-id37643 . 2) (6803 . 6805) (#("write_as_binary(…)" 0 18 (fontified nil)) . -6803) (undo-tree-id37644 . -18) (undo-tree-id37645 . -18) (undo-tree-id37646 . 18) (undo-tree-id37647 . 18) (6803 . 6821) (#("wr" 0 2 (fontified t)) . -6803) (undo-tree-id37648 . -1) (undo-tree-id37649 . -2) (undo-tree-id37650 . -2) (undo-tree-id37651 . -1) (undo-tree-id37652 . -2) (undo-tree-id37653 . -2) (undo-tree-id37654 . 1) (undo-tree-id37655 . -1) (undo-tree-id37656 . 1) (undo-tree-id37657 . -1) (undo-tree-id37658 . -1) 6805 (6804 . 6805) (#("r" 0 1 (fontified t)) . -6804) (undo-tree-id37659 . -1) (undo-tree-id37660 . -1) (undo-tree-id37661 . -1) (undo-tree-id37662 . -1) (undo-tree-id37663 . -1) (undo-tree-id37664 . -1) (undo-tree-id37665 . -1) (undo-tree-id37666 . -1) (undo-tree-id37667 . -1) (#("i" 0 1 (fontified nil)) . -6805) (undo-tree-id37668 . -1) (undo-tree-id37669 . -1) (undo-tree-id37670 . -1) (undo-tree-id37671 . -1) (undo-tree-id37672 . -1) (undo-tree-id37673 . -1) (undo-tree-id37674 . -1) (undo-tree-id37675 . -1) (undo-tree-id37676 . -1) (#("t" 0 1 (fontified nil)) . -6806) (undo-tree-id37677 . -1) (undo-tree-id37678 . -1) (undo-tree-id37679 . -1) (undo-tree-id37680 . -1) (undo-tree-id37681 . -1) (undo-tree-id37682 . -1) (undo-tree-id37683 . -1) (undo-tree-id37684 . -1) (undo-tree-id37685 . -1) (#("e" 0 1 (fontified nil)) . -6807) (undo-tree-id37686 . -1) (undo-tree-id37687 . -1) (undo-tree-id37688 . -1) (undo-tree-id37689 . -1) (undo-tree-id37690 . -1) (undo-tree-id37691 . -1) (undo-tree-id37692 . -1) (undo-tree-id37693 . -1) (undo-tree-id37694 . -1) (#("_" 0 1 (fontified nil)) . -6808) (undo-tree-id37695 . -1) (undo-tree-id37696 . -1) (undo-tree-id37697 . -1) (undo-tree-id37698 . -1) (undo-tree-id37699 . -1) (undo-tree-id37700 . -1) (undo-tree-id37701 . -1) (undo-tree-id37702 . -1) (undo-tree-id37703 . -1) (#("a" 0 1 (fontified nil)) . -6809) (undo-tree-id37704 . -1) (undo-tree-id37705 . -1) (undo-tree-id37706 . -1) (undo-tree-id37707 . -1) (undo-tree-id37708 . -1) (undo-tree-id37709 . -1) (undo-tree-id37710 . -1) (undo-tree-id37711 . -1) (undo-tree-id37712 . -1) (#("s" 0 1 (fontified t)) . -6810) (undo-tree-id37713 . -1) (undo-tree-id37714 . -1) (undo-tree-id37715 . -1) (undo-tree-id37716 . -1) (undo-tree-id37717 . -1) (undo-tree-id37718 . -1) (undo-tree-id37719 . -1) (undo-tree-id37720 . -1) (undo-tree-id37721 . -1) (#("_" 0 1 (fontified t)) . -6811) (undo-tree-id37722 . -1) (undo-tree-id37723 . -1) (undo-tree-id37724 . -1) (undo-tree-id37725 . -1) (undo-tree-id37726 . -1) (undo-tree-id37727 . -1) (undo-tree-id37728 . -1) (undo-tree-id37729 . -1) (undo-tree-id37730 . -1) (#("a" 0 1 (fontified t)) . -6812) (undo-tree-id37731 . -1) (undo-tree-id37732 . -1) (undo-tree-id37733 . -1) (undo-tree-id37734 . -1) (undo-tree-id37735 . -1) (undo-tree-id37736 . -1) (undo-tree-id37737 . -1) (undo-tree-id37738 . -1) (undo-tree-id37739 . -1) (#("s" 0 1 (fontified t)) . -6813) (undo-tree-id37740 . -1) (undo-tree-id37741 . -1) (undo-tree-id37742 . -1) (undo-tree-id37743 . -1) (undo-tree-id37744 . -1) (undo-tree-id37745 . -1) (undo-tree-id37746 . -1) (undo-tree-id37747 . -1) (undo-tree-id37748 . -1) (#("c" 0 1 (fontified t)) . -6814) (undo-tree-id37749 . -1) (undo-tree-id37750 . -1) (undo-tree-id37751 . -1) (undo-tree-id37752 . -1) (undo-tree-id37753 . -1) (undo-tree-id37754 . -1) (undo-tree-id37755 . -1) (undo-tree-id37756 . -1) (undo-tree-id37757 . -1) (#("i" 0 1 (fontified t)) . -6815) (undo-tree-id37758 . -1) (undo-tree-id37759 . -1) (undo-tree-id37760 . -1) (undo-tree-id37761 . -1) (undo-tree-id37762 . -1) (undo-tree-id37763 . -1) (undo-tree-id37764 . -1) (undo-tree-id37765 . -1) (undo-tree-id37766 . -1) (#("i" 0 1 (fontified t)) . -6816) (undo-tree-id37767 . -1) (undo-tree-id37768 . -1) (undo-tree-id37769 . -1) (undo-tree-id37770 . -1) (undo-tree-id37771 . -1) (undo-tree-id37772 . -1) (undo-tree-id37773 . -1) (undo-tree-id37774 . -1) (undo-tree-id37775 . -1) 6817 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6817) (undo-tree-id37776 . -1) (undo-tree-id37777 . -1) (undo-tree-id37778 . -1) (undo-tree-id37779 . -1) (undo-tree-id37780 . -1) (undo-tree-id37781 . 1) (undo-tree-id37782 . -1) (undo-tree-id37783 . -1) (undo-tree-id37784 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 6818) (undo-tree-id37785 . -1) (undo-tree-id37786 . 1) (undo-tree-id37787 . -1) (undo-tree-id37788 . 1) (#("path" 0 4 (fontified t)) . 6818) (undo-tree-id37789 . -4) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil))) #s(yas--exit 6842 nil) 193 nil #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil nil)) (6803 . 6823) (#("write_as_ascii(${1:path})$0" 0 27 (fontified nil)) . 6803) (6803 . 6830) (#("wr" 0 2 (fontified nil)) . 6803) (6803 . 6805) (#("write_as_ascii(…)" 0 17 (fontified nil)) . -6803) (6803 . 6820) (#("wr" 0 2 (fontified t)) . -6803) (undo-tree-id37790 . -1) (undo-tree-id37791 . -2) (undo-tree-id37792 . -2) 6805 (6804 . 6805) (6802 . 6804) (apply yas--snippet-revive 6794 6802 #s(yas--snippet nil nil #s(yas--exit 6802 nil) 192 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6802 nil) 192 nil nil nil nil)) (6794 . 6802) (#("to_pgm()$0" 0 10 (fontified nil)) . 6794) (6794 . 6804) (#("to" 0 2 (fontified nil)) . 6794) (6794 . 6796) (#("to_pgm()" 0 8 (fontified nil)) . -6794) (6794 . 6802) (#("to" 0 2 (fontified t)) . -6794) (undo-tree-id37793 . -2) (undo-tree-id37794 . -2) (undo-tree-id37795 . -2) 6796 (6793 . 6796) (6775 . 6793) (#("ro" 0 2 (fontified nil)) . 6775) (6775 . 6777) (#("robot_location_map" 0 18 (fontified nil)) . -6775) (6775 . 6793) (#("ro" 0 2 (fontified t)) . -6775) (undo-tree-id37796 . -2) (undo-tree-id37797 . -2) 6777 (6775 . 6777) (#("o" 0 1 (fontified t)) . -6775) (undo-tree-id37798 . -1) (undo-tree-id37799 . -1) 6776 (6775 . 6776) (6771 . 6775)) nil (26157 2825 877068 984000) 0 nil])
([nil nil ((6840 . 6841) (apply yas--snippet-revive 6832 6840 #s(yas--snippet nil nil #s(yas--exit 6840 nil) 195 nil nil #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6840 nil) 195 nil nil #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil)) (6832 . 6840) (#("unwrap()$0" 0 10 (fontified nil)) . 6832) (undo-tree-id37549 . -10) (undo-tree-id37550 . -10) (6832 . 6842) (#("un" 0 2 (fontified nil)) . 6832) (undo-tree-id37551 . -2) (undo-tree-id37552 . -2) (6832 . 6834) (#("unwrap()" 0 8 (fontified nil)) . -6832) (undo-tree-id37553 . -8) (undo-tree-id37554 . -8) (6832 . 6840) (#("un" 0 2 (fontified t)) . -6832) (undo-tree-id37555 . -2) (undo-tree-id37556 . -2) (undo-tree-id37557 . -2) (undo-tree-id37558 . -2) (undo-tree-id37559 . -2) (undo-tree-id37560 . -1) (undo-tree-id37561 . -1) (undo-tree-id37562 . -1) (undo-tree-id37563 . -1) (undo-tree-id37564 . -1) (undo-tree-id37565 . -1) (undo-tree-id37566 . -1) (undo-tree-id37567 . -1) (undo-tree-id37568 . -1) (undo-tree-id37569 . -1) (undo-tree-id37570 . -1) (undo-tree-id37571 . -2) (undo-tree-id37572 . -2) (undo-tree-id37573 . -2) (undo-tree-id37574 . -2) (undo-tree-id37575 . -2) (undo-tree-id37576 . -2) (undo-tree-id37577 . -2) (undo-tree-id37578 . -2) (undo-tree-id37579 . -2) (undo-tree-id37580 . -2) (undo-tree-id37581 . -2) (undo-tree-id37582 . -2) (undo-tree-id37583 . -2) (undo-tree-id37584 . -2) (undo-tree-id37585 . -2) (undo-tree-id37586 . -2) (undo-tree-id37587 . -2) (undo-tree-id37588 . -2) (undo-tree-id37589 . -2) (undo-tree-id37590 . -2) (undo-tree-id37591 . -2) (undo-tree-id37592 . -2) (undo-tree-id37593 . -2) (undo-tree-id37594 . -2) (undo-tree-id37595 . -2) (undo-tree-id37596 . -2) (undo-tree-id37597 . -2) (undo-tree-id37598 . -2) (undo-tree-id37599 . -2) (undo-tree-id37600 . -2) (undo-tree-id37601 . -2) (undo-tree-id37602 . -2) (undo-tree-id37603 . -2) (undo-tree-id37604 . -2) (undo-tree-id37605 . -2) (undo-tree-id37606 . -2) (undo-tree-id37607 . -2) (undo-tree-id37608 . -2) (undo-tree-id37609 . -2) (undo-tree-id37610 . -2) (undo-tree-id37611 . -2) (undo-tree-id37612 . -2) (undo-tree-id37613 . -2) (undo-tree-id37614 . -2) (undo-tree-id37615 . -2) (undo-tree-id37616 . -2) (undo-tree-id37617 . -2) (undo-tree-id37618 . -2) (undo-tree-id37619 . -2) (undo-tree-id37620 . -2) (undo-tree-id37621 . -2) (undo-tree-id37622 . -2) (undo-tree-id37623 . -2) (undo-tree-id37624 . -2) (undo-tree-id37625 . -2) (undo-tree-id37626 . -2) (undo-tree-id37627 . -2) (undo-tree-id37628 . -2) (undo-tree-id37629 . -2) (undo-tree-id37630 . -2) (undo-tree-id37631 . -2) (undo-tree-id37632 . -2) (undo-tree-id37633 . -2) 6834 (6831 . 6834) (apply yas--snippet-revive 6803 6831 #s(yas--snippet nil (#s(yas--field 1 6819 6830 nil nil nil t #s(yas--exit 6831 nil))) #s(yas--exit 6831 nil) 194 nil #s(yas--field 1 6819 6830 nil nil nil t #s(yas--exit 6831 nil)) #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil))) nil (26157 2825 876546 264000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6842) (undo-tree-id37835 . -4) (undo-tree-id37836 . -4) (undo-tree-id37837 . -4) (undo-tree-id37838 . -4) (undo-tree-id37839 . -4) (undo-tree-id37840 . -4) (undo-tree-id37841 . -4) (undo-tree-id37842 . -4) (undo-tree-id37843 . -4) (undo-tree-id37844 . -4) (undo-tree-id37845 . -4) (undo-tree-id37846 . -4) (undo-tree-id37847 . -4) (undo-tree-id37848 . -4) (undo-tree-id37849 . -4) 6846 (6841 . 6846) (t 26157 2826 1600 814000)) nil (26157 2827 957790 459000) 0 nil])
([nil nil ((apply yas--snippet-revive 6803 6842 #s(yas--snippet nil (#s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil))) #s(yas--exit 6842 nil) 193 nil #s(yas--field 1 6803 6842 nil nil nil t #s(yas--exit 6842 nil)) nil nil))) nil (26157 2870 427690 608000) 0 nil])
([nil nil ((6599 . 6600) (#("2" 0 1 (fontified t)) . -6599) (undo-tree-id37910 . -1) (undo-tree-id37911 . -1) (undo-tree-id37912 . -1) (undo-tree-id37913 . -1) (undo-tree-id37914 . -1) (undo-tree-id37915 . -1) (undo-tree-id37916 . -1) (undo-tree-id37917 . -1) (undo-tree-id37918 . -1) (undo-tree-id37919 . -1) (undo-tree-id37920 . -1) (undo-tree-id37921 . -1) (undo-tree-id37922 . -1) 6600 (t 26157 2828 57414 277000)) nil (26157 2870 427685 433000) 0 nil])
([nil nil ((6608 . 6609) (#("2" 0 1 (fontified t)) . -6608) (undo-tree-id37850 . -1) (undo-tree-id37851 . -1) (undo-tree-id37852 . -1) (undo-tree-id37853 . -1) (undo-tree-id37854 . -1) (undo-tree-id37855 . -1) (undo-tree-id37856 . -1) (undo-tree-id37857 . -1) (undo-tree-id37858 . -1) (undo-tree-id37859 . -1) (undo-tree-id37860 . -1) (undo-tree-id37861 . -1) (undo-tree-id37862 . -1) (undo-tree-id37863 . -1) (undo-tree-id37864 . -1) (undo-tree-id37865 . -1) (undo-tree-id37866 . -1) (undo-tree-id37867 . -1) (undo-tree-id37868 . -1) (undo-tree-id37869 . -1) (undo-tree-id37870 . -1) (undo-tree-id37871 . -1) (undo-tree-id37872 . -1) (undo-tree-id37873 . -1) (undo-tree-id37874 . -1) (undo-tree-id37875 . -1) (undo-tree-id37876 . -1) (undo-tree-id37877 . -1) (undo-tree-id37878 . -1) (undo-tree-id37879 . -1) (undo-tree-id37880 . -1) (undo-tree-id37881 . -1) (undo-tree-id37882 . -1) (undo-tree-id37883 . -1) (undo-tree-id37884 . -1) (undo-tree-id37885 . -1) (undo-tree-id37886 . -1) (undo-tree-id37887 . -1) (undo-tree-id37888 . -1) (undo-tree-id37889 . -1) (undo-tree-id37890 . -1) (undo-tree-id37891 . -1) (undo-tree-id37892 . -1) (undo-tree-id37893 . -1) (undo-tree-id37894 . -1) (undo-tree-id37895 . -1) (undo-tree-id37896 . -1) 6609 (6608 . 6609) (#("3" 0 1 (fontified t)) . -6608) (undo-tree-id37897 . -1) (undo-tree-id37898 . -1) (undo-tree-id37899 . -1) (undo-tree-id37900 . -1) (undo-tree-id37901 . -1) (undo-tree-id37902 . -1) (undo-tree-id37903 . -1) (undo-tree-id37904 . -1) (undo-tree-id37905 . -1) (undo-tree-id37906 . -1) (undo-tree-id37907 . -1) (undo-tree-id37908 . -1) (undo-tree-id37909 . -1) 6609) nil (26157 2870 427648 129000) 0 nil])
([nil nil ((6599 . 6600) (#("1" 0 1 (fontified t)) . -6599) (undo-tree-id37923 . -1) (undo-tree-id37924 . -1) (undo-tree-id37925 . -1) (undo-tree-id37926 . -1) (undo-tree-id37927 . -1) (undo-tree-id37928 . -1) (undo-tree-id37929 . -1) (undo-tree-id37930 . -1) (undo-tree-id37931 . -1) (undo-tree-id37932 . -1) (undo-tree-id37933 . -1) (undo-tree-id37934 . -1) (undo-tree-id37935 . -1) 6600 (t 26157 2870 545715 348000)) nil (26157 2872 710346 600000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6844) (undo-tree-id38940 . -4) 6848 (6844 . 6848) (#("    " 0 4 (fontified nil)) . 6843) (undo-tree-id38941 . -4) (6843 . 6848) (#("    " 0 4 (fontified nil)) . 6842) (undo-tree-id38942 . -4) (6841 . 6847) (t 26157 2872 809526 378000)) nil (26157 3500 158958 97000) 0 nil])
([nil nil ((6847 . 6851) (6843 . 6847)) nil (26157 3500 158949 81000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -6847) (undo-tree-id38115 . -1) (undo-tree-id38116 . -1) (undo-tree-id38117 . -1) (undo-tree-id38118 . -1) (undo-tree-id38119 . -1) (undo-tree-id38120 . -1) (undo-tree-id38121 . -1) (undo-tree-id38122 . -1) (undo-tree-id38123 . -1) (undo-tree-id38124 . -1) (undo-tree-id38125 . -1) (undo-tree-id38126 . -1) (undo-tree-id38127 . -1) (undo-tree-id38128 . -1) (undo-tree-id38129 . -1) (undo-tree-id38130 . -1) (undo-tree-id38131 . -1) (undo-tree-id38132 . -1) (undo-tree-id38133 . -1) (undo-tree-id38134 . -1) (undo-tree-id38135 . -1) (undo-tree-id38136 . -1) (undo-tree-id38137 . -1) (undo-tree-id38138 . -1) (undo-tree-id38139 . -1) (undo-tree-id38140 . -1) (undo-tree-id38141 . -1) (undo-tree-id38142 . -1) (undo-tree-id38143 . -1) (undo-tree-id38144 . -1) (undo-tree-id38145 . -1) (undo-tree-id38146 . -1) (undo-tree-id38147 . -1) (undo-tree-id38148 . -1) (undo-tree-id38149 . -1) (undo-tree-id38150 . -1) (undo-tree-id38151 . -1) (undo-tree-id38152 . -1) (undo-tree-id38153 . -1) (undo-tree-id38154 . -1) (undo-tree-id38155 . -1) (undo-tree-id38156 . -1) (undo-tree-id38157 . -1) (undo-tree-id38158 . -1) (undo-tree-id38159 . -1) (undo-tree-id38160 . -1) (undo-tree-id38161 . -1) (undo-tree-id38162 . -1) (undo-tree-id38163 . -1) (undo-tree-id38164 . -1) (undo-tree-id38165 . -1) (undo-tree-id38166 . -1) (undo-tree-id38167 . -1) (undo-tree-id38168 . -1) (undo-tree-id38169 . -1) (undo-tree-id38170 . -1) (undo-tree-id38171 . -1) (undo-tree-id38172 . -1) (undo-tree-id38173 . -1) (undo-tree-id38174 . -1) (undo-tree-id38175 . -1) (undo-tree-id38176 . -1) (undo-tree-id38177 . -1) (undo-tree-id38178 . -1) (undo-tree-id38179 . -1) (undo-tree-id38180 . -1) (undo-tree-id38181 . -1) (undo-tree-id38182 . -1) (undo-tree-id38183 . -1) (undo-tree-id38184 . -1) (undo-tree-id38185 . -1) (undo-tree-id38186 . -1) (undo-tree-id38187 . -1) (undo-tree-id38188 . -1) (undo-tree-id38189 . -1) (undo-tree-id38190 . -1) (undo-tree-id38191 . -1) (undo-tree-id38192 . -1) (undo-tree-id38193 . -1) (undo-tree-id38194 . -1) (undo-tree-id38195 . -1) (undo-tree-id38196 . -1) (undo-tree-id38197 . -1) (undo-tree-id38198 . -1) (undo-tree-id38199 . -1) (undo-tree-id38200 . -1) (undo-tree-id38201 . -1) (undo-tree-id38202 . -1) (undo-tree-id38203 . -1) (undo-tree-id38204 . -1) (undo-tree-id38205 . -1) (undo-tree-id38206 . -1) (undo-tree-id38207 . -1) (undo-tree-id38208 . -1) (undo-tree-id38209 . -1) (undo-tree-id38210 . -1) (undo-tree-id38211 . -1) (undo-tree-id38212 . -1) (undo-tree-id38213 . -1) (undo-tree-id38214 . -1) (undo-tree-id38215 . -1) (undo-tree-id38216 . -1) (undo-tree-id38217 . -1) (undo-tree-id38218 . -1) (undo-tree-id38219 . -1) (undo-tree-id38220 . -1) (undo-tree-id38221 . -1) (undo-tree-id38222 . -1) (undo-tree-id38223 . -1) (undo-tree-id38224 . -1) (undo-tree-id38225 . -1) (undo-tree-id38226 . -1) (undo-tree-id38227 . -1) (undo-tree-id38228 . -1) (undo-tree-id38229 . -1) (undo-tree-id38230 . -1) (undo-tree-id38231 . -1) (undo-tree-id38232 . -1) (undo-tree-id38233 . -1) (undo-tree-id38234 . -1) (undo-tree-id38235 . -1) (undo-tree-id38236 . -1) (undo-tree-id38237 . -1) (undo-tree-id38238 . -1) (undo-tree-id38239 . -1) (undo-tree-id38240 . -1) (undo-tree-id38241 . -1) (#("o" 0 1 (fontified t)) . -6848) (undo-tree-id38242 . -1) (undo-tree-id38243 . -1) (undo-tree-id38244 . -1) (undo-tree-id38245 . -1) (undo-tree-id38246 . -1) (undo-tree-id38247 . -1) (undo-tree-id38248 . -1) (undo-tree-id38249 . -1) (undo-tree-id38250 . -1) (undo-tree-id38251 . -1) (undo-tree-id38252 . -1) (undo-tree-id38253 . -1) (undo-tree-id38254 . -1) (undo-tree-id38255 . -1) (undo-tree-id38256 . -1) (undo-tree-id38257 . -1) (undo-tree-id38258 . -1) (undo-tree-id38259 . -1) (undo-tree-id38260 . -1) (undo-tree-id38261 . -1) (undo-tree-id38262 . -1) (undo-tree-id38263 . -1) (undo-tree-id38264 . -1) (undo-tree-id38265 . -1) (undo-tree-id38266 . -1) (undo-tree-id38267 . -1) (undo-tree-id38268 . -1) (undo-tree-id38269 . -1) (undo-tree-id38270 . -1) (undo-tree-id38271 . -1) (undo-tree-id38272 . -1) (undo-tree-id38273 . -1) (undo-tree-id38274 . -1) (undo-tree-id38275 . -1) (undo-tree-id38276 . -1) (undo-tree-id38277 . -1) (undo-tree-id38278 . -1) (undo-tree-id38279 . -1) (undo-tree-id38280 . -1) (undo-tree-id38281 . -1) (undo-tree-id38282 . -1) (undo-tree-id38283 . -1) (undo-tree-id38284 . -1) (undo-tree-id38285 . -1) (undo-tree-id38286 . -1) (undo-tree-id38287 . -1) (undo-tree-id38288 . -1) (undo-tree-id38289 . -1) (undo-tree-id38290 . -1) (undo-tree-id38291 . -1) (undo-tree-id38292 . -1) (undo-tree-id38293 . -1) (undo-tree-id38294 . -1) (undo-tree-id38295 . -1) (undo-tree-id38296 . -1) (undo-tree-id38297 . -1) (undo-tree-id38298 . -1) (undo-tree-id38299 . -1) (undo-tree-id38300 . -1) (undo-tree-id38301 . -1) (undo-tree-id38302 . -1) (undo-tree-id38303 . -1) (undo-tree-id38304 . -1) (undo-tree-id38305 . -1) (undo-tree-id38306 . -1) (undo-tree-id38307 . -1) (undo-tree-id38308 . -1) (undo-tree-id38309 . -1) (undo-tree-id38310 . -1) (undo-tree-id38311 . -1) (undo-tree-id38312 . -1) (undo-tree-id38313 . -1) (undo-tree-id38314 . -1) (undo-tree-id38315 . -1) (undo-tree-id38316 . -1) (undo-tree-id38317 . -1) (undo-tree-id38318 . -1) (undo-tree-id38319 . -1) (undo-tree-id38320 . -1) (undo-tree-id38321 . -1) (undo-tree-id38322 . -1) (undo-tree-id38323 . -1) (undo-tree-id38324 . -1) (undo-tree-id38325 . -1) (undo-tree-id38326 . -1) (undo-tree-id38327 . -1) (undo-tree-id38328 . -1) (undo-tree-id38329 . -1) (undo-tree-id38330 . -1) (undo-tree-id38331 . -1) (undo-tree-id38332 . -1) (undo-tree-id38333 . -1) (undo-tree-id38334 . -1) (undo-tree-id38335 . -1) (undo-tree-id38336 . -1) (undo-tree-id38337 . -1) (undo-tree-id38338 . -1) (undo-tree-id38339 . -1) (undo-tree-id38340 . -1) (undo-tree-id38341 . -1) (undo-tree-id38342 . -1) (undo-tree-id38343 . -1) (undo-tree-id38344 . -1) (undo-tree-id38345 . -1) (undo-tree-id38346 . -1) (undo-tree-id38347 . -1) (undo-tree-id38348 . -1) (undo-tree-id38349 . -1) (undo-tree-id38350 . -1) (undo-tree-id38351 . -1) (undo-tree-id38352 . -1) (undo-tree-id38353 . -1) (undo-tree-id38354 . -1) (undo-tree-id38355 . -1) (undo-tree-id38356 . -1) (undo-tree-id38357 . -1) (undo-tree-id38358 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -6849) (undo-tree-id38359 . -1) (undo-tree-id38360 . -1) (undo-tree-id38361 . -1) (undo-tree-id38362 . -1) (undo-tree-id38363 . -1) (undo-tree-id38364 . -1) (undo-tree-id38365 . -1) (undo-tree-id38366 . -1) (undo-tree-id38367 . -1) (undo-tree-id38368 . -1) (undo-tree-id38369 . -1) (undo-tree-id38370 . -1) (undo-tree-id38371 . -1) (undo-tree-id38372 . -1) (undo-tree-id38373 . -1) (undo-tree-id38374 . -1) (undo-tree-id38375 . -1) (undo-tree-id38376 . -1) (undo-tree-id38377 . -1) (undo-tree-id38378 . -1) (undo-tree-id38379 . -1) (undo-tree-id38380 . -1) (undo-tree-id38381 . -1) (undo-tree-id38382 . -1) (undo-tree-id38383 . -1) (undo-tree-id38384 . -1) (undo-tree-id38385 . -1) (undo-tree-id38386 . -1) (undo-tree-id38387 . -1) (undo-tree-id38388 . -1) (undo-tree-id38389 . -1) (undo-tree-id38390 . -1) (undo-tree-id38391 . -1) (undo-tree-id38392 . -1) (undo-tree-id38393 . -1) (undo-tree-id38394 . -1) (undo-tree-id38395 . -1) (undo-tree-id38396 . -1) (undo-tree-id38397 . -1) (undo-tree-id38398 . -1) (undo-tree-id38399 . -1) (undo-tree-id38400 . -1) (undo-tree-id38401 . -1) (undo-tree-id38402 . -1) (undo-tree-id38403 . -1) (undo-tree-id38404 . -1) (undo-tree-id38405 . -1) (undo-tree-id38406 . -1) (undo-tree-id38407 . -1) (undo-tree-id38408 . -1) (undo-tree-id38409 . -1) (undo-tree-id38410 . -1) (undo-tree-id38411 . -1) (undo-tree-id38412 . -1) (undo-tree-id38413 . -1) (undo-tree-id38414 . -1) (undo-tree-id38415 . -1) (undo-tree-id38416 . -1) (undo-tree-id38417 . -1) (undo-tree-id38418 . -1) (undo-tree-id38419 . -1) (undo-tree-id38420 . -1) (undo-tree-id38421 . -1) (undo-tree-id38422 . -1) (undo-tree-id38423 . -1) (undo-tree-id38424 . -1) (undo-tree-id38425 . -1) (undo-tree-id38426 . -1) (undo-tree-id38427 . -1) (undo-tree-id38428 . -1) (undo-tree-id38429 . -1) (undo-tree-id38430 . -1) (undo-tree-id38431 . -1) (undo-tree-id38432 . -1) (undo-tree-id38433 . -1) (undo-tree-id38434 . -1) (undo-tree-id38435 . -1) (undo-tree-id38436 . -1) (undo-tree-id38437 . -1) (undo-tree-id38438 . -1) (undo-tree-id38439 . -1) (undo-tree-id38440 . -1) (undo-tree-id38441 . -1) (undo-tree-id38442 . -1) (undo-tree-id38443 . -1) (undo-tree-id38444 . -1) (undo-tree-id38445 . -1) (undo-tree-id38446 . -1) (undo-tree-id38447 . -1) (undo-tree-id38448 . -1) (undo-tree-id38449 . -1) (undo-tree-id38450 . -1) (undo-tree-id38451 . -1) (undo-tree-id38452 . -1) (undo-tree-id38453 . -1) (undo-tree-id38454 . -1) (undo-tree-id38455 . -1) (undo-tree-id38456 . -1) (undo-tree-id38457 . -1) (undo-tree-id38458 . -1) (undo-tree-id38459 . -1) (undo-tree-id38460 . -1) (undo-tree-id38461 . -1) (undo-tree-id38462 . -1) (undo-tree-id38463 . -1) (undo-tree-id38464 . -1) (undo-tree-id38465 . -1) (#(" " 0 1 (fontified t)) . -6850) (undo-tree-id38466 . -1) (undo-tree-id38467 . -1) (undo-tree-id38468 . -1) (undo-tree-id38469 . -1) (undo-tree-id38470 . -1) (undo-tree-id38471 . -1) (undo-tree-id38472 . -1) (undo-tree-id38473 . -1) (undo-tree-id38474 . -1) (undo-tree-id38475 . -1) (undo-tree-id38476 . -1) (undo-tree-id38477 . -1) (undo-tree-id38478 . -1) (undo-tree-id38479 . -1) (undo-tree-id38480 . -1) (undo-tree-id38481 . -1) (undo-tree-id38482 . -1) (undo-tree-id38483 . -1) (undo-tree-id38484 . -1) (undo-tree-id38485 . -1) (undo-tree-id38486 . -1) (undo-tree-id38487 . -1) (undo-tree-id38488 . -1) (undo-tree-id38489 . -1) (undo-tree-id38490 . -1) (undo-tree-id38491 . -1) (undo-tree-id38492 . -1) (undo-tree-id38493 . -1) (undo-tree-id38494 . -1) (undo-tree-id38495 . -1) (undo-tree-id38496 . -1) (undo-tree-id38497 . -1) (undo-tree-id38498 . -1) (undo-tree-id38499 . -1) (undo-tree-id38500 . -1) (undo-tree-id38501 . -1) (undo-tree-id38502 . -1) (undo-tree-id38503 . -1) (undo-tree-id38504 . -1) (undo-tree-id38505 . -1) (undo-tree-id38506 . -1) (undo-tree-id38507 . -1) (undo-tree-id38508 . -1) (undo-tree-id38509 . -1) (undo-tree-id38510 . -1) (undo-tree-id38511 . -1) (undo-tree-id38512 . -1) (undo-tree-id38513 . -1) (undo-tree-id38514 . -1) (undo-tree-id38515 . -1) (undo-tree-id38516 . -1) (undo-tree-id38517 . -1) (undo-tree-id38518 . -1) (undo-tree-id38519 . -1) (undo-tree-id38520 . -1) (undo-tree-id38521 . -1) (undo-tree-id38522 . -1) (undo-tree-id38523 . -1) (undo-tree-id38524 . -1) (undo-tree-id38525 . -1) (undo-tree-id38526 . -1) (undo-tree-id38527 . -1) (undo-tree-id38528 . -1) (undo-tree-id38529 . -1) (undo-tree-id38530 . -1) (undo-tree-id38531 . -1) (undo-tree-id38532 . -1) (undo-tree-id38533 . -1) (undo-tree-id38534 . -1) (undo-tree-id38535 . -1) (undo-tree-id38536 . -1) (undo-tree-id38537 . -1) (undo-tree-id38538 . -1) (undo-tree-id38539 . -1) (undo-tree-id38540 . -1) (undo-tree-id38541 . -1) (undo-tree-id38542 . -1) (undo-tree-id38543 . -1) (undo-tree-id38544 . -1) (undo-tree-id38545 . -1) (undo-tree-id38546 . -1) (undo-tree-id38547 . -1) (undo-tree-id38548 . -1) (undo-tree-id38549 . -1) (undo-tree-id38550 . -1) (undo-tree-id38551 . -1) (undo-tree-id38552 . -1) (undo-tree-id38553 . -1) (undo-tree-id38554 . -1) (undo-tree-id38555 . -1) (undo-tree-id38556 . -1) (undo-tree-id38557 . -1) (undo-tree-id38558 . -1) (undo-tree-id38559 . -1) (undo-tree-id38560 . -1) (undo-tree-id38561 . -1) (undo-tree-id38562 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -6851) (undo-tree-id38563 . -1) (undo-tree-id38564 . -1) (undo-tree-id38565 . -1) (undo-tree-id38566 . -1) (undo-tree-id38567 . -1) (undo-tree-id38568 . -1) (undo-tree-id38569 . -1) (undo-tree-id38570 . -1) (undo-tree-id38571 . -1) (undo-tree-id38572 . -1) (undo-tree-id38573 . -1) (undo-tree-id38574 . -1) (undo-tree-id38575 . -1) (undo-tree-id38576 . -1) (undo-tree-id38577 . -1) (undo-tree-id38578 . -1) (undo-tree-id38579 . -1) (undo-tree-id38580 . -1) (undo-tree-id38581 . -1) (undo-tree-id38582 . -1) (undo-tree-id38583 . -1) (undo-tree-id38584 . -1) (undo-tree-id38585 . -1) (undo-tree-id38586 . -1) (undo-tree-id38587 . -1) (undo-tree-id38588 . -1) (undo-tree-id38589 . -1) (undo-tree-id38590 . -1) (undo-tree-id38591 . -1) (undo-tree-id38592 . -1) (undo-tree-id38593 . -1) (undo-tree-id38594 . -1) (undo-tree-id38595 . -1) (undo-tree-id38596 . -1) (undo-tree-id38597 . -1) (undo-tree-id38598 . -1) (undo-tree-id38599 . -1) (undo-tree-id38600 . -1) (undo-tree-id38601 . -1) (undo-tree-id38602 . -1) (undo-tree-id38603 . -1) (undo-tree-id38604 . -1) (undo-tree-id38605 . -1) (undo-tree-id38606 . -1) (undo-tree-id38607 . -1) (undo-tree-id38608 . -1) (undo-tree-id38609 . -1) (undo-tree-id38610 . -1) (undo-tree-id38611 . -1) (undo-tree-id38612 . -1) (undo-tree-id38613 . -1) (undo-tree-id38614 . -1) (undo-tree-id38615 . -1) (undo-tree-id38616 . -1) (undo-tree-id38617 . -1) (undo-tree-id38618 . -1) (undo-tree-id38619 . -1) (undo-tree-id38620 . -1) (undo-tree-id38621 . -1) (undo-tree-id38622 . -1) (undo-tree-id38623 . -1) (undo-tree-id38624 . -1) (undo-tree-id38625 . -1) (undo-tree-id38626 . -1) (undo-tree-id38627 . -1) (undo-tree-id38628 . -1) (undo-tree-id38629 . -1) (undo-tree-id38630 . -1) (undo-tree-id38631 . -1) (undo-tree-id38632 . -1) (undo-tree-id38633 . -1) (undo-tree-id38634 . -1) (undo-tree-id38635 . -1) (undo-tree-id38636 . -1) (undo-tree-id38637 . -1) (undo-tree-id38638 . -1) (undo-tree-id38639 . -1) (undo-tree-id38640 . -1) (undo-tree-id38641 . -1) (undo-tree-id38642 . -1) (undo-tree-id38643 . -1) (undo-tree-id38644 . -1) (undo-tree-id38645 . -1) (undo-tree-id38646 . -1) (undo-tree-id38647 . -1) (undo-tree-id38648 . -1) (undo-tree-id38649 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -6852) (undo-tree-id38650 . -1) (undo-tree-id38651 . -1) (undo-tree-id38652 . -1) (undo-tree-id38653 . -1) (undo-tree-id38654 . -1) (undo-tree-id38655 . -1) (undo-tree-id38656 . -1) (undo-tree-id38657 . -1) (undo-tree-id38658 . -1) (undo-tree-id38659 . -1) (undo-tree-id38660 . -1) (undo-tree-id38661 . -1) (undo-tree-id38662 . -1) (undo-tree-id38663 . -1) (undo-tree-id38664 . -1) (undo-tree-id38665 . -1) (undo-tree-id38666 . -1) (undo-tree-id38667 . -1) (undo-tree-id38668 . -1) (undo-tree-id38669 . -1) (undo-tree-id38670 . -1) (undo-tree-id38671 . -1) (undo-tree-id38672 . -1) (undo-tree-id38673 . -1) (undo-tree-id38674 . -1) (undo-tree-id38675 . -1) (undo-tree-id38676 . -1) (undo-tree-id38677 . -1) (undo-tree-id38678 . -1) (undo-tree-id38679 . -1) (undo-tree-id38680 . -1) (undo-tree-id38681 . -1) (undo-tree-id38682 . -1) (undo-tree-id38683 . -1) (undo-tree-id38684 . -1) (undo-tree-id38685 . -1) (undo-tree-id38686 . -1) (undo-tree-id38687 . -1) (undo-tree-id38688 . -1) (undo-tree-id38689 . -1) (undo-tree-id38690 . -1) (undo-tree-id38691 . -1) (undo-tree-id38692 . -1) (undo-tree-id38693 . -1) (undo-tree-id38694 . -1) (undo-tree-id38695 . -1) (undo-tree-id38696 . -1) (undo-tree-id38697 . -1) (undo-tree-id38698 . -1) (undo-tree-id38699 . -1) (undo-tree-id38700 . -1) (undo-tree-id38701 . -1) (undo-tree-id38702 . -1) (undo-tree-id38703 . -1) (undo-tree-id38704 . -1) (undo-tree-id38705 . -1) (undo-tree-id38706 . -1) (undo-tree-id38707 . -1) (undo-tree-id38708 . -1) (undo-tree-id38709 . -1) (undo-tree-id38710 . -1) (undo-tree-id38711 . -1) (undo-tree-id38712 . -1) (undo-tree-id38713 . -1) (undo-tree-id38714 . -1) (undo-tree-id38715 . -1) (undo-tree-id38716 . -1) (undo-tree-id38717 . -1) (undo-tree-id38718 . -1) (undo-tree-id38719 . -1) (undo-tree-id38720 . -1) (undo-tree-id38721 . -1) (undo-tree-id38722 . -1) (undo-tree-id38723 . -1) (undo-tree-id38724 . -1) (undo-tree-id38725 . -1) (undo-tree-id38726 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -6853) (undo-tree-id38727 . -1) (undo-tree-id38728 . -1) (undo-tree-id38729 . -1) (undo-tree-id38730 . -1) (undo-tree-id38731 . -1) (undo-tree-id38732 . -1) (undo-tree-id38733 . -1) (undo-tree-id38734 . -1) (undo-tree-id38735 . -1) (undo-tree-id38736 . -1) (undo-tree-id38737 . -1) (undo-tree-id38738 . -1) (undo-tree-id38739 . -1) (undo-tree-id38740 . -1) (undo-tree-id38741 . -1) (undo-tree-id38742 . -1) (undo-tree-id38743 . -1) (undo-tree-id38744 . -1) (undo-tree-id38745 . -1) (undo-tree-id38746 . -1) (undo-tree-id38747 . -1) (undo-tree-id38748 . -1) (undo-tree-id38749 . -1) (undo-tree-id38750 . -1) (undo-tree-id38751 . -1) (undo-tree-id38752 . -1) (undo-tree-id38753 . -1) (undo-tree-id38754 . -1) (undo-tree-id38755 . -1) (undo-tree-id38756 . -1) (undo-tree-id38757 . -1) (undo-tree-id38758 . -1) (undo-tree-id38759 . -1) (undo-tree-id38760 . -1) (undo-tree-id38761 . -1) (undo-tree-id38762 . -1) (undo-tree-id38763 . -1) (undo-tree-id38764 . -1) (undo-tree-id38765 . -1) (undo-tree-id38766 . -1) (undo-tree-id38767 . -1) (undo-tree-id38768 . -1) (undo-tree-id38769 . -1) (undo-tree-id38770 . -1) (undo-tree-id38771 . -1) (undo-tree-id38772 . -1) (undo-tree-id38773 . -1) (undo-tree-id38774 . -1) (undo-tree-id38775 . -1) (undo-tree-id38776 . -1) (undo-tree-id38777 . -1) (undo-tree-id38778 . -1) (undo-tree-id38779 . -1) (undo-tree-id38780 . -1) (undo-tree-id38781 . -1) (undo-tree-id38782 . -1) (undo-tree-id38783 . -1) (undo-tree-id38784 . -1) (undo-tree-id38785 . -1) (undo-tree-id38786 . -1) (undo-tree-id38787 . -1) (undo-tree-id38788 . -1) (undo-tree-id38789 . -1) (undo-tree-id38790 . -1) (undo-tree-id38791 . -1) (undo-tree-id38792 . -1) (undo-tree-id38793 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -6854) (undo-tree-id38794 . -1) (undo-tree-id38795 . -1) (undo-tree-id38796 . -1) (undo-tree-id38797 . -1) (undo-tree-id38798 . -1) (undo-tree-id38799 . -1) (undo-tree-id38800 . -1) (undo-tree-id38801 . -1) (undo-tree-id38802 . -1) (undo-tree-id38803 . -1) (undo-tree-id38804 . -1) (undo-tree-id38805 . -1) (undo-tree-id38806 . -1) (undo-tree-id38807 . -1) (undo-tree-id38808 . -1) (undo-tree-id38809 . -1) (undo-tree-id38810 . -1) (undo-tree-id38811 . -1) (undo-tree-id38812 . -1) (undo-tree-id38813 . -1) (undo-tree-id38814 . -1) (undo-tree-id38815 . -1) (undo-tree-id38816 . -1) (undo-tree-id38817 . -1) (undo-tree-id38818 . -1) (undo-tree-id38819 . -1) (undo-tree-id38820 . -1) (undo-tree-id38821 . -1) (undo-tree-id38822 . -1) (undo-tree-id38823 . -1) (undo-tree-id38824 . -1) (undo-tree-id38825 . -1) (undo-tree-id38826 . -1) (undo-tree-id38827 . -1) (undo-tree-id38828 . -1) (undo-tree-id38829 . -1) (undo-tree-id38830 . -1) (undo-tree-id38831 . -1) (undo-tree-id38832 . -1) (undo-tree-id38833 . -1) (undo-tree-id38834 . -1) (undo-tree-id38835 . -1) (undo-tree-id38836 . -1) (undo-tree-id38837 . -1) (undo-tree-id38838 . -1) (undo-tree-id38839 . -1) (undo-tree-id38840 . -1) (undo-tree-id38841 . -1) (undo-tree-id38842 . -1) (undo-tree-id38843 . -1) (undo-tree-id38844 . -1) (undo-tree-id38845 . -1) (undo-tree-id38846 . -1) (undo-tree-id38847 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -6855) (undo-tree-id38848 . -1) (undo-tree-id38849 . -1) (undo-tree-id38850 . -1) (undo-tree-id38851 . -1) (undo-tree-id38852 . -1) (undo-tree-id38853 . -1) (undo-tree-id38854 . -1) (undo-tree-id38855 . -1) (undo-tree-id38856 . -1) (undo-tree-id38857 . -1) (undo-tree-id38858 . -1) (undo-tree-id38859 . -1) (undo-tree-id38860 . -1) (undo-tree-id38861 . -1) (undo-tree-id38862 . -1) (undo-tree-id38863 . -1) (undo-tree-id38864 . -1) (undo-tree-id38865 . -1) (undo-tree-id38866 . -1) (undo-tree-id38867 . -1) (undo-tree-id38868 . -1) (undo-tree-id38869 . -1) (undo-tree-id38870 . -1) (undo-tree-id38871 . -1) (undo-tree-id38872 . -1) (undo-tree-id38873 . -1) (undo-tree-id38874 . -1) (undo-tree-id38875 . -1) (undo-tree-id38876 . -1) (undo-tree-id38877 . -1) (undo-tree-id38878 . -1) (undo-tree-id38879 . -1) (undo-tree-id38880 . -1) (undo-tree-id38881 . -1) (undo-tree-id38882 . -1) (undo-tree-id38883 . -1) (undo-tree-id38884 . -1) (undo-tree-id38885 . -1) (undo-tree-id38886 . -1) (undo-tree-id38887 . -1) (undo-tree-id38888 . -1) (undo-tree-id38889 . -1) (undo-tree-id38890 . -1) (undo-tree-id38891 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -6856) (undo-tree-id38892 . -1) (undo-tree-id38893 . -1) (undo-tree-id38894 . -1) (undo-tree-id38895 . -1) (undo-tree-id38896 . -1) (undo-tree-id38897 . -1) (undo-tree-id38898 . -1) (undo-tree-id38899 . -1) (undo-tree-id38900 . -1) (undo-tree-id38901 . -1) (undo-tree-id38902 . -1) (undo-tree-id38903 . -1) (undo-tree-id38904 . -1) (undo-tree-id38905 . -1) (undo-tree-id38906 . -1) (undo-tree-id38907 . -1) (undo-tree-id38908 . -1) (undo-tree-id38909 . -1) (undo-tree-id38910 . -1) (undo-tree-id38911 . -1) (undo-tree-id38912 . -1) (undo-tree-id38913 . -1) (undo-tree-id38914 . -1) (undo-tree-id38915 . -1) (undo-tree-id38916 . -1) (undo-tree-id38917 . -1) (undo-tree-id38918 . -1) (undo-tree-id38919 . -1) (undo-tree-id38920 . -1) (undo-tree-id38921 . -1) (undo-tree-id38922 . -1) (undo-tree-id38923 . -1) (undo-tree-id38924 . -1) (undo-tree-id38925 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -6857) (undo-tree-id38926 . -1) (undo-tree-id38927 . -1) (undo-tree-id38928 . -1) (undo-tree-id38929 . -1) (undo-tree-id38930 . -1) (undo-tree-id38931 . -1) (undo-tree-id38932 . -1) (undo-tree-id38933 . -1) (undo-tree-id38934 . -1) (undo-tree-id38935 . -1) (undo-tree-id38936 . -1) (undo-tree-id38937 . -1) (undo-tree-id38938 . -1) (undo-tree-id38939 . -1) 6858 (6852 . 6858) (6851 . 6852)) nil (26157 3500 158872 189000) 0 nil])
([nil nil ((6939 . 6940) (apply yas--snippet-revive 6877 6939 #s(yas--snippet nil (#s(yas--field 1 6903 6917 nil nil nil t #s(yas--field 2 6919 6933 nil nil nil t #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil)))) #s(yas--field 2 6919 6933 nil nil nil t #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil))) #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil))) #s(yas--exit 6939 nil) 196 nil #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil)) nil nil)) (6936 . 6938) (#("rad" 0 3 (fontified nil)) . 6936) (undo-tree-id37998 . -3) (6935 . 6936) (6932 . 6933) (#("y" 0 1 (fontified nil)) . 6932) (undo-tree-id37999 . -1) (6932 . 6933) (#("y" 0 1 (fontified t)) . -6932) (undo-tree-id38000 . -1) (undo-tree-id38001 . -1) (undo-tree-id38002 . -1) (undo-tree-id38003 . -1) (undo-tree-id38004 . -1) (undo-tree-id38005 . -1) (undo-tree-id38006 . -1) (undo-tree-id38007 . -1) (undo-tree-id38008 . -1) (undo-tree-id38009 . -1) (undo-tree-id38010 . -1) (undo-tree-id38011 . -1) (undo-tree-id38012 . -1) (undo-tree-id38013 . -1) (undo-tree-id38014 . -1) (undo-tree-id38015 . -1) (undo-tree-id38016 . -1) (undo-tree-id38017 . -1) (undo-tree-id38018 . -1) (undo-tree-id38019 . -1) (undo-tree-id38020 . -1) (undo-tree-id38021 . -1) (undo-tree-id38022 . -1) (undo-tree-id38023 . -1) (undo-tree-id38024 . -1) (undo-tree-id38025 . -1) (undo-tree-id38026 . -1) (undo-tree-id38027 . -1) (undo-tree-id38028 . -1) (undo-tree-id38029 . -1) (undo-tree-id38030 . -1) (undo-tree-id38031 . -1) (undo-tree-id38032 . -1) (undo-tree-id38033 . -1) (undo-tree-id38034 . -1) (undo-tree-id38035 . -1) (undo-tree-id38036 . -1) (undo-tree-id38037 . -1) (undo-tree-id38038 . -1) (undo-tree-id38039 . -1) (undo-tree-id38040 . -1) (undo-tree-id38041 . -1) (undo-tree-id38042 . -1) (undo-tree-id38043 . -1) 6933 (6931 . 6933) (6919 . 6931) (#("re" 0 2 (fontified nil)) . 6919) (undo-tree-id38044 . -2) (6919 . 6921) (#("realparticle" 0 12 (fontified nil)) . -6919) (undo-tree-id38045 . -12) (6919 . 6931) (#("re" 0 2 (fontified t)) . -6919) (undo-tree-id38046 . -2) (undo-tree-id38047 . -2) (undo-tree-id38048 . -2) (undo-tree-id38049 . -2) (undo-tree-id38050 . -2) (undo-tree-id38051 . -2) (undo-tree-id38052 . -2) (undo-tree-id38053 . -2) (undo-tree-id38054 . -2) (undo-tree-id38055 . -2) (undo-tree-id38056 . -2) (undo-tree-id38057 . -2) (undo-tree-id38058 . -2) (undo-tree-id38059 . -2) (undo-tree-id38060 . -2) (undo-tree-id38061 . -2) (undo-tree-id38062 . -2) (undo-tree-id38063 . -2) (undo-tree-id38064 . -2) (undo-tree-id38065 . -2) (undo-tree-id38066 . -2) (undo-tree-id38067 . -2) (undo-tree-id38068 . -2) (undo-tree-id38069 . -2) (undo-tree-id38070 . -2) (undo-tree-id38071 . -2) (undo-tree-id38072 . -2) (undo-tree-id38073 . -2) (undo-tree-id38074 . -2) (undo-tree-id38075 . -2) (undo-tree-id38076 . -2) (undo-tree-id38077 . -2) (undo-tree-id38078 . -2) (undo-tree-id38079 . -2) (undo-tree-id38080 . -2) (undo-tree-id38081 . -2) (undo-tree-id38082 . -2) (undo-tree-id38083 . -2) (undo-tree-id38084 . -2) (undo-tree-id38085 . -2) (undo-tree-id38086 . -2) (undo-tree-id38087 . -2) (undo-tree-id38088 . -2) (undo-tree-id38089 . -2) (undo-tree-id38090 . -2) (undo-tree-id38091 . -2) (undo-tree-id38092 . -2) 6921 (6920 . 6921) (#("y" 0 1 (fontified nil)) . 6920) (undo-tree-id38093 . -1) (6919 . 6920) (6916 . 6917) (#("x" 0 1 (fontified nil)) . 6916) (undo-tree-id38094 . -1) (6916 . 6917) (#("x" 0 1 (fontified t)) . -6916) (undo-tree-id38095 . -1) (undo-tree-id38096 . -1) (undo-tree-id38097 . -1) (undo-tree-id38098 . -1) 6917 (6915 . 6917) (6903 . 6915) (#("re" 0 2 (fontified nil)) . 6903) (undo-tree-id38099 . -2) (6903 . 6905) (#("realparticle" 0 12 (fontified nil)) . -6903) (undo-tree-id38100 . -12) (6903 . 6915) (#("re" 0 2 (fontified t)) . -6903) (undo-tree-id38101 . -2) (undo-tree-id38102 . -2) (undo-tree-id38103 . -2) 6905 (6904 . 6905) (#("x" 0 1 (fontified nil)) . 6904) (undo-tree-id38104 . -1) (6903 . 6904) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6903 6917 nil nil nil t #s(yas--field 2 6919 6933 nil nil nil t #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil)))) #s(yas--field 2 6919 6933 nil nil nil t #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil))) #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil))) #s(yas--exit 6939 nil) 196 nil #s(yas--field 3 6935 6938 nil nil nil t #s(yas--exit 6939 nil)) nil nil)) (6877 . 6913) (#("lidar_reading_no_rotation(${1:x}, ${2:y}, ${3:rad})$0" 0 53 (fontified nil)) . 6877) (6877 . 6930) (#("li" 0 2 (fontified nil)) . 6877) (6877 . 6879) (#("lidar_reading_no_rotation(…)" 0 28 (fontified nil)) . -6877) (6877 . 6905) (#("li" 0 2 (fontified t)) . -6877) (undo-tree-id38105 . -1) (undo-tree-id38106 . -2) (undo-tree-id38107 . -2) 6879 (6876 . 6879) (6863 . 6876) (#("li" 0 2 (fontified nil)) . 6863) (6863 . 6865) (#("for_lidar_map" 0 13 (fontified nil)) . -6863) (6863 . 6876) (#("li" 0 2 (fontified t)) . -6863) (undo-tree-id38108 . -2) (undo-tree-id38109 . -2) (undo-tree-id38110 . -2) 6865 (6863 . 6865) (#("p" 0 1 (fontified t)) . -6863) (undo-tree-id38111 . -1) (undo-tree-id38112 . -1) (#("a" 0 1 (fontified t)) . -6864) (undo-tree-id38113 . -1) (undo-tree-id38114 . -1) 6865 (6847 . 6865)) nil (26157 3500 157305 173000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6944 . 6945) (#("
" 0 1 (fontified nil)) . -7038) (6940 . 7039) 6939) nil (26157 3500 156769 131000) 0 nil])
([nil nil ((#("    let robotscan = for_lidar_map.lidar_reading_no_rotation(realparticle.x, realparticle.y, 100);
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 17 (fontified t face font-lock-variable-name-face) 17 20 (fontified t) 20 34 (fontified t) 34 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 73 (fontified t) 73 74 (fontified t) 74 76 (fontified t) 76 89 (fontified t) 89 90 (fontified t) 90 95 (fontified t) 95 96 (fontified t face (rainbow-delimiters-depth-2-face)) 96 97 (fontified t) 97 98 (fontified t)) . 6941) (undo-tree-id37936 . -97) (undo-tree-id37937 . 1) (undo-tree-id37938 . -4) (undo-tree-id37939 . -4) (undo-tree-id37940 . -4) (undo-tree-id37941 . -4) (undo-tree-id37942 . -4) (undo-tree-id37943 . -4) (undo-tree-id37944 . -4) (undo-tree-id37945 . -4) (undo-tree-id37946 . -4) (undo-tree-id37947 . -4) (undo-tree-id37948 . -4) (undo-tree-id37949 . -4) (undo-tree-id37950 . -4) (undo-tree-id37951 . -4) (undo-tree-id37952 . -4) (undo-tree-id37953 . -4) (undo-tree-id37954 . -4) (undo-tree-id37955 . -4) (undo-tree-id37956 . -4) (undo-tree-id37957 . -4) (undo-tree-id37958 . -4) (undo-tree-id37959 . -4) (undo-tree-id37960 . -4) (undo-tree-id37961 . -4) (undo-tree-id37962 . -4) (undo-tree-id37963 . -4) (undo-tree-id37964 . -4) (undo-tree-id37965 . -4) (undo-tree-id37966 . -4) (undo-tree-id37967 . -4) (undo-tree-id37968 . -4) (undo-tree-id37969 . -4) (undo-tree-id37970 . -4) (undo-tree-id37971 . -4) (undo-tree-id37972 . -4) (undo-tree-id37973 . -4) (undo-tree-id37974 . -4) (undo-tree-id37975 . -4) (undo-tree-id37976 . -4) (undo-tree-id37977 . -4) (undo-tree-id37978 . -4) (undo-tree-id37979 . -4) (undo-tree-id37980 . -4) (undo-tree-id37981 . -4) (undo-tree-id37982 . -4) (undo-tree-id37983 . -4) (undo-tree-id37984 . -4) (undo-tree-id37985 . -4) (undo-tree-id37986 . -4) (undo-tree-id37987 . -4) (undo-tree-id37988 . -4) (undo-tree-id37989 . -4) (undo-tree-id37990 . -4) (undo-tree-id37991 . -4) (undo-tree-id37992 . -4) (undo-tree-id37993 . -4) (undo-tree-id37994 . -4) (undo-tree-id37995 . -4) (undo-tree-id37996 . -4) (undo-tree-id37997 . -98) 6945) nil (26157 3500 156753 635000) 0 nil])
([nil nil ((6939 . 6942) (t 26157 3500 258412 134000)) nil (26157 3523 588746 343000) 0 nil])
([nil nil ((apply yas--snippet-revive 6940 6952 #s(yas--snippet nil nil #s(yas--exit 6952 nil) 197 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6952 nil) 197 nil nil nil nil)) (6940 . 6952) (#("get_points()$0" 0 14 (fontified nil)) . 6940) (6940 . 6954) (#("get" 0 3 (fontified nil)) . 6940) (6940 . 6943) (#("get_points()" 0 12 (fontified nil)) . -6940) (6940 . 6952) (#("get" 0 3 (fontified t)) . -6940) (undo-tree-id39040 . 2) (undo-tree-id39041 . -1) (undo-tree-id39042 . -3) (undo-tree-id39043 . -3) (undo-tree-id39044 . -2) (undo-tree-id39045 . -2) (undo-tree-id39046 . -2) (undo-tree-id39047 . -2) (undo-tree-id39048 . -2) (undo-tree-id39049 . -2) (undo-tree-id39050 . -2) (undo-tree-id39051 . -2) (undo-tree-id39052 . -2) (undo-tree-id39053 . -2) (undo-tree-id39054 . -2) (undo-tree-id39055 . -2) (undo-tree-id39056 . -2) (undo-tree-id39057 . -2) (undo-tree-id39058 . -2) (undo-tree-id39059 . -2) (undo-tree-id39060 . -2) (undo-tree-id39061 . -2) (undo-tree-id39062 . -2) (undo-tree-id39063 . -2) (undo-tree-id39064 . -2) (undo-tree-id39065 . -2) (undo-tree-id39066 . -2) (undo-tree-id39067 . -2) (undo-tree-id39068 . -2) (undo-tree-id39069 . -2) (undo-tree-id39070 . -2) (undo-tree-id39071 . -2) (undo-tree-id39072 . -2) (undo-tree-id39073 . -2) (undo-tree-id39074 . -2) (undo-tree-id39075 . -2) (undo-tree-id39076 . -2) (undo-tree-id39077 . -2) (undo-tree-id39078 . -2) (undo-tree-id39079 . -2) (undo-tree-id39080 . -2) (undo-tree-id39081 . -2) (undo-tree-id39082 . -2) (undo-tree-id39083 . -2) (undo-tree-id39084 . -2) (undo-tree-id39085 . -2) (undo-tree-id39086 . -2) (undo-tree-id39087 . -2) (undo-tree-id39088 . -2) (undo-tree-id39089 . -2) (undo-tree-id39090 . -2) (undo-tree-id39091 . -2) (undo-tree-id39092 . -2) (undo-tree-id39093 . -2) (undo-tree-id39094 . -2) (undo-tree-id39095 . -2) (undo-tree-id39096 . -2) (undo-tree-id39097 . -2) (undo-tree-id39098 . -2) (undo-tree-id39099 . -2) (undo-tree-id39100 . -2) (undo-tree-id39101 . -2) (undo-tree-id39102 . -2) (undo-tree-id39103 . -2) (undo-tree-id39104 . -2) (undo-tree-id39105 . -2) (undo-tree-id39106 . -2) (undo-tree-id39107 . -2) (undo-tree-id39108 . -2) (undo-tree-id39109 . -2) (undo-tree-id39110 . -2) (undo-tree-id39111 . -2) (undo-tree-id39112 . -2) (undo-tree-id39113 . -2) (undo-tree-id39114 . -2) (undo-tree-id39115 . -2) (undo-tree-id39116 . -2) (undo-tree-id39117 . -2) (undo-tree-id39118 . -1) (undo-tree-id39119 . -1) (undo-tree-id39120 . -1) (undo-tree-id39121 . -1) (undo-tree-id39122 . -1) (undo-tree-id39123 . -1) (undo-tree-id39124 . -1) (undo-tree-id39125 . -1) (undo-tree-id39126 . -1) (undo-tree-id39127 . -1) (undo-tree-id39128 . -1) (undo-tree-id39129 . -1) (undo-tree-id39130 . -1) (undo-tree-id39131 . -1) (undo-tree-id39132 . -1) (undo-tree-id39133 . -1) (undo-tree-id39134 . -1) (undo-tree-id39135 . -1) (undo-tree-id39136 . -1) (undo-tree-id39137 . -1) (undo-tree-id39138 . -1) (undo-tree-id39139 . -1) (undo-tree-id39140 . -1) (undo-tree-id39141 . -1) (undo-tree-id39142 . -1) (undo-tree-id39143 . -1) (undo-tree-id39144 . -1) (undo-tree-id39145 . -1) (undo-tree-id39146 . -1) (undo-tree-id39147 . -1) (undo-tree-id39148 . -1) (undo-tree-id39149 . -1) (undo-tree-id39150 . -1) (undo-tree-id39151 . -1) (undo-tree-id39152 . -1) (undo-tree-id39153 . -1) (undo-tree-id39154 . -1) (undo-tree-id39155 . -1) (undo-tree-id39156 . -1) (undo-tree-id39157 . -1) (undo-tree-id39158 . -1) (undo-tree-id39159 . -1) (undo-tree-id39160 . -1) (undo-tree-id39161 . -1) (undo-tree-id39162 . -1) (undo-tree-id39163 . -1) (undo-tree-id39164 . -1) (undo-tree-id39165 . -1) (undo-tree-id39166 . -1) (undo-tree-id39167 . -1) (undo-tree-id39168 . -1) (undo-tree-id39169 . -1) (undo-tree-id39170 . -1) (undo-tree-id39171 . -1) (undo-tree-id39172 . -1) (undo-tree-id39173 . -1) (undo-tree-id39174 . -1) (undo-tree-id39175 . -1) (undo-tree-id39176 . -1) (undo-tree-id39177 . -1) (undo-tree-id39178 . -1) (undo-tree-id39179 . -1) (undo-tree-id39180 . -1) (undo-tree-id39181 . -1) (undo-tree-id39182 . -1) (undo-tree-id39183 . -1) (undo-tree-id39184 . -1) (undo-tree-id39185 . -2) (undo-tree-id39186 . -2) (undo-tree-id39187 . -2) (undo-tree-id39188 . -2) (undo-tree-id39189 . -2) (undo-tree-id39190 . -2) (undo-tree-id39191 . -2) (undo-tree-id39192 . -2) (undo-tree-id39193 . -2) (undo-tree-id39194 . -2) (undo-tree-id39195 . -2) (undo-tree-id39196 . -2) (undo-tree-id39197 . -2) (undo-tree-id39198 . -2) (undo-tree-id39199 . -2) (undo-tree-id39200 . -2) (undo-tree-id39201 . -2) (undo-tree-id39202 . -2) (undo-tree-id39203 . -2) (undo-tree-id39204 . -2) (undo-tree-id39205 . -2) (undo-tree-id39206 . -2) (undo-tree-id39207 . -2) (undo-tree-id39208 . -2) (undo-tree-id39209 . -2) (undo-tree-id39210 . -2) (undo-tree-id39211 . -2) (undo-tree-id39212 . -2) (undo-tree-id39213 . -2) (undo-tree-id39214 . -2) (undo-tree-id39215 . -2) (undo-tree-id39216 . -2) (undo-tree-id39217 . -2) (undo-tree-id39218 . -2) (undo-tree-id39219 . -3) (undo-tree-id39220 . -3) (undo-tree-id39221 . -3) (undo-tree-id39222 . -3) (undo-tree-id39223 . -3) (undo-tree-id39224 . -3) (undo-tree-id39225 . -3) (undo-tree-id39226 . -3) (undo-tree-id39227 . -3) (undo-tree-id39228 . -3) (undo-tree-id39229 . -3) (undo-tree-id39230 . -3) (undo-tree-id39231 . -3) (undo-tree-id39232 . -3) (undo-tree-id39233 . -3) (undo-tree-id39234 . -3) (undo-tree-id39235 . -3) (undo-tree-id39236 . -3) (undo-tree-id39237 . -3) (undo-tree-id39238 . -3) (undo-tree-id39239 . -3) (undo-tree-id39240 . -3) (undo-tree-id39241 . -3) (undo-tree-id39242 . -3) (undo-tree-id39243 . -3) (undo-tree-id39244 . -3) (undo-tree-id39245 . -3) (undo-tree-id39246 . -3) (undo-tree-id39247 . -3) (undo-tree-id39248 . -3) (undo-tree-id39249 . -3) (undo-tree-id39250 . -3) (undo-tree-id39251 . -3) (undo-tree-id39252 . -3) (undo-tree-id39253 . -3) (undo-tree-id39254 . -3) (undo-tree-id39255 . -3) (undo-tree-id39256 . -3) (undo-tree-id39257 . -3) (undo-tree-id39258 . -3) (undo-tree-id39259 . -3) (undo-tree-id39260 . -3) (undo-tree-id39261 . -3) (undo-tree-id39262 . -3) (undo-tree-id39263 . -3) (undo-tree-id39264 . -3) (undo-tree-id39265 . -3) (undo-tree-id39266 . -3) (undo-tree-id39267 . -3) (undo-tree-id39268 . -3) (undo-tree-id39269 . -3) (undo-tree-id39270 . -3) (undo-tree-id39271 . -3) (undo-tree-id39272 . -3) (undo-tree-id39273 . -3) (undo-tree-id39274 . -3) (undo-tree-id39275 . -3) (undo-tree-id39276 . -3) (undo-tree-id39277 . -3) (undo-tree-id39278 . -3) (undo-tree-id39279 . -3) (undo-tree-id39280 . -3) (undo-tree-id39281 . -3) (undo-tree-id39282 . -3) (undo-tree-id39283 . -3) (undo-tree-id39284 . -3) (undo-tree-id39285 . -3) (undo-tree-id39286 . -3) (undo-tree-id39287 . -3) (undo-tree-id39288 . -3) (undo-tree-id39289 . -3) (undo-tree-id39290 . -3) (undo-tree-id39291 . -3) (undo-tree-id39292 . -3) (undo-tree-id39293 . -3) (undo-tree-id39294 . -3) (undo-tree-id39295 . -3) (undo-tree-id39296 . -3) (undo-tree-id39297 . -3) (undo-tree-id39298 . -3) (undo-tree-id39299 . -3) (undo-tree-id39300 . -3) (undo-tree-id39301 . -3) (undo-tree-id39302 . -3) (undo-tree-id39303 . -3) (undo-tree-id39304 . -3) (undo-tree-id39305 . -3) (undo-tree-id39306 . -3) (undo-tree-id39307 . -3) (undo-tree-id39308 . -3) (undo-tree-id39309 . -3) (undo-tree-id39310 . -3) 6943 (6942 . 6943)) nil (26157 3523 588715 148000) 0 nil])
([nil nil ((6970 . 6971) (#("6" 0 1 (fontified t)) . -6970) (undo-tree-id38943 . -1) (undo-tree-id38944 . -1) (undo-tree-id38945 . -1) (undo-tree-id38946 . -1) (undo-tree-id38947 . -1) (undo-tree-id38948 . -1) (undo-tree-id38949 . -1) (undo-tree-id38950 . -1) (undo-tree-id38951 . -1) (undo-tree-id38952 . -1) (undo-tree-id38953 . -1) (undo-tree-id38954 . -1) (undo-tree-id38955 . -1) (undo-tree-id38956 . -1) (undo-tree-id38957 . -1) (undo-tree-id38958 . -1) (undo-tree-id38959 . -1) (undo-tree-id38960 . -1) (undo-tree-id38961 . -1) (undo-tree-id38962 . -1) (undo-tree-id38963 . -1) (undo-tree-id38964 . -1) 6971 (#("m" 0 1 (fontified nil)) . 6971) (undo-tree-id38965 . -1) (6970 . 6971) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6970 6971 nil nil nil t #s(yas--exit 6972 nil))) #s(yas--exit 6972 nil) 198 nil #s(yas--field 1 6970 6971 nil nil nil t #s(yas--exit 6972 nil)) nil nil)) (6953 . 6972) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 6953) (6953 . 6979) (#("s" 0 1 (fontified nil)) . 6953) (6953 . 6954) (#("separate_and_set(…)" 0 19 (fontified nil)) . -6953) (6953 . 6972) (#("s" 0 1 (fontified t)) . -6953) (undo-tree-id38966 . -1) (undo-tree-id38967 . -1) (undo-tree-id38968 . -1) (undo-tree-id38969 . -1) (undo-tree-id38970 . -1) (undo-tree-id38971 . -1) (undo-tree-id38972 . -1) (undo-tree-id38973 . -1) (undo-tree-id38974 . -1) (undo-tree-id38975 . -1) (undo-tree-id38976 . -1) (undo-tree-id38977 . -1) (undo-tree-id38978 . -1) (undo-tree-id38979 . -1) (undo-tree-id38980 . -1) (undo-tree-id38981 . -1) (undo-tree-id38982 . -1) (undo-tree-id38983 . -1) (undo-tree-id38984 . -1) (undo-tree-id38985 . -1) (undo-tree-id38986 . -1) (undo-tree-id38987 . -1) (undo-tree-id38988 . -1) (undo-tree-id38989 . -1) (undo-tree-id38990 . -1) (undo-tree-id38991 . -1) (undo-tree-id38992 . -1) (undo-tree-id38993 . -1) (undo-tree-id38994 . -1) (undo-tree-id38995 . -1) (undo-tree-id38996 . -1) (undo-tree-id38997 . -1) (undo-tree-id38998 . -1) (undo-tree-id38999 . -1) (undo-tree-id39000 . -1) (undo-tree-id39001 . -1) (undo-tree-id39002 . -1) (undo-tree-id39003 . -1) (undo-tree-id39004 . -1) (undo-tree-id39005 . -1) (undo-tree-id39006 . -1) (undo-tree-id39007 . -1) (undo-tree-id39008 . -1) (undo-tree-id39009 . -1) (undo-tree-id39010 . -1) (undo-tree-id39011 . -1) (undo-tree-id39012 . -1) (undo-tree-id39013 . -1) (undo-tree-id39014 . -1) (undo-tree-id39015 . -1) (undo-tree-id39016 . -1) (undo-tree-id39017 . -1) (undo-tree-id39018 . -1) (undo-tree-id39019 . -1) (undo-tree-id39020 . -1) (undo-tree-id39021 . -1) (undo-tree-id39022 . -1) (undo-tree-id39023 . -1) (undo-tree-id39024 . -1) (undo-tree-id39025 . -1) (undo-tree-id39026 . -1) (undo-tree-id39027 . -1) (undo-tree-id39028 . -1) (undo-tree-id39029 . -1) (undo-tree-id39030 . -1) (undo-tree-id39031 . -1) (undo-tree-id39032 . -1) (undo-tree-id39033 . -1) (undo-tree-id39034 . -1) (undo-tree-id39035 . -1) (undo-tree-id39036 . -1) (undo-tree-id39037 . -1) (undo-tree-id39038 . -1) (undo-tree-id39039 . -1) 6954 (6952 . 6954)) nil (26157 3523 587449 47000) 0 nil])
([nil nil ((apply yas--snippet-revive 6953 6972 #s(yas--snippet nil (#s(yas--field 1 6970 6971 nil nil nil t #s(yas--exit 6972 nil))) #s(yas--exit 6972 nil) 198 nil #s(yas--field 1 6970 6971 nil nil nil t #s(yas--exit 6972 nil)) nil nil))) nil (26157 3523 587234 992000) 0 nil])
([nil nil ((#(".separate_and_set(7);" 0 1 (fontified t) 1 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t)) . 6952) (undo-tree-id39384 . -21) (undo-tree-id39385 . -18) (undo-tree-id39386 . 2) (undo-tree-id39387 . -20) (undo-tree-id39388 . -21) (t 26157 3523 713788 941000)) nil (26157 3545 955442 149000) 0 nil])
([nil nil ((6985 . 6986) (#("5" 0 1 (fontified t)) . -6985) (undo-tree-id39311 . -1) (undo-tree-id39312 . -1) (undo-tree-id39313 . -1) (undo-tree-id39314 . -1) (undo-tree-id39315 . -1) (undo-tree-id39316 . -1) (undo-tree-id39317 . -1) (undo-tree-id39318 . -1) (undo-tree-id39319 . -1) (undo-tree-id39320 . -1) (undo-tree-id39321 . -1) (undo-tree-id39322 . -1) (undo-tree-id39323 . -1) (undo-tree-id39324 . -1) (undo-tree-id39325 . -1) (undo-tree-id39326 . -1) (undo-tree-id39327 . -1) (undo-tree-id39328 . -1) (undo-tree-id39329 . -1) (undo-tree-id39330 . -1) (undo-tree-id39331 . -1) (undo-tree-id39332 . -1) (undo-tree-id39333 . -1) (undo-tree-id39334 . -1) (undo-tree-id39335 . -1) (undo-tree-id39336 . -1) (undo-tree-id39337 . -1) (undo-tree-id39338 . -1) (undo-tree-id39339 . -1) (undo-tree-id39340 . -1) (undo-tree-id39341 . -1) (undo-tree-id39342 . -1) (undo-tree-id39343 . -1) (undo-tree-id39344 . -1) (undo-tree-id39345 . -1) (undo-tree-id39346 . -1) (undo-tree-id39347 . -1) (undo-tree-id39348 . -1) (undo-tree-id39349 . -1) (undo-tree-id39350 . -1) (undo-tree-id39351 . -1) (undo-tree-id39352 . -1) (undo-tree-id39353 . -1) (undo-tree-id39354 . -1) (undo-tree-id39355 . -1) (undo-tree-id39356 . -1) (undo-tree-id39357 . -1) (undo-tree-id39358 . -1) (undo-tree-id39359 . -1) (undo-tree-id39360 . -1) (undo-tree-id39361 . -1) (undo-tree-id39362 . -1) (undo-tree-id39363 . -1) (undo-tree-id39364 . -1) (undo-tree-id39365 . -1) (undo-tree-id39366 . -1) (undo-tree-id39367 . -1) (undo-tree-id39368 . -1) (undo-tree-id39369 . -1) (undo-tree-id39370 . -1) (undo-tree-id39371 . -1) (undo-tree-id39372 . -1) (undo-tree-id39373 . -1) (undo-tree-id39374 . -1) (undo-tree-id39375 . -1) (undo-tree-id39376 . -1) (undo-tree-id39377 . -1) 6986 (#("m" 0 1 (fontified nil)) . 6986) (undo-tree-id39378 . -1) (6985 . 6986) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6985 6986 nil nil nil t #s(yas--exit 6987 nil))) #s(yas--exit 6987 nil) 199 nil #s(yas--field 1 6985 6986 nil nil nil t #s(yas--exit 6987 nil)) nil nil)) (6968 . 6987) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 6968) (6968 . 6994) (#("s" 0 1 (fontified nil)) . 6968) (6968 . 6969) (#("separate_and_set(…)" 0 19 (fontified nil)) . -6968) (6968 . 6987) (#("s" 0 1 (fontified t)) . -6968) (undo-tree-id39379 . -1) (undo-tree-id39380 . -1) (undo-tree-id39381 . -1) 6969 (6967 . 6969) (6958 . 6967) (#("ro" 0 2 (fontified nil)) . 6958) (6958 . 6960) (#("robotscan" 0 9 (fontified nil)) . -6958) (6958 . 6967) (#("ro" 0 2 (fontified t)) . -6958) (undo-tree-id39382 . -2) (undo-tree-id39383 . -2) 6960 (6958 . 6960) (6953 . 6958) (6952 . 6953)) nil (26157 3545 955417 867000) 0 nil])
([nil nil ((6987 . 6988) (apply yas--snippet-revive 6968 6987 #s(yas--snippet nil (#s(yas--field 1 6985 6986 nil nil nil t #s(yas--exit 6987 nil))) #s(yas--exit 6987 nil) 199 nil #s(yas--field 1 6985 6986 nil nil nil t #s(yas--exit 6987 nil)) nil nil))) nil (26157 3545 955249 132000) 0 nil])
([nil nil ((6851 . 6855) (t 26157 3546 57217 590000)) nil (26157 3551 752518 684000) 0 nil])
([nil nil ((7023 . 7025) (7020 . 7023) (#("new" 0 3 (fontified nil)) . 7020) (7020 . 7023) (#("new" 0 3 (fontified t)) . -7020) (undo-tree-id39478 . -3) (undo-tree-id39479 . -3) (undo-tree-id39480 . -3) 7023 (7018 . 7023) (7015 . 7018) (#("Vec" 0 3 (fontified nil)) . 7015) (7015 . 7018) (#("Vec" 0 3 (fontified t face font-lock-type-face)) . -7015) (undo-tree-id39481 . -1) (undo-tree-id39482 . -3) (undo-tree-id39483 . -3) 7018 (7015 . 7018) (6998 . 7015) (#("l" 0 1 (fontified t)) . -6998) (undo-tree-id39484 . -1) (undo-tree-id39485 . -1) (#("k" 0 1 (fontified t)) . -6999) (undo-tree-id39486 . -1) (undo-tree-id39487 . -1) (#("e" 0 1 (fontified t)) . -7000) (undo-tree-id39488 . -1) (undo-tree-id39489 . -1) (#("t" 0 1 (fontified t)) . -7001) (undo-tree-id39490 . -1) (undo-tree-id39491 . -1) 7002 (6998 . 7002) (#("f" 0 1 (fontified t)) . -6998) (undo-tree-id39492 . -1) (undo-tree-id39493 . -1) (undo-tree-id39494 . -1) (#("o" 0 1 (fontified t)) . -6999) (undo-tree-id39495 . -1) (undo-tree-id39496 . -1) (undo-tree-id39497 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -7000) (undo-tree-id39498 . -1) (undo-tree-id39499 . -1) (undo-tree-id39500 . -1) (#(" " 0 1 (fontified t)) . -7001) (undo-tree-id39501 . -1) (undo-tree-id39502 . -1) (undo-tree-id39503 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -7002) (undo-tree-id39504 . -1) (undo-tree-id39505 . -1) (undo-tree-id39506 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -7003) (undo-tree-id39507 . -1) (undo-tree-id39508 . -1) (undo-tree-id39509 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -7004) (undo-tree-id39510 . -1) (undo-tree-id39511 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -7005) (undo-tree-id39512 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -7006) (undo-tree-id39513 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -7007) (undo-tree-id39514 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -7008) (undo-tree-id39515 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7009) (undo-tree-id39516 . -1) (#(" " 0 1 (fontified t)) . -7010) (undo-tree-id39517 . -1) (#("i" 0 1 (fontified t)) . -7011) (undo-tree-id39518 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -7012) (undo-tree-id39519 . -1) (#(" " 0 1 (fontified t)) . -7013) (undo-tree-id39520 . -1) 7014 (7006 . 7014) (6998 . 7006) (6994 . 6998) (#("    " 0 4 (fontified nil)) . 6993) (undo-tree-id39521 . -4) (6997 . 6998) (6993 . 6997) (t 26157 3551 841073 122000)) nil (26157 3637 372471 681000) 0 nil])
([nil nil ((7028 . 7029) (7029 . 7033) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 7028) (7028 . 7029) (7027 . 7029) (7025 . 7028)) nil (26157 3637 372383 75000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -7026) (undo-tree-id39477 . -1) 7027) nil (26157 3637 372378 833000) 0 nil])
([nil nil ((#("	
" 0 2 (fontified t)) . 7027) (undo-tree-id39476 . -1)) nil (26157 3637 372374 589000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 6 (fontified t)) . 7027) (undo-tree-id39475 . -5)) nil (26157 3637 372370 644000) 0 nil])
([nil nil ((7026 . 7027)) nil (26157 3637 372367 227000) 0 nil])
([nil nil ((7027 . 7028) (#("	" 0 1 (fontified nil)) . 7026) (undo-tree-id39472 . -1) (7026 . 7028) (#(" " 0 1 (fontified nil)) . 7025) (undo-tree-id39473 . -1) (undo-tree-id39474 . -1) (7026 . 7027)) nil (26157 3637 372364 235000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7026)) nil (26157 3637 372355 534000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7025) (undo-tree-id39469 . -1) (undo-tree-id39470 . -1) (undo-tree-id39471 . -1) 7026) nil (26157 3637 372352 754000) 0 nil])
([nil nil ((7033 . 7049) (#("p" 0 1 (fontified t)) . -7033) (undo-tree-id39466 . -1) (undo-tree-id39467 . -1) 7034 (7033 . 7034) (7029 . 7033) (#("    " 0 4 (fontified nil)) . 7028) (undo-tree-id39468 . -4) (7027 . 7033)) nil (26157 3637 372343 903000) 0 nil])
([nil nil ((7065 . 7066) (7066 . 7070) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 7065) (7065 . 7066) (7064 . 7066) (7062 . 7065) (7049 . 7062) (#("par" 0 3 (fontified nil)) . 7049) (7049 . 7052) (#("particle_list" 0 13 (fontified nil)) . -7049) (7049 . 7062) (#("par" 0 3 (fontified t)) . -7049) (undo-tree-id39462 . -2) (undo-tree-id39463 . -3) (undo-tree-id39464 . -3) (undo-tree-id39465 . -3) 7052 (7049 . 7052)) nil (26157 3637 372330 709000) 0 nil])
([nil nil ((7163 . 7164) (apply yas--snippet-revive 7151 7163 #s(yas--snippet nil nil #s(yas--exit 7163 nil) 201 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7163 nil) 201 nil nil nil nil)) (7151 . 7163) (#("get_points()$0" 0 14 (fontified nil)) . 7151) (7151 . 7165) (#("ge" 0 2 (fontified nil)) . 7151) (7151 . 7153) (#("get_points()" 0 12 (fontified nil)) . -7151) (7151 . 7163) (#("ge" 0 2 (fontified t)) . -7151) (undo-tree-id39389 . -1) (undo-tree-id39390 . -2) (undo-tree-id39391 . -2) (undo-tree-id39392 . -2) (undo-tree-id39393 . -2) (undo-tree-id39394 . -2) (undo-tree-id39395 . -2) (undo-tree-id39396 . -2) (undo-tree-id39397 . -2) (undo-tree-id39398 . -2) (undo-tree-id39399 . -2) (undo-tree-id39400 . -2) (undo-tree-id39401 . -2) (undo-tree-id39402 . -2) (undo-tree-id39403 . -2) (undo-tree-id39404 . -2) (undo-tree-id39405 . -2) (undo-tree-id39406 . -2) (undo-tree-id39407 . -2) (undo-tree-id39408 . -2) (undo-tree-id39409 . -2) (undo-tree-id39410 . -2) (undo-tree-id39411 . -2) (undo-tree-id39412 . -2) (undo-tree-id39413 . -2) (undo-tree-id39414 . -2) (undo-tree-id39415 . -2) (undo-tree-id39416 . -2) 7153 (7151 . 7153) (7150 . 7151) (apply yas--snippet-revive 7096 7150 #s(yas--snippet nil (#s(yas--field 1 7122 7132 nil nil nil t #s(yas--field 2 7134 7144 nil nil nil t #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil)))) #s(yas--field 2 7134 7144 nil nil nil t #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil))) #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil))) #s(yas--exit 7150 nil) 200 nil #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil)) nil nil)) (7147 . 7149) (#("rad" 0 3 (fontified nil)) . 7147) (7146 . 7147) (7143 . 7144) (#("y" 0 1 (fontified t)) . -7143) (undo-tree-id39417 . -1) (undo-tree-id39418 . -1) 7144 (7143 . 7144) (7142 . 7143) (7134 . 7142) (#("pa" 0 2 (fontified nil)) . 7134) (7134 . 7136) (#("particle" 0 8 (fontified nil)) . -7134) (7134 . 7142) (#("pa" 0 2 (fontified t)) . -7134) (undo-tree-id39419 . -2) (undo-tree-id39420 . -2) 7136 (7135 . 7136) (#("y" 0 1 (fontified nil)) . 7135) (7134 . 7135) (7131 . 7132) (#("x" 0 1 (fontified nil)) . 7131) (7131 . 7132) (#("x" 0 1 (fontified t)) . -7131) (undo-tree-id39421 . -1) (undo-tree-id39422 . -1) (undo-tree-id39423 . -1) 7132 (7131 . 7132) (7130 . 7131) (7122 . 7130) (#("pa" 0 2 (fontified nil)) . 7122) (7122 . 7124) (#("particle" 0 8 (fontified nil)) . -7122) (7122 . 7130) (#("pa" 0 2 (fontified t)) . -7122) (undo-tree-id39424 . -2) (undo-tree-id39425 . -2) 7124 (7123 . 7124) (#("x" 0 1 (fontified nil)) . 7123) (7122 . 7123) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7122 7132 nil nil nil t #s(yas--field 2 7134 7144 nil nil nil t #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil)))) #s(yas--field 2 7134 7144 nil nil nil t #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil))) #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil))) #s(yas--exit 7150 nil) 200 nil #s(yas--field 3 7146 7149 nil nil nil t #s(yas--exit 7150 nil)) nil nil)) (7096 . 7132) (#("lidar_reading_no_rotation(${1:x}, ${2:y}, ${3:rad})$0" 0 53 (fontified nil)) . 7096) (7096 . 7149) (#("li" 0 2 (fontified nil)) . 7096) (7096 . 7098) (#("lidar_reading_no_rotation(…)" 0 28 (fontified nil)) . -7096) (7096 . 7124) (#("li" 0 2 (fontified t)) . -7096) (undo-tree-id39426 . -1) (undo-tree-id39427 . -2) (undo-tree-id39428 . -2) 7098 (7096 . 7098) (#("p" 0 1 (fontified t)) . -7096) (undo-tree-id39429 . -1) (undo-tree-id39430 . -1) (undo-tree-id39431 . -1) (#("a" 0 1 (fontified t)) . -7097) (undo-tree-id39432 . -1) (undo-tree-id39433 . -1) 7098 (7095 . 7098) (7082 . 7095) (#("for" 0 3 (fontified nil)) . 7082) (7082 . 7085) (#("for_lidar_map" 0 13 (fontified nil)) . -7082) (7082 . 7095) (#("for" 0 3 (fontified t face font-lock-keyword-face)) . -7082) (undo-tree-id39434 . -3) (undo-tree-id39435 . -3) 7085 (7082 . 7085) (#("p" 0 1 (fontified t)) . -7082) (undo-tree-id39436 . -1) (undo-tree-id39437 . -1) (#("a" 0 1 (fontified t)) . -7083) (undo-tree-id39438 . -1) (undo-tree-id39439 . -1) (#("r" 0 1 (fontified t)) . -7084) (undo-tree-id39440 . -1) (undo-tree-id39441 . -1) (#("t" 0 1 (fontified t)) . -7085) (undo-tree-id39442 . -1) (undo-tree-id39443 . -1) (#("i" 0 1 (fontified t)) . -7086) (undo-tree-id39444 . -1) (undo-tree-id39445 . -1) (#("c" 0 1 (fontified t)) . -7087) (undo-tree-id39446 . -1) (undo-tree-id39447 . -1) (#("l" 0 1 (fontified t)) . -7088) (undo-tree-id39448 . -1) (undo-tree-id39449 . -1) (#("e" 0 1 (fontified t)) . -7089) (undo-tree-id39450 . -1) (undo-tree-id39451 . -1) 7090 (7082 . 7090) (#("pa" 0 2 (fontified nil)) . 7082) (7082 . 7084) (#("particle" 0 8 (fontified nil)) . -7082) (7082 . 7090) (#("pa" 0 2 (fontified t)) . -7082) (undo-tree-id39452 . -2) (undo-tree-id39453 . -2) 7084 (7075 . 7084) (7074 . 7075) (7072 . 7074) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7072) (undo-tree-id39454 . -1) (undo-tree-id39455 . -1) 7073 (7070 . 7073) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -7070) (undo-tree-id39456 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7071) (undo-tree-id39457 . -1) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -7072) (undo-tree-id39458 . -1) 7073 (7068 . 7073) (7066 . 7068) (#("i" 0 1 (fontified t)) . -7066) (undo-tree-id39459 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -7067) (undo-tree-id39460 . -1) (#(" " 0 1 (fontified t)) . -7068) (undo-tree-id39461 . -1) 7069 (7066 . 7069)) nil (26157 3637 372279 645000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -7165) (undo-tree-id39841 . -1) (undo-tree-id39842 . -1) (undo-tree-id39843 . -1) (undo-tree-id39844 . -1) (undo-tree-id39845 . -1) (undo-tree-id39846 . -1) (undo-tree-id39847 . -1) (undo-tree-id39848 . -1) (undo-tree-id39849 . -1) (undo-tree-id39850 . -1) (undo-tree-id39851 . -1) (undo-tree-id39852 . -1) (undo-tree-id39853 . -1) 7166 (7164 . 7166) (t 26157 3637 495086 995000)) nil (26157 3654 551781 303000) 0 nil])
([nil nil ((7167 . 7172) (7166 . 7167) (#("	" 0 1 (fontified nil)) . 7165) (undo-tree-id39829 . -1) (undo-tree-id39830 . -1) (undo-tree-id39831 . -1) (undo-tree-id39832 . -1) (undo-tree-id39833 . -1) (undo-tree-id39834 . -1) (undo-tree-id39835 . -1) (undo-tree-id39836 . -1) (undo-tree-id39837 . -1) (undo-tree-id39838 . -1) (undo-tree-id39839 . -1) (undo-tree-id39840 . -1) (7166 . 7167) (7165 . 7166)) nil (26157 3654 551754 983000) 0 nil])
([nil nil ((7014 . 7020) (#("Ve" 0 2 (fontified nil)) . 7014) (7014 . 7016) (#("Vec<_>" 0 6 (fontified nil)) . -7014) (7014 . 7020) (#("Ve" 0 2 (fontified t face font-lock-type-face)) . -7014) (undo-tree-id39716 . -2) (undo-tree-id39717 . -2) (undo-tree-id39718 . -1) (undo-tree-id39719 . -1) (undo-tree-id39720 . -1) (undo-tree-id39721 . -1) (undo-tree-id39722 . -1) (undo-tree-id39723 . -1) (undo-tree-id39724 . -1) (undo-tree-id39725 . -1) (undo-tree-id39726 . -1) (undo-tree-id39727 . -1) (undo-tree-id39728 . -1) (undo-tree-id39729 . -1) (undo-tree-id39730 . -1) (undo-tree-id39731 . -1) (undo-tree-id39732 . -1) (undo-tree-id39733 . -1) (undo-tree-id39734 . -1) (undo-tree-id39735 . -1) (undo-tree-id39736 . -1) (undo-tree-id39737 . -1) (undo-tree-id39738 . -1) (undo-tree-id39739 . -1) (undo-tree-id39740 . -1) (undo-tree-id39741 . -1) (undo-tree-id39742 . -1) (undo-tree-id39743 . -1) (undo-tree-id39744 . -1) (undo-tree-id39745 . -1) (undo-tree-id39746 . -1) (undo-tree-id39747 . -1) (undo-tree-id39748 . -1) (undo-tree-id39749 . -1) (undo-tree-id39750 . -1) (undo-tree-id39751 . -1) (undo-tree-id39752 . -1) (undo-tree-id39753 . -1) (undo-tree-id39754 . -1) (undo-tree-id39755 . -1) (undo-tree-id39756 . -1) (undo-tree-id39757 . -1) (undo-tree-id39758 . -1) (undo-tree-id39759 . -1) (undo-tree-id39760 . -1) (undo-tree-id39761 . -1) (undo-tree-id39762 . -1) (undo-tree-id39763 . -1) (undo-tree-id39764 . -1) (undo-tree-id39765 . -1) (undo-tree-id39766 . -2) (undo-tree-id39767 . -2) (undo-tree-id39768 . -2) (undo-tree-id39769 . -2) (undo-tree-id39770 . -2) (undo-tree-id39771 . -2) (undo-tree-id39772 . -2) (undo-tree-id39773 . -2) (undo-tree-id39774 . -2) (undo-tree-id39775 . -2) (undo-tree-id39776 . -2) (undo-tree-id39777 . -2) (undo-tree-id39778 . -2) (undo-tree-id39779 . -2) (undo-tree-id39780 . -2) (undo-tree-id39781 . -2) (undo-tree-id39782 . -2) (undo-tree-id39783 . -2) (undo-tree-id39784 . -2) (undo-tree-id39785 . -2) (undo-tree-id39786 . -2) (undo-tree-id39787 . -2) (undo-tree-id39788 . -2) (undo-tree-id39789 . -2) (undo-tree-id39790 . -2) (undo-tree-id39791 . -2) (undo-tree-id39792 . -2) (undo-tree-id39793 . -2) (undo-tree-id39794 . -2) (undo-tree-id39795 . -2) (undo-tree-id39796 . -2) (undo-tree-id39797 . -2) (undo-tree-id39798 . -2) (undo-tree-id39799 . -2) (undo-tree-id39800 . -2) (undo-tree-id39801 . -2) (undo-tree-id39802 . -2) (undo-tree-id39803 . -2) (undo-tree-id39804 . -2) (undo-tree-id39805 . -2) (undo-tree-id39806 . -2) (undo-tree-id39807 . -2) (undo-tree-id39808 . -2) (undo-tree-id39809 . -2) (undo-tree-id39810 . -2) (undo-tree-id39811 . -2) (undo-tree-id39812 . -2) (undo-tree-id39813 . -2) (undo-tree-id39814 . -2) (undo-tree-id39815 . -2) (undo-tree-id39816 . -2) (undo-tree-id39817 . -2) (undo-tree-id39818 . -2) (undo-tree-id39819 . -2) (undo-tree-id39820 . -2) (undo-tree-id39821 . -2) (undo-tree-id39822 . -2) (undo-tree-id39823 . -2) (undo-tree-id39824 . -2) (undo-tree-id39825 . -2) (undo-tree-id39826 . -2) (undo-tree-id39827 . -2) (undo-tree-id39828 . -2) 7016 (7012 . 7016)) nil (26157 3654 551719 586000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7018) (undo-tree-id39703 . -1) (undo-tree-id39704 . -1) (undo-tree-id39705 . -1) (undo-tree-id39706 . -1) (undo-tree-id39707 . -1) (undo-tree-id39708 . -1) (undo-tree-id39709 . -1) (undo-tree-id39710 . -1) (undo-tree-id39711 . -1) (undo-tree-id39712 . -1) (undo-tree-id39713 . -1) (undo-tree-id39714 . -1) (undo-tree-id39715 . -1)) nil (26157 3654 551514 12000) 0 nil])
([nil nil ((7018 . 7026) (#("Par" 0 3 (fontified nil)) . 7018) (7018 . 7021) (#("Particle" 0 8 (fontified nil)) . -7018) (7018 . 7026) (#("Par" 0 3 (fontified t face font-lock-type-face)) . -7018) (undo-tree-id39522 . -3) (undo-tree-id39523 . -3) (undo-tree-id39524 . -1) (undo-tree-id39525 . -1) (undo-tree-id39526 . -1) (undo-tree-id39527 . -1) (undo-tree-id39528 . -1) (undo-tree-id39529 . -1) (undo-tree-id39530 . -1) (undo-tree-id39531 . -1) (undo-tree-id39532 . -1) (undo-tree-id39533 . -1) (undo-tree-id39534 . -1) (undo-tree-id39535 . -1) (undo-tree-id39536 . -1) (undo-tree-id39537 . -1) (undo-tree-id39538 . -1) (undo-tree-id39539 . -1) (undo-tree-id39540 . -1) (undo-tree-id39541 . -1) (undo-tree-id39542 . -1) (undo-tree-id39543 . -1) (undo-tree-id39544 . -1) (undo-tree-id39545 . -1) (undo-tree-id39546 . -1) (undo-tree-id39547 . -1) (undo-tree-id39548 . -1) (undo-tree-id39549 . -1) (undo-tree-id39550 . -1) (undo-tree-id39551 . -1) (undo-tree-id39552 . -1) (undo-tree-id39553 . -1) (undo-tree-id39554 . -1) (undo-tree-id39555 . -1) (undo-tree-id39556 . -1) (undo-tree-id39557 . -1) (undo-tree-id39558 . -1) (undo-tree-id39559 . -1) (undo-tree-id39560 . -1) (undo-tree-id39561 . -2) (undo-tree-id39562 . -2) (undo-tree-id39563 . -2) (undo-tree-id39564 . -2) (undo-tree-id39565 . -2) (undo-tree-id39566 . -2) (undo-tree-id39567 . -2) (undo-tree-id39568 . -2) (undo-tree-id39569 . -2) (undo-tree-id39570 . -2) (undo-tree-id39571 . -2) (undo-tree-id39572 . -2) (undo-tree-id39573 . -2) (undo-tree-id39574 . -2) (undo-tree-id39575 . -2) (undo-tree-id39576 . -2) (undo-tree-id39577 . -2) (undo-tree-id39578 . -2) (undo-tree-id39579 . -2) (undo-tree-id39580 . -2) (undo-tree-id39581 . -2) (undo-tree-id39582 . -2) (undo-tree-id39583 . -2) (undo-tree-id39584 . -2) (undo-tree-id39585 . -2) (undo-tree-id39586 . -2) (undo-tree-id39587 . -2) (undo-tree-id39588 . -2) (undo-tree-id39589 . -2) (undo-tree-id39590 . -2) (undo-tree-id39591 . -2) (undo-tree-id39592 . -3) (undo-tree-id39593 . -3) (undo-tree-id39594 . -3) (undo-tree-id39595 . -3) (undo-tree-id39596 . -3) (undo-tree-id39597 . -3) (undo-tree-id39598 . -3) (undo-tree-id39599 . -3) (undo-tree-id39600 . -3) (undo-tree-id39601 . -3) (undo-tree-id39602 . -3) (undo-tree-id39603 . -3) (undo-tree-id39604 . -3) (undo-tree-id39605 . -3) (undo-tree-id39606 . -3) (undo-tree-id39607 . -3) (undo-tree-id39608 . -3) (undo-tree-id39609 . -3) (undo-tree-id39610 . -3) (undo-tree-id39611 . -3) (undo-tree-id39612 . -3) (undo-tree-id39613 . -3) (undo-tree-id39614 . -3) (undo-tree-id39615 . -3) (undo-tree-id39616 . -3) (undo-tree-id39617 . -3) (undo-tree-id39618 . -3) (undo-tree-id39619 . -3) (undo-tree-id39620 . -3) (undo-tree-id39621 . -3) (undo-tree-id39622 . -3) (undo-tree-id39623 . -3) (undo-tree-id39624 . -3) (undo-tree-id39625 . -3) (undo-tree-id39626 . -3) (undo-tree-id39627 . -3) (undo-tree-id39628 . -3) (undo-tree-id39629 . -3) (undo-tree-id39630 . -3) (undo-tree-id39631 . -3) (undo-tree-id39632 . -3) (undo-tree-id39633 . -3) (undo-tree-id39634 . -3) (undo-tree-id39635 . -3) (undo-tree-id39636 . -3) (undo-tree-id39637 . -3) (undo-tree-id39638 . -3) (undo-tree-id39639 . -3) (undo-tree-id39640 . -3) (undo-tree-id39641 . -3) (undo-tree-id39642 . -3) (undo-tree-id39643 . -3) (undo-tree-id39644 . -3) (undo-tree-id39645 . -3) (undo-tree-id39646 . -3) (undo-tree-id39647 . -3) (undo-tree-id39648 . -3) (undo-tree-id39649 . -3) (undo-tree-id39650 . -3) (undo-tree-id39651 . -3) (undo-tree-id39652 . -3) (undo-tree-id39653 . -3) (undo-tree-id39654 . -3) (undo-tree-id39655 . -3) 7021 (7018 . 7021) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -7018) (undo-tree-id39656 . -1) (undo-tree-id39657 . -1) (undo-tree-id39658 . -1) (undo-tree-id39659 . -1) (undo-tree-id39660 . -1) (undo-tree-id39661 . -1) (undo-tree-id39662 . -1) (undo-tree-id39663 . -1) (undo-tree-id39664 . -1) (undo-tree-id39665 . -1) (undo-tree-id39666 . -1) (undo-tree-id39667 . -1) (undo-tree-id39668 . -1) (undo-tree-id39669 . -1) (undo-tree-id39670 . -1) (undo-tree-id39671 . -1) (undo-tree-id39672 . -1) (undo-tree-id39673 . -1) (undo-tree-id39674 . -1) (undo-tree-id39675 . -1) (undo-tree-id39676 . -1) (undo-tree-id39677 . -1) (undo-tree-id39678 . -1) (undo-tree-id39679 . -1) (undo-tree-id39680 . -1) (undo-tree-id39681 . -1) (undo-tree-id39682 . -1) (undo-tree-id39683 . -1) (undo-tree-id39684 . -1) (undo-tree-id39685 . -1) (undo-tree-id39686 . -1) (undo-tree-id39687 . -1) (undo-tree-id39688 . -1) (undo-tree-id39689 . -1) (undo-tree-id39690 . -1) (undo-tree-id39691 . -1) (undo-tree-id39692 . -1) (undo-tree-id39693 . -1) (undo-tree-id39694 . -1) (undo-tree-id39695 . -1) (undo-tree-id39696 . -1) (undo-tree-id39697 . -1) (undo-tree-id39698 . -1) (undo-tree-id39699 . -1) (undo-tree-id39700 . -1) (undo-tree-id39701 . -1) (undo-tree-id39702 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 7019) (7018 . 7020)) nil (26157 3654 551224 384000) 0 nil])
([nil nil ((apply yas--snippet-revive 7186 7226 #s(yas--snippet nil (#s(yas--field 1 7200 7210 nil nil nil t #s(yas--field 2 7212 7222 nil nil nil t #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil)))) #s(yas--field 2 7212 7222 nil nil nil t #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil))) #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil))) #s(yas--exit 7226 nil) 202 nil #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil)) nil nil)) (#("tol" 0 3 (fontified nil)) . 7225) (undo-tree-id39983 . -3) (7224 . 7225) (7212 . 7213) (7212 . 7221) (#("thi" 0 3 (fontified nil)) . 7212) (undo-tree-id39984 . -3) (7212 . 7215) (#("&this_scan" 0 10 (fontified nil)) . -7212) (undo-tree-id39985 . -10) (7212 . 7222) (#("thi" 0 3 (fontified t)) . -7212) (undo-tree-id39986 . -2) (undo-tree-id39987 . -3) (undo-tree-id39988 . -3) (undo-tree-id39989 . -3) (undo-tree-id39990 . -3) (undo-tree-id39991 . -3) (undo-tree-id39992 . -3) (undo-tree-id39993 . -3) (undo-tree-id39994 . -3) (undo-tree-id39995 . -3) (undo-tree-id39996 . -3) (undo-tree-id39997 . -3) (undo-tree-id39998 . -3) (undo-tree-id39999 . -3) (undo-tree-id40000 . -3) (undo-tree-id40001 . -3) (undo-tree-id40002 . -3) (undo-tree-id40003 . -3) (undo-tree-id40004 . -3) (undo-tree-id40005 . -3) (undo-tree-id40006 . -3) (undo-tree-id40007 . -3) (undo-tree-id40008 . -3) (undo-tree-id40009 . -3) (undo-tree-id40010 . -3) (undo-tree-id40011 . -3) (undo-tree-id40012 . -3) (undo-tree-id40013 . -3) (undo-tree-id40014 . -3) (undo-tree-id40015 . -3) (undo-tree-id40016 . -3) (undo-tree-id40017 . -3) (undo-tree-id40018 . -3) (undo-tree-id40019 . -3) (undo-tree-id40020 . -3) (undo-tree-id40021 . -3) (undo-tree-id40022 . -3) (undo-tree-id40023 . -3) (undo-tree-id40024 . -3) (undo-tree-id40025 . -3) (undo-tree-id40026 . -3) (undo-tree-id40027 . -3) (undo-tree-id40028 . -3) (undo-tree-id40029 . -3) (undo-tree-id40030 . -3) (undo-tree-id40031 . -3) (undo-tree-id40032 . -3) (undo-tree-id40033 . -3) (undo-tree-id40034 . -3) (undo-tree-id40035 . -3) (undo-tree-id40036 . -3) (undo-tree-id40037 . -3) (undo-tree-id40038 . -3) (undo-tree-id40039 . -3) (undo-tree-id40040 . -3) (undo-tree-id40041 . -3) (undo-tree-id40042 . -3) (undo-tree-id40043 . -3) (undo-tree-id40044 . -3) (undo-tree-id40045 . -3) (undo-tree-id40046 . -3) (undo-tree-id40047 . -3) (undo-tree-id40048 . -3) (undo-tree-id40049 . -3) (undo-tree-id40050 . -3) (undo-tree-id40051 . -3) (undo-tree-id40052 . -3) (undo-tree-id40053 . -3) (undo-tree-id40054 . -3) (undo-tree-id40055 . -3) (undo-tree-id40056 . -3) (undo-tree-id40057 . -3) (undo-tree-id40058 . -3) (undo-tree-id40059 . -3) (undo-tree-id40060 . -3) (undo-tree-id40061 . -3) (undo-tree-id40062 . -3) (undo-tree-id40063 . -3) 7215 (7213 . 7215) (#("map2" 0 4 (fontified nil)) . 7213) (undo-tree-id40064 . -4) (7212 . 7213) (7200 . 7201) (7200 . 7209) (#("ro" 0 2 (fontified nil)) . 7200) (undo-tree-id40065 . -2) (7200 . 7202) (#("&robotscan" 0 10 (fontified nil)) . -7200) (undo-tree-id40066 . -10) (7200 . 7210) (#("ro" 0 2 (fontified t)) . -7200) (undo-tree-id40067 . -2) (undo-tree-id40068 . -2) (undo-tree-id40069 . -2) 7202 (7200 . 7202) (#("m" 0 1 (fontified t)) . -7200) (undo-tree-id40070 . -1) (undo-tree-id40071 . -1) (undo-tree-id40072 . -1) (#("a" 0 1 (fontified t)) . -7201) (undo-tree-id40073 . -1) (undo-tree-id40074 . -1) (undo-tree-id40075 . -1) 7202 (7200 . 7202) (#("m" 0 1 (fontified t)) . -7200) (undo-tree-id40076 . -1) (undo-tree-id40077 . -1) (undo-tree-id40078 . -1) (#("a" 0 1 (fontified t)) . -7201) (undo-tree-id40079 . -1) (undo-tree-id40080 . -1) (undo-tree-id40081 . -1) (#("p" 0 1 (fontified t)) . -7202) (undo-tree-id40082 . -1) (undo-tree-id40083 . -1) (undo-tree-id40084 . -1) (#("_" 0 1 (fontified t)) . -7203) (undo-tree-id40085 . -1) (undo-tree-id40086 . -1) (undo-tree-id40087 . -1) (#("d" 0 1 (fontified t)) . -7204) (undo-tree-id40088 . -1) (undo-tree-id40089 . -1) (undo-tree-id40090 . -1) (#("a" 0 1 (fontified t)) . -7205) (undo-tree-id40091 . -1) (undo-tree-id40092 . -1) (undo-tree-id40093 . -1) (#("t" 0 1 (fontified t)) . -7206) (undo-tree-id40094 . -1) (undo-tree-id40095 . -1) (undo-tree-id40096 . -1) (#("a" 0 1 (fontified t)) . -7207) (undo-tree-id40097 . -1) (undo-tree-id40098 . -1) (undo-tree-id40099 . -1) 7208 (7200 . 7208) (#("map" 0 3 (fontified nil)) . 7200) (undo-tree-id40100 . -3) (7200 . 7203) (#("map_data" 0 8 (fontified nil)) . -7200) (undo-tree-id40101 . -8) (7200 . 7208) (#("map" 0 3 (fontified t)) . -7200) (undo-tree-id40102 . -3) (undo-tree-id40103 . -3) (undo-tree-id40104 . -3) 7203 (7202 . 7203) (#("a" 0 1 (fontified t)) . -7202) (undo-tree-id40105 . -1) (undo-tree-id40106 . -1) (undo-tree-id40107 . -1) 7203 (7202 . 7203) (7200 . 7202) (#("m" 0 1 (fontified t)) . -7200) (undo-tree-id40108 . -1) (undo-tree-id40109 . -1) (undo-tree-id40110 . -1) (#("a" 0 1 (fontified t)) . -7201) (undo-tree-id40111 . -1) (undo-tree-id40112 . -1) (undo-tree-id40113 . -1) 7202 (7200 . 7202) (#("m" 0 1 (fontified t)) . -7200) (undo-tree-id40114 . -1) (undo-tree-id40115 . -1) (undo-tree-id40116 . -1) (#("a" 0 1 (fontified t)) . -7201) (undo-tree-id40117 . -1) (undo-tree-id40118 . -1) (undo-tree-id40119 . -1) 7202 (7201 . 7202) (#("map1" 0 4 (fontified nil)) . 7201) (undo-tree-id40120 . -4) (7200 . 7201) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7200 7210 nil nil nil t #s(yas--field 2 7212 7222 nil nil nil t #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil)))) #s(yas--field 2 7212 7222 nil nil nil t #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil))) #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil))) #s(yas--exit 7226 nil) 202 nil #s(yas--field 3 7224 7225 nil nil nil t #s(yas--exit 7226 nil)) nil nil)) (7186 . 7216) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol})$0" 0 47 (fontified nil)) . 7186) (7186 . 7233) (#("j" 0 1 (fontified nil)) . 7186) (7186 . 7187) (#("jaccard_index(…)" 0 16 (fontified nil)) . -7186) (7186 . 7202) (#("j" 0 1 (fontified t)) . -7186) (undo-tree-id40121 . -1) (undo-tree-id40122 . -1) (undo-tree-id40123 . -1) 7187 (7186 . 7187) (t 26157 3654 674720 862000)) nil (26157 3761 121339 255000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -7227) (undo-tree-id39937 . -1) (undo-tree-id39938 . -1) (undo-tree-id39939 . -1) (undo-tree-id39940 . -1) (undo-tree-id39941 . -1) (undo-tree-id39942 . -1) (undo-tree-id39943 . -1) (undo-tree-id39944 . -1) (undo-tree-id39945 . -1) (undo-tree-id39946 . -1) (undo-tree-id39947 . -1) (undo-tree-id39948 . -1) (undo-tree-id39949 . -1) (undo-tree-id39950 . -1) (undo-tree-id39951 . -1) (undo-tree-id39952 . -1) (undo-tree-id39953 . -1) (undo-tree-id39954 . -1) (undo-tree-id39955 . -1) (undo-tree-id39956 . -1) (undo-tree-id39957 . -1) (undo-tree-id39958 . -1) (undo-tree-id39959 . -1) (undo-tree-id39960 . -1) (undo-tree-id39961 . -1) (undo-tree-id39962 . -1) (undo-tree-id39963 . -1) (undo-tree-id39964 . -1) (undo-tree-id39965 . -1) (undo-tree-id39966 . -1) (undo-tree-id39967 . -1) (undo-tree-id39968 . -1) (undo-tree-id39969 . -1) (undo-tree-id39970 . -1) (undo-tree-id39971 . -1) (undo-tree-id39972 . -1) (undo-tree-id39973 . -1) (undo-tree-id39974 . -1) (undo-tree-id39975 . -1) (undo-tree-id39976 . -1) (undo-tree-id39977 . -1) (undo-tree-id39978 . -1) (undo-tree-id39979 . -1) (undo-tree-id39980 . -1) (undo-tree-id39981 . -1) (undo-tree-id39982 . -1) 7228 (7227 . 7228)) nil (26157 3761 120450 607000) 0 nil])
([nil nil ((7229 . 7231) (7226 . 7229)) nil (26157 3761 120365 161000) 0 nil])
([nil nil ((7235 . 7240) (7236 . 7237) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 7235) (7235 . 7240) (7234 . 7236) (7232 . 7235)) nil (26157 3761 120361 943000) 0 nil])
([nil nil ((7256 . 7264) (#("pa" 0 2 (fontified nil)) . 7256) (undo-tree-id39854 . -2) (7256 . 7258) (#("particle" 0 8 (fontified nil)) . -7256) (undo-tree-id39855 . -8) (7256 . 7264) (#("pa" 0 2 (fontified t)) . -7256) (undo-tree-id39856 . -2) (undo-tree-id39857 . -2) (undo-tree-id39858 . -2) (undo-tree-id39859 . -2) (undo-tree-id39860 . -2) (undo-tree-id39861 . -2) (undo-tree-id39862 . -2) (undo-tree-id39863 . -2) (undo-tree-id39864 . -2) (undo-tree-id39865 . -2) (undo-tree-id39866 . -2) (undo-tree-id39867 . -2) (undo-tree-id39868 . -2) (undo-tree-id39869 . -2) (undo-tree-id39870 . -2) (undo-tree-id39871 . -2) (undo-tree-id39872 . -2) (undo-tree-id39873 . -2) (undo-tree-id39874 . -2) (undo-tree-id39875 . -2) (undo-tree-id39876 . -2) (undo-tree-id39877 . -2) (undo-tree-id39878 . -2) (undo-tree-id39879 . -2) (undo-tree-id39880 . -2) (undo-tree-id39881 . -2) (undo-tree-id39882 . -2) (undo-tree-id39883 . -2) (undo-tree-id39884 . -2) (undo-tree-id39885 . -2) (undo-tree-id39886 . -2) (undo-tree-id39887 . -2) (undo-tree-id39888 . -2) (undo-tree-id39889 . -2) (undo-tree-id39890 . -2) (undo-tree-id39891 . -2) (undo-tree-id39892 . -2) (undo-tree-id39893 . -2) (undo-tree-id39894 . -2) (undo-tree-id39895 . -2) (undo-tree-id39896 . -2) (undo-tree-id39897 . -2) (undo-tree-id39898 . -2) (undo-tree-id39899 . -2) (undo-tree-id39900 . -2) (undo-tree-id39901 . -2) (undo-tree-id39902 . -2) (undo-tree-id39903 . -2) (undo-tree-id39904 . -2) (undo-tree-id39905 . -2) (undo-tree-id39906 . -2) (undo-tree-id39907 . -2) (undo-tree-id39908 . -2) (undo-tree-id39909 . -2) (undo-tree-id39910 . -2) (undo-tree-id39911 . -2) (undo-tree-id39912 . -2) (undo-tree-id39913 . -2) (undo-tree-id39914 . -2) (undo-tree-id39915 . -2) (undo-tree-id39916 . -2) (undo-tree-id39917 . -2) (undo-tree-id39918 . -2) (undo-tree-id39919 . -2) (undo-tree-id39920 . -2) (undo-tree-id39921 . -2) (undo-tree-id39922 . -2) (undo-tree-id39923 . -2) (undo-tree-id39924 . -2) (undo-tree-id39925 . -2) (undo-tree-id39926 . -2) (undo-tree-id39927 . -2) (undo-tree-id39928 . -2) (undo-tree-id39929 . -2) (undo-tree-id39930 . -2) (undo-tree-id39931 . -2) 7258 (7257 . 7258) (#("value" 0 5 (fontified nil)) . 7257) (undo-tree-id39932 . -5) (7256 . 7257) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7256 7264 nil nil nil t #s(yas--exit 7265 nil))) #s(yas--exit 7265 nil) 203 nil #s(yas--field 1 7256 7264 nil nil nil t #s(yas--exit 7265 nil)) nil nil)) (7251 . 7262) (#("push(${1:value})$0" 0 18 (fontified nil)) . 7251) (7251 . 7269) (#("pu" 0 2 (fontified nil)) . 7251) (7251 . 7253) (#("push(…)" 0 7 (fontified nil)) . -7251) (7251 . 7258) (#("pu" 0 2 (fontified t)) . -7251) (undo-tree-id39933 . -2) (undo-tree-id39934 . -2) 7253 (7252 . 7253) (7250 . 7252) (7240 . 7250) (#("ne" 0 2 (fontified nil)) . 7240) (7240 . 7242) (#("new_vector" 0 10 (fontified nil)) . -7240) (7240 . 7250) (#("ne" 0 2 (fontified t)) . -7240) (undo-tree-id39935 . -2) (undo-tree-id39936 . -2) 7242 (7240 . 7242)) nil (26157 3761 120342 574000) 0 nil])
([nil nil ((7265 . 7266) (apply yas--snippet-revive 7251 7265 #s(yas--snippet nil (#s(yas--field 1 7256 7264 nil nil nil t #s(yas--exit 7265 nil))) #s(yas--exit 7265 nil) 203 nil #s(yas--field 1 7256 7264 nil nil nil t #s(yas--exit 7265 nil)) nil nil))) nil (26157 3761 120153 117000) 0 nil])
([nil nil ((apply yas--snippet-revive 7227 7235 #s(yas--snippet nil nil #s(yas--exit 7235 nil) 204 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7235 nil) 204 nil nil nil nil)) (7227 . 7235) (#("unwrap()$0" 0 10 (fontified nil)) . 7227) (7227 . 7237) (#("un" 0 2 (fontified nil)) . 7227) (7227 . 7229) (#("unwrap()" 0 8 (fontified nil)) . -7227) (7227 . 7235) (#("un" 0 2 (fontified t)) . -7227) (undo-tree-id40124 . -2) (undo-tree-id40125 . -2) (undo-tree-id40126 . -2) (undo-tree-id40127 . -1) (undo-tree-id40128 . -1) (undo-tree-id40129 . -1) (undo-tree-id40130 . -1) (undo-tree-id40131 . -1) (undo-tree-id40132 . -1) (undo-tree-id40133 . -1) (undo-tree-id40134 . -1) (undo-tree-id40135 . -1) (undo-tree-id40136 . -2) (undo-tree-id40137 . -2) (undo-tree-id40138 . -2) (undo-tree-id40139 . -2) (undo-tree-id40140 . -2) (undo-tree-id40141 . -2) (undo-tree-id40142 . -2) (undo-tree-id40143 . -2) (undo-tree-id40144 . -2) (undo-tree-id40145 . -2) (undo-tree-id40146 . -2) (undo-tree-id40147 . -2) (undo-tree-id40148 . -2) (undo-tree-id40149 . -2) (undo-tree-id40150 . -2) (undo-tree-id40151 . -2) (undo-tree-id40152 . -2) (undo-tree-id40153 . -2) (undo-tree-id40154 . -2) (undo-tree-id40155 . -2) (undo-tree-id40156 . -2) (undo-tree-id40157 . -2) (undo-tree-id40158 . -2) (undo-tree-id40159 . -2) (undo-tree-id40160 . -2) (undo-tree-id40161 . -2) (undo-tree-id40162 . -2) (undo-tree-id40163 . -2) (undo-tree-id40164 . -2) (undo-tree-id40165 . -2) (undo-tree-id40166 . -2) (undo-tree-id40167 . -2) (undo-tree-id40168 . -2) (undo-tree-id40169 . -2) (undo-tree-id40170 . -2) (undo-tree-id40171 . -2) (undo-tree-id40172 . -2) (undo-tree-id40173 . -2) (undo-tree-id40174 . -2) (undo-tree-id40175 . -2) (undo-tree-id40176 . -2) (undo-tree-id40177 . -2) (undo-tree-id40178 . -2) (undo-tree-id40179 . -2) 7229 (7227 . 7229) (7226 . 7227) (t 26157 3761 224659 978000)) nil (26157 3768 981572 146000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7226) (undo-tree-id40334 . -1) (t 26157 3769 108520 670000)) nil (26157 3776 737567 172000) 0 nil])
([nil nil ((#("unwrap" 0 6 (fontified t)) . 7226) (undo-tree-id40331 . -5) (undo-tree-id40332 . -1) (undo-tree-id40333 . -6)) nil (26157 3776 737562 302000) 0 nil])
([nil nil ((#("() " 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face)) 2 3 (fontified t)) . 7226) (undo-tree-id40328 . -2) (undo-tree-id40329 . 1) (undo-tree-id40330 . -3)) nil (26157 3776 738904 370000) 0 nil])
([nil nil ((#("> 25) {" 0 1 (fontified t syntax-table (1)) 1 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-3-face))) . 7226) (undo-tree-id40396 . -7) (undo-tree-id40397 . 7) (undo-tree-id40398 . -7) (undo-tree-id40399 . -7) (undo-tree-id40400 . -7) (undo-tree-id40401 . -7) (undo-tree-id40402 . -7)) nil (26157 3791 587180 854000) 0 nil] [nil nil ((#("	if (jaccard_index(&robotscan, &this_scan, 0)> 25) {
" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 20 (fontified t face rust-ampersand-face) 20 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t face rust-ampersand-face) 32 41 (fontified t) 41 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-4-face)) 45 46 (fontified t syntax-table (1)) 46 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-3-face)) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 53 (fontified t)) . 7181) (undo-tree-id40180 . -52) (undo-tree-id40181 . 8) (undo-tree-id40182 . -45) (undo-tree-id40183 . -45) (undo-tree-id40184 . -45) (undo-tree-id40185 . -45) (undo-tree-id40186 . -45) (undo-tree-id40187 . -45) (undo-tree-id40188 . -45) (undo-tree-id40189 . -45) (undo-tree-id40190 . -45) (undo-tree-id40191 . -45) (undo-tree-id40192 . -45) (undo-tree-id40193 . -45) (undo-tree-id40194 . -45) (undo-tree-id40195 . -45) (undo-tree-id40196 . -45) (undo-tree-id40197 . -45) (undo-tree-id40198 . -45) (undo-tree-id40199 . -45) (undo-tree-id40200 . -45) (undo-tree-id40201 . -45) (undo-tree-id40202 . -45) (undo-tree-id40203 . -45) (undo-tree-id40204 . -45) (undo-tree-id40205 . -45) (undo-tree-id40206 . -45) (undo-tree-id40207 . -45) (undo-tree-id40208 . -45) (undo-tree-id40209 . -45) (undo-tree-id40210 . -45) (undo-tree-id40211 . -45) (undo-tree-id40212 . -45) (undo-tree-id40213 . -45) (undo-tree-id40214 . -45) (undo-tree-id40215 . -45) (undo-tree-id40216 . -45) (undo-tree-id40217 . -45) (undo-tree-id40218 . -45) (undo-tree-id40219 . -45) (undo-tree-id40220 . -45) (undo-tree-id40221 . -45) (undo-tree-id40222 . -45) (undo-tree-id40223 . -45) (undo-tree-id40224 . -45) (undo-tree-id40225 . -45) (undo-tree-id40226 . -45) (undo-tree-id40227 . -45) (undo-tree-id40228 . -45) (undo-tree-id40229 . -45) (undo-tree-id40230 . -45) (undo-tree-id40231 . -45) (undo-tree-id40232 . -45) (undo-tree-id40233 . -45) (undo-tree-id40234 . -45) (undo-tree-id40235 . -45) (undo-tree-id40236 . -45) (undo-tree-id40237 . -45) (undo-tree-id40238 . -45) (undo-tree-id40239 . -45) (undo-tree-id40240 . -45) (undo-tree-id40241 . -45) (undo-tree-id40242 . -45) (undo-tree-id40243 . -45) (undo-tree-id40244 . -45) (undo-tree-id40245 . -45) (undo-tree-id40246 . -45) (undo-tree-id40247 . -45) (undo-tree-id40248 . -45) (undo-tree-id40249 . -45) (undo-tree-id40250 . -45) (undo-tree-id40251 . -45) (undo-tree-id40252 . -45) (undo-tree-id40253 . -45) (undo-tree-id40254 . -45) (undo-tree-id40255 . -45) (undo-tree-id40256 . -45) (undo-tree-id40257 . -45) (undo-tree-id40258 . -45) (undo-tree-id40259 . -45) (undo-tree-id40260 . -45) (undo-tree-id40261 . -45) (undo-tree-id40262 . -45) (undo-tree-id40263 . -45) (undo-tree-id40264 . -45) (undo-tree-id40265 . -45) (undo-tree-id40266 . -45) (undo-tree-id40267 . -45) (undo-tree-id40268 . -45) (undo-tree-id40269 . -4) (undo-tree-id40270 . -5) (undo-tree-id40271 . -4) (undo-tree-id40272 . -5) (undo-tree-id40273 . -52) (undo-tree-id40274 . -53) (undo-tree-id40275 . -52) (undo-tree-id40276 . -53) (undo-tree-id40277 . -5) (undo-tree-id40278 . -52) (undo-tree-id40279 . -52) (undo-tree-id40280 . -53) (undo-tree-id40281 . -45) (undo-tree-id40282 . -45) (undo-tree-id40283 . -45) (undo-tree-id40284 . -45) (undo-tree-id40285 . -45) (undo-tree-id40286 . -45) (undo-tree-id40287 . -45) (undo-tree-id40288 . -45) (undo-tree-id40289 . -45) (undo-tree-id40290 . -45) (undo-tree-id40291 . -45) (undo-tree-id40292 . -45) (undo-tree-id40293 . -45) (undo-tree-id40294 . -45) (undo-tree-id40295 . -45) (undo-tree-id40296 . -45) (undo-tree-id40297 . -45) (undo-tree-id40298 . -45) (undo-tree-id40299 . -45) (undo-tree-id40300 . -45) (undo-tree-id40301 . -45) (undo-tree-id40302 . -45) (undo-tree-id40303 . -45) (undo-tree-id40304 . -45) (undo-tree-id40305 . -45) (undo-tree-id40306 . -45) (undo-tree-id40307 . -45) (undo-tree-id40308 . -45) (undo-tree-id40309 . -45) (undo-tree-id40310 . -45) (undo-tree-id40311 . -45) (undo-tree-id40312 . -45) (undo-tree-id40313 . -45) (undo-tree-id40314 . -45) (undo-tree-id40315 . -45) (undo-tree-id40316 . -45) (undo-tree-id40317 . -45) (undo-tree-id40318 . -45) (undo-tree-id40319 . -45) (undo-tree-id40320 . -45) (undo-tree-id40321 . -45) (undo-tree-id40322 . -45) (undo-tree-id40323 . -45) (undo-tree-id40324 . -45) (undo-tree-id40325 . -45) (undo-tree-id40326 . -45) (undo-tree-id40327 . -53) 7226) ((7181 . 7234)) (26157 3776 737526 622000) 0 nil])
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 7182) (undo-tree-id40392 . -2) (undo-tree-id40393 . -3) (undo-tree-id40394 . -3) (undo-tree-id40395 . -3)) nil (26157 3791 587165 875000) 0 nil])
nil
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 7182) (undo-tree-id40388 . -1) (undo-tree-id40389 . -1) (undo-tree-id40390 . -1) (undo-tree-id40391 . -1)) nil (26157 3791 587155 83000) 0 nil])
([nil nil ((#("	}
" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7255) (undo-tree-id40386 . -2) (undo-tree-id40387 . -3)) nil (26157 3791 587145 136000) 0 nil])
([nil nil ((#("	    new_vector.push(particle);
" 0 5 (fontified t) 5 16 (fontified t) 16 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 31 (fontified t) 31 32 (fontified t)) . 7223) (undo-tree-id40351 . -31) (undo-tree-id40352 . -21) (undo-tree-id40353 . -32) (undo-tree-id40354 . -32) (undo-tree-id40355 . -32) (undo-tree-id40356 . -32) (undo-tree-id40357 . -32) (undo-tree-id40358 . -32) (undo-tree-id40359 . -32) (undo-tree-id40360 . -32) (undo-tree-id40361 . -32) (undo-tree-id40362 . -32) (undo-tree-id40363 . -32) (undo-tree-id40364 . -32) (undo-tree-id40365 . -32) (undo-tree-id40366 . -32) (undo-tree-id40367 . -32) (undo-tree-id40368 . -32) (undo-tree-id40369 . -32) (undo-tree-id40370 . -32) (undo-tree-id40371 . -32) (undo-tree-id40372 . -32) (undo-tree-id40373 . -32) (undo-tree-id40374 . -32) (undo-tree-id40375 . -32) (undo-tree-id40376 . -32) (undo-tree-id40377 . -32) (undo-tree-id40378 . -32) (undo-tree-id40379 . -32) (undo-tree-id40380 . -32) (undo-tree-id40381 . -32) (undo-tree-id40382 . -32) (undo-tree-id40383 . -32) (undo-tree-id40384 . -32) (undo-tree-id40385 . -32)) nil (26157 3791 587136 245000) 0 nil])
([nil nil ((7194 . 7197) (7193 . 7195) (#(" " 0 1 (fontified t)) . -7193) (undo-tree-id40335 . -1) (undo-tree-id40336 . -1) (undo-tree-id40337 . -1) (undo-tree-id40338 . -1) (undo-tree-id40339 . -1) (undo-tree-id40340 . -1) (undo-tree-id40341 . -1) (undo-tree-id40342 . -1) (undo-tree-id40343 . -1) (undo-tree-id40344 . -1) (undo-tree-id40345 . -1) (undo-tree-id40346 . -1) (undo-tree-id40347 . -1) (undo-tree-id40348 . -1) 7194 (7189 . 7194) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7189) (undo-tree-id40349 . -1) (undo-tree-id40350 . -1) 7190 (7182 . 7190)) nil (26157 3791 587065 140000) 0 nil])
([nil nil ((7198 . 7201)) nil (26157 3791 587015 924000) 0 nil])
([nil nil ((7244 . 7249) (7245 . 7246) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 7244) (7244 . 7249) (7243 . 7245) (7241 . 7244)) nil (26157 3791 587003 263000) 0 nil])
([nil nil ((7259 . 7263) (#("i" 0 1 (fontified t)) . -7259) (undo-tree-id40677 . -1) (undo-tree-id40678 . -1) 7260 (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -7260) (undo-tree-id40679 . -1) (undo-tree-id40680 . -1) 7261 (7253 . 7261) (7249 . 7254) (#("o" 0 1 (fontified t)) . -7249) (undo-tree-id40681 . -1) (undo-tree-id40682 . -1) (#("f" 0 1 (fontified t)) . -7250) (undo-tree-id40683 . -1) (undo-tree-id40684 . -1) (#(" " 0 1 (fontified t)) . -7251) (undo-tree-id40685 . -1) (undo-tree-id40686 . -1) 7252 (7249 . 7252) (t 26157 3791 716130 404000)) nil (26157 3849 363937 901000) 0 nil])
([nil nil ((7267 . 7269) (7268 . 7273) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 7267) (7267 . 7269) (7266 . 7268) (7264 . 7267)) nil (26157 3849 363913 897000) 0 nil])
([nil nil ((7272 . 7273) (7269 . 7272) 7268) nil (26157 3849 363909 549000) 0 nil])
([nil nil ((#("		i
" 0 3 (fontified t) 3 4 (fontified t)) . 7270) (undo-tree-id40587 . -3) (undo-tree-id40588 . 1) (undo-tree-id40589 . -2) (undo-tree-id40590 . -2) (undo-tree-id40591 . 1) (undo-tree-id40592 . -3) (undo-tree-id40593 . -3) (undo-tree-id40594 . -3) (undo-tree-id40595 . -3) (undo-tree-id40596 . -3) (undo-tree-id40597 . -3) (undo-tree-id40598 . -3) (undo-tree-id40599 . -3) (undo-tree-id40600 . -3) (undo-tree-id40601 . -3) (undo-tree-id40602 . -3) (undo-tree-id40603 . 1) (undo-tree-id40604 . -3) (undo-tree-id40605 . -3) (undo-tree-id40606 . -3) (undo-tree-id40607 . -3) (undo-tree-id40608 . -3) (undo-tree-id40609 . -3) (undo-tree-id40610 . -3) (undo-tree-id40611 . -3) (undo-tree-id40612 . -3) (undo-tree-id40613 . -3) (undo-tree-id40614 . -3) (undo-tree-id40615 . -3) (undo-tree-id40616 . -3) (undo-tree-id40617 . -3) (undo-tree-id40618 . -3) (undo-tree-id40619 . -3) (undo-tree-id40620 . -3) (undo-tree-id40621 . -3) (undo-tree-id40622 . -3) (undo-tree-id40623 . -3) (undo-tree-id40624 . -3) (undo-tree-id40625 . -3) (undo-tree-id40626 . -3) (undo-tree-id40627 . -3) (undo-tree-id40628 . -3) (undo-tree-id40629 . -3) (undo-tree-id40630 . -3) (undo-tree-id40631 . -3) (undo-tree-id40632 . -3) (undo-tree-id40633 . -3) (undo-tree-id40634 . -3) (undo-tree-id40635 . -3) (undo-tree-id40636 . -3) (undo-tree-id40637 . -3) (undo-tree-id40638 . -3) (undo-tree-id40639 . -3) (undo-tree-id40640 . -3) (undo-tree-id40641 . -3) (undo-tree-id40642 . -3) (undo-tree-id40643 . -3) (undo-tree-id40644 . -3) (undo-tree-id40645 . -3) (undo-tree-id40646 . -3) (undo-tree-id40647 . -3) (undo-tree-id40648 . -3) (undo-tree-id40649 . -3) (undo-tree-id40650 . -3) (undo-tree-id40651 . -3) (undo-tree-id40652 . -3) (undo-tree-id40653 . -2) (undo-tree-id40654 . -2) (undo-tree-id40655 . -2) (undo-tree-id40656 . -2) (undo-tree-id40657 . -2) (undo-tree-id40658 . -2) (undo-tree-id40659 . -2) (undo-tree-id40660 . -2) (undo-tree-id40661 . -2) (undo-tree-id40662 . -2) (undo-tree-id40663 . -2) (undo-tree-id40664 . -2) (undo-tree-id40665 . -2) (undo-tree-id40666 . -2) (undo-tree-id40667 . -2) (undo-tree-id40668 . -2) (undo-tree-id40669 . -2) (undo-tree-id40670 . -2) (undo-tree-id40671 . -2) (undo-tree-id40672 . -2) (undo-tree-id40673 . -2) (undo-tree-id40674 . -2) (undo-tree-id40675 . -2) (undo-tree-id40676 . -4) 7272) nil (26157 3849 363898 421000) 0 nil])
([nil nil ((7285 . 7293) (#("p" 0 1 (fontified nil)) . 7285) (undo-tree-id40403 . -1) (7285 . 7286) (#("particle" 0 8 (fontified nil)) . -7285) (undo-tree-id40404 . -8) (7285 . 7293) (#("p" 0 1 (fontified t)) . -7285) (undo-tree-id40405 . -1) (undo-tree-id40406 . -1) (undo-tree-id40407 . -1) (undo-tree-id40408 . -1) (undo-tree-id40409 . -1) (undo-tree-id40410 . -1) (undo-tree-id40411 . -1) (undo-tree-id40412 . -1) (undo-tree-id40413 . -1) (undo-tree-id40414 . -1) (undo-tree-id40415 . -1) (undo-tree-id40416 . -1) (undo-tree-id40417 . -1) (undo-tree-id40418 . -1) (undo-tree-id40419 . -1) (undo-tree-id40420 . -1) (undo-tree-id40421 . -1) (undo-tree-id40422 . -1) (undo-tree-id40423 . -1) (undo-tree-id40424 . -1) (undo-tree-id40425 . -1) (undo-tree-id40426 . -1) (undo-tree-id40427 . -1) (undo-tree-id40428 . -1) (undo-tree-id40429 . -1) (undo-tree-id40430 . -1) (undo-tree-id40431 . -1) (undo-tree-id40432 . -1) (undo-tree-id40433 . -1) (undo-tree-id40434 . -1) (undo-tree-id40435 . -1) (undo-tree-id40436 . -1) (undo-tree-id40437 . -1) (undo-tree-id40438 . -1) (undo-tree-id40439 . -1) (undo-tree-id40440 . -1) (undo-tree-id40441 . -1) (undo-tree-id40442 . -1) (undo-tree-id40443 . -1) (undo-tree-id40444 . -1) (undo-tree-id40445 . -1) (undo-tree-id40446 . -1) (undo-tree-id40447 . -1) (undo-tree-id40448 . -1) (undo-tree-id40449 . -1) (undo-tree-id40450 . -1) (undo-tree-id40451 . -1) (undo-tree-id40452 . -1) (undo-tree-id40453 . -1) (undo-tree-id40454 . -1) (undo-tree-id40455 . -1) (undo-tree-id40456 . -1) (undo-tree-id40457 . -1) (undo-tree-id40458 . -1) (undo-tree-id40459 . -1) (undo-tree-id40460 . -1) (undo-tree-id40461 . -1) (undo-tree-id40462 . -1) (undo-tree-id40463 . -1) (undo-tree-id40464 . -1) (undo-tree-id40465 . -1) (undo-tree-id40466 . -1) (undo-tree-id40467 . -1) (undo-tree-id40468 . -1) (undo-tree-id40469 . -1) (undo-tree-id40470 . -1) (undo-tree-id40471 . -1) (undo-tree-id40472 . -1) (undo-tree-id40473 . -1) (undo-tree-id40474 . -1) (undo-tree-id40475 . -1) (undo-tree-id40476 . -1) (undo-tree-id40477 . -1) (undo-tree-id40478 . -1) (undo-tree-id40479 . -1) (undo-tree-id40480 . -1) (undo-tree-id40481 . -1) (undo-tree-id40482 . -1) (undo-tree-id40483 . -1) (undo-tree-id40484 . -1) (undo-tree-id40485 . -1) (undo-tree-id40486 . -1) (undo-tree-id40487 . -1) (undo-tree-id40488 . -1) (undo-tree-id40489 . -1) (undo-tree-id40490 . -1) (undo-tree-id40491 . -1) (undo-tree-id40492 . -1) (undo-tree-id40493 . -1) (undo-tree-id40494 . -1) (undo-tree-id40495 . -1) (undo-tree-id40496 . -1) (undo-tree-id40497 . -1) (undo-tree-id40498 . -1) (undo-tree-id40499 . -1) (undo-tree-id40500 . -1) (undo-tree-id40501 . -1) (undo-tree-id40502 . -1) (undo-tree-id40503 . -1) (undo-tree-id40504 . -1) (undo-tree-id40505 . -1) (undo-tree-id40506 . -1) (undo-tree-id40507 . -1) (undo-tree-id40508 . -1) (undo-tree-id40509 . -1) (undo-tree-id40510 . -1) (undo-tree-id40511 . -1) 7286 (#("value" 0 5 (fontified nil)) . 7286) (undo-tree-id40512 . -5) (7285 . 7286) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7285 7293 nil nil nil t #s(yas--exit 7294 nil))) #s(yas--exit 7294 nil) 205 nil #s(yas--field 1 7285 7293 nil nil nil t #s(yas--exit 7294 nil)) nil nil)) (7280 . 7291) (#("push(${1:value})$0" 0 18 (fontified nil)) . 7280) (7280 . 7298) (#("pu" 0 2 (fontified nil)) . 7280) (7280 . 7282) (#("push(…)" 0 7 (fontified nil)) . -7280) (7280 . 7287) (#("pu" 0 2 (fontified t)) . -7280) (undo-tree-id40513 . -2) (undo-tree-id40514 . -2) (undo-tree-id40515 . -2) (undo-tree-id40516 . -2) (undo-tree-id40517 . -2) (undo-tree-id40518 . -2) (undo-tree-id40519 . -2) (undo-tree-id40520 . -2) (undo-tree-id40521 . -2) (undo-tree-id40522 . -2) (undo-tree-id40523 . -2) (undo-tree-id40524 . -2) (undo-tree-id40525 . -2) (undo-tree-id40526 . -2) (undo-tree-id40527 . -2) (undo-tree-id40528 . -2) (undo-tree-id40529 . -2) (undo-tree-id40530 . -2) (undo-tree-id40531 . -2) (undo-tree-id40532 . -2) (undo-tree-id40533 . -2) (undo-tree-id40534 . -2) (undo-tree-id40535 . -2) (undo-tree-id40536 . -2) (undo-tree-id40537 . -2) (undo-tree-id40538 . -2) (undo-tree-id40539 . -2) (undo-tree-id40540 . -2) (undo-tree-id40541 . -2) (undo-tree-id40542 . -2) (undo-tree-id40543 . -2) (undo-tree-id40544 . -2) (undo-tree-id40545 . -2) (undo-tree-id40546 . -2) (undo-tree-id40547 . -2) (undo-tree-id40548 . -2) (undo-tree-id40549 . -2) (undo-tree-id40550 . -2) (undo-tree-id40551 . -2) (undo-tree-id40552 . -2) (undo-tree-id40553 . -2) (undo-tree-id40554 . -2) (undo-tree-id40555 . -2) (undo-tree-id40556 . -2) (undo-tree-id40557 . -2) (undo-tree-id40558 . -2) (undo-tree-id40559 . -2) (undo-tree-id40560 . -2) (undo-tree-id40561 . -2) (undo-tree-id40562 . -2) (undo-tree-id40563 . -2) (undo-tree-id40564 . -2) (undo-tree-id40565 . -2) (undo-tree-id40566 . -2) (undo-tree-id40567 . -2) 7282 (7279 . 7282) (7269 . 7279) (#("ne" 0 2 (fontified nil)) . 7269) (7269 . 7271) (#("new_vector" 0 10 (fontified nil)) . -7269) (7269 . 7279) (#("ne" 0 2 (fontified t)) . -7269) (undo-tree-id40568 . -2) (undo-tree-id40569 . -2) 7271 (7269 . 7271) (#("v" 0 1 (fontified t)) . -7269) (undo-tree-id40570 . -1) (undo-tree-id40571 . -1) (undo-tree-id40572 . -1) 7270 (7269 . 7270) (7268 . 7269) (#("	" 0 1 (fontified t)) . -7268) (undo-tree-id40573 . -1) (undo-tree-id40574 . -1) (#("i" 0 1 (fontified t)) . -7269) (undo-tree-id40575 . -1) (undo-tree-id40576 . -1) 7270 (7269 . 7270) (#("c" 0 1 (fontified t)) . -7269) (undo-tree-id40577 . -1) (undo-tree-id40578 . -1) (#("l" 0 1 (fontified t)) . -7270) (undo-tree-id40579 . -1) (undo-tree-id40580 . -1) (#("e" 0 1 (fontified t)) . -7271) (undo-tree-id40581 . -1) (undo-tree-id40582 . -1) (#("a" 0 1 (fontified t)) . -7272) (undo-tree-id40583 . -1) (undo-tree-id40584 . -1) (#("r" 0 1 (fontified t)) . -7273) (undo-tree-id40585 . -1) (undo-tree-id40586 . -1) 7274 (7269 . 7274)) nil (26157 3849 363630 260000) 0 nil])
([nil nil ((7294 . 7295) (apply yas--snippet-revive 7280 7294 #s(yas--snippet nil (#s(yas--field 1 7285 7293 nil nil nil t #s(yas--exit 7294 nil))) #s(yas--exit 7294 nil) 205 nil #s(yas--field 1 7285 7293 nil nil nil t #s(yas--exit 7294 nil)) nil nil))) nil (26157 3849 363139 89000) 0 nil])
([nil nil ((7001 . 7005) (t 26157 3849 491191 612000)) nil (26157 3857 467221 276000) 0 nil])
([nil nil ((7087 . 7089) (#("_" 0 1 (fontified t)) . -7087) (undo-tree-id40687 . -1) (undo-tree-id40688 . -1) (undo-tree-id40689 . -1) (undo-tree-id40690 . -1) (undo-tree-id40691 . -1) (undo-tree-id40692 . -1) (undo-tree-id40693 . -1) (undo-tree-id40694 . -1) (undo-tree-id40695 . -1) (undo-tree-id40696 . -1) (undo-tree-id40697 . -1) (undo-tree-id40698 . -1) (undo-tree-id40699 . -1) (undo-tree-id40700 . -1) (undo-tree-id40701 . -1) (undo-tree-id40702 . -1) (undo-tree-id40703 . -1) (undo-tree-id40704 . -1) (undo-tree-id40705 . -1) (undo-tree-id40706 . -1) (undo-tree-id40707 . -1) (undo-tree-id40708 . -1) (undo-tree-id40709 . -1) (undo-tree-id40710 . -1) (undo-tree-id40711 . -1) (undo-tree-id40712 . -1) (undo-tree-id40713 . -1) (undo-tree-id40714 . -1) (undo-tree-id40715 . -1) (undo-tree-id40716 . -1) (undo-tree-id40717 . -1) (undo-tree-id40718 . -1) (undo-tree-id40719 . -1) (undo-tree-id40720 . -1) (undo-tree-id40721 . -1) (undo-tree-id40722 . -1) (undo-tree-id40723 . -1) (undo-tree-id40724 . -1) (undo-tree-id40725 . -1) (undo-tree-id40726 . -1) (undo-tree-id40727 . -1) (undo-tree-id40728 . -1) (undo-tree-id40729 . -1) (undo-tree-id40730 . -1) (undo-tree-id40731 . -1) (undo-tree-id40732 . -1) (undo-tree-id40733 . -1) (undo-tree-id40734 . -1) (undo-tree-id40735 . -1) (undo-tree-id40736 . -1) (undo-tree-id40737 . -1) (undo-tree-id40738 . -1) (undo-tree-id40739 . -1) (undo-tree-id40740 . -1) (undo-tree-id40741 . -1) (undo-tree-id40742 . -1) (undo-tree-id40743 . -1) (undo-tree-id40744 . -1) (undo-tree-id40745 . -1) (undo-tree-id40746 . -1) (undo-tree-id40747 . -1) (undo-tree-id40748 . -1) (undo-tree-id40749 . -1) (undo-tree-id40750 . -1) (undo-tree-id40751 . -1) (undo-tree-id40752 . -1) (undo-tree-id40753 . -1) (undo-tree-id40754 . -1) (undo-tree-id40755 . -1) (undo-tree-id40756 . -1) (undo-tree-id40757 . -1) (undo-tree-id40758 . -1) (undo-tree-id40759 . -1) (undo-tree-id40760 . -1) (undo-tree-id40761 . -1) (undo-tree-id40762 . -1) (undo-tree-id40763 . -1) (undo-tree-id40764 . -1) (undo-tree-id40765 . -1) (undo-tree-id40766 . -1) (undo-tree-id40767 . -1) (undo-tree-id40768 . -1) (undo-tree-id40769 . -1) (undo-tree-id40770 . -1) (undo-tree-id40771 . -1) (undo-tree-id40772 . -1) (undo-tree-id40773 . -1) (undo-tree-id40774 . -1) (undo-tree-id40775 . -1) (undo-tree-id40776 . -1) (undo-tree-id40777 . -1) (undo-tree-id40778 . -1) (undo-tree-id40779 . -1) (undo-tree-id40780 . -1) (undo-tree-id40781 . -1) (undo-tree-id40782 . -1) (undo-tree-id40783 . -1) (undo-tree-id40784 . -1) (undo-tree-id40785 . -1) (undo-tree-id40786 . -1) (undo-tree-id40787 . -1) (undo-tree-id40788 . -1) (undo-tree-id40789 . -1) (undo-tree-id40790 . -1) (undo-tree-id40791 . -1) (undo-tree-id40792 . -1) (undo-tree-id40793 . -1) (undo-tree-id40794 . -1) (undo-tree-id40795 . -1) (undo-tree-id40796 . -1) (undo-tree-id40797 . -1) (undo-tree-id40798 . -1) (undo-tree-id40799 . -1) (undo-tree-id40800 . -1) (undo-tree-id40801 . -1) (undo-tree-id40802 . -1) (undo-tree-id40803 . -1) (undo-tree-id40804 . -1) (undo-tree-id40805 . -1) (undo-tree-id40806 . -1) (undo-tree-id40807 . -1) (undo-tree-id40808 . -1) (undo-tree-id40809 . -1) (undo-tree-id40810 . -1) (undo-tree-id40811 . -1) (undo-tree-id40812 . -1) (undo-tree-id40813 . -1) (undo-tree-id40814 . -1) (undo-tree-id40815 . -1) (undo-tree-id40816 . -1) (undo-tree-id40817 . -1) (undo-tree-id40818 . -1) (undo-tree-id40819 . -1) (undo-tree-id40820 . -1) (undo-tree-id40821 . -1) (undo-tree-id40822 . -1) (undo-tree-id40823 . -1) (undo-tree-id40824 . -1) (undo-tree-id40825 . -1) (undo-tree-id40826 . -1) (undo-tree-id40827 . -1) (undo-tree-id40828 . -1) (undo-tree-id40829 . -1) (undo-tree-id40830 . -1) (undo-tree-id40831 . -1) (undo-tree-id40832 . -1) (undo-tree-id40833 . -1) (undo-tree-id40834 . -1) (undo-tree-id40835 . -1) (undo-tree-id40836 . -1) (undo-tree-id40837 . -1) (undo-tree-id40838 . -1) (undo-tree-id40839 . -1) (undo-tree-id40840 . -1) (undo-tree-id40841 . -1) (undo-tree-id40842 . -1) (undo-tree-id40843 . -1) (undo-tree-id40844 . -1) (undo-tree-id40845 . -1) (undo-tree-id40846 . -1) (undo-tree-id40847 . -1) (undo-tree-id40848 . -1) (undo-tree-id40849 . -1) (undo-tree-id40850 . -1) (undo-tree-id40851 . -1) (undo-tree-id40852 . -1) (undo-tree-id40853 . -1) (undo-tree-id40854 . -1) (undo-tree-id40855 . -1) (undo-tree-id40856 . -1) (undo-tree-id40857 . -1) (undo-tree-id40858 . -1) (undo-tree-id40859 . -1) (undo-tree-id40860 . -1) (undo-tree-id40861 . -1) (undo-tree-id40862 . -1) (undo-tree-id40863 . -1) (undo-tree-id40864 . -1) (undo-tree-id40865 . -1) (undo-tree-id40866 . -1) (undo-tree-id40867 . -1) (undo-tree-id40868 . -1) (undo-tree-id40869 . -1) (undo-tree-id40870 . -1) (undo-tree-id40871 . -1) (undo-tree-id40872 . -1) (undo-tree-id40873 . -1) (undo-tree-id40874 . -1) (undo-tree-id40875 . -1) (undo-tree-id40876 . -1) (undo-tree-id40877 . -1) (undo-tree-id40878 . -1) (undo-tree-id40879 . -1) (undo-tree-id40880 . -1) (undo-tree-id40881 . -1) (undo-tree-id40882 . -1) (undo-tree-id40883 . -1) (undo-tree-id40884 . -1) (undo-tree-id40885 . -1) (undo-tree-id40886 . -1) (undo-tree-id40887 . -1) (undo-tree-id40888 . -1) (undo-tree-id40889 . -1) (undo-tree-id40890 . -1) (undo-tree-id40891 . -1) (undo-tree-id40892 . -1) (undo-tree-id40893 . -1) (undo-tree-id40894 . -1) (undo-tree-id40895 . -1) (undo-tree-id40896 . -1) (undo-tree-id40897 . -1) (undo-tree-id40898 . -1) (undo-tree-id40899 . -1) (undo-tree-id40900 . -1) (undo-tree-id40901 . -1) (undo-tree-id40902 . -1) (undo-tree-id40903 . -1) (undo-tree-id40904 . -1) (undo-tree-id40905 . -1) (undo-tree-id40906 . -1) (undo-tree-id40907 . -1) (undo-tree-id40908 . -1) (undo-tree-id40909 . -1) (undo-tree-id40910 . -1) (undo-tree-id40911 . -1) (undo-tree-id40912 . -1) (undo-tree-id40913 . -1) (undo-tree-id40914 . -1) (undo-tree-id40915 . -1) (undo-tree-id40916 . -1) (undo-tree-id40917 . -1) (undo-tree-id40918 . -1) (undo-tree-id40919 . -1) (undo-tree-id40920 . -1) (undo-tree-id40921 . -1) (undo-tree-id40922 . -1) (undo-tree-id40923 . -1) (undo-tree-id40924 . -1) (undo-tree-id40925 . -1) (undo-tree-id40926 . -1) (undo-tree-id40927 . -1) (undo-tree-id40928 . -1) (undo-tree-id40929 . -1) (undo-tree-id40930 . -1) (undo-tree-id40931 . -1) (undo-tree-id40932 . -1) (undo-tree-id40933 . -1) (undo-tree-id40934 . -1) (undo-tree-id40935 . -1) (undo-tree-id40936 . -1) (undo-tree-id40937 . -1) (undo-tree-id40938 . -1) (undo-tree-id40939 . -1) (undo-tree-id40940 . -1) (undo-tree-id40941 . -1) (undo-tree-id40942 . -1) (undo-tree-id40943 . -1) (undo-tree-id40944 . -1) (undo-tree-id40945 . -1) (#("f" 0 1 (fontified nil)) . -7088) (undo-tree-id40946 . -1) (undo-tree-id40947 . -1) (undo-tree-id40948 . -1) (undo-tree-id40949 . -1) (undo-tree-id40950 . -1) (undo-tree-id40951 . -1) (undo-tree-id40952 . -1) (undo-tree-id40953 . -1) (undo-tree-id40954 . -1) (undo-tree-id40955 . -1) (undo-tree-id40956 . -1) (undo-tree-id40957 . -1) (undo-tree-id40958 . -1) (undo-tree-id40959 . -1) (undo-tree-id40960 . -1) (undo-tree-id40961 . -1) (undo-tree-id40962 . -1) (undo-tree-id40963 . -1) (undo-tree-id40964 . -1) (undo-tree-id40965 . -1) (undo-tree-id40966 . -1) (undo-tree-id40967 . -1) (undo-tree-id40968 . -1) (undo-tree-id40969 . -1) (undo-tree-id40970 . -1) (undo-tree-id40971 . -1) (undo-tree-id40972 . -1) (undo-tree-id40973 . -1) (undo-tree-id40974 . -1) (undo-tree-id40975 . -1) (undo-tree-id40976 . -1) (undo-tree-id40977 . -1) (undo-tree-id40978 . -1) (undo-tree-id40979 . -1) (undo-tree-id40980 . -1) (undo-tree-id40981 . -1) (undo-tree-id40982 . -1) (undo-tree-id40983 . -1) (undo-tree-id40984 . -1) (undo-tree-id40985 . -1) (undo-tree-id40986 . -1) (undo-tree-id40987 . -1) (undo-tree-id40988 . -1) (undo-tree-id40989 . -1) (undo-tree-id40990 . -1) (undo-tree-id40991 . -1) (undo-tree-id40992 . -1) (undo-tree-id40993 . -1) (undo-tree-id40994 . -1) (undo-tree-id40995 . -1) (undo-tree-id40996 . -1) (undo-tree-id40997 . -1) (undo-tree-id40998 . -1) (undo-tree-id40999 . -1) (undo-tree-id41000 . -1) (undo-tree-id41001 . -1) (undo-tree-id41002 . -1) (undo-tree-id41003 . -1) (undo-tree-id41004 . -1) (undo-tree-id41005 . -1) (undo-tree-id41006 . -1) (undo-tree-id41007 . -1) (undo-tree-id41008 . -1) (undo-tree-id41009 . -1) (undo-tree-id41010 . -1) (undo-tree-id41011 . -1) (undo-tree-id41012 . -1) (undo-tree-id41013 . -1) (undo-tree-id41014 . -1) (undo-tree-id41015 . -1) (undo-tree-id41016 . -1) (undo-tree-id41017 . -1) (undo-tree-id41018 . -1) (undo-tree-id41019 . -1) (undo-tree-id41020 . -1) (undo-tree-id41021 . -1) (undo-tree-id41022 . -1) (undo-tree-id41023 . -1) (undo-tree-id41024 . -1) (undo-tree-id41025 . -1) (undo-tree-id41026 . -1) (undo-tree-id41027 . -1) (undo-tree-id41028 . -1) (undo-tree-id41029 . -1) (undo-tree-id41030 . -1) (undo-tree-id41031 . -1) (undo-tree-id41032 . -1) (undo-tree-id41033 . -1) (undo-tree-id41034 . -1) (undo-tree-id41035 . -1) (undo-tree-id41036 . -1) (undo-tree-id41037 . -1) (undo-tree-id41038 . -1) (undo-tree-id41039 . -1) (undo-tree-id41040 . -1) (undo-tree-id41041 . -1) (undo-tree-id41042 . -1) (undo-tree-id41043 . -1) (undo-tree-id41044 . -1) (undo-tree-id41045 . -1) (undo-tree-id41046 . -1) (undo-tree-id41047 . -1) (undo-tree-id41048 . -1) (undo-tree-id41049 . -1) (undo-tree-id41050 . -1) (undo-tree-id41051 . -1) (undo-tree-id41052 . -1) (undo-tree-id41053 . -1) (undo-tree-id41054 . -1) (undo-tree-id41055 . -1) (undo-tree-id41056 . -1) (undo-tree-id41057 . -1) (undo-tree-id41058 . -1) (undo-tree-id41059 . -1) (undo-tree-id41060 . -1) (undo-tree-id41061 . -1) (undo-tree-id41062 . -1) (undo-tree-id41063 . -1) (undo-tree-id41064 . -1) (undo-tree-id41065 . -1) (undo-tree-id41066 . -1) (undo-tree-id41067 . -1) (undo-tree-id41068 . -1) (undo-tree-id41069 . -1) (undo-tree-id41070 . -1) (undo-tree-id41071 . -1) (undo-tree-id41072 . -1) (undo-tree-id41073 . -1) (undo-tree-id41074 . -1) (undo-tree-id41075 . -1) (undo-tree-id41076 . -1) (undo-tree-id41077 . -1) (undo-tree-id41078 . -1) (undo-tree-id41079 . -1) (undo-tree-id41080 . -1) (undo-tree-id41081 . -1) (undo-tree-id41082 . -1) (undo-tree-id41083 . -1) (undo-tree-id41084 . -1) (undo-tree-id41085 . -1) (undo-tree-id41086 . -1) (undo-tree-id41087 . -1) (undo-tree-id41088 . -1) (undo-tree-id41089 . -1) (undo-tree-id41090 . -1) (undo-tree-id41091 . -1) (undo-tree-id41092 . -1) (undo-tree-id41093 . -1) (undo-tree-id41094 . -1) (undo-tree-id41095 . -1) (undo-tree-id41096 . -1) (undo-tree-id41097 . -1) (undo-tree-id41098 . -1) (undo-tree-id41099 . -1) (undo-tree-id41100 . -1) (undo-tree-id41101 . -1) (undo-tree-id41102 . -1) (undo-tree-id41103 . -1) (undo-tree-id41104 . -1) (undo-tree-id41105 . -1) (undo-tree-id41106 . -1) (undo-tree-id41107 . -1) (undo-tree-id41108 . -1) (undo-tree-id41109 . -1) (undo-tree-id41110 . -1) (undo-tree-id41111 . -1) (undo-tree-id41112 . -1) (undo-tree-id41113 . -1) (undo-tree-id41114 . -1) (undo-tree-id41115 . -1) (undo-tree-id41116 . -1) (undo-tree-id41117 . -1) (undo-tree-id41118 . -1) (undo-tree-id41119 . -1) (undo-tree-id41120 . -1) (undo-tree-id41121 . -1) (undo-tree-id41122 . -1) (undo-tree-id41123 . -1) (undo-tree-id41124 . -1) (undo-tree-id41125 . -1) (undo-tree-id41126 . -1) (undo-tree-id41127 . -1) (undo-tree-id41128 . -1) (undo-tree-id41129 . -1) (undo-tree-id41130 . -1) (undo-tree-id41131 . -1) (undo-tree-id41132 . -1) (undo-tree-id41133 . -1) (undo-tree-id41134 . -1) (undo-tree-id41135 . -1) (undo-tree-id41136 . -1) (undo-tree-id41137 . -1) (undo-tree-id41138 . -1) (undo-tree-id41139 . -1) (undo-tree-id41140 . -1) (undo-tree-id41141 . -1) (undo-tree-id41142 . -1) (undo-tree-id41143 . -1) (undo-tree-id41144 . -1) (undo-tree-id41145 . -1) (undo-tree-id41146 . -1) (undo-tree-id41147 . -1) (undo-tree-id41148 . -1) (undo-tree-id41149 . -1) (undo-tree-id41150 . -1) (undo-tree-id41151 . -1) (undo-tree-id41152 . -1) (undo-tree-id41153 . -1) (undo-tree-id41154 . -1) (undo-tree-id41155 . -1) (undo-tree-id41156 . -1) (undo-tree-id41157 . -1) (undo-tree-id41158 . -1) (undo-tree-id41159 . -1) (undo-tree-id41160 . -1) (undo-tree-id41161 . -1) (undo-tree-id41162 . -1) (undo-tree-id41163 . -1) (undo-tree-id41164 . -1) (undo-tree-id41165 . -1) (undo-tree-id41166 . -1) (undo-tree-id41167 . -1) (undo-tree-id41168 . -1) (undo-tree-id41169 . -1) (undo-tree-id41170 . -1) (undo-tree-id41171 . -1) (undo-tree-id41172 . -1) (undo-tree-id41173 . -1) (undo-tree-id41174 . -1) (#("r" 0 1 (fontified nil)) . -7089) (undo-tree-id41175 . -1) (undo-tree-id41176 . -1) (undo-tree-id41177 . -1) (undo-tree-id41178 . -1) (undo-tree-id41179 . -1) (undo-tree-id41180 . -1) (undo-tree-id41181 . -1) (undo-tree-id41182 . -1) (undo-tree-id41183 . -1) (undo-tree-id41184 . -1) (undo-tree-id41185 . -1) (undo-tree-id41186 . -1) (undo-tree-id41187 . -1) (undo-tree-id41188 . -1) (undo-tree-id41189 . -1) (undo-tree-id41190 . -1) (undo-tree-id41191 . -1) (undo-tree-id41192 . -1) (undo-tree-id41193 . -1) (undo-tree-id41194 . -1) (undo-tree-id41195 . -1) (undo-tree-id41196 . -1) (undo-tree-id41197 . -1) (undo-tree-id41198 . -1) (undo-tree-id41199 . -1) (undo-tree-id41200 . -1) (undo-tree-id41201 . -1) (undo-tree-id41202 . -1) (undo-tree-id41203 . -1) (undo-tree-id41204 . -1) (undo-tree-id41205 . -1) (undo-tree-id41206 . -1) (undo-tree-id41207 . -1) (undo-tree-id41208 . -1) (undo-tree-id41209 . -1) (undo-tree-id41210 . -1) (undo-tree-id41211 . -1) (undo-tree-id41212 . -1) (undo-tree-id41213 . -1) (undo-tree-id41214 . -1) (undo-tree-id41215 . -1) (undo-tree-id41216 . -1) (undo-tree-id41217 . -1) (undo-tree-id41218 . -1) (undo-tree-id41219 . -1) (undo-tree-id41220 . -1) (undo-tree-id41221 . -1) (undo-tree-id41222 . -1) (undo-tree-id41223 . -1) (undo-tree-id41224 . -1) (undo-tree-id41225 . -1) (undo-tree-id41226 . -1) (undo-tree-id41227 . -1) (undo-tree-id41228 . -1) (undo-tree-id41229 . -1) (undo-tree-id41230 . -1) (undo-tree-id41231 . -1) (undo-tree-id41232 . -1) (undo-tree-id41233 . -1) (undo-tree-id41234 . -1) (undo-tree-id41235 . -1) (undo-tree-id41236 . -1) (undo-tree-id41237 . -1) (undo-tree-id41238 . -1) (undo-tree-id41239 . -1) (undo-tree-id41240 . -1) (undo-tree-id41241 . -1) (undo-tree-id41242 . -1) (undo-tree-id41243 . -1) (undo-tree-id41244 . -1) (undo-tree-id41245 . -1) (undo-tree-id41246 . -1) (undo-tree-id41247 . -1) (undo-tree-id41248 . -1) (undo-tree-id41249 . -1) (undo-tree-id41250 . -1) (undo-tree-id41251 . -1) (undo-tree-id41252 . -1) (undo-tree-id41253 . -1) (undo-tree-id41254 . -1) (undo-tree-id41255 . -1) (undo-tree-id41256 . -1) (undo-tree-id41257 . -1) (undo-tree-id41258 . -1) (undo-tree-id41259 . -1) (undo-tree-id41260 . -1) (undo-tree-id41261 . -1) (undo-tree-id41262 . -1) (undo-tree-id41263 . -1) (undo-tree-id41264 . -1) (undo-tree-id41265 . -1) (undo-tree-id41266 . -1) (undo-tree-id41267 . -1) (undo-tree-id41268 . -1) (undo-tree-id41269 . -1) (undo-tree-id41270 . -1) (undo-tree-id41271 . -1) (undo-tree-id41272 . -1) (undo-tree-id41273 . -1) (undo-tree-id41274 . -1) (undo-tree-id41275 . -1) (undo-tree-id41276 . -1) (undo-tree-id41277 . -1) (undo-tree-id41278 . -1) (undo-tree-id41279 . -1) (undo-tree-id41280 . -1) (undo-tree-id41281 . -1) (undo-tree-id41282 . -1) (undo-tree-id41283 . -1) (undo-tree-id41284 . -1) (undo-tree-id41285 . -1) (undo-tree-id41286 . -1) (undo-tree-id41287 . -1) (undo-tree-id41288 . -1) (undo-tree-id41289 . -1) (undo-tree-id41290 . -1) (undo-tree-id41291 . -1) (undo-tree-id41292 . -1) (undo-tree-id41293 . -1) (undo-tree-id41294 . -1) (undo-tree-id41295 . -1) (undo-tree-id41296 . -1) (undo-tree-id41297 . -1) (undo-tree-id41298 . -1) (undo-tree-id41299 . -1) (undo-tree-id41300 . -1) (undo-tree-id41301 . -1) (undo-tree-id41302 . -1) (undo-tree-id41303 . -1) (undo-tree-id41304 . -1) (undo-tree-id41305 . -1) (undo-tree-id41306 . -1) (undo-tree-id41307 . -1) (undo-tree-id41308 . -1) (undo-tree-id41309 . -1) (undo-tree-id41310 . -1) (undo-tree-id41311 . -1) (undo-tree-id41312 . -1) (undo-tree-id41313 . -1) (undo-tree-id41314 . -1) (undo-tree-id41315 . -1) (undo-tree-id41316 . -1) (undo-tree-id41317 . -1) (undo-tree-id41318 . -1) (undo-tree-id41319 . -1) (undo-tree-id41320 . -1) (undo-tree-id41321 . -1) (undo-tree-id41322 . -1) (undo-tree-id41323 . -1) (undo-tree-id41324 . -1) (undo-tree-id41325 . -1) (undo-tree-id41326 . -1) (undo-tree-id41327 . -1) (undo-tree-id41328 . -1) (undo-tree-id41329 . -1) (undo-tree-id41330 . -1) (undo-tree-id41331 . -1) (undo-tree-id41332 . -1) (undo-tree-id41333 . -1) (undo-tree-id41334 . -1) (undo-tree-id41335 . -1) (undo-tree-id41336 . -1) (undo-tree-id41337 . -1) (undo-tree-id41338 . -1) (undo-tree-id41339 . -1) (undo-tree-id41340 . -1) (undo-tree-id41341 . -1) (undo-tree-id41342 . -1) (undo-tree-id41343 . -1) (undo-tree-id41344 . -1) (undo-tree-id41345 . -1) (undo-tree-id41346 . -1) (undo-tree-id41347 . -1) (undo-tree-id41348 . -1) (undo-tree-id41349 . -1) (undo-tree-id41350 . -1) (undo-tree-id41351 . -1) (undo-tree-id41352 . -1) (undo-tree-id41353 . -1) (undo-tree-id41354 . -1) (undo-tree-id41355 . -1) (undo-tree-id41356 . -1) (undo-tree-id41357 . -1) (undo-tree-id41358 . -1) (undo-tree-id41359 . -1) (undo-tree-id41360 . -1) (undo-tree-id41361 . -1) (undo-tree-id41362 . -1) (undo-tree-id41363 . -1) (undo-tree-id41364 . -1) (undo-tree-id41365 . -1) (undo-tree-id41366 . -1) (undo-tree-id41367 . -1) (undo-tree-id41368 . -1) (undo-tree-id41369 . -1) (undo-tree-id41370 . -1) (undo-tree-id41371 . -1) (undo-tree-id41372 . -1) (undo-tree-id41373 . -1) (undo-tree-id41374 . -1) (undo-tree-id41375 . -1) (undo-tree-id41376 . -1) (undo-tree-id41377 . -1) (undo-tree-id41378 . -1) (undo-tree-id41379 . -1) (undo-tree-id41380 . -1) (undo-tree-id41381 . -1) (undo-tree-id41382 . -1) (undo-tree-id41383 . -1) (undo-tree-id41384 . -1) (undo-tree-id41385 . -1) (undo-tree-id41386 . -1) (undo-tree-id41387 . -1) (undo-tree-id41388 . -1) (undo-tree-id41389 . -1) (undo-tree-id41390 . -1) (undo-tree-id41391 . -1) (undo-tree-id41392 . -1) (undo-tree-id41393 . -1) (undo-tree-id41394 . -1) (undo-tree-id41395 . -1) (undo-tree-id41396 . -1) (undo-tree-id41397 . -1) (undo-tree-id41398 . -1) (undo-tree-id41399 . -1) (undo-tree-id41400 . -1) (undo-tree-id41401 . -1) (undo-tree-id41402 . -1) (undo-tree-id41403 . -1) (#("o" 0 1 (fontified nil)) . -7090) (undo-tree-id41404 . -1) (undo-tree-id41405 . -1) (undo-tree-id41406 . -1) (undo-tree-id41407 . -1) (undo-tree-id41408 . -1) (undo-tree-id41409 . -1) (undo-tree-id41410 . -1) (undo-tree-id41411 . -1) (undo-tree-id41412 . -1) (undo-tree-id41413 . -1) (undo-tree-id41414 . -1) (undo-tree-id41415 . -1) (undo-tree-id41416 . -1) (undo-tree-id41417 . -1) (undo-tree-id41418 . -1) (undo-tree-id41419 . -1) (undo-tree-id41420 . -1) (undo-tree-id41421 . -1) (undo-tree-id41422 . -1) (undo-tree-id41423 . -1) (undo-tree-id41424 . -1) (undo-tree-id41425 . -1) (undo-tree-id41426 . -1) (undo-tree-id41427 . -1) (undo-tree-id41428 . -1) (undo-tree-id41429 . -1) (undo-tree-id41430 . -1) (undo-tree-id41431 . -1) (undo-tree-id41432 . -1) (undo-tree-id41433 . -1) (undo-tree-id41434 . -1) (undo-tree-id41435 . -1) (undo-tree-id41436 . -1) (undo-tree-id41437 . -1) (undo-tree-id41438 . -1) (undo-tree-id41439 . -1) (undo-tree-id41440 . -1) (undo-tree-id41441 . -1) (undo-tree-id41442 . -1) (undo-tree-id41443 . -1) (undo-tree-id41444 . -1) (undo-tree-id41445 . -1) (undo-tree-id41446 . -1) (undo-tree-id41447 . -1) (undo-tree-id41448 . -1) (undo-tree-id41449 . -1) (undo-tree-id41450 . -1) (undo-tree-id41451 . -1) (undo-tree-id41452 . -1) (undo-tree-id41453 . -1) (undo-tree-id41454 . -1) (undo-tree-id41455 . -1) (undo-tree-id41456 . -1) (undo-tree-id41457 . -1) (undo-tree-id41458 . -1) (undo-tree-id41459 . -1) (undo-tree-id41460 . -1) (undo-tree-id41461 . -1) (undo-tree-id41462 . -1) (undo-tree-id41463 . -1) (undo-tree-id41464 . -1) (undo-tree-id41465 . -1) (undo-tree-id41466 . -1) (undo-tree-id41467 . -1) (undo-tree-id41468 . -1) (undo-tree-id41469 . -1) (undo-tree-id41470 . -1) (undo-tree-id41471 . -1) (undo-tree-id41472 . -1) (undo-tree-id41473 . -1) (undo-tree-id41474 . -1) (undo-tree-id41475 . -1) (undo-tree-id41476 . -1) (undo-tree-id41477 . -1) (undo-tree-id41478 . -1) (undo-tree-id41479 . -1) (undo-tree-id41480 . -1) (undo-tree-id41481 . -1) (undo-tree-id41482 . -1) (undo-tree-id41483 . -1) (undo-tree-id41484 . -1) (undo-tree-id41485 . -1) (undo-tree-id41486 . -1) (undo-tree-id41487 . -1) (undo-tree-id41488 . -1) (undo-tree-id41489 . -1) (undo-tree-id41490 . -1) (undo-tree-id41491 . -1) (undo-tree-id41492 . -1) (undo-tree-id41493 . -1) (undo-tree-id41494 . -1) (undo-tree-id41495 . -1) (undo-tree-id41496 . -1) (undo-tree-id41497 . -1) (undo-tree-id41498 . -1) (undo-tree-id41499 . -1) (undo-tree-id41500 . -1) (undo-tree-id41501 . -1) (undo-tree-id41502 . -1) (undo-tree-id41503 . -1) (undo-tree-id41504 . -1) (undo-tree-id41505 . -1) (undo-tree-id41506 . -1) (undo-tree-id41507 . -1) (undo-tree-id41508 . -1) (undo-tree-id41509 . -1) (undo-tree-id41510 . -1) (undo-tree-id41511 . -1) (undo-tree-id41512 . -1) (undo-tree-id41513 . -1) (undo-tree-id41514 . -1) (undo-tree-id41515 . -1) (undo-tree-id41516 . -1) (undo-tree-id41517 . -1) (undo-tree-id41518 . -1) (undo-tree-id41519 . -1) (undo-tree-id41520 . -1) (undo-tree-id41521 . -1) (undo-tree-id41522 . -1) (undo-tree-id41523 . -1) (undo-tree-id41524 . -1) (undo-tree-id41525 . -1) (undo-tree-id41526 . -1) (undo-tree-id41527 . -1) (undo-tree-id41528 . -1) (undo-tree-id41529 . -1) (undo-tree-id41530 . -1) (undo-tree-id41531 . -1) (undo-tree-id41532 . -1) (undo-tree-id41533 . -1) (undo-tree-id41534 . -1) (undo-tree-id41535 . -1) (undo-tree-id41536 . -1) (undo-tree-id41537 . -1) (undo-tree-id41538 . -1) (undo-tree-id41539 . -1) (undo-tree-id41540 . -1) (undo-tree-id41541 . -1) (undo-tree-id41542 . -1) (undo-tree-id41543 . -1) (undo-tree-id41544 . -1) (undo-tree-id41545 . -1) (undo-tree-id41546 . -1) (undo-tree-id41547 . -1) (undo-tree-id41548 . -1) (undo-tree-id41549 . -1) (undo-tree-id41550 . -1) (undo-tree-id41551 . -1) (undo-tree-id41552 . -1) (undo-tree-id41553 . -1) (undo-tree-id41554 . -1) (undo-tree-id41555 . -1) (undo-tree-id41556 . -1) (undo-tree-id41557 . -1) (undo-tree-id41558 . -1) (undo-tree-id41559 . -1) (undo-tree-id41560 . -1) (undo-tree-id41561 . -1) (undo-tree-id41562 . -1) (undo-tree-id41563 . -1) (undo-tree-id41564 . -1) (undo-tree-id41565 . -1) (undo-tree-id41566 . -1) (undo-tree-id41567 . -1) (undo-tree-id41568 . -1) (undo-tree-id41569 . -1) (undo-tree-id41570 . -1) (undo-tree-id41571 . -1) (undo-tree-id41572 . -1) (undo-tree-id41573 . -1) (undo-tree-id41574 . -1) (undo-tree-id41575 . -1) (undo-tree-id41576 . -1) (undo-tree-id41577 . -1) (undo-tree-id41578 . -1) (undo-tree-id41579 . -1) (undo-tree-id41580 . -1) (undo-tree-id41581 . -1) (undo-tree-id41582 . -1) (undo-tree-id41583 . -1) (undo-tree-id41584 . -1) (undo-tree-id41585 . -1) (undo-tree-id41586 . -1) (undo-tree-id41587 . -1) (undo-tree-id41588 . -1) (undo-tree-id41589 . -1) (undo-tree-id41590 . -1) (undo-tree-id41591 . -1) (undo-tree-id41592 . -1) (undo-tree-id41593 . -1) (undo-tree-id41594 . -1) (undo-tree-id41595 . -1) (undo-tree-id41596 . -1) (undo-tree-id41597 . -1) (undo-tree-id41598 . -1) (undo-tree-id41599 . -1) (undo-tree-id41600 . -1) (undo-tree-id41601 . -1) (undo-tree-id41602 . -1) (undo-tree-id41603 . -1) (undo-tree-id41604 . -1) (undo-tree-id41605 . -1) (undo-tree-id41606 . -1) (undo-tree-id41607 . -1) (undo-tree-id41608 . -1) (undo-tree-id41609 . -1) (undo-tree-id41610 . -1) (undo-tree-id41611 . -1) (undo-tree-id41612 . -1) (undo-tree-id41613 . -1) (undo-tree-id41614 . -1) (undo-tree-id41615 . -1) (undo-tree-id41616 . -1) (undo-tree-id41617 . -1) (undo-tree-id41618 . -1) (undo-tree-id41619 . -1) (undo-tree-id41620 . -1) (undo-tree-id41621 . -1) (undo-tree-id41622 . -1) (undo-tree-id41623 . -1) (undo-tree-id41624 . -1) (undo-tree-id41625 . -1) (undo-tree-id41626 . -1) (undo-tree-id41627 . -1) (undo-tree-id41628 . -1) (undo-tree-id41629 . -1) (undo-tree-id41630 . -1) (undo-tree-id41631 . -1) (undo-tree-id41632 . -1) (#("m" 0 1 (fontified nil)) . -7091) (undo-tree-id41633 . -1) (undo-tree-id41634 . -1) (undo-tree-id41635 . -1) (undo-tree-id41636 . -1) (undo-tree-id41637 . -1) (undo-tree-id41638 . -1) (undo-tree-id41639 . -1) (undo-tree-id41640 . -1) (undo-tree-id41641 . -1) (undo-tree-id41642 . -1) (undo-tree-id41643 . -1) (undo-tree-id41644 . -1) (undo-tree-id41645 . -1) (undo-tree-id41646 . -1) (undo-tree-id41647 . -1) (undo-tree-id41648 . -1) (undo-tree-id41649 . -1) (undo-tree-id41650 . -1) (undo-tree-id41651 . -1) (undo-tree-id41652 . -1) (undo-tree-id41653 . -1) (undo-tree-id41654 . -1) (undo-tree-id41655 . -1) (undo-tree-id41656 . -1) (undo-tree-id41657 . -1) (undo-tree-id41658 . -1) (undo-tree-id41659 . -1) (undo-tree-id41660 . -1) (undo-tree-id41661 . -1) (undo-tree-id41662 . -1) (undo-tree-id41663 . -1) (undo-tree-id41664 . -1) (undo-tree-id41665 . -1) (undo-tree-id41666 . -1) (undo-tree-id41667 . -1) (undo-tree-id41668 . -1) (undo-tree-id41669 . -1) (undo-tree-id41670 . -1) (undo-tree-id41671 . -1) (undo-tree-id41672 . -1) (undo-tree-id41673 . -1) (undo-tree-id41674 . -1) (undo-tree-id41675 . -1) (undo-tree-id41676 . -1) (undo-tree-id41677 . -1) (undo-tree-id41678 . -1) (undo-tree-id41679 . -1) (undo-tree-id41680 . -1) (undo-tree-id41681 . -1) (undo-tree-id41682 . -1) (undo-tree-id41683 . -1) (undo-tree-id41684 . -1) (undo-tree-id41685 . -1) (undo-tree-id41686 . -1) (undo-tree-id41687 . -1) (undo-tree-id41688 . -1) (undo-tree-id41689 . -1) (undo-tree-id41690 . -1) (undo-tree-id41691 . -1) (undo-tree-id41692 . -1) (undo-tree-id41693 . -1) (undo-tree-id41694 . -1) (undo-tree-id41695 . -1) (undo-tree-id41696 . -1) (undo-tree-id41697 . -1) (undo-tree-id41698 . -1) (undo-tree-id41699 . -1) (undo-tree-id41700 . -1) (undo-tree-id41701 . -1) (undo-tree-id41702 . -1) (undo-tree-id41703 . -1) (undo-tree-id41704 . -1) (undo-tree-id41705 . -1) (undo-tree-id41706 . -1) (undo-tree-id41707 . -1) (undo-tree-id41708 . -1) (undo-tree-id41709 . -1) (undo-tree-id41710 . -1) (undo-tree-id41711 . -1) (undo-tree-id41712 . -1) (undo-tree-id41713 . -1) (undo-tree-id41714 . -1) (undo-tree-id41715 . -1) (undo-tree-id41716 . -1) (undo-tree-id41717 . -1) (undo-tree-id41718 . -1) (undo-tree-id41719 . -1) (undo-tree-id41720 . -1) (undo-tree-id41721 . -1) (undo-tree-id41722 . -1) (undo-tree-id41723 . -1) (undo-tree-id41724 . -1) (undo-tree-id41725 . -1) (undo-tree-id41726 . -1) (undo-tree-id41727 . -1) (undo-tree-id41728 . -1) (undo-tree-id41729 . -1) (undo-tree-id41730 . -1) (undo-tree-id41731 . -1) (undo-tree-id41732 . -1) (undo-tree-id41733 . -1) (undo-tree-id41734 . -1) (undo-tree-id41735 . -1) (undo-tree-id41736 . -1) (undo-tree-id41737 . -1) (undo-tree-id41738 . -1) (undo-tree-id41739 . -1) (undo-tree-id41740 . -1) (undo-tree-id41741 . -1) (undo-tree-id41742 . -1) (undo-tree-id41743 . -1) (undo-tree-id41744 . -1) (undo-tree-id41745 . -1) (undo-tree-id41746 . -1) (undo-tree-id41747 . -1) (undo-tree-id41748 . -1) (undo-tree-id41749 . -1) (undo-tree-id41750 . -1) (undo-tree-id41751 . -1) (undo-tree-id41752 . -1) (undo-tree-id41753 . -1) (undo-tree-id41754 . -1) (undo-tree-id41755 . -1) (undo-tree-id41756 . -1) (undo-tree-id41757 . -1) (undo-tree-id41758 . -1) (undo-tree-id41759 . -1) (undo-tree-id41760 . -1) (undo-tree-id41761 . -1) (undo-tree-id41762 . -1) (undo-tree-id41763 . -1) (undo-tree-id41764 . -1) (undo-tree-id41765 . -1) (undo-tree-id41766 . -1) (undo-tree-id41767 . -1) (undo-tree-id41768 . -1) (undo-tree-id41769 . -1) (undo-tree-id41770 . -1) (undo-tree-id41771 . -1) (undo-tree-id41772 . -1) (undo-tree-id41773 . -1) (undo-tree-id41774 . -1) (undo-tree-id41775 . -1) (undo-tree-id41776 . -1) (undo-tree-id41777 . -1) (undo-tree-id41778 . -1) (undo-tree-id41779 . -1) (undo-tree-id41780 . -1) (undo-tree-id41781 . -1) (undo-tree-id41782 . -1) (undo-tree-id41783 . -1) (undo-tree-id41784 . -1) (undo-tree-id41785 . -1) (undo-tree-id41786 . -1) (undo-tree-id41787 . -1) (undo-tree-id41788 . -1) (undo-tree-id41789 . -1) (undo-tree-id41790 . -1) (undo-tree-id41791 . -1) (undo-tree-id41792 . -1) (undo-tree-id41793 . -1) (undo-tree-id41794 . -1) (undo-tree-id41795 . -1) (undo-tree-id41796 . -1) (undo-tree-id41797 . -1) (undo-tree-id41798 . -1) (undo-tree-id41799 . -1) (undo-tree-id41800 . -1) (undo-tree-id41801 . -1) (undo-tree-id41802 . -1) (undo-tree-id41803 . -1) (undo-tree-id41804 . -1) (undo-tree-id41805 . -1) (undo-tree-id41806 . -1) (undo-tree-id41807 . -1) (undo-tree-id41808 . -1) (undo-tree-id41809 . -1) (undo-tree-id41810 . -1) (undo-tree-id41811 . -1) (undo-tree-id41812 . -1) (undo-tree-id41813 . -1) (undo-tree-id41814 . -1) (undo-tree-id41815 . -1) (undo-tree-id41816 . -1) (undo-tree-id41817 . -1) (undo-tree-id41818 . -1) (undo-tree-id41819 . -1) (undo-tree-id41820 . -1) (undo-tree-id41821 . -1) (undo-tree-id41822 . -1) (undo-tree-id41823 . -1) (undo-tree-id41824 . -1) (undo-tree-id41825 . -1) (undo-tree-id41826 . -1) (undo-tree-id41827 . -1) (undo-tree-id41828 . -1) (undo-tree-id41829 . -1) (undo-tree-id41830 . -1) (undo-tree-id41831 . -1) (undo-tree-id41832 . -1) (undo-tree-id41833 . -1) (undo-tree-id41834 . -1) (undo-tree-id41835 . -1) (undo-tree-id41836 . -1) (undo-tree-id41837 . -1) (undo-tree-id41838 . -1) (undo-tree-id41839 . -1) (undo-tree-id41840 . -1) (undo-tree-id41841 . -1) (undo-tree-id41842 . -1) (undo-tree-id41843 . -1) (undo-tree-id41844 . -1) (undo-tree-id41845 . -1) (undo-tree-id41846 . -1) (undo-tree-id41847 . -1) (undo-tree-id41848 . -1) (undo-tree-id41849 . -1) (undo-tree-id41850 . -1) (undo-tree-id41851 . -1) (undo-tree-id41852 . -1) (undo-tree-id41853 . -1) (undo-tree-id41854 . -1) (undo-tree-id41855 . -1) (undo-tree-id41856 . -1) (undo-tree-id41857 . -1) (undo-tree-id41858 . -1) (undo-tree-id41859 . -1) (undo-tree-id41860 . -1) (undo-tree-id41861 . -1) (#("_" 0 1 (fontified t)) . -7092) (undo-tree-id41862 . -1) (undo-tree-id41863 . -1) (undo-tree-id41864 . -1) (undo-tree-id41865 . -1) (undo-tree-id41866 . -1) (undo-tree-id41867 . -1) (undo-tree-id41868 . -1) (undo-tree-id41869 . -1) (undo-tree-id41870 . -1) (undo-tree-id41871 . -1) (undo-tree-id41872 . -1) (undo-tree-id41873 . -1) (undo-tree-id41874 . -1) (undo-tree-id41875 . -1) (undo-tree-id41876 . -1) (undo-tree-id41877 . -1) (undo-tree-id41878 . -1) (undo-tree-id41879 . -1) (undo-tree-id41880 . -1) (undo-tree-id41881 . -1) (undo-tree-id41882 . -1) (undo-tree-id41883 . -1) (undo-tree-id41884 . -1) (undo-tree-id41885 . -1) (undo-tree-id41886 . -1) (undo-tree-id41887 . -1) (undo-tree-id41888 . -1) (undo-tree-id41889 . -1) (undo-tree-id41890 . -1) (undo-tree-id41891 . -1) (undo-tree-id41892 . -1) (undo-tree-id41893 . -1) (undo-tree-id41894 . -1) (undo-tree-id41895 . -1) (undo-tree-id41896 . -1) (undo-tree-id41897 . -1) (undo-tree-id41898 . -1) (undo-tree-id41899 . -1) (undo-tree-id41900 . -1) (undo-tree-id41901 . -1) (undo-tree-id41902 . -1) (undo-tree-id41903 . -1) (undo-tree-id41904 . -1) (undo-tree-id41905 . -1) (undo-tree-id41906 . -1) (undo-tree-id41907 . -1) (undo-tree-id41908 . -1) (undo-tree-id41909 . -1) (undo-tree-id41910 . -1) (undo-tree-id41911 . -1) (undo-tree-id41912 . -1) (undo-tree-id41913 . -1) (undo-tree-id41914 . -1) (undo-tree-id41915 . -1) (undo-tree-id41916 . -1) (undo-tree-id41917 . -1) (undo-tree-id41918 . -1) (undo-tree-id41919 . -1) (undo-tree-id41920 . -1) (undo-tree-id41921 . -1) (undo-tree-id41922 . -1) (undo-tree-id41923 . -1) (undo-tree-id41924 . -1) (undo-tree-id41925 . -1) (undo-tree-id41926 . -1) (undo-tree-id41927 . -1) (undo-tree-id41928 . -1) (undo-tree-id41929 . -1) (undo-tree-id41930 . -1) (undo-tree-id41931 . -1) (undo-tree-id41932 . -1) (undo-tree-id41933 . -1) (undo-tree-id41934 . -1) (undo-tree-id41935 . -1) (undo-tree-id41936 . -1) (undo-tree-id41937 . -1) (undo-tree-id41938 . -1) (undo-tree-id41939 . -1) (undo-tree-id41940 . -1) (undo-tree-id41941 . -1) (undo-tree-id41942 . -1) (undo-tree-id41943 . -1) (undo-tree-id41944 . -1) (undo-tree-id41945 . -1) (undo-tree-id41946 . -1) (undo-tree-id41947 . -1) (undo-tree-id41948 . -1) (undo-tree-id41949 . -1) (undo-tree-id41950 . -1) (undo-tree-id41951 . -1) (undo-tree-id41952 . -1) (undo-tree-id41953 . -1) (undo-tree-id41954 . -1) (undo-tree-id41955 . -1) (undo-tree-id41956 . -1) (undo-tree-id41957 . -1) (undo-tree-id41958 . -1) (undo-tree-id41959 . -1) (undo-tree-id41960 . -1) (undo-tree-id41961 . -1) (undo-tree-id41962 . -1) (undo-tree-id41963 . -1) (undo-tree-id41964 . -1) (undo-tree-id41965 . -1) (undo-tree-id41966 . -1) (undo-tree-id41967 . -1) (undo-tree-id41968 . -1) (undo-tree-id41969 . -1) (undo-tree-id41970 . -1) (undo-tree-id41971 . -1) (undo-tree-id41972 . -1) (undo-tree-id41973 . -1) (undo-tree-id41974 . -1) (undo-tree-id41975 . -1) (undo-tree-id41976 . -1) (undo-tree-id41977 . -1) (undo-tree-id41978 . -1) (undo-tree-id41979 . -1) (undo-tree-id41980 . -1) (undo-tree-id41981 . -1) (undo-tree-id41982 . -1) (undo-tree-id41983 . -1) (undo-tree-id41984 . -1) (undo-tree-id41985 . -1) (undo-tree-id41986 . -1) (undo-tree-id41987 . -1) (undo-tree-id41988 . -1) (undo-tree-id41989 . -1) (undo-tree-id41990 . -1) (undo-tree-id41991 . -1) (undo-tree-id41992 . -1) (undo-tree-id41993 . -1) (undo-tree-id41994 . -1) (undo-tree-id41995 . -1) (undo-tree-id41996 . -1) (undo-tree-id41997 . -1) (undo-tree-id41998 . -1) (undo-tree-id41999 . -1) (undo-tree-id42000 . -1) (undo-tree-id42001 . -1) (undo-tree-id42002 . -1) (undo-tree-id42003 . -1) (undo-tree-id42004 . -1) (undo-tree-id42005 . -1) (undo-tree-id42006 . -1) (undo-tree-id42007 . -1) (undo-tree-id42008 . -1) (undo-tree-id42009 . -1) (undo-tree-id42010 . -1) (undo-tree-id42011 . -1) (undo-tree-id42012 . -1) (undo-tree-id42013 . -1) (undo-tree-id42014 . -1) (undo-tree-id42015 . -1) (undo-tree-id42016 . -1) (undo-tree-id42017 . -1) (undo-tree-id42018 . -1) (undo-tree-id42019 . -1) (undo-tree-id42020 . -1) (undo-tree-id42021 . -1) (undo-tree-id42022 . -1) (undo-tree-id42023 . -1) (undo-tree-id42024 . -1) (undo-tree-id42025 . -1) (undo-tree-id42026 . -1) (undo-tree-id42027 . -1) (undo-tree-id42028 . -1) (undo-tree-id42029 . -1) (undo-tree-id42030 . -1) (undo-tree-id42031 . -1) (undo-tree-id42032 . -1) (undo-tree-id42033 . -1) (undo-tree-id42034 . -1) (undo-tree-id42035 . -1) (undo-tree-id42036 . -1) (undo-tree-id42037 . -1) (undo-tree-id42038 . -1) (undo-tree-id42039 . -1) (undo-tree-id42040 . -1) (undo-tree-id42041 . -1) (undo-tree-id42042 . -1) (undo-tree-id42043 . -1) (undo-tree-id42044 . -1) (undo-tree-id42045 . -1) (undo-tree-id42046 . -1) (undo-tree-id42047 . -1) (undo-tree-id42048 . -1) (undo-tree-id42049 . -1) (undo-tree-id42050 . -1) (undo-tree-id42051 . -1) (undo-tree-id42052 . -1) (undo-tree-id42053 . -1) (undo-tree-id42054 . -1) (undo-tree-id42055 . -1) (undo-tree-id42056 . -1) (undo-tree-id42057 . -1) (undo-tree-id42058 . -1) (undo-tree-id42059 . -1) (undo-tree-id42060 . -1) (undo-tree-id42061 . -1) (undo-tree-id42062 . -1) (undo-tree-id42063 . -1) (undo-tree-id42064 . -1) (undo-tree-id42065 . -1) (undo-tree-id42066 . -1) (undo-tree-id42067 . -1) (undo-tree-id42068 . -1) (undo-tree-id42069 . -1) (undo-tree-id42070 . -1) (undo-tree-id42071 . -1) (undo-tree-id42072 . -1) (undo-tree-id42073 . -1) (undo-tree-id42074 . -1) (undo-tree-id42075 . -1) (undo-tree-id42076 . -1) (undo-tree-id42077 . -1) (undo-tree-id42078 . -1) (undo-tree-id42079 . -1) (undo-tree-id42080 . -1) (undo-tree-id42081 . -1) (undo-tree-id42082 . -1) (undo-tree-id42083 . -1) (undo-tree-id42084 . -1) (undo-tree-id42085 . -1) (undo-tree-id42086 . -1) (undo-tree-id42087 . -1) (undo-tree-id42088 . -1) (undo-tree-id42089 . -1) (undo-tree-id42090 . -1) (#("s" 0 1 (fontified t)) . -7093) (undo-tree-id42091 . -1) (undo-tree-id42092 . -1) (undo-tree-id42093 . -1) (undo-tree-id42094 . -1) (undo-tree-id42095 . -1) (undo-tree-id42096 . -1) (undo-tree-id42097 . -1) (undo-tree-id42098 . -1) (undo-tree-id42099 . -1) (undo-tree-id42100 . -1) (undo-tree-id42101 . -1) (undo-tree-id42102 . -1) (undo-tree-id42103 . -1) (undo-tree-id42104 . -1) (undo-tree-id42105 . -1) (undo-tree-id42106 . -1) (undo-tree-id42107 . -1) (undo-tree-id42108 . -1) (undo-tree-id42109 . -1) (undo-tree-id42110 . -1) (undo-tree-id42111 . -1) (undo-tree-id42112 . -1) (undo-tree-id42113 . -1) (undo-tree-id42114 . -1) (undo-tree-id42115 . -1) (undo-tree-id42116 . -1) (undo-tree-id42117 . -1) (undo-tree-id42118 . -1) (undo-tree-id42119 . -1) (undo-tree-id42120 . -1) (undo-tree-id42121 . -1) (undo-tree-id42122 . -1) (undo-tree-id42123 . -1) (undo-tree-id42124 . -1) (undo-tree-id42125 . -1) (undo-tree-id42126 . -1) (undo-tree-id42127 . -1) (undo-tree-id42128 . -1) (undo-tree-id42129 . -1) (undo-tree-id42130 . -1) (undo-tree-id42131 . -1) (undo-tree-id42132 . -1) (undo-tree-id42133 . -1) (undo-tree-id42134 . -1) (undo-tree-id42135 . -1) (undo-tree-id42136 . -1) (undo-tree-id42137 . -1) (undo-tree-id42138 . -1) (undo-tree-id42139 . -1) (undo-tree-id42140 . -1) (undo-tree-id42141 . -1) (undo-tree-id42142 . -1) (undo-tree-id42143 . -1) (undo-tree-id42144 . -1) (undo-tree-id42145 . -1) (undo-tree-id42146 . -1) (undo-tree-id42147 . -1) (undo-tree-id42148 . -1) (undo-tree-id42149 . -1) (undo-tree-id42150 . -1) (undo-tree-id42151 . -1) (undo-tree-id42152 . -1) (undo-tree-id42153 . -1) (undo-tree-id42154 . -1) (undo-tree-id42155 . -1) (undo-tree-id42156 . -1) (undo-tree-id42157 . -1) (undo-tree-id42158 . -1) (undo-tree-id42159 . -1) (undo-tree-id42160 . -1) (undo-tree-id42161 . -1) (undo-tree-id42162 . -1) (undo-tree-id42163 . -1) (undo-tree-id42164 . -1) (undo-tree-id42165 . -1) (undo-tree-id42166 . -1) (undo-tree-id42167 . -1) (undo-tree-id42168 . -1) (undo-tree-id42169 . -1) (undo-tree-id42170 . -1) (undo-tree-id42171 . -1) (undo-tree-id42172 . -1) (undo-tree-id42173 . -1) (undo-tree-id42174 . -1) (undo-tree-id42175 . -1) (undo-tree-id42176 . -1) (undo-tree-id42177 . -1) (undo-tree-id42178 . -1) (undo-tree-id42179 . -1) (undo-tree-id42180 . -1) (undo-tree-id42181 . -1) (undo-tree-id42182 . -1) (undo-tree-id42183 . -1) (undo-tree-id42184 . -1) (undo-tree-id42185 . -1) (undo-tree-id42186 . -1) (undo-tree-id42187 . -1) (undo-tree-id42188 . -1) (undo-tree-id42189 . -1) (undo-tree-id42190 . -1) (undo-tree-id42191 . -1) (undo-tree-id42192 . -1) (undo-tree-id42193 . -1) (undo-tree-id42194 . -1) (undo-tree-id42195 . -1) (undo-tree-id42196 . -1) (undo-tree-id42197 . -1) (undo-tree-id42198 . -1) (undo-tree-id42199 . -1) (undo-tree-id42200 . -1) (undo-tree-id42201 . -1) (undo-tree-id42202 . -1) (undo-tree-id42203 . -1) (undo-tree-id42204 . -1) (undo-tree-id42205 . -1) (undo-tree-id42206 . -1) (undo-tree-id42207 . -1) (undo-tree-id42208 . -1) (undo-tree-id42209 . -1) (undo-tree-id42210 . -1) (undo-tree-id42211 . -1) (undo-tree-id42212 . -1) (undo-tree-id42213 . -1) (undo-tree-id42214 . -1) (undo-tree-id42215 . -1) (undo-tree-id42216 . -1) (undo-tree-id42217 . -1) (undo-tree-id42218 . -1) (undo-tree-id42219 . -1) (undo-tree-id42220 . -1) (undo-tree-id42221 . -1) (undo-tree-id42222 . -1) (undo-tree-id42223 . -1) (undo-tree-id42224 . -1) (undo-tree-id42225 . -1) (undo-tree-id42226 . -1) (undo-tree-id42227 . -1) (undo-tree-id42228 . -1) (undo-tree-id42229 . -1) (undo-tree-id42230 . -1) (undo-tree-id42231 . -1) (undo-tree-id42232 . -1) (undo-tree-id42233 . -1) (undo-tree-id42234 . -1) (undo-tree-id42235 . -1) (undo-tree-id42236 . -1) (undo-tree-id42237 . -1) (undo-tree-id42238 . -1) (undo-tree-id42239 . -1) (undo-tree-id42240 . -1) (undo-tree-id42241 . -1) (undo-tree-id42242 . -1) (undo-tree-id42243 . -1) (undo-tree-id42244 . -1) (undo-tree-id42245 . -1) (undo-tree-id42246 . -1) (undo-tree-id42247 . -1) (undo-tree-id42248 . -1) (undo-tree-id42249 . -1) (undo-tree-id42250 . -1) (undo-tree-id42251 . -1) (undo-tree-id42252 . -1) (undo-tree-id42253 . -1) (undo-tree-id42254 . -1) (undo-tree-id42255 . -1) (undo-tree-id42256 . -1) (undo-tree-id42257 . -1) (undo-tree-id42258 . -1) (undo-tree-id42259 . -1) (undo-tree-id42260 . -1) (undo-tree-id42261 . -1) (undo-tree-id42262 . -1) (undo-tree-id42263 . -1) (undo-tree-id42264 . -1) (undo-tree-id42265 . -1) (undo-tree-id42266 . -1) (undo-tree-id42267 . -1) (undo-tree-id42268 . -1) (undo-tree-id42269 . -1) (undo-tree-id42270 . -1) (undo-tree-id42271 . -1) (undo-tree-id42272 . -1) (undo-tree-id42273 . -1) (undo-tree-id42274 . -1) (undo-tree-id42275 . -1) (undo-tree-id42276 . -1) (undo-tree-id42277 . -1) (undo-tree-id42278 . -1) (undo-tree-id42279 . -1) (undo-tree-id42280 . -1) (undo-tree-id42281 . -1) (undo-tree-id42282 . -1) (undo-tree-id42283 . -1) (undo-tree-id42284 . -1) (undo-tree-id42285 . -1) (undo-tree-id42286 . -1) (undo-tree-id42287 . -1) (undo-tree-id42288 . -1) (undo-tree-id42289 . -1) (undo-tree-id42290 . -1) (undo-tree-id42291 . -1) (undo-tree-id42292 . -1) (undo-tree-id42293 . -1) (undo-tree-id42294 . -1) (undo-tree-id42295 . -1) (undo-tree-id42296 . -1) (undo-tree-id42297 . -1) (undo-tree-id42298 . -1) (undo-tree-id42299 . -1) (undo-tree-id42300 . -1) (undo-tree-id42301 . -1) (undo-tree-id42302 . -1) (undo-tree-id42303 . -1) (undo-tree-id42304 . -1) (undo-tree-id42305 . -1) (undo-tree-id42306 . -1) (undo-tree-id42307 . -1) (undo-tree-id42308 . -1) (undo-tree-id42309 . -1) (#("l" 0 1 (fontified t)) . -7094) (undo-tree-id42310 . -1) (undo-tree-id42311 . -1) (undo-tree-id42312 . -1) (undo-tree-id42313 . -1) (undo-tree-id42314 . -1) (undo-tree-id42315 . -1) (undo-tree-id42316 . -1) (undo-tree-id42317 . -1) (undo-tree-id42318 . -1) (undo-tree-id42319 . -1) (undo-tree-id42320 . -1) (undo-tree-id42321 . -1) (undo-tree-id42322 . -1) (undo-tree-id42323 . -1) (undo-tree-id42324 . -1) (undo-tree-id42325 . -1) (undo-tree-id42326 . -1) (undo-tree-id42327 . -1) (undo-tree-id42328 . -1) (undo-tree-id42329 . -1) (undo-tree-id42330 . -1) (undo-tree-id42331 . -1) (undo-tree-id42332 . -1) (undo-tree-id42333 . -1) (undo-tree-id42334 . -1) (undo-tree-id42335 . -1) (undo-tree-id42336 . -1) (undo-tree-id42337 . -1) (undo-tree-id42338 . -1) (undo-tree-id42339 . -1) (undo-tree-id42340 . -1) (undo-tree-id42341 . -1) (undo-tree-id42342 . -1) (undo-tree-id42343 . -1) (undo-tree-id42344 . -1) (undo-tree-id42345 . -1) (undo-tree-id42346 . -1) (undo-tree-id42347 . -1) (undo-tree-id42348 . -1) (undo-tree-id42349 . -1) (undo-tree-id42350 . -1) (undo-tree-id42351 . -1) (undo-tree-id42352 . -1) (undo-tree-id42353 . -1) (undo-tree-id42354 . -1) (undo-tree-id42355 . -1) (undo-tree-id42356 . -1) (undo-tree-id42357 . -1) (undo-tree-id42358 . -1) (undo-tree-id42359 . -1) (undo-tree-id42360 . -1) (undo-tree-id42361 . -1) (undo-tree-id42362 . -1) (undo-tree-id42363 . -1) (undo-tree-id42364 . -1) (undo-tree-id42365 . -1) (undo-tree-id42366 . -1) (undo-tree-id42367 . -1) (undo-tree-id42368 . -1) (undo-tree-id42369 . -1) (undo-tree-id42370 . -1) (undo-tree-id42371 . -1) (undo-tree-id42372 . -1) (undo-tree-id42373 . -1) (undo-tree-id42374 . -1) (undo-tree-id42375 . -1) (undo-tree-id42376 . -1) (undo-tree-id42377 . -1) (undo-tree-id42378 . -1) (undo-tree-id42379 . -1) (undo-tree-id42380 . -1) (undo-tree-id42381 . -1) (undo-tree-id42382 . -1) (undo-tree-id42383 . -1) (undo-tree-id42384 . -1) (undo-tree-id42385 . -1) (undo-tree-id42386 . -1) (undo-tree-id42387 . -1) (undo-tree-id42388 . -1) (undo-tree-id42389 . -1) (undo-tree-id42390 . -1) (undo-tree-id42391 . -1) (undo-tree-id42392 . -1) (undo-tree-id42393 . -1) (undo-tree-id42394 . -1) (undo-tree-id42395 . -1) (undo-tree-id42396 . -1) (undo-tree-id42397 . -1) (undo-tree-id42398 . -1) (undo-tree-id42399 . -1) (undo-tree-id42400 . -1) (undo-tree-id42401 . -1) (undo-tree-id42402 . -1) (undo-tree-id42403 . -1) (undo-tree-id42404 . -1) (undo-tree-id42405 . -1) (undo-tree-id42406 . -1) (undo-tree-id42407 . -1) (undo-tree-id42408 . -1) (undo-tree-id42409 . -1) (undo-tree-id42410 . -1) (undo-tree-id42411 . -1) (undo-tree-id42412 . -1) (undo-tree-id42413 . -1) (undo-tree-id42414 . -1) (undo-tree-id42415 . -1) (undo-tree-id42416 . -1) (undo-tree-id42417 . -1) (undo-tree-id42418 . -1) (undo-tree-id42419 . -1) (undo-tree-id42420 . -1) (undo-tree-id42421 . -1) (undo-tree-id42422 . -1) (undo-tree-id42423 . -1) (undo-tree-id42424 . -1) (undo-tree-id42425 . -1) (undo-tree-id42426 . -1) (undo-tree-id42427 . -1) (undo-tree-id42428 . -1) (undo-tree-id42429 . -1) (undo-tree-id42430 . -1) (undo-tree-id42431 . -1) (undo-tree-id42432 . -1) (undo-tree-id42433 . -1) (undo-tree-id42434 . -1) (undo-tree-id42435 . -1) (undo-tree-id42436 . -1) (undo-tree-id42437 . -1) (undo-tree-id42438 . -1) (undo-tree-id42439 . -1) (undo-tree-id42440 . -1) (undo-tree-id42441 . -1) (undo-tree-id42442 . -1) (undo-tree-id42443 . -1) (undo-tree-id42444 . -1) (undo-tree-id42445 . -1) (undo-tree-id42446 . -1) (undo-tree-id42447 . -1) (undo-tree-id42448 . -1) (undo-tree-id42449 . -1) (undo-tree-id42450 . -1) (undo-tree-id42451 . -1) (undo-tree-id42452 . -1) (undo-tree-id42453 . -1) (undo-tree-id42454 . -1) (undo-tree-id42455 . -1) (undo-tree-id42456 . -1) (undo-tree-id42457 . -1) (undo-tree-id42458 . -1) (undo-tree-id42459 . -1) (undo-tree-id42460 . -1) (undo-tree-id42461 . -1) (undo-tree-id42462 . -1) (undo-tree-id42463 . -1) (undo-tree-id42464 . -1) (undo-tree-id42465 . -1) (undo-tree-id42466 . -1) (undo-tree-id42467 . -1) (undo-tree-id42468 . -1) (undo-tree-id42469 . -1) (undo-tree-id42470 . -1) (undo-tree-id42471 . -1) (undo-tree-id42472 . -1) (undo-tree-id42473 . -1) (undo-tree-id42474 . -1) (undo-tree-id42475 . -1) (undo-tree-id42476 . -1) (undo-tree-id42477 . -1) (undo-tree-id42478 . -1) (undo-tree-id42479 . -1) (undo-tree-id42480 . -1) (undo-tree-id42481 . -1) (undo-tree-id42482 . -1) (undo-tree-id42483 . -1) (undo-tree-id42484 . -1) (undo-tree-id42485 . -1) (undo-tree-id42486 . -1) (undo-tree-id42487 . -1) (undo-tree-id42488 . -1) (undo-tree-id42489 . -1) (undo-tree-id42490 . -1) (undo-tree-id42491 . -1) (undo-tree-id42492 . -1) (undo-tree-id42493 . -1) (undo-tree-id42494 . -1) (undo-tree-id42495 . -1) (undo-tree-id42496 . -1) (undo-tree-id42497 . -1) (undo-tree-id42498 . -1) (undo-tree-id42499 . -1) (undo-tree-id42500 . -1) (undo-tree-id42501 . -1) (undo-tree-id42502 . -1) (undo-tree-id42503 . -1) (undo-tree-id42504 . -1) (undo-tree-id42505 . -1) (undo-tree-id42506 . -1) (undo-tree-id42507 . -1) (undo-tree-id42508 . -1) (undo-tree-id42509 . -1) (undo-tree-id42510 . -1) (undo-tree-id42511 . -1) (undo-tree-id42512 . -1) (undo-tree-id42513 . -1) (undo-tree-id42514 . -1) (undo-tree-id42515 . -1) (undo-tree-id42516 . -1) (undo-tree-id42517 . -1) (undo-tree-id42518 . -1) (#("i" 0 1 (fontified t)) . -7095) (undo-tree-id42519 . -1) (undo-tree-id42520 . -1) (undo-tree-id42521 . -1) (undo-tree-id42522 . -1) (undo-tree-id42523 . -1) (undo-tree-id42524 . -1) (undo-tree-id42525 . -1) (undo-tree-id42526 . -1) (undo-tree-id42527 . -1) (undo-tree-id42528 . -1) (undo-tree-id42529 . -1) (undo-tree-id42530 . -1) (undo-tree-id42531 . -1) (undo-tree-id42532 . -1) (undo-tree-id42533 . -1) (undo-tree-id42534 . -1) (undo-tree-id42535 . -1) (undo-tree-id42536 . -1) (undo-tree-id42537 . -1) (undo-tree-id42538 . -1) (undo-tree-id42539 . -1) (undo-tree-id42540 . -1) (undo-tree-id42541 . -1) (undo-tree-id42542 . -1) (undo-tree-id42543 . -1) (undo-tree-id42544 . -1) (undo-tree-id42545 . -1) (undo-tree-id42546 . -1) (undo-tree-id42547 . -1) (undo-tree-id42548 . -1) (undo-tree-id42549 . -1) (undo-tree-id42550 . -1) (undo-tree-id42551 . -1) (undo-tree-id42552 . -1) (undo-tree-id42553 . -1) (undo-tree-id42554 . -1) (undo-tree-id42555 . -1) (undo-tree-id42556 . -1) (undo-tree-id42557 . -1) (undo-tree-id42558 . -1) (undo-tree-id42559 . -1) (undo-tree-id42560 . -1) (undo-tree-id42561 . -1) (undo-tree-id42562 . -1) (undo-tree-id42563 . -1) (undo-tree-id42564 . -1) (undo-tree-id42565 . -1) (undo-tree-id42566 . -1) (undo-tree-id42567 . -1) (undo-tree-id42568 . -1) (undo-tree-id42569 . -1) (undo-tree-id42570 . -1) (undo-tree-id42571 . -1) (undo-tree-id42572 . -1) (undo-tree-id42573 . -1) (undo-tree-id42574 . -1) (undo-tree-id42575 . -1) (undo-tree-id42576 . -1) (undo-tree-id42577 . -1) (undo-tree-id42578 . -1) (undo-tree-id42579 . -1) (undo-tree-id42580 . -1) (undo-tree-id42581 . -1) (undo-tree-id42582 . -1) (undo-tree-id42583 . -1) (undo-tree-id42584 . -1) (undo-tree-id42585 . -1) (undo-tree-id42586 . -1) (undo-tree-id42587 . -1) (undo-tree-id42588 . -1) (undo-tree-id42589 . -1) (undo-tree-id42590 . -1) (undo-tree-id42591 . -1) (undo-tree-id42592 . -1) (undo-tree-id42593 . -1) (undo-tree-id42594 . -1) (undo-tree-id42595 . -1) (undo-tree-id42596 . -1) (undo-tree-id42597 . -1) (undo-tree-id42598 . -1) (undo-tree-id42599 . -1) (undo-tree-id42600 . -1) (undo-tree-id42601 . -1) (undo-tree-id42602 . -1) (undo-tree-id42603 . -1) (undo-tree-id42604 . -1) (undo-tree-id42605 . -1) (undo-tree-id42606 . -1) (undo-tree-id42607 . -1) (undo-tree-id42608 . -1) (undo-tree-id42609 . -1) (undo-tree-id42610 . -1) (undo-tree-id42611 . -1) (undo-tree-id42612 . -1) (undo-tree-id42613 . -1) (undo-tree-id42614 . -1) (undo-tree-id42615 . -1) (undo-tree-id42616 . -1) (undo-tree-id42617 . -1) (undo-tree-id42618 . -1) (undo-tree-id42619 . -1) (undo-tree-id42620 . -1) (undo-tree-id42621 . -1) (undo-tree-id42622 . -1) (undo-tree-id42623 . -1) (undo-tree-id42624 . -1) (undo-tree-id42625 . -1) (undo-tree-id42626 . -1) (undo-tree-id42627 . -1) (undo-tree-id42628 . -1) (undo-tree-id42629 . -1) (undo-tree-id42630 . -1) (undo-tree-id42631 . -1) (undo-tree-id42632 . -1) (undo-tree-id42633 . -1) (undo-tree-id42634 . -1) (undo-tree-id42635 . -1) (undo-tree-id42636 . -1) (undo-tree-id42637 . -1) (undo-tree-id42638 . -1) (undo-tree-id42639 . -1) (undo-tree-id42640 . -1) (undo-tree-id42641 . -1) (undo-tree-id42642 . -1) (undo-tree-id42643 . -1) (undo-tree-id42644 . -1) (undo-tree-id42645 . -1) (undo-tree-id42646 . -1) (undo-tree-id42647 . -1) (undo-tree-id42648 . -1) (undo-tree-id42649 . -1) (undo-tree-id42650 . -1) (undo-tree-id42651 . -1) (undo-tree-id42652 . -1) (undo-tree-id42653 . -1) (undo-tree-id42654 . -1) (undo-tree-id42655 . -1) (undo-tree-id42656 . -1) (undo-tree-id42657 . -1) (undo-tree-id42658 . -1) (undo-tree-id42659 . -1) (undo-tree-id42660 . -1) (undo-tree-id42661 . -1) (undo-tree-id42662 . -1) (undo-tree-id42663 . -1) (undo-tree-id42664 . -1) (undo-tree-id42665 . -1) (undo-tree-id42666 . -1) (undo-tree-id42667 . -1) (undo-tree-id42668 . -1) (undo-tree-id42669 . -1) (undo-tree-id42670 . -1) (undo-tree-id42671 . -1) (undo-tree-id42672 . -1) (undo-tree-id42673 . -1) (undo-tree-id42674 . -1) (undo-tree-id42675 . -1) (undo-tree-id42676 . -1) (undo-tree-id42677 . -1) (undo-tree-id42678 . -1) (undo-tree-id42679 . -1) (undo-tree-id42680 . -1) (undo-tree-id42681 . -1) (undo-tree-id42682 . -1) (undo-tree-id42683 . -1) (undo-tree-id42684 . -1) (undo-tree-id42685 . -1) (undo-tree-id42686 . -1) (undo-tree-id42687 . -1) (undo-tree-id42688 . -1) (undo-tree-id42689 . -1) (undo-tree-id42690 . -1) (undo-tree-id42691 . -1) (undo-tree-id42692 . -1) (undo-tree-id42693 . -1) (undo-tree-id42694 . -1) (undo-tree-id42695 . -1) (undo-tree-id42696 . -1) (undo-tree-id42697 . -1) (undo-tree-id42698 . -1) (undo-tree-id42699 . -1) (undo-tree-id42700 . -1) (undo-tree-id42701 . -1) (undo-tree-id42702 . -1) (undo-tree-id42703 . -1) (undo-tree-id42704 . -1) (undo-tree-id42705 . -1) (undo-tree-id42706 . -1) (undo-tree-id42707 . -1) (undo-tree-id42708 . -1) (undo-tree-id42709 . -1) (undo-tree-id42710 . -1) (undo-tree-id42711 . -1) (undo-tree-id42712 . -1) (undo-tree-id42713 . -1) (undo-tree-id42714 . -1) (undo-tree-id42715 . -1) (undo-tree-id42716 . -1) (undo-tree-id42717 . -1) (#("c" 0 1 (fontified t)) . -7096) (undo-tree-id42718 . -1) (undo-tree-id42719 . -1) (undo-tree-id42720 . -1) (undo-tree-id42721 . -1) (undo-tree-id42722 . -1) (undo-tree-id42723 . -1) (undo-tree-id42724 . -1) (undo-tree-id42725 . -1) (undo-tree-id42726 . -1) (undo-tree-id42727 . -1) (undo-tree-id42728 . -1) (undo-tree-id42729 . -1) (undo-tree-id42730 . -1) (undo-tree-id42731 . -1) (undo-tree-id42732 . -1) (undo-tree-id42733 . -1) (undo-tree-id42734 . -1) (undo-tree-id42735 . -1) (undo-tree-id42736 . -1) (undo-tree-id42737 . -1) (undo-tree-id42738 . -1) (undo-tree-id42739 . -1) (undo-tree-id42740 . -1) (undo-tree-id42741 . -1) (undo-tree-id42742 . -1) (undo-tree-id42743 . -1) (undo-tree-id42744 . -1) (undo-tree-id42745 . -1) (undo-tree-id42746 . -1) (undo-tree-id42747 . -1) (undo-tree-id42748 . -1) (undo-tree-id42749 . -1) (undo-tree-id42750 . -1) (undo-tree-id42751 . -1) (undo-tree-id42752 . -1) (undo-tree-id42753 . -1) (undo-tree-id42754 . -1) (undo-tree-id42755 . -1) (undo-tree-id42756 . -1) (undo-tree-id42757 . -1) (undo-tree-id42758 . -1) (undo-tree-id42759 . -1) (undo-tree-id42760 . -1) (undo-tree-id42761 . -1) (undo-tree-id42762 . -1) (undo-tree-id42763 . -1) (undo-tree-id42764 . -1) (undo-tree-id42765 . -1) (undo-tree-id42766 . -1) (undo-tree-id42767 . -1) (undo-tree-id42768 . -1) (undo-tree-id42769 . -1) (undo-tree-id42770 . -1) (undo-tree-id42771 . -1) (undo-tree-id42772 . -1) (undo-tree-id42773 . -1) (undo-tree-id42774 . -1) (undo-tree-id42775 . -1) (undo-tree-id42776 . -1) (undo-tree-id42777 . -1) (undo-tree-id42778 . -1) (undo-tree-id42779 . -1) (undo-tree-id42780 . -1) (undo-tree-id42781 . -1) (undo-tree-id42782 . -1) (undo-tree-id42783 . -1) (undo-tree-id42784 . -1) (undo-tree-id42785 . -1) (undo-tree-id42786 . -1) (undo-tree-id42787 . -1) (undo-tree-id42788 . -1) (undo-tree-id42789 . -1) (undo-tree-id42790 . -1) (undo-tree-id42791 . -1) (undo-tree-id42792 . -1) (undo-tree-id42793 . -1) (undo-tree-id42794 . -1) (undo-tree-id42795 . -1) (undo-tree-id42796 . -1) (undo-tree-id42797 . -1) (undo-tree-id42798 . -1) (undo-tree-id42799 . -1) (undo-tree-id42800 . -1) (undo-tree-id42801 . -1) (undo-tree-id42802 . -1) (undo-tree-id42803 . -1) (undo-tree-id42804 . -1) (undo-tree-id42805 . -1) (undo-tree-id42806 . -1) (undo-tree-id42807 . -1) (undo-tree-id42808 . -1) (undo-tree-id42809 . -1) (undo-tree-id42810 . -1) (undo-tree-id42811 . -1) (undo-tree-id42812 . -1) (undo-tree-id42813 . -1) (undo-tree-id42814 . -1) (undo-tree-id42815 . -1) (undo-tree-id42816 . -1) (undo-tree-id42817 . -1) (undo-tree-id42818 . -1) (undo-tree-id42819 . -1) (undo-tree-id42820 . -1) (undo-tree-id42821 . -1) (undo-tree-id42822 . -1) (undo-tree-id42823 . -1) (undo-tree-id42824 . -1) (undo-tree-id42825 . -1) (undo-tree-id42826 . -1) (undo-tree-id42827 . -1) (undo-tree-id42828 . -1) (undo-tree-id42829 . -1) (undo-tree-id42830 . -1) (undo-tree-id42831 . -1) (undo-tree-id42832 . -1) (undo-tree-id42833 . -1) (undo-tree-id42834 . -1) (undo-tree-id42835 . -1) (undo-tree-id42836 . -1) (undo-tree-id42837 . -1) (undo-tree-id42838 . -1) (undo-tree-id42839 . -1) (undo-tree-id42840 . -1) (undo-tree-id42841 . -1) (undo-tree-id42842 . -1) (undo-tree-id42843 . -1) (undo-tree-id42844 . -1) (undo-tree-id42845 . -1) (undo-tree-id42846 . -1) (undo-tree-id42847 . -1) (undo-tree-id42848 . -1) (undo-tree-id42849 . -1) (undo-tree-id42850 . -1) (undo-tree-id42851 . -1) (undo-tree-id42852 . -1) (undo-tree-id42853 . -1) (undo-tree-id42854 . -1) (undo-tree-id42855 . -1) (undo-tree-id42856 . -1) (undo-tree-id42857 . -1) (undo-tree-id42858 . -1) (undo-tree-id42859 . -1) (undo-tree-id42860 . -1) (undo-tree-id42861 . -1) (undo-tree-id42862 . -1) (undo-tree-id42863 . -1) (undo-tree-id42864 . -1) (undo-tree-id42865 . -1) (undo-tree-id42866 . -1) (undo-tree-id42867 . -1) (undo-tree-id42868 . -1) (undo-tree-id42869 . -1) (undo-tree-id42870 . -1) (undo-tree-id42871 . -1) (undo-tree-id42872 . -1) (undo-tree-id42873 . -1) (undo-tree-id42874 . -1) (undo-tree-id42875 . -1) (undo-tree-id42876 . -1) (undo-tree-id42877 . -1) (undo-tree-id42878 . -1) (undo-tree-id42879 . -1) (undo-tree-id42880 . -1) (undo-tree-id42881 . -1) (undo-tree-id42882 . -1) (undo-tree-id42883 . -1) (undo-tree-id42884 . -1) (undo-tree-id42885 . -1) (undo-tree-id42886 . -1) (undo-tree-id42887 . -1) (undo-tree-id42888 . -1) (undo-tree-id42889 . -1) (undo-tree-id42890 . -1) (undo-tree-id42891 . -1) (undo-tree-id42892 . -1) (undo-tree-id42893 . -1) (undo-tree-id42894 . -1) (undo-tree-id42895 . -1) (undo-tree-id42896 . -1) (undo-tree-id42897 . -1) (undo-tree-id42898 . -1) (undo-tree-id42899 . -1) (undo-tree-id42900 . -1) (undo-tree-id42901 . -1) (undo-tree-id42902 . -1) (undo-tree-id42903 . -1) (undo-tree-id42904 . -1) (undo-tree-id42905 . -1) (undo-tree-id42906 . -1) (#("e" 0 1 (fontified t)) . -7097) (undo-tree-id42907 . -1) (undo-tree-id42908 . -1) (undo-tree-id42909 . -1) (undo-tree-id42910 . -1) (undo-tree-id42911 . -1) (undo-tree-id42912 . -1) (undo-tree-id42913 . -1) (undo-tree-id42914 . -1) (undo-tree-id42915 . -1) (undo-tree-id42916 . -1) (undo-tree-id42917 . -1) (undo-tree-id42918 . -1) (undo-tree-id42919 . -1) (undo-tree-id42920 . -1) (undo-tree-id42921 . -1) (undo-tree-id42922 . -1) (undo-tree-id42923 . -1) (undo-tree-id42924 . -1) (undo-tree-id42925 . -1) (undo-tree-id42926 . -1) (undo-tree-id42927 . -1) (undo-tree-id42928 . -1) (undo-tree-id42929 . -1) (undo-tree-id42930 . -1) (undo-tree-id42931 . -1) (undo-tree-id42932 . -1) (undo-tree-id42933 . -1) (undo-tree-id42934 . -1) (undo-tree-id42935 . -1) (undo-tree-id42936 . -1) (undo-tree-id42937 . -1) (undo-tree-id42938 . -1) (undo-tree-id42939 . -1) (undo-tree-id42940 . -1) (undo-tree-id42941 . -1) (undo-tree-id42942 . -1) (undo-tree-id42943 . -1) (undo-tree-id42944 . -1) (undo-tree-id42945 . -1) (undo-tree-id42946 . -1) (undo-tree-id42947 . -1) (undo-tree-id42948 . -1) (undo-tree-id42949 . -1) (undo-tree-id42950 . -1) (undo-tree-id42951 . -1) (undo-tree-id42952 . -1) (undo-tree-id42953 . -1) (undo-tree-id42954 . -1) (undo-tree-id42955 . -1) (undo-tree-id42956 . -1) (undo-tree-id42957 . -1) (undo-tree-id42958 . -1) (undo-tree-id42959 . -1) (undo-tree-id42960 . -1) (undo-tree-id42961 . -1) (undo-tree-id42962 . -1) (undo-tree-id42963 . -1) (undo-tree-id42964 . -1) (undo-tree-id42965 . -1) (undo-tree-id42966 . -1) (undo-tree-id42967 . -1) (undo-tree-id42968 . -1) (undo-tree-id42969 . -1) (undo-tree-id42970 . -1) (undo-tree-id42971 . -1) (undo-tree-id42972 . -1) (undo-tree-id42973 . -1) (undo-tree-id42974 . -1) (undo-tree-id42975 . -1) (undo-tree-id42976 . -1) (undo-tree-id42977 . -1) (undo-tree-id42978 . -1) (undo-tree-id42979 . -1) (undo-tree-id42980 . -1) (undo-tree-id42981 . -1) (undo-tree-id42982 . -1) (undo-tree-id42983 . -1) (undo-tree-id42984 . -1) (undo-tree-id42985 . -1) (undo-tree-id42986 . -1) (undo-tree-id42987 . -1) (undo-tree-id42988 . -1) (undo-tree-id42989 . -1) (undo-tree-id42990 . -1) (undo-tree-id42991 . -1) (undo-tree-id42992 . -1) (undo-tree-id42993 . -1) (undo-tree-id42994 . -1) (undo-tree-id42995 . -1) (undo-tree-id42996 . -1) (undo-tree-id42997 . -1) (undo-tree-id42998 . -1) (undo-tree-id42999 . -1) (undo-tree-id43000 . -1) (undo-tree-id43001 . -1) (undo-tree-id43002 . -1) (undo-tree-id43003 . -1) (undo-tree-id43004 . -1) (undo-tree-id43005 . -1) (undo-tree-id43006 . -1) (undo-tree-id43007 . -1) (undo-tree-id43008 . -1) (undo-tree-id43009 . -1) (undo-tree-id43010 . -1) (undo-tree-id43011 . -1) (undo-tree-id43012 . -1) (undo-tree-id43013 . -1) (undo-tree-id43014 . -1) (undo-tree-id43015 . -1) (undo-tree-id43016 . -1) (undo-tree-id43017 . -1) (undo-tree-id43018 . -1) (undo-tree-id43019 . -1) (undo-tree-id43020 . -1) (undo-tree-id43021 . -1) (undo-tree-id43022 . -1) (undo-tree-id43023 . -1) (undo-tree-id43024 . -1) (undo-tree-id43025 . -1) (undo-tree-id43026 . -1) (undo-tree-id43027 . -1) (undo-tree-id43028 . -1) (undo-tree-id43029 . -1) (undo-tree-id43030 . -1) (undo-tree-id43031 . -1) (undo-tree-id43032 . -1) (undo-tree-id43033 . -1) (undo-tree-id43034 . -1) (undo-tree-id43035 . -1) (undo-tree-id43036 . -1) (undo-tree-id43037 . -1) (undo-tree-id43038 . -1) (undo-tree-id43039 . -1) (undo-tree-id43040 . -1) (undo-tree-id43041 . -1) (undo-tree-id43042 . -1) (undo-tree-id43043 . -1) (undo-tree-id43044 . -1) (undo-tree-id43045 . -1) (undo-tree-id43046 . -1) (undo-tree-id43047 . -1) (undo-tree-id43048 . -1) (undo-tree-id43049 . -1) (undo-tree-id43050 . -1) (undo-tree-id43051 . -1) (undo-tree-id43052 . -1) (undo-tree-id43053 . -1) (undo-tree-id43054 . -1) (undo-tree-id43055 . -1) (undo-tree-id43056 . -1) (undo-tree-id43057 . -1) (undo-tree-id43058 . -1) (undo-tree-id43059 . -1) (undo-tree-id43060 . -1) (undo-tree-id43061 . -1) (undo-tree-id43062 . -1) (undo-tree-id43063 . -1) (undo-tree-id43064 . -1) (undo-tree-id43065 . -1) (undo-tree-id43066 . -1) (undo-tree-id43067 . -1) (undo-tree-id43068 . -1) (undo-tree-id43069 . -1) (undo-tree-id43070 . -1) (undo-tree-id43071 . -1) (undo-tree-id43072 . -1) (undo-tree-id43073 . -1) (undo-tree-id43074 . -1) (undo-tree-id43075 . -1) (undo-tree-id43076 . -1) (undo-tree-id43077 . -1) (undo-tree-id43078 . -1) (undo-tree-id43079 . -1) (undo-tree-id43080 . -1) (undo-tree-id43081 . -1) (undo-tree-id43082 . -1) (undo-tree-id43083 . -1) (undo-tree-id43084 . -1) (undo-tree-id43085 . -1) 7098 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7098) (undo-tree-id43086 . -1) (undo-tree-id43087 . -1) (undo-tree-id43088 . -1) (undo-tree-id43089 . -1) (undo-tree-id43090 . -1) (undo-tree-id43091 . -1) (undo-tree-id43092 . -1) (undo-tree-id43093 . -1) (undo-tree-id43094 . -1) (undo-tree-id43095 . -1) (undo-tree-id43096 . -1) (undo-tree-id43097 . -1) (undo-tree-id43098 . -1) (undo-tree-id43099 . -1) (undo-tree-id43100 . -1) (undo-tree-id43101 . -1) (undo-tree-id43102 . 1) (undo-tree-id43103 . -1) (undo-tree-id43104 . -1) (undo-tree-id43105 . -1) (undo-tree-id43106 . -1) (undo-tree-id43107 . -1) (undo-tree-id43108 . -1) (undo-tree-id43109 . -1) (undo-tree-id43110 . -1) (undo-tree-id43111 . -1) (undo-tree-id43112 . -1) (undo-tree-id43113 . -1) (undo-tree-id43114 . -1) (undo-tree-id43115 . -1) (undo-tree-id43116 . -1) (undo-tree-id43117 . -1) (undo-tree-id43118 . -1) (undo-tree-id43119 . -1) (undo-tree-id43120 . -1) (undo-tree-id43121 . -1) (undo-tree-id43122 . -1) (undo-tree-id43123 . -1) (undo-tree-id43124 . -1) (undo-tree-id43125 . -1) (undo-tree-id43126 . -1) (undo-tree-id43127 . -1) (undo-tree-id43128 . -1) (undo-tree-id43129 . -1) (undo-tree-id43130 . -1) (undo-tree-id43131 . -1) (undo-tree-id43132 . -1) (undo-tree-id43133 . -1) (undo-tree-id43134 . -1) (undo-tree-id43135 . -1) (undo-tree-id43136 . -1) (undo-tree-id43137 . -1) (undo-tree-id43138 . -1) (undo-tree-id43139 . -1) (undo-tree-id43140 . -1) (undo-tree-id43141 . -1) (undo-tree-id43142 . -1) (undo-tree-id43143 . -1) (undo-tree-id43144 . -1) (undo-tree-id43145 . -1) (undo-tree-id43146 . -1) (undo-tree-id43147 . -1) (undo-tree-id43148 . -1) (undo-tree-id43149 . -1) (undo-tree-id43150 . -1) (undo-tree-id43151 . -1) (undo-tree-id43152 . -1) (undo-tree-id43153 . -1) (undo-tree-id43154 . -1) (undo-tree-id43155 . -1) (undo-tree-id43156 . -1) (undo-tree-id43157 . -1) (undo-tree-id43158 . -1) (undo-tree-id43159 . -1) (undo-tree-id43160 . -1) (undo-tree-id43161 . -1) (undo-tree-id43162 . -1) (undo-tree-id43163 . -1) (undo-tree-id43164 . -1) (undo-tree-id43165 . -1) (undo-tree-id43166 . -1) (undo-tree-id43167 . -1) (undo-tree-id43168 . -1) (undo-tree-id43169 . -1) (undo-tree-id43170 . -1) (undo-tree-id43171 . -1) (undo-tree-id43172 . -1) (undo-tree-id43173 . -1) (undo-tree-id43174 . -1) (undo-tree-id43175 . -1) (undo-tree-id43176 . -1) (undo-tree-id43177 . -1) (undo-tree-id43178 . -1) (undo-tree-id43179 . -1) (undo-tree-id43180 . -1) (undo-tree-id43181 . -1) (undo-tree-id43182 . -1) (undo-tree-id43183 . -1) (undo-tree-id43184 . -1) (undo-tree-id43185 . -1) (undo-tree-id43186 . -1) (undo-tree-id43187 . -1) (undo-tree-id43188 . -1) (undo-tree-id43189 . -1) (undo-tree-id43190 . -1) (undo-tree-id43191 . -1) (undo-tree-id43192 . -1) (undo-tree-id43193 . -1) (undo-tree-id43194 . -1) (undo-tree-id43195 . -1) (undo-tree-id43196 . -1) (undo-tree-id43197 . -1) (undo-tree-id43198 . -1) (undo-tree-id43199 . -1) (undo-tree-id43200 . -1) (undo-tree-id43201 . -1) (undo-tree-id43202 . -1) (undo-tree-id43203 . -1) (undo-tree-id43204 . -1) (undo-tree-id43205 . -1) (undo-tree-id43206 . -1) (undo-tree-id43207 . -1) (undo-tree-id43208 . -1) (undo-tree-id43209 . -1) (undo-tree-id43210 . -1) (undo-tree-id43211 . -1) (undo-tree-id43212 . -1) (undo-tree-id43213 . -1) (undo-tree-id43214 . -1) (undo-tree-id43215 . -1) (undo-tree-id43216 . -1) (undo-tree-id43217 . -1) (undo-tree-id43218 . -1) (undo-tree-id43219 . -1) (undo-tree-id43220 . -1) (undo-tree-id43221 . -1) (undo-tree-id43222 . -1) (undo-tree-id43223 . -1) (undo-tree-id43224 . -1) (undo-tree-id43225 . -1) (undo-tree-id43226 . -1) (undo-tree-id43227 . -1) (undo-tree-id43228 . -1) (undo-tree-id43229 . -1) (undo-tree-id43230 . -1) (undo-tree-id43231 . -1) (undo-tree-id43232 . -1) (undo-tree-id43233 . -1) (undo-tree-id43234 . -1) (undo-tree-id43235 . -1) (undo-tree-id43236 . -1) (undo-tree-id43237 . -1) (undo-tree-id43238 . -1) (undo-tree-id43239 . -1) (undo-tree-id43240 . -1) (undo-tree-id43241 . -1) (undo-tree-id43242 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7099) (undo-tree-id43243 . -1) (undo-tree-id43244 . -1) (undo-tree-id43245 . -1) (undo-tree-id43246 . -1) (undo-tree-id43247 . -1) (undo-tree-id43248 . -1) (undo-tree-id43249 . -1) (undo-tree-id43250 . -1) (undo-tree-id43251 . -1) (undo-tree-id43252 . -1) (undo-tree-id43253 . -1) (undo-tree-id43254 . -1) (undo-tree-id43255 . 1) (undo-tree-id43256 . -1) (undo-tree-id43257 . 1) (undo-tree-id43258 . -1) (#("src" 0 3 (fontified t)) . 7099) (undo-tree-id43259 . -3) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7087 7089 nil nil nil t #s(yas--exit 7089 nil))) #s(yas--exit 7089 nil) 207 nil #s(yas--field 1 7087 7089 nil nil nil t #s(yas--exit 7089 nil)) nil nil)) (7082 . 7103) (#("clone_from_slice(${1:src})$0" 0 28 (fontified nil)) . 7082) (7082 . 7110) (#("clo" 0 3 (fontified nil)) . 7082) (7082 . 7085) (#("clone_from_slice(…)" 0 19 (fontified nil)) . -7082) (7082 . 7101) (#("clo" 0 3 (fontified t)) . -7082) (undo-tree-id43260 . -3) (undo-tree-id43261 . -3) (undo-tree-id43262 . -3) (undo-tree-id43263 . -2) (undo-tree-id43264 . -2) (undo-tree-id43265 . -2) (undo-tree-id43266 . -2) (undo-tree-id43267 . -2) (undo-tree-id43268 . -2) (undo-tree-id43269 . -2) (undo-tree-id43270 . -2) (undo-tree-id43271 . -2) (undo-tree-id43272 . -2) (undo-tree-id43273 . -2) (undo-tree-id43274 . -2) (undo-tree-id43275 . -2) (undo-tree-id43276 . -2) (undo-tree-id43277 . -2) (undo-tree-id43278 . -2) (undo-tree-id43279 . -2) (undo-tree-id43280 . -2) (undo-tree-id43281 . -2) (undo-tree-id43282 . -2) (undo-tree-id43283 . -2) (undo-tree-id43284 . -2) (undo-tree-id43285 . -2) (undo-tree-id43286 . -2) (undo-tree-id43287 . -2) (undo-tree-id43288 . -2) (undo-tree-id43289 . -2) (undo-tree-id43290 . -2) (undo-tree-id43291 . -2) (undo-tree-id43292 . -2) (undo-tree-id43293 . -2) (undo-tree-id43294 . -2) (undo-tree-id43295 . -2) (undo-tree-id43296 . -2) (undo-tree-id43297 . -2) (undo-tree-id43298 . -2) (undo-tree-id43299 . -2) (undo-tree-id43300 . -2) (undo-tree-id43301 . -2) (undo-tree-id43302 . -2) (undo-tree-id43303 . -3) (undo-tree-id43304 . -3) (undo-tree-id43305 . -3) (undo-tree-id43306 . -3) (undo-tree-id43307 . -3) (undo-tree-id43308 . -3) (undo-tree-id43309 . -3) (undo-tree-id43310 . -3) (undo-tree-id43311 . -3) (undo-tree-id43312 . -3) (undo-tree-id43313 . -3) (undo-tree-id43314 . -3) (undo-tree-id43315 . -3) (undo-tree-id43316 . -3) (undo-tree-id43317 . -3) (undo-tree-id43318 . -3) (undo-tree-id43319 . -3) (undo-tree-id43320 . -3) (undo-tree-id43321 . -3) (undo-tree-id43322 . -3) (undo-tree-id43323 . -3) (undo-tree-id43324 . -3) (undo-tree-id43325 . -3) (undo-tree-id43326 . -3) (undo-tree-id43327 . -3) (undo-tree-id43328 . -3) (undo-tree-id43329 . -3) (undo-tree-id43330 . -3) (undo-tree-id43331 . -3) (undo-tree-id43332 . -3) (undo-tree-id43333 . -3) (undo-tree-id43334 . -3) (undo-tree-id43335 . -3) (undo-tree-id43336 . -3) (undo-tree-id43337 . -3) (undo-tree-id43338 . -3) (undo-tree-id43339 . -3) (undo-tree-id43340 . -3) (undo-tree-id43341 . -3) (undo-tree-id43342 . -3) (undo-tree-id43343 . -3) (undo-tree-id43344 . -3) (undo-tree-id43345 . -3) (undo-tree-id43346 . -3) (undo-tree-id43347 . -3) (undo-tree-id43348 . -3) (undo-tree-id43349 . -3) (undo-tree-id43350 . -3) (undo-tree-id43351 . -3) (undo-tree-id43352 . -3) (undo-tree-id43353 . -3) (undo-tree-id43354 . -3) (undo-tree-id43355 . -3) (undo-tree-id43356 . -3) (undo-tree-id43357 . -3) (undo-tree-id43358 . -3) (undo-tree-id43359 . -3) (undo-tree-id43360 . -3) (undo-tree-id43361 . -3) (undo-tree-id43362 . -3) (undo-tree-id43363 . -3) (undo-tree-id43364 . -3) (undo-tree-id43365 . -3) (undo-tree-id43366 . -3) (undo-tree-id43367 . -3) (undo-tree-id43368 . -3) (undo-tree-id43369 . -3) (undo-tree-id43370 . -3) (undo-tree-id43371 . -3) (undo-tree-id43372 . -3) (undo-tree-id43373 . -3) (undo-tree-id43374 . -3) (undo-tree-id43375 . -3) (undo-tree-id43376 . -3) (undo-tree-id43377 . -3) (undo-tree-id43378 . -3) (undo-tree-id43379 . -3) (undo-tree-id43380 . -3) (undo-tree-id43381 . -3) (undo-tree-id43382 . -3) 7085 (7084 . 7085) (#("e" 0 1 (fontified t)) . -7084) (undo-tree-id43383 . -1) (undo-tree-id43384 . -1) (undo-tree-id43385 . -1) (undo-tree-id43386 . -1) (undo-tree-id43387 . -1) (undo-tree-id43388 . -1) (undo-tree-id43389 . -1) (undo-tree-id43390 . -1) (undo-tree-id43391 . -1) (undo-tree-id43392 . -1) (undo-tree-id43393 . -1) (undo-tree-id43394 . -1) (undo-tree-id43395 . -1) (undo-tree-id43396 . -1) (undo-tree-id43397 . -1) (undo-tree-id43398 . -1) (undo-tree-id43399 . -1) (undo-tree-id43400 . -1) (undo-tree-id43401 . -1) (undo-tree-id43402 . -1) (undo-tree-id43403 . -1) (undo-tree-id43404 . -1) (undo-tree-id43405 . -1) (undo-tree-id43406 . -1) (undo-tree-id43407 . -1) (undo-tree-id43408 . -1) (undo-tree-id43409 . -1) (undo-tree-id43410 . -1) (undo-tree-id43411 . -1) (undo-tree-id43412 . -1) (undo-tree-id43413 . -1) (undo-tree-id43414 . -1) (undo-tree-id43415 . -1) 7085 (#("a" 0 1 (fontified t)) . -7085) (undo-tree-id43416 . -1) (undo-tree-id43417 . -1) (undo-tree-id43418 . -1) (undo-tree-id43419 . -1) (undo-tree-id43420 . -1) (undo-tree-id43421 . -1) (undo-tree-id43422 . -1) (undo-tree-id43423 . -1) (undo-tree-id43424 . -1) (undo-tree-id43425 . -1) (undo-tree-id43426 . -1) (undo-tree-id43427 . -1) (undo-tree-id43428 . -1) (undo-tree-id43429 . -1) (undo-tree-id43430 . -1) (undo-tree-id43431 . -1) (undo-tree-id43432 . -1) (undo-tree-id43433 . -1) (undo-tree-id43434 . -1) (undo-tree-id43435 . -1) (undo-tree-id43436 . -1) (undo-tree-id43437 . -1) (undo-tree-id43438 . -1) (#("r" 0 1 (fontified t)) . -7086) (undo-tree-id43439 . -1) (undo-tree-id43440 . -1) (undo-tree-id43441 . -1) (undo-tree-id43442 . -1) (undo-tree-id43443 . -1) (undo-tree-id43444 . -1) (undo-tree-id43445 . -1) (undo-tree-id43446 . -1) (undo-tree-id43447 . -1) (undo-tree-id43448 . -1) (undo-tree-id43449 . -1) (undo-tree-id43450 . -1) (undo-tree-id43451 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -7087) (undo-tree-id43452 . -1) (undo-tree-id43453 . -1) (undo-tree-id43454 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -7088) (undo-tree-id43455 . -1) (undo-tree-id43456 . -1) 7089 (apply yas--snippet-revive 7082 7089 #s(yas--snippet nil nil #s(yas--exit 7089 nil) 206 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7089 nil) 206 nil nil nil nil)) (7082 . 7089) (#("clear()$0" 0 9 (fontified nil)) . 7082) (7082 . 7091) (#("cl" 0 2 (fontified nil)) . 7082) (7082 . 7084) (#("clear()" 0 7 (fontified nil)) . -7082) (7082 . 7089) (#("cl" 0 2 (fontified t)) . -7082) (undo-tree-id43457 . -2) (undo-tree-id43458 . -2) 7084 (7081 . 7084) (t 26157 3857 595066 282000)) nil (26157 3871 339679 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 7082 7089 #s(yas--snippet nil (#s(yas--field 1 7087 7089 nil nil nil t #s(yas--exit 7089 nil))) #s(yas--exit 7089 nil) 207 nil #s(yas--field 1 7087 7089 nil nil nil t #s(yas--exit 7089 nil)) nil nil))) nil (26157 3878 291468 306000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 7082) (undo-tree-id43488 . -4) (undo-tree-id43489 . -5) (undo-tree-id43490 . -5) (t 26157 3871 466855 185000)) nil (26157 3878 291464 92000) 0 nil])
([nil nil ((#("() " 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7082) (undo-tree-id43484 . -2) (undo-tree-id43485 . 2) (undo-tree-id43486 . 2) (undo-tree-id43487 . -1)) nil (26157 3878 291455 811000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7081) (undo-tree-id43459 . -1) (undo-tree-id43460 . -1) (undo-tree-id43461 . -1) (undo-tree-id43462 . -1) (undo-tree-id43463 . -1) (undo-tree-id43464 . -1) (undo-tree-id43465 . -1) (undo-tree-id43466 . -1) (undo-tree-id43467 . -1) (undo-tree-id43468 . -1) (undo-tree-id43469 . -1) (undo-tree-id43470 . -1) (undo-tree-id43471 . -1) (undo-tree-id43472 . -1) (undo-tree-id43473 . -1) (undo-tree-id43474 . -1) (undo-tree-id43475 . -1) (undo-tree-id43476 . -1) (undo-tree-id43477 . -1) (undo-tree-id43478 . -1) (undo-tree-id43479 . -1) (undo-tree-id43480 . -1) (undo-tree-id43481 . -1) (undo-tree-id43482 . -1) (undo-tree-id43483 . -1) 7082) nil (26157 3878 291440 791000) 0 nil])
([nil nil ((7081 . 7082)) nil (26157 3878 291372 998000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7298) (undo-tree-id43640 . -1) (undo-tree-id43641 . -1) (undo-tree-id43642 . -1) (undo-tree-id43643 . -1) (undo-tree-id43644 . -1) (undo-tree-id43645 . -1) (undo-tree-id43646 . -1) (undo-tree-id43647 . -1) (undo-tree-id43648 . -1) (undo-tree-id43649 . -1) (undo-tree-id43650 . -1) (undo-tree-id43651 . -1) (undo-tree-id43652 . -1) (undo-tree-id43653 . -1) (undo-tree-id43654 . -1) (undo-tree-id43655 . -1) (undo-tree-id43656 . -1) (undo-tree-id43657 . -1) (undo-tree-id43658 . -1) (undo-tree-id43659 . -1) (undo-tree-id43660 . -1) (undo-tree-id43661 . -1) (undo-tree-id43662 . -1) (undo-tree-id43663 . -1) (undo-tree-id43664 . -1) (undo-tree-id43665 . -1) (undo-tree-id43666 . -1) (undo-tree-id43667 . -1) (undo-tree-id43668 . -1) (undo-tree-id43669 . -1) (undo-tree-id43670 . -1) (undo-tree-id43671 . -1) (undo-tree-id43672 . -1) (undo-tree-id43673 . -1) (undo-tree-id43674 . -1) (undo-tree-id43675 . -1) (undo-tree-id43676 . -1) (undo-tree-id43677 . -1) (undo-tree-id43678 . -1) (undo-tree-id43679 . -1) (undo-tree-id43680 . -1) (undo-tree-id43681 . -1) (undo-tree-id43682 . -1) (undo-tree-id43683 . -1) (undo-tree-id43684 . -1) (undo-tree-id43685 . -1) (undo-tree-id43686 . -1) (undo-tree-id43687 . -1) (undo-tree-id43688 . -1) (undo-tree-id43689 . -1) (undo-tree-id43690 . -1) (undo-tree-id43691 . -1) (undo-tree-id43692 . -1) (undo-tree-id43693 . -1) (undo-tree-id43694 . -1) (undo-tree-id43695 . -1) (undo-tree-id43696 . -1) (undo-tree-id43697 . -1) (undo-tree-id43698 . -1) (undo-tree-id43699 . -1) (undo-tree-id43700 . -1) (undo-tree-id43701 . -1) (undo-tree-id43702 . -1) (undo-tree-id43703 . -1) (undo-tree-id43704 . -1) (undo-tree-id43705 . -1) (undo-tree-id43706 . -1) (undo-tree-id43707 . -1) (undo-tree-id43708 . -1) (undo-tree-id43709 . -1) (undo-tree-id43710 . -1) (undo-tree-id43711 . -1) (undo-tree-id43712 . -1) (undo-tree-id43713 . -1) (undo-tree-id43714 . -1) (undo-tree-id43715 . -1) (undo-tree-id43716 . -1) (undo-tree-id43717 . -1) (undo-tree-id43718 . -1) (undo-tree-id43719 . -1) (undo-tree-id43720 . -1) (undo-tree-id43721 . -1) (undo-tree-id43722 . -1) (undo-tree-id43723 . -1) (undo-tree-id43724 . -1) (undo-tree-id43725 . -1) (undo-tree-id43726 . -1) (undo-tree-id43727 . -1) (undo-tree-id43728 . -1) (undo-tree-id43729 . -1) (undo-tree-id43730 . -1) (undo-tree-id43731 . -1) (undo-tree-id43732 . -1) (undo-tree-id43733 . -1) (undo-tree-id43734 . -1) (undo-tree-id43735 . -1) (undo-tree-id43736 . -1) (undo-tree-id43737 . -1) (undo-tree-id43738 . -1) (undo-tree-id43739 . -1) (undo-tree-id43740 . -1) (undo-tree-id43741 . -1) (undo-tree-id43742 . -1) (undo-tree-id43743 . -1) (undo-tree-id43744 . -1) (undo-tree-id43745 . -1) (undo-tree-id43746 . -1) (undo-tree-id43747 . -1) (undo-tree-id43748 . -1) (undo-tree-id43749 . -1) (undo-tree-id43750 . -1) (undo-tree-id43751 . -1) (undo-tree-id43752 . -1) (undo-tree-id43753 . -1) (undo-tree-id43754 . -1) (undo-tree-id43755 . -1) (undo-tree-id43756 . -1) (undo-tree-id43757 . -1) (undo-tree-id43758 . -1) (#("l" 0 1 (fontified t)) . -7299) (undo-tree-id43759 . -1) (undo-tree-id43760 . -1) (undo-tree-id43761 . -1) (undo-tree-id43762 . -1) (undo-tree-id43763 . -1) (undo-tree-id43764 . -1) (undo-tree-id43765 . -1) (undo-tree-id43766 . -1) (undo-tree-id43767 . -1) (undo-tree-id43768 . -1) (undo-tree-id43769 . -1) (undo-tree-id43770 . -1) (undo-tree-id43771 . -1) (undo-tree-id43772 . -1) (undo-tree-id43773 . -1) (undo-tree-id43774 . -1) (undo-tree-id43775 . -1) (undo-tree-id43776 . -1) (undo-tree-id43777 . -1) (undo-tree-id43778 . -1) (undo-tree-id43779 . -1) (undo-tree-id43780 . -1) (undo-tree-id43781 . -1) (undo-tree-id43782 . -1) (undo-tree-id43783 . -1) (undo-tree-id43784 . -1) (undo-tree-id43785 . -1) (undo-tree-id43786 . -1) (undo-tree-id43787 . -1) (undo-tree-id43788 . -1) (undo-tree-id43789 . -1) (undo-tree-id43790 . -1) (undo-tree-id43791 . -1) (undo-tree-id43792 . -1) (undo-tree-id43793 . -1) (undo-tree-id43794 . -1) (undo-tree-id43795 . -1) (undo-tree-id43796 . -1) (undo-tree-id43797 . -1) (undo-tree-id43798 . -1) (undo-tree-id43799 . -1) (undo-tree-id43800 . -1) (undo-tree-id43801 . -1) (undo-tree-id43802 . -1) (undo-tree-id43803 . -1) (undo-tree-id43804 . -1) (undo-tree-id43805 . -1) (undo-tree-id43806 . -1) (undo-tree-id43807 . -1) (undo-tree-id43808 . -1) (undo-tree-id43809 . -1) (undo-tree-id43810 . -1) (undo-tree-id43811 . -1) (undo-tree-id43812 . -1) (undo-tree-id43813 . -1) (undo-tree-id43814 . -1) (undo-tree-id43815 . -1) (undo-tree-id43816 . -1) (undo-tree-id43817 . -1) (undo-tree-id43818 . -1) (undo-tree-id43819 . -1) (undo-tree-id43820 . -1) (undo-tree-id43821 . -1) (undo-tree-id43822 . -1) (undo-tree-id43823 . -1) (undo-tree-id43824 . -1) (undo-tree-id43825 . -1) (undo-tree-id43826 . -1) (undo-tree-id43827 . -1) (undo-tree-id43828 . -1) (undo-tree-id43829 . -1) (undo-tree-id43830 . -1) (undo-tree-id43831 . -1) (undo-tree-id43832 . -1) (undo-tree-id43833 . -1) (undo-tree-id43834 . -1) (undo-tree-id43835 . -1) 7300 (7297 . 7300) (t 26157 3878 390751 417000)) nil (26157 3889 229169 799000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7297) (undo-tree-id43491 . -1) (undo-tree-id43492 . -1) (undo-tree-id43493 . -1) (undo-tree-id43494 . -1) (undo-tree-id43495 . -1) (undo-tree-id43496 . -1) (undo-tree-id43497 . -1) (undo-tree-id43498 . -1) (undo-tree-id43499 . -1) (undo-tree-id43500 . -1) (undo-tree-id43501 . -1) (undo-tree-id43502 . -1) (undo-tree-id43503 . -1) (undo-tree-id43504 . -1) (undo-tree-id43505 . -1) (undo-tree-id43506 . -1) (undo-tree-id43507 . -1) (undo-tree-id43508 . -1) (undo-tree-id43509 . -1) (undo-tree-id43510 . -1) (undo-tree-id43511 . -1) (undo-tree-id43512 . -1) (undo-tree-id43513 . -1) (undo-tree-id43514 . -1) (undo-tree-id43515 . -1) (undo-tree-id43516 . -1) (undo-tree-id43517 . -1) (undo-tree-id43518 . -1) (undo-tree-id43519 . -1) (undo-tree-id43520 . -1) (undo-tree-id43521 . -1) (undo-tree-id43522 . -1) (undo-tree-id43523 . -1) (undo-tree-id43524 . -1) (undo-tree-id43525 . -1) (undo-tree-id43526 . -1) (undo-tree-id43527 . -1) (undo-tree-id43528 . -1) (undo-tree-id43529 . -1) (undo-tree-id43530 . -1) (undo-tree-id43531 . -1) (undo-tree-id43532 . -1) (undo-tree-id43533 . -1) (undo-tree-id43534 . -1) (undo-tree-id43535 . -1) (undo-tree-id43536 . -1) (undo-tree-id43537 . -1) (undo-tree-id43538 . -1) (undo-tree-id43539 . -1) (undo-tree-id43540 . -1) (undo-tree-id43541 . -1) (undo-tree-id43542 . -1) (undo-tree-id43543 . -1) (undo-tree-id43544 . -1) (undo-tree-id43545 . -1) (undo-tree-id43546 . -1) (undo-tree-id43547 . -1) (undo-tree-id43548 . -1) (undo-tree-id43549 . -1) (undo-tree-id43550 . -1) (undo-tree-id43551 . -1) (undo-tree-id43552 . -1) (undo-tree-id43553 . -1) (undo-tree-id43554 . -1) (undo-tree-id43555 . -1) (undo-tree-id43556 . -1) (undo-tree-id43557 . -1) (undo-tree-id43558 . -1) (undo-tree-id43559 . -1) (undo-tree-id43560 . -1) (undo-tree-id43561 . -1) (undo-tree-id43562 . -1) (undo-tree-id43563 . -1) (undo-tree-id43564 . -1) (undo-tree-id43565 . -1) (undo-tree-id43566 . -1) (undo-tree-id43567 . -1) (undo-tree-id43568 . -1) (undo-tree-id43569 . -1) (undo-tree-id43570 . -1) (undo-tree-id43571 . -1) (undo-tree-id43572 . -1) (undo-tree-id43573 . -1) (undo-tree-id43574 . -1) (undo-tree-id43575 . -1) (undo-tree-id43576 . -1) (undo-tree-id43577 . -1) (undo-tree-id43578 . -1) (undo-tree-id43579 . -1) (undo-tree-id43580 . -1) (undo-tree-id43581 . -1) (undo-tree-id43582 . -1) (undo-tree-id43583 . -1) (undo-tree-id43584 . -1) (undo-tree-id43585 . -1) (undo-tree-id43586 . -1) (undo-tree-id43587 . -1) (undo-tree-id43588 . -1) (undo-tree-id43589 . -1) (undo-tree-id43590 . -1) (undo-tree-id43591 . -1) (undo-tree-id43592 . -1) (undo-tree-id43593 . -1) (undo-tree-id43594 . -1) (undo-tree-id43595 . -1) (undo-tree-id43596 . -1) (undo-tree-id43597 . -1) (undo-tree-id43598 . -1) (undo-tree-id43599 . -1) (undo-tree-id43600 . -1) (undo-tree-id43601 . -1) (undo-tree-id43602 . -1) (undo-tree-id43603 . -1) (undo-tree-id43604 . -1) (undo-tree-id43605 . -1) (undo-tree-id43606 . -1) (undo-tree-id43607 . -1) (undo-tree-id43608 . -1) (undo-tree-id43609 . -1) (undo-tree-id43610 . -1) (undo-tree-id43611 . -1) (undo-tree-id43612 . -1) (undo-tree-id43613 . -1) (undo-tree-id43614 . -1) (undo-tree-id43615 . -1) (undo-tree-id43616 . -1) (undo-tree-id43617 . -1) (undo-tree-id43618 . -1) (undo-tree-id43619 . -1) (undo-tree-id43620 . -1) (undo-tree-id43621 . -1) (undo-tree-id43622 . -1) (undo-tree-id43623 . -1) (undo-tree-id43624 . -1) (undo-tree-id43625 . -1) (undo-tree-id43626 . -1) (undo-tree-id43627 . -1) (undo-tree-id43628 . -1) (undo-tree-id43629 . -1) (undo-tree-id43630 . -1) (undo-tree-id43631 . -1) (undo-tree-id43632 . -1) (undo-tree-id43633 . -1) (undo-tree-id43634 . -1) (undo-tree-id43635 . -1) (undo-tree-id43636 . -1) (undo-tree-id43637 . -1) (undo-tree-id43638 . -1) (undo-tree-id43639 . -1)) nil (26157 3889 228669 59000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-preprocessor-face)) . -5529) (undo-tree-id43942 . -1) (undo-tree-id43943 . -1) (undo-tree-id43944 . -1) (undo-tree-id43945 . -1) (undo-tree-id43946 . -1) (undo-tree-id43947 . -1) (undo-tree-id43948 . -1) (undo-tree-id43949 . -1) (undo-tree-id43950 . -1) (undo-tree-id43951 . -1) (undo-tree-id43952 . -1) (undo-tree-id43953 . -1) (undo-tree-id43954 . -1) (undo-tree-id43955 . -1) (undo-tree-id43956 . -1) (undo-tree-id43957 . -1) (undo-tree-id43958 . -1) (undo-tree-id43959 . -1) (undo-tree-id43960 . -1) (undo-tree-id43961 . -1) (undo-tree-id43962 . -1) (undo-tree-id43963 . -1) (undo-tree-id43964 . -1) (undo-tree-id43965 . -1) (undo-tree-id43966 . -1) (undo-tree-id43967 . -1) (undo-tree-id43968 . -1) (undo-tree-id43969 . -1) (undo-tree-id43970 . -1) (undo-tree-id43971 . -1) (undo-tree-id43972 . -1) (undo-tree-id43973 . -1) (undo-tree-id43974 . -1) (undo-tree-id43975 . -1) (undo-tree-id43976 . -1) (undo-tree-id43977 . -1) (undo-tree-id43978 . -1) (undo-tree-id43979 . -1) (undo-tree-id43980 . -1) (undo-tree-id43981 . -1) (undo-tree-id43982 . -1) (undo-tree-id43983 . -1) (undo-tree-id43984 . -1) (undo-tree-id43985 . -1) (undo-tree-id43986 . -1) (undo-tree-id43987 . -1) (undo-tree-id43988 . -1) (undo-tree-id43989 . -1) (undo-tree-id43990 . -1) (undo-tree-id43991 . -1) (undo-tree-id43992 . -1) (undo-tree-id43993 . -1) (undo-tree-id43994 . -1) (undo-tree-id43995 . -1) (undo-tree-id43996 . -1) (undo-tree-id43997 . -1) (undo-tree-id43998 . -1) (undo-tree-id43999 . -1) (undo-tree-id44000 . -1) (undo-tree-id44001 . -1) (undo-tree-id44002 . -1) (undo-tree-id44003 . -1) (undo-tree-id44004 . -1) (#("l" 0 1 (fontified t face font-lock-preprocessor-face)) . -5530) (undo-tree-id44005 . -1) (undo-tree-id44006 . -1) (undo-tree-id44007 . -1) (undo-tree-id44008 . -1) (undo-tree-id44009 . -1) (undo-tree-id44010 . -1) (undo-tree-id44011 . -1) (undo-tree-id44012 . -1) (undo-tree-id44013 . -1) (undo-tree-id44014 . -1) (undo-tree-id44015 . -1) (undo-tree-id44016 . -1) (undo-tree-id44017 . -1) (undo-tree-id44018 . -1) (undo-tree-id44019 . -1) (undo-tree-id44020 . -1) (undo-tree-id44021 . -1) (undo-tree-id44022 . -1) (undo-tree-id44023 . -1) (undo-tree-id44024 . -1) (undo-tree-id44025 . -1) (undo-tree-id44026 . -1) 5531 (5529 . 5531) (apply yas--snippet-revive 5522 5535 #s(yas--snippet nil (#s(yas--field 0 5529 5534 nil nil nil nil nil)) nil 208 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 5529 5534 nil nil nil nil nil)) nil 208 nil nil nil nil)) (5522 . 5535) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 5522) (5522 . 5540) (#("der" 0 3 (fontified nil)) . 5522) (5522 . 5525) (#("derive(…)" 0 9 (fontified nil)) . -5522) (5522 . 5531) (#("der" 0 3 (fontified t face font-lock-preprocessor-face)) . -5522) (undo-tree-id44027 . -2) (undo-tree-id44028 . -3) (undo-tree-id44029 . -3) (undo-tree-id44030 . -3) (undo-tree-id44031 . -3) (undo-tree-id44032 . -3) (undo-tree-id44033 . -3) (undo-tree-id44034 . -3) (undo-tree-id44035 . -3) (undo-tree-id44036 . -3) (undo-tree-id44037 . -3) (undo-tree-id44038 . -3) (undo-tree-id44039 . -3) (undo-tree-id44040 . -3) (undo-tree-id44041 . -3) (undo-tree-id44042 . -3) (undo-tree-id44043 . -3) (undo-tree-id44044 . -3) (undo-tree-id44045 . -3) (undo-tree-id44046 . -3) (undo-tree-id44047 . -3) (undo-tree-id44048 . -3) (undo-tree-id44049 . -3) (undo-tree-id44050 . -3) (undo-tree-id44051 . -3) (undo-tree-id44052 . -3) (undo-tree-id44053 . -3) (undo-tree-id44054 . -3) (undo-tree-id44055 . -3) (undo-tree-id44056 . -3) (undo-tree-id44057 . -3) (undo-tree-id44058 . -3) (undo-tree-id44059 . -3) (undo-tree-id44060 . -3) (undo-tree-id44061 . -3) (undo-tree-id44062 . -3) (undo-tree-id44063 . -3) (undo-tree-id44064 . -3) (undo-tree-id44065 . -3) 5525 (5522 . 5525) (5520 . 5523) (5519 . 5520) (t 26157 3889 358589 173000)) nil (26157 3902 563076 707000) 0 nil])
([nil nil ((#("Debug" 0 5 (fontified t face font-lock-preprocessor-face)) . 5529) (undo-tree-id43937 . -5) (undo-tree-id43938 . -4) (undo-tree-id43939 . 5) (undo-tree-id43940 . 5) (undo-tree-id43941 . -5)) nil (26157 3902 562599 966000) 0 nil])
([nil nil ((5529 . 5534) (#("Cl" 0 2 (fontified nil)) . 5529) (5529 . 5531) (#("Clone" 0 5 (fontified nil)) . -5529) (5529 . 5534) (#("Cl" 0 2 (fontified t face font-lock-preprocessor-face)) . -5529) (undo-tree-id43836 . -2) (undo-tree-id43837 . -2) (undo-tree-id43838 . -1) (undo-tree-id43839 . -1) (undo-tree-id43840 . -1) (undo-tree-id43841 . -1) (undo-tree-id43842 . -1) (undo-tree-id43843 . -1) (undo-tree-id43844 . -1) (undo-tree-id43845 . -1) (undo-tree-id43846 . -1) (undo-tree-id43847 . -1) (undo-tree-id43848 . -1) (undo-tree-id43849 . -1) (undo-tree-id43850 . -1) (undo-tree-id43851 . -1) (undo-tree-id43852 . -1) (undo-tree-id43853 . -1) (undo-tree-id43854 . -1) (undo-tree-id43855 . -1) (undo-tree-id43856 . -1) (undo-tree-id43857 . -1) (undo-tree-id43858 . -1) (undo-tree-id43859 . -1) (undo-tree-id43860 . -1) (undo-tree-id43861 . -1) (undo-tree-id43862 . -1) (undo-tree-id43863 . -1) (undo-tree-id43864 . -1) (undo-tree-id43865 . -1) (undo-tree-id43866 . -1) (undo-tree-id43867 . -1) (undo-tree-id43868 . -1) (undo-tree-id43869 . -1) (undo-tree-id43870 . -1) (undo-tree-id43871 . -1) (undo-tree-id43872 . -1) (undo-tree-id43873 . -1) (undo-tree-id43874 . -1) (undo-tree-id43875 . -1) (undo-tree-id43876 . -1) (undo-tree-id43877 . -1) (undo-tree-id43878 . -1) (undo-tree-id43879 . -1) (undo-tree-id43880 . -1) (undo-tree-id43881 . -1) (undo-tree-id43882 . -1) (undo-tree-id43883 . -1) (undo-tree-id43884 . -1) (undo-tree-id43885 . -1) (undo-tree-id43886 . -1) (undo-tree-id43887 . -1) (undo-tree-id43888 . -1) (undo-tree-id43889 . -1) (undo-tree-id43890 . -1) (undo-tree-id43891 . -1) (undo-tree-id43892 . -1) (undo-tree-id43893 . -1) (undo-tree-id43894 . -1) (undo-tree-id43895 . -1) (undo-tree-id43896 . -2) (undo-tree-id43897 . -2) (undo-tree-id43898 . -2) (undo-tree-id43899 . -2) (undo-tree-id43900 . -2) (undo-tree-id43901 . -2) (undo-tree-id43902 . -2) (undo-tree-id43903 . -2) (undo-tree-id43904 . -2) (undo-tree-id43905 . -2) (undo-tree-id43906 . -2) (undo-tree-id43907 . -2) (undo-tree-id43908 . -2) (undo-tree-id43909 . -2) (undo-tree-id43910 . -2) (undo-tree-id43911 . -2) (undo-tree-id43912 . -2) (undo-tree-id43913 . -2) (undo-tree-id43914 . -2) (undo-tree-id43915 . -2) (undo-tree-id43916 . -2) (undo-tree-id43917 . -2) (undo-tree-id43918 . -2) (undo-tree-id43919 . -2) (undo-tree-id43920 . -2) (undo-tree-id43921 . -2) (undo-tree-id43922 . -2) (undo-tree-id43923 . -2) (undo-tree-id43924 . -2) (undo-tree-id43925 . -2) (undo-tree-id43926 . -2) (undo-tree-id43927 . -2) (undo-tree-id43928 . -2) (undo-tree-id43929 . -2) (undo-tree-id43930 . -2) (undo-tree-id43931 . -2) (undo-tree-id43932 . -2) (undo-tree-id43933 . -2) (undo-tree-id43934 . -2) (undo-tree-id43935 . -2) (undo-tree-id43936 . -2) 5531 (5529 . 5531)) nil (26157 3902 562571 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 7315 7322 #s(yas--snippet nil nil #s(yas--exit 7322 nil) 209 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7322 nil) 209 nil nil nil nil)) (7315 . 7322) (#("clone()$0" 0 9 (fontified nil)) . 7315) (7315 . 7324) (#("cl" 0 2 (fontified nil)) . 7315) (7315 . 7317) (#("clone() (as Clone)" 0 18 (fontified nil)) . -7315) (7315 . 7333) (#("cl" 0 2 (fontified t)) . -7315) (undo-tree-id44066 . -1) (undo-tree-id44067 . -2) (undo-tree-id44068 . -2) (undo-tree-id44069 . -1) (undo-tree-id44070 . -1) (undo-tree-id44071 . -1) (undo-tree-id44072 . -1) (undo-tree-id44073 . -1) (undo-tree-id44074 . -1) (undo-tree-id44075 . -1) (undo-tree-id44076 . -1) (undo-tree-id44077 . -1) (undo-tree-id44078 . -1) (undo-tree-id44079 . -1) (undo-tree-id44080 . -1) (undo-tree-id44081 . -1) (undo-tree-id44082 . -1) (undo-tree-id44083 . -1) (undo-tree-id44084 . -1) (undo-tree-id44085 . -1) (undo-tree-id44086 . -1) (undo-tree-id44087 . -1) (undo-tree-id44088 . -1) (undo-tree-id44089 . -1) (undo-tree-id44090 . -1) (undo-tree-id44091 . -1) (undo-tree-id44092 . -1) (undo-tree-id44093 . -1) (undo-tree-id44094 . -1) (undo-tree-id44095 . -1) (undo-tree-id44096 . -1) (undo-tree-id44097 . -1) (undo-tree-id44098 . -1) (undo-tree-id44099 . -2) (undo-tree-id44100 . -2) (undo-tree-id44101 . -2) (undo-tree-id44102 . -2) (undo-tree-id44103 . -2) (undo-tree-id44104 . -2) (undo-tree-id44105 . -2) (undo-tree-id44106 . -2) (undo-tree-id44107 . -2) (undo-tree-id44108 . -2) (undo-tree-id44109 . -2) (undo-tree-id44110 . -2) (undo-tree-id44111 . -2) (undo-tree-id44112 . -2) (undo-tree-id44113 . -2) (undo-tree-id44114 . -2) (undo-tree-id44115 . -2) (undo-tree-id44116 . -2) (undo-tree-id44117 . -2) (undo-tree-id44118 . -2) (undo-tree-id44119 . -2) (undo-tree-id44120 . -2) (undo-tree-id44121 . -2) (undo-tree-id44122 . -2) (undo-tree-id44123 . -2) (undo-tree-id44124 . -2) (undo-tree-id44125 . -2) (undo-tree-id44126 . -2) (undo-tree-id44127 . -2) (undo-tree-id44128 . -2) (undo-tree-id44129 . -2) 7317 (7315 . 7317) (7314 . 7315) (t 26157 3902 690395 408000)) nil (26157 3909 991075 375000) 0 nil])
([nil nil ((apply yas--snippet-revive 7099 7106 #s(yas--snippet nil nil #s(yas--exit 7106 nil) 210 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7106 nil) 210 nil nil nil nil)) (7099 . 7106) (#("clone()$0" 0 9 (fontified nil)) . 7099) (7099 . 7108) (#("cl" 0 2 (fontified nil)) . 7099) (7099 . 7101) (#("clone() (as Clone)" 0 18 (fontified nil)) . -7099) (7099 . 7117) (#("cl" 0 2 (fontified t)) . -7099) (undo-tree-id44130 . -2) (undo-tree-id44131 . -2) (undo-tree-id44132 . -2) (undo-tree-id44133 . -2) (undo-tree-id44134 . -2) (undo-tree-id44135 . -2) (undo-tree-id44136 . -2) (undo-tree-id44137 . -2) (undo-tree-id44138 . -2) (undo-tree-id44139 . -2) (undo-tree-id44140 . -2) (undo-tree-id44141 . -2) (undo-tree-id44142 . -2) (undo-tree-id44143 . -2) (undo-tree-id44144 . -2) (undo-tree-id44145 . -2) (undo-tree-id44146 . -2) (undo-tree-id44147 . -2) (undo-tree-id44148 . -2) (undo-tree-id44149 . -2) (undo-tree-id44150 . -2) (undo-tree-id44151 . -2) (undo-tree-id44152 . -2) (undo-tree-id44153 . -2) (undo-tree-id44154 . -2) (undo-tree-id44155 . -2) (undo-tree-id44156 . -2) (undo-tree-id44157 . -2) (undo-tree-id44158 . -2) (undo-tree-id44159 . -2) (undo-tree-id44160 . -2) (undo-tree-id44161 . -2) (undo-tree-id44162 . -2) (undo-tree-id44163 . -2) (undo-tree-id44164 . -2) (undo-tree-id44165 . -2) (undo-tree-id44166 . -2) (undo-tree-id44167 . -2) (undo-tree-id44168 . -2) (undo-tree-id44169 . -2) (undo-tree-id44170 . -2) (undo-tree-id44171 . -2) (undo-tree-id44172 . -2) (undo-tree-id44173 . -2) (undo-tree-id44174 . -2) (undo-tree-id44175 . -2) (undo-tree-id44176 . -2) (undo-tree-id44177 . -2) (undo-tree-id44178 . -2) (undo-tree-id44179 . -2) (undo-tree-id44180 . -2) (undo-tree-id44181 . -2) (undo-tree-id44182 . -2) (undo-tree-id44183 . -2) (undo-tree-id44184 . -2) (undo-tree-id44185 . -2) (undo-tree-id44186 . -2) (undo-tree-id44187 . -2) (undo-tree-id44188 . -2) (undo-tree-id44189 . -2) (undo-tree-id44190 . -2) (undo-tree-id44191 . -2) (undo-tree-id44192 . -2) (undo-tree-id44193 . -2) (undo-tree-id44194 . -2) (undo-tree-id44195 . -2) (undo-tree-id44196 . -2) (undo-tree-id44197 . -2) (undo-tree-id44198 . -2) (undo-tree-id44199 . -2) (undo-tree-id44200 . -2) (undo-tree-id44201 . -2) (undo-tree-id44202 . -2) (undo-tree-id44203 . -2) (undo-tree-id44204 . -2) (undo-tree-id44205 . -2) (undo-tree-id44206 . -2) (undo-tree-id44207 . -2) (undo-tree-id44208 . -2) (undo-tree-id44209 . -2) (undo-tree-id44210 . -2) (undo-tree-id44211 . -2) (undo-tree-id44212 . -2) (undo-tree-id44213 . -2) (undo-tree-id44214 . -2) (undo-tree-id44215 . -2) (undo-tree-id44216 . -2) (undo-tree-id44217 . -2) (undo-tree-id44218 . -2) (undo-tree-id44219 . -2) (undo-tree-id44220 . -2) (undo-tree-id44221 . -2) (undo-tree-id44222 . -2) (undo-tree-id44223 . -2) (undo-tree-id44224 . -2) (undo-tree-id44225 . -2) (undo-tree-id44226 . -2) (undo-tree-id44227 . -2) (undo-tree-id44228 . -2) (undo-tree-id44229 . -2) (undo-tree-id44230 . -2) (undo-tree-id44231 . -2) (undo-tree-id44232 . -2) (undo-tree-id44233 . -2) (undo-tree-id44234 . -2) 7101 (7098 . 7101) (t 26157 3910 98289 344000)) nil (26157 3916 343282 931000) 0 nil])
([nil nil ((#("particle" 0 8 (fontified t)) . 7314) (undo-tree-id44422 . -7) (t 26157 3916 466199 68000)) nil (26157 3925 463183 877000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7314) (undo-tree-id44421 . -1)) nil (26157 3925 463180 2000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 7314) (undo-tree-id44420 . -4)) nil (26157 3925 463176 350000) 0 nil])
([nil nil ((#("());" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 2 (fontified t face (rainbow-delimiters-depth-6-face)) 2 3 (fontified t face (rainbow-delimiters-depth-5-face)) 3 4 (fontified t)) . 7314) (undo-tree-id44418 . -3) (undo-tree-id44419 . -4)) nil (26157 3925 463172 315000) 0 nil])
([nil nil ((7314 . 7316) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -7314) (7314 . 7315)) nil (26157 3925 463165 380000) 0 nil])
([nil nil ((#("		new_vector.push();
" 0 2 (fontified t) 2 13 (fontified t) 13 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 19 (fontified t face (rainbow-delimiters-depth-5-face)) 19 20 (fontified t) 20 21 (fontified t)) . 7296) (undo-tree-id44235 . -20) (undo-tree-id44236 . 1) (undo-tree-id44237 . -18) (undo-tree-id44238 . -19) (undo-tree-id44239 . -18) (undo-tree-id44240 . -18) (undo-tree-id44241 . -18) (undo-tree-id44242 . -18) (undo-tree-id44243 . -18) (undo-tree-id44244 . -18) (undo-tree-id44245 . -18) (undo-tree-id44246 . -18) (undo-tree-id44247 . -18) (undo-tree-id44248 . -18) (undo-tree-id44249 . -18) (undo-tree-id44250 . -18) (undo-tree-id44251 . -17) (undo-tree-id44252 . -17) (undo-tree-id44253 . -17) (undo-tree-id44254 . -17) (undo-tree-id44255 . -17) (undo-tree-id44256 . -17) (undo-tree-id44257 . -17) (undo-tree-id44258 . -17) (undo-tree-id44259 . -17) (undo-tree-id44260 . -17) (undo-tree-id44261 . -17) (undo-tree-id44262 . -17) (undo-tree-id44263 . -17) (undo-tree-id44264 . -17) (undo-tree-id44265 . -17) (undo-tree-id44266 . -17) (undo-tree-id44267 . -17) (undo-tree-id44268 . -17) (undo-tree-id44269 . -17) (undo-tree-id44270 . -17) (undo-tree-id44271 . -17) (undo-tree-id44272 . -17) (undo-tree-id44273 . -17) (undo-tree-id44274 . -17) (undo-tree-id44275 . -17) (undo-tree-id44276 . -17) (undo-tree-id44277 . -17) (undo-tree-id44278 . -17) (undo-tree-id44279 . -17) (undo-tree-id44280 . -17) (undo-tree-id44281 . -17) (undo-tree-id44282 . -17) (undo-tree-id44283 . -17) (undo-tree-id44284 . -17) (undo-tree-id44285 . -17) (undo-tree-id44286 . -17) (undo-tree-id44287 . -17) (undo-tree-id44288 . -17) (undo-tree-id44289 . -17) (undo-tree-id44290 . -17) (undo-tree-id44291 . -17) (undo-tree-id44292 . -17) (undo-tree-id44293 . -17) (undo-tree-id44294 . -17) (undo-tree-id44295 . -17) (undo-tree-id44296 . -17) (undo-tree-id44297 . -17) (undo-tree-id44298 . -17) (undo-tree-id44299 . -17) (undo-tree-id44300 . -17) (undo-tree-id44301 . -17) (undo-tree-id44302 . -17) (undo-tree-id44303 . -17) (undo-tree-id44304 . -17) (undo-tree-id44305 . -17) (undo-tree-id44306 . -17) (undo-tree-id44307 . -18) (undo-tree-id44308 . -18) (undo-tree-id44309 . -18) (undo-tree-id44310 . -18) (undo-tree-id44311 . -18) (undo-tree-id44312 . -18) (undo-tree-id44313 . -18) (undo-tree-id44314 . -18) (undo-tree-id44315 . -18) (undo-tree-id44316 . -18) (undo-tree-id44317 . -18) (undo-tree-id44318 . -19) (undo-tree-id44319 . -19) (undo-tree-id44320 . -19) (undo-tree-id44321 . -19) (undo-tree-id44322 . -19) (undo-tree-id44323 . -19) (undo-tree-id44324 . -19) (undo-tree-id44325 . -19) (undo-tree-id44326 . -19) (undo-tree-id44327 . -19) (undo-tree-id44328 . -19) (undo-tree-id44329 . -19) (undo-tree-id44330 . -19) (undo-tree-id44331 . -19) (undo-tree-id44332 . -19) (undo-tree-id44333 . -19) (undo-tree-id44334 . -19) (undo-tree-id44335 . -19) (undo-tree-id44336 . -19) (undo-tree-id44337 . -20) (undo-tree-id44338 . -20) (undo-tree-id44339 . -20) (undo-tree-id44340 . -20) (undo-tree-id44341 . -20) (undo-tree-id44342 . -20) (undo-tree-id44343 . -20) (undo-tree-id44344 . -20) (undo-tree-id44345 . -20) (undo-tree-id44346 . -20) (undo-tree-id44347 . -19) (undo-tree-id44348 . -19) (undo-tree-id44349 . -19) (undo-tree-id44350 . -19) (undo-tree-id44351 . -19) (undo-tree-id44352 . -19) (undo-tree-id44353 . -19) (undo-tree-id44354 . -19) (undo-tree-id44355 . -19) (undo-tree-id44356 . -19) (undo-tree-id44357 . -19) (undo-tree-id44358 . -17) (undo-tree-id44359 . -19) (undo-tree-id44360 . -19) (undo-tree-id44361 . -19) (undo-tree-id44362 . -19) (undo-tree-id44363 . -19) (undo-tree-id44364 . -19) (undo-tree-id44365 . -19) (undo-tree-id44366 . -19) (undo-tree-id44367 . -19) (undo-tree-id44368 . -19) (undo-tree-id44369 . -19) (undo-tree-id44370 . -19) (undo-tree-id44371 . -19) (undo-tree-id44372 . -19) (undo-tree-id44373 . -19) (undo-tree-id44374 . -19) (undo-tree-id44375 . -19) (undo-tree-id44376 . -19) (undo-tree-id44377 . -19) (undo-tree-id44378 . -19) (undo-tree-id44379 . -19) (undo-tree-id44380 . -19) (undo-tree-id44381 . -19) (undo-tree-id44382 . -19) (undo-tree-id44383 . -19) (undo-tree-id44384 . -19) (undo-tree-id44385 . -19) (undo-tree-id44386 . -19) (undo-tree-id44387 . -19) (undo-tree-id44388 . -19) (undo-tree-id44389 . -19) (undo-tree-id44390 . -19) (undo-tree-id44391 . -19) (undo-tree-id44392 . -19) (undo-tree-id44393 . -19) (undo-tree-id44394 . -19) (undo-tree-id44395 . -19) (undo-tree-id44396 . -19) (undo-tree-id44397 . -19) (undo-tree-id44398 . -19) (undo-tree-id44399 . -19) (undo-tree-id44400 . -19) (undo-tree-id44401 . -19) (undo-tree-id44402 . -19) (undo-tree-id44403 . -19) (undo-tree-id44404 . -19) (undo-tree-id44405 . -18) (undo-tree-id44406 . -18) (undo-tree-id44407 . -18) (undo-tree-id44408 . -18) (undo-tree-id44409 . -18) (undo-tree-id44410 . -18) (undo-tree-id44411 . -18) (undo-tree-id44412 . -18) (undo-tree-id44413 . -18) (undo-tree-id44414 . -18) (undo-tree-id44415 . -18) (undo-tree-id44416 . -18) (undo-tree-id44417 . -21) 7314) nil (26157 3925 463139 272000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7098) (undo-tree-id44429 . -1) (t 26157 3925 590071 143000)) nil (26157 3963 161698 533000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . 7098) (undo-tree-id44427 . -4) (undo-tree-id44428 . -5)) nil (26157 3963 161693 1000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7098) (undo-tree-id44425 . -1) (undo-tree-id44426 . -1)) nil (26157 3963 161675 955000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7098) (undo-tree-id44423 . -1) (undo-tree-id44424 . -1)) nil (26157 3963 161665 703000) 0 nil])
([nil nil ((7085 . 7086)) nil (26157 3963 161635 811000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -6493) (undo-tree-id44430 . -1) (undo-tree-id44431 . -1) (undo-tree-id44432 . -1) (undo-tree-id44433 . -1) (undo-tree-id44434 . -1) (undo-tree-id44435 . -1) (undo-tree-id44436 . -1) (undo-tree-id44437 . -1) (undo-tree-id44438 . -1) (undo-tree-id44439 . -1) (undo-tree-id44440 . -1) (undo-tree-id44441 . -1) 6494 (6493 . 6494) (t 26157 3963 293559 725000)) nil (26157 4016 980227 68000) 0 nil])
([nil nil ((6494 . 6495)) nil (26157 4016 980175 869000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 7086) (undo-tree-id44442 . -1) (undo-tree-id44443 . -1) (t 26157 4017 84874 997000)) nil (26157 4022 264835 514000) 0 nil])
([nil nil ((7307 . 7315) (#("pa" 0 2 (fontified nil)) . 7307) (undo-tree-id44444 . -2) (7307 . 7309) (#("particle" 0 8 (fontified nil)) . -7307) (undo-tree-id44445 . -8) (7307 . 7315) (#("pa" 0 2 (fontified t)) . -7307) (undo-tree-id44446 . -2) (undo-tree-id44447 . -2) (undo-tree-id44448 . -2) (undo-tree-id44449 . -2) (undo-tree-id44450 . -2) (undo-tree-id44451 . -2) (undo-tree-id44452 . -2) (undo-tree-id44453 . -2) (undo-tree-id44454 . -2) (undo-tree-id44455 . -2) (undo-tree-id44456 . -2) (undo-tree-id44457 . -2) (undo-tree-id44458 . -2) (undo-tree-id44459 . -2) (undo-tree-id44460 . -2) (undo-tree-id44461 . -2) (undo-tree-id44462 . -2) (undo-tree-id44463 . -2) (undo-tree-id44464 . -2) (undo-tree-id44465 . -2) (undo-tree-id44466 . -2) (undo-tree-id44467 . -2) (undo-tree-id44468 . -2) (undo-tree-id44469 . -2) (undo-tree-id44470 . -2) (undo-tree-id44471 . -2) (undo-tree-id44472 . -2) (undo-tree-id44473 . -2) (undo-tree-id44474 . -2) (undo-tree-id44475 . -2) (undo-tree-id44476 . -2) (undo-tree-id44477 . -2) (undo-tree-id44478 . -2) (undo-tree-id44479 . -2) (undo-tree-id44480 . -2) (undo-tree-id44481 . -2) (undo-tree-id44482 . -2) (undo-tree-id44483 . -2) (undo-tree-id44484 . -2) (undo-tree-id44485 . -2) (undo-tree-id44486 . -2) (undo-tree-id44487 . -2) (undo-tree-id44488 . -2) (undo-tree-id44489 . -2) (undo-tree-id44490 . -2) (undo-tree-id44491 . -2) (undo-tree-id44492 . -2) 7309 (7307 . 7309) (#("o" 0 1 (fontified t)) . -7307) (undo-tree-id44493 . -1) (undo-tree-id44494 . -1) (undo-tree-id44495 . -1) 7308 (7307 . 7308) (#("p" 0 1 (fontified t)) . -7307) (undo-tree-id44496 . -1) (undo-tree-id44497 . -1) (undo-tree-id44498 . -1) (undo-tree-id44499 . -1) (#("a" 0 1 (fontified t)) . -7308) (undo-tree-id44500 . -1) (undo-tree-id44501 . -1) (undo-tree-id44502 . -1) (undo-tree-id44503 . -1) 7309 (7308 . 7309) (#("value" 0 5 (fontified nil)) . 7308) (undo-tree-id44504 . -5) (7307 . 7308) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7307 7315 nil nil nil t #s(yas--exit 7316 nil))) #s(yas--exit 7316 nil) 211 nil #s(yas--field 1 7307 7315 nil nil nil t #s(yas--exit 7316 nil)) nil nil)) (7302 . 7313) (#("push(${1:value})$0" 0 18 (fontified nil)) . 7302) (7302 . 7320) (#("pu" 0 2 (fontified nil)) . 7302) (7302 . 7304) (#("push(…)" 0 7 (fontified nil)) . -7302) (7302 . 7309) (#("pu" 0 2 (fontified t)) . -7302) (undo-tree-id44505 . -2) (undo-tree-id44506 . -2) 7304 (7301 . 7304) (7291 . 7301) (#("ne" 0 2 (fontified nil)) . 7291) (7291 . 7293) (#("new_vector" 0 10 (fontified nil)) . -7291) (7291 . 7301) (#("ne" 0 2 (fontified t)) . -7291) (undo-tree-id44507 . -2) (undo-tree-id44508 . -2) 7293 (7291 . 7293) (7288 . 7291) (t 26157 4022 392810 122000)) nil (26157 4036 45593 513000) 0 nil])
([nil nil ((7316 . 7317) (apply yas--snippet-revive 7302 7316 #s(yas--snippet nil (#s(yas--field 1 7307 7315 nil nil nil t #s(yas--exit 7316 nil))) #s(yas--exit 7316 nil) 211 nil #s(yas--field 1 7307 7315 nil nil nil t #s(yas--exit 7316 nil)) nil nil))) nil (26157 4036 45079 890000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 7274) (t 26157 4036 148644 131000)) nil (26157 4044 114646 609000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7284) (undo-tree-id44509 . -1) (undo-tree-id44510 . -1) (undo-tree-id44511 . -1)) nil (26157 4044 114637 482000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7334) (undo-tree-id44631 . -4) 7338 (7334 . 7338) (#("    " 0 4 (fontified nil)) . 7333) (undo-tree-id44632 . -4) (7333 . 7338) (#("    " 0 4 (fontified nil)) . 7332) (undo-tree-id44633 . -4) (7331 . 7337) (t 26157 4044 216548 187000)) nil (26157 4069 79011 774000) 0 nil])
([nil nil ((7341 . 7353) (#("P" 0 1 (fontified t face font-lock-type-face)) . -7341) (undo-tree-id44605 . -1) (undo-tree-id44606 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -7342) (undo-tree-id44607 . -1) (undo-tree-id44608 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -7343) (undo-tree-id44609 . -1) (undo-tree-id44610 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -7344) (undo-tree-id44611 . -1) (undo-tree-id44612 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -7345) (undo-tree-id44613 . -1) (undo-tree-id44614 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -7346) (undo-tree-id44615 . -1) (undo-tree-id44616 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -7347) (undo-tree-id44617 . -1) (undo-tree-id44618 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -7348) (undo-tree-id44619 . -1) (undo-tree-id44620 . -1) 7349 (7341 . 7349) (#("par" 0 3 (fontified nil)) . 7341) (7341 . 7344) (#("Particle" 0 8 (fontified nil)) . -7341) (7341 . 7349) (#("par" 0 3 (fontified t face font-lock-variable-name-face)) . -7341) (undo-tree-id44621 . -3) (undo-tree-id44622 . -3) (undo-tree-id44623 . -3) 7344 (7339 . 7344) (#("f" 0 1 (fontified t)) . -7339) (undo-tree-id44624 . -1) (undo-tree-id44625 . -1) (#(" " 0 1 (fontified t)) . -7340) (undo-tree-id44626 . -1) (undo-tree-id44627 . -1) 7341 (7338 . 7341) (#("p" 0 1 (fontified t)) . -7338) (undo-tree-id44628 . -1) (#("r" 0 1 (fontified t)) . -7339) (undo-tree-id44629 . -1) (#(" " 0 1 (fontified t)) . -7340) (undo-tree-id44630 . -1) 7341 (7337 . 7341) (7333 . 7337)) nil (26157 4069 78992 895000) 0 nil])
([nil nil ((7367 . 7368) (7368 . 7372) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 7367) (7367 . 7368) (7366 . 7368) (7364 . 7367) (7354 . 7364) (#("ne" 0 2 (fontified nil)) . 7354) (7354 . 7356) (#("new_vector" 0 10 (fontified nil)) . -7354) (7354 . 7364) (#("ne" 0 2 (fontified t)) . -7354) (undo-tree-id44512 . -2) (undo-tree-id44513 . -2) (undo-tree-id44514 . -1) (undo-tree-id44515 . -1) (undo-tree-id44516 . -1) (undo-tree-id44517 . -1) (undo-tree-id44518 . -1) (undo-tree-id44519 . -1) (undo-tree-id44520 . -1) (undo-tree-id44521 . -1) (undo-tree-id44522 . -1) (undo-tree-id44523 . -1) (undo-tree-id44524 . -2) (undo-tree-id44525 . -2) (undo-tree-id44526 . -2) (undo-tree-id44527 . -2) (undo-tree-id44528 . -2) (undo-tree-id44529 . -2) (undo-tree-id44530 . -2) (undo-tree-id44531 . -2) (undo-tree-id44532 . -2) (undo-tree-id44533 . -2) (undo-tree-id44534 . -2) (undo-tree-id44535 . -2) (undo-tree-id44536 . -2) (undo-tree-id44537 . -2) (undo-tree-id44538 . -2) (undo-tree-id44539 . -2) (undo-tree-id44540 . -2) (undo-tree-id44541 . -2) (undo-tree-id44542 . -2) (undo-tree-id44543 . -2) (undo-tree-id44544 . -2) (undo-tree-id44545 . -2) (undo-tree-id44546 . -2) (undo-tree-id44547 . -2) (undo-tree-id44548 . -2) (undo-tree-id44549 . -2) (undo-tree-id44550 . -2) (undo-tree-id44551 . -2) (undo-tree-id44552 . -2) (undo-tree-id44553 . -2) (undo-tree-id44554 . -2) (undo-tree-id44555 . -2) (undo-tree-id44556 . -2) (undo-tree-id44557 . -2) (undo-tree-id44558 . -2) (undo-tree-id44559 . -2) (undo-tree-id44560 . -2) (undo-tree-id44561 . -2) (undo-tree-id44562 . -2) (undo-tree-id44563 . -2) (undo-tree-id44564 . -2) (undo-tree-id44565 . -2) (undo-tree-id44566 . -2) (undo-tree-id44567 . -2) (undo-tree-id44568 . -2) (undo-tree-id44569 . -2) (undo-tree-id44570 . -2) (undo-tree-id44571 . -2) (undo-tree-id44572 . -2) (undo-tree-id44573 . -2) (undo-tree-id44574 . -2) (undo-tree-id44575 . -2) (undo-tree-id44576 . -2) (undo-tree-id44577 . -2) (undo-tree-id44578 . -2) (undo-tree-id44579 . -2) (undo-tree-id44580 . -2) (undo-tree-id44581 . -2) (undo-tree-id44582 . -2) (undo-tree-id44583 . -2) (undo-tree-id44584 . -2) (undo-tree-id44585 . -2) (undo-tree-id44586 . -2) (undo-tree-id44587 . -2) (undo-tree-id44588 . -2) (undo-tree-id44589 . -2) (undo-tree-id44590 . -2) (undo-tree-id44591 . -2) (undo-tree-id44592 . -2) (undo-tree-id44593 . -2) (undo-tree-id44594 . -2) (undo-tree-id44595 . -2) (undo-tree-id44596 . -2) (undo-tree-id44597 . -2) (undo-tree-id44598 . -2) (undo-tree-id44599 . -2) (undo-tree-id44600 . -2) (undo-tree-id44601 . -2) (undo-tree-id44602 . -2) (undo-tree-id44603 . -2) (undo-tree-id44604 . -2) 7356 (7353 . 7356)) nil (26157 4069 78916 683000) 0 nil])
([nil nil ((6376 . 6393) (6372 . 6376) (#("    " 0 4 (fontified nil)) . 6371) (6371 . 6375) (6371 . 6372) (t 26157 4069 184257 695000)) nil (26157 4093 260732 454000) 0 nil])
([nil nil ((6380 . 6384)) nil (26157 4093 260727 491000) 0 nil])
([nil nil ((6413 . 6414) (apply yas--snippet-revive 6406 6413 #s(yas--snippet nil nil #s(yas--exit 6413 nil) 212 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6413 nil) 212 nil nil nil nil)) (6406 . 6413) (#("clone()$0" 0 9 (fontified nil)) . 6406) (6406 . 6415) (#("cl" 0 2 (fontified nil)) . 6406) (6406 . 6408) (#("clone() (as Clone)" 0 18 (fontified nil)) . -6406) (6406 . 6424) (#("cl" 0 2 (fontified t)) . -6406) (undo-tree-id44634 . -1) (undo-tree-id44635 . -2) (undo-tree-id44636 . -2) (undo-tree-id44637 . -1) (undo-tree-id44638 . -1) (undo-tree-id44639 . -1) (undo-tree-id44640 . -1) (undo-tree-id44641 . -1) (undo-tree-id44642 . -1) (undo-tree-id44643 . -1) (undo-tree-id44644 . -1) (undo-tree-id44645 . -1) (undo-tree-id44646 . -1) (undo-tree-id44647 . -1) (undo-tree-id44648 . -1) (undo-tree-id44649 . -1) (undo-tree-id44650 . -1) (undo-tree-id44651 . -1) (undo-tree-id44652 . -1) (undo-tree-id44653 . -1) (undo-tree-id44654 . -1) (undo-tree-id44655 . -1) (undo-tree-id44656 . -1) (undo-tree-id44657 . -1) (undo-tree-id44658 . -1) (undo-tree-id44659 . -1) (undo-tree-id44660 . -1) (undo-tree-id44661 . -1) (undo-tree-id44662 . -1) (undo-tree-id44663 . -1) (undo-tree-id44664 . -1) (undo-tree-id44665 . -1) (undo-tree-id44666 . -1) (undo-tree-id44667 . -2) (undo-tree-id44668 . -2) (undo-tree-id44669 . -2) (undo-tree-id44670 . -2) (undo-tree-id44671 . -2) (undo-tree-id44672 . -2) (undo-tree-id44673 . -2) (undo-tree-id44674 . -2) (undo-tree-id44675 . -2) (undo-tree-id44676 . -2) (undo-tree-id44677 . -2) (undo-tree-id44678 . -2) (undo-tree-id44679 . -2) (undo-tree-id44680 . -2) (undo-tree-id44681 . -2) (undo-tree-id44682 . -2) (undo-tree-id44683 . -2) (undo-tree-id44684 . -2) (undo-tree-id44685 . -2) (undo-tree-id44686 . -2) (undo-tree-id44687 . -2) (undo-tree-id44688 . -2) (undo-tree-id44689 . -2) (undo-tree-id44690 . -2) (undo-tree-id44691 . -2) (undo-tree-id44692 . -2) (undo-tree-id44693 . -2) (undo-tree-id44694 . -2) (undo-tree-id44695 . -2) (undo-tree-id44696 . -2) (undo-tree-id44697 . -2) 6408 (6405 . 6408) (6397 . 6405) (#("map" 0 3 (fontified nil)) . 6397) (6396 . 6400) (#("map_data" 0 8 (fontified nil)) . -6396) (6396 . 6404) (#("=map" 0 4 (fontified t)) . -6396) (undo-tree-id44698 . -4) (undo-tree-id44699 . -4) (undo-tree-id44700 . -4) (undo-tree-id44701 . -4) (undo-tree-id44702 . -4) (undo-tree-id44703 . -4) (undo-tree-id44704 . -4) (undo-tree-id44705 . -4) (undo-tree-id44706 . -4) (undo-tree-id44707 . -4) (undo-tree-id44708 . -4) (undo-tree-id44709 . -4) (undo-tree-id44710 . -4) (undo-tree-id44711 . -4) (undo-tree-id44712 . -4) (undo-tree-id44713 . -4) (undo-tree-id44714 . -4) (undo-tree-id44715 . -4) (undo-tree-id44716 . -4) (undo-tree-id44717 . -4) (undo-tree-id44718 . -4) (undo-tree-id44719 . -4) (undo-tree-id44720 . -4) (undo-tree-id44721 . -4) (undo-tree-id44722 . -4) (undo-tree-id44723 . -4) (undo-tree-id44724 . -4) (undo-tree-id44725 . -4) (undo-tree-id44726 . -4) (undo-tree-id44727 . -4) (undo-tree-id44728 . -4) (undo-tree-id44729 . -4) (undo-tree-id44730 . -4) (undo-tree-id44731 . -4) (undo-tree-id44732 . -4) 6400 (6397 . 6400)) nil (26157 4093 260705 892000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -7411) (undo-tree-id44752 . -1) (undo-tree-id44753 . -1) (undo-tree-id44754 . -1) (#("a" 0 1 (fontified t)) . -7412) (undo-tree-id44755 . -1) (undo-tree-id44756 . -1) (undo-tree-id44757 . -1) (#("p" 0 1 (fontified t)) . -7413) (undo-tree-id44758 . -1) (undo-tree-id44759 . -1) (undo-tree-id44760 . -1) (#("_" 0 1 (fontified t)) . -7414) (undo-tree-id44761 . -1) (undo-tree-id44762 . -1) (undo-tree-id44763 . -1) (#("d" 0 1 (fontified t)) . -7415) (undo-tree-id44764 . -1) (undo-tree-id44765 . -1) (undo-tree-id44766 . -1) (#("a" 0 1 (fontified t)) . -7416) (undo-tree-id44767 . -1) (undo-tree-id44768 . -1) (undo-tree-id44769 . -1) (#("t" 0 1 (fontified t)) . -7417) (undo-tree-id44770 . -1) (undo-tree-id44771 . -1) (undo-tree-id44772 . -1) (#("a" 0 1 (fontified t)) . -7418) (undo-tree-id44773 . -1) (undo-tree-id44774 . -1) (undo-tree-id44775 . -1) (#("." 0 1 (fontified t)) . -7419) (undo-tree-id44776 . -1) (undo-tree-id44777 . -1) (undo-tree-id44778 . -1) (#("m" 0 1 (fontified t)) . -7420) (undo-tree-id44779 . -1) (undo-tree-id44780 . -1) (undo-tree-id44781 . -1) (#("a" 0 1 (fontified t)) . -7421) (undo-tree-id44782 . -1) (undo-tree-id44783 . -1) 7422 (7420 . 7422) (#("a" 0 1 (fontified t)) . -7420) (undo-tree-id44784 . -1) (undo-tree-id44785 . -1) (undo-tree-id44786 . -1) (#("d" 0 1 (fontified t)) . -7421) (undo-tree-id44787 . -1) (undo-tree-id44788 . -1) 7422 (7420 . 7422) (#("a" 0 1 (fontified t)) . -7420) (undo-tree-id44789 . -1) (undo-tree-id44790 . -1) (undo-tree-id44791 . -1) (#("d" 0 1 (fontified t)) . -7421) (undo-tree-id44792 . -1) (undo-tree-id44793 . -1) 7422 (7419 . 7422) (7411 . 7419) (#("map" 0 3 (fontified nil)) . 7411) (7411 . 7414) (#("map_data" 0 8 (fontified nil)) . -7411) (7411 . 7419) (#("map" 0 3 (fontified t)) . -7411) (undo-tree-id44794 . -3) (undo-tree-id44795 . -3) 7414 (7411 . 7414) (#("m" 0 1 (fontified t)) . -7411) (undo-tree-id44796 . -1) (undo-tree-id44797 . -1) (undo-tree-id44798 . -1) (#("a" 0 1 (fontified t)) . -7412) (undo-tree-id44799 . -1) (undo-tree-id44800 . -1) (undo-tree-id44801 . -1) (#("p" 0 1 (fontified t)) . -7413) (undo-tree-id44802 . -1) (undo-tree-id44803 . -1) (undo-tree-id44804 . -1) (#("_" 0 1 (fontified t)) . -7414) (undo-tree-id44805 . -1) (undo-tree-id44806 . -1) (undo-tree-id44807 . -1) (#("d" 0 1 (fontified t)) . -7415) (undo-tree-id44808 . -1) (undo-tree-id44809 . -1) (undo-tree-id44810 . -1) (#("a" 0 1 (fontified t)) . -7416) (undo-tree-id44811 . -1) (undo-tree-id44812 . -1) (undo-tree-id44813 . -1) (#("t" 0 1 (fontified t)) . -7417) (undo-tree-id44814 . -1) (undo-tree-id44815 . -1) (undo-tree-id44816 . -1) (#("a" 0 1 (fontified t)) . -7418) (undo-tree-id44817 . -1) (undo-tree-id44818 . -1) (undo-tree-id44819 . -1) (#("." 0 1 (fontified t)) . -7419) (undo-tree-id44820 . -1) (undo-tree-id44821 . -1) (undo-tree-id44822 . -1) (#("c" 0 1 (fontified t)) . -7420) (undo-tree-id44823 . -1) (undo-tree-id44824 . -1) (#("l" 0 1 (fontified t)) . -7421) (undo-tree-id44825 . -1) (undo-tree-id44826 . -1) (#("o" 0 1 (fontified t)) . -7422) (undo-tree-id44827 . -1) (undo-tree-id44828 . -1) (#("n" 0 1 (fontified t)) . -7423) (undo-tree-id44829 . -1) (undo-tree-id44830 . -1) (#("e" 0 1 (fontified t)) . -7424) (undo-tree-id44831 . -1) (undo-tree-id44832 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -7425) (undo-tree-id44833 . -1) (undo-tree-id44834 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -7426) (undo-tree-id44835 . -1) (undo-tree-id44836 . -1) (#("." 0 1 (fontified t)) . -7427) (undo-tree-id44837 . -1) (undo-tree-id44838 . -1) 7428 (7427 . 7428) (apply yas--snippet-revive 7420 7427 #s(yas--snippet nil nil #s(yas--exit 7427 nil) 213 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7427 nil) 213 nil nil nil nil)) (7420 . 7427) (#("clone()$0" 0 9 (fontified nil)) . 7420) (7420 . 7429) (#("cl" 0 2 (fontified nil)) . 7420) (7420 . 7422) (#("clone() (as Clone)" 0 18 (fontified nil)) . -7420) (7420 . 7438) (#("cl" 0 2 (fontified t)) . -7420) (undo-tree-id44839 . -1) (undo-tree-id44840 . -2) (undo-tree-id44841 . -2) 7422 (7419 . 7422) (7411 . 7419) (#("ma" 0 2 (fontified nil)) . 7411) (7411 . 7413) (#("map_data" 0 8 (fontified nil)) . -7411) (7411 . 7419) (#("ma" 0 2 (fontified t)) . -7411) (undo-tree-id44842 . -2) (undo-tree-id44843 . -2) 7413 (7411 . 7413) (t 26157 4093 403984 836000)) nil (26157 4145 993892 51000) 0 nil])
([nil nil ((7470 . 7471) (apply yas--snippet-revive 7423 7470 #s(yas--snippet nil (#s(yas--field 1 7444 7454 nil nil nil t #s(yas--field 2 7456 7466 nil nil nil t #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil)))) #s(yas--field 2 7456 7466 nil nil nil t #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil))) #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil))) #s(yas--exit 7470 nil) 214 nil #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil)) nil nil)) (#("rad" 0 3 (fontified nil)) . 7469) (7468 . 7469) (7465 . 7466) (#("y" 0 1 (fontified t)) . -7465) (undo-tree-id44733 . -1) (undo-tree-id44734 . -1) 7466 (7464 . 7466) (7456 . 7464) (#("pa" 0 2 (fontified nil)) . 7456) (7456 . 7458) (#("particle" 0 8 (fontified nil)) . -7456) (7456 . 7464) (#("pa" 0 2 (fontified t)) . -7456) (undo-tree-id44735 . -2) (undo-tree-id44736 . -2) 7458 (7457 . 7458) (#("y" 0 1 (fontified nil)) . 7457) (7456 . 7457) (7453 . 7454) (#("x" 0 1 (fontified nil)) . 7453) (7453 . 7454) (#("x" 0 1 (fontified t)) . -7453) (undo-tree-id44737 . -1) (undo-tree-id44738 . -1) (undo-tree-id44739 . -1) 7454 (7453 . 7454) (7452 . 7453) (7444 . 7452) (#("pa" 0 2 (fontified nil)) . 7444) (7444 . 7446) (#("particle" 0 8 (fontified nil)) . -7444) (7444 . 7452) (#("pa" 0 2 (fontified t)) . -7444) (undo-tree-id44740 . -2) (undo-tree-id44741 . -2) (undo-tree-id44742 . -2) 7446 (7444 . 7446) (#("n" 0 1 (fontified t)) . -7444) (undo-tree-id44743 . -1) (undo-tree-id44744 . -1) (#("e" 0 1 (fontified t)) . -7445) (undo-tree-id44745 . -1) (undo-tree-id44746 . -1) 7446 (7445 . 7446) (#("x" 0 1 (fontified nil)) . 7445) (7444 . 7445) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7444 7454 nil nil nil t #s(yas--field 2 7456 7466 nil nil nil t #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil)))) #s(yas--field 2 7456 7466 nil nil nil t #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil))) #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil))) #s(yas--exit 7470 nil) 214 nil #s(yas--field 3 7468 7469 nil nil nil t #s(yas--exit 7470 nil)) nil nil)) (7423 . 7454) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 7423) (7423 . 7471) (#("ma" 0 2 (fontified nil)) . 7423) (7423 . 7425) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -7423) (7423 . 7446) (#("ma" 0 2 (fontified t)) . -7423) (undo-tree-id44747 . -2) (undo-tree-id44748 . -2) (undo-tree-id44749 . -2) 7425 (7422 . 7425) (7411 . 7422) (#("an" 0 2 (fontified nil)) . 7411) (7411 . 7413) (#("another_map" 0 11 (fontified nil)) . -7411) (7411 . 7422) (#("an" 0 2 (fontified t)) . -7411) (undo-tree-id44750 . -2) (undo-tree-id44751 . -2) 7413 (7411 . 7413)) nil (26157 4145 993619 67000) 0 nil])
([nil nil ((7520 . 7539) (#("f" 0 1 (fontified t face font-lock-string-face)) . -7520) (undo-tree-id45105 . -1) (undo-tree-id45106 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7521) (undo-tree-id45107 . -1) (undo-tree-id45108 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7522) (undo-tree-id45109 . -1) (undo-tree-id45110 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7523) (undo-tree-id45111 . -1) (undo-tree-id45112 . -1) 7524 (7520 . 7524) (7519 . 7521) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7519) (undo-tree-id45113 . -1) (#("path" 0 4 (fontified nil)) . 7520) (undo-tree-id45114 . -4) (7519 . 7520) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7519 7540 nil nil nil t #s(yas--exit 7541 nil))) #s(yas--exit 7541 nil) 216 nil #s(yas--field 1 7519 7540 nil nil nil t #s(yas--exit 7541 nil)) nil nil)) (7504 . 7524) (#("write_as_ascii(${1:path})$0" 0 27 (fontified nil)) . 7504) (7504 . 7531) (#("wr" 0 2 (fontified nil)) . 7504) (7504 . 7506) (#("write_as_ascii(…)" 0 17 (fontified nil)) . -7504) (7504 . 7521) (#("wr" 0 2 (fontified t)) . -7504) (undo-tree-id45115 . -1) (undo-tree-id45116 . -2) (undo-tree-id45117 . -2) 7506 (7503 . 7506) (apply yas--snippet-revive 7495 7503 #s(yas--snippet nil nil #s(yas--exit 7503 nil) 215 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7503 nil) 215 nil nil nil nil)) (7495 . 7503) (#("to_pbm()$0" 0 10 (fontified nil)) . 7495) (7495 . 7505) (#("to" 0 2 (fontified nil)) . 7495) (7495 . 7497) (#("to_pbm()" 0 8 (fontified nil)) . -7495) (7495 . 7503) (#("to" 0 2 (fontified t)) . -7495) (undo-tree-id45118 . -2) (undo-tree-id45119 . -2) (undo-tree-id45120 . -2) 7497 (7494 . 7497) (7483 . 7494) (#("an" 0 2 (fontified nil)) . 7483) (7483 . 7485) (#("another_map" 0 11 (fontified nil)) . -7483) (7483 . 7494) (#("an" 0 2 (fontified t)) . -7483) (undo-tree-id45121 . -2) (undo-tree-id45122 . -2) 7485 (7483 . 7485) (7479 . 7483) (#("    " 0 4 (fontified nil)) . 7478) (undo-tree-id45123 . -4) (7477 . 7483) (t 26157 4146 119419 413000)) nil (26157 4175 242779 388000) 0 nil])
([nil nil ((apply yas--snippet-revive 7504 7541 #s(yas--snippet nil (#s(yas--field 1 7519 7540 nil nil nil t #s(yas--exit 7541 nil))) #s(yas--exit 7541 nil) 216 nil #s(yas--field 1 7519 7540 nil nil nil t #s(yas--exit 7541 nil)) nil nil))) nil (26157 4175 242725 965000) 0 nil])
([nil nil ((#("ascii" 0 5 (fontified t)) . 7513) (undo-tree-id45103 . -4) (undo-tree-id45104 . -5)) nil (26157 4175 242723 628000) 0 nil])
([nil nil ((7504 . 7519) (#("write_as_b" 0 10 (fontified nil)) . 7504) (7504 . 7514) (#("write_as_binary" 0 15 (fontified nil)) . -7504) (7504 . 7519) (#("write_as_b" 0 10 (fontified t)) . -7504) (undo-tree-id44995 . -9) (undo-tree-id44996 . -9) (undo-tree-id44997 . -10) (undo-tree-id44998 . -10) (undo-tree-id44999 . -9) (undo-tree-id45000 . -9) (undo-tree-id45001 . -9) (undo-tree-id45002 . -9) (undo-tree-id45003 . -9) (undo-tree-id45004 . -9) (undo-tree-id45005 . -9) (undo-tree-id45006 . -9) (undo-tree-id45007 . -9) (undo-tree-id45008 . -9) (undo-tree-id45009 . -9) (undo-tree-id45010 . -9) (undo-tree-id45011 . -9) (undo-tree-id45012 . -9) (undo-tree-id45013 . -9) (undo-tree-id45014 . -9) (undo-tree-id45015 . -9) (undo-tree-id45016 . -9) (undo-tree-id45017 . -9) (undo-tree-id45018 . -9) (undo-tree-id45019 . -9) (undo-tree-id45020 . -9) (undo-tree-id45021 . -9) (undo-tree-id45022 . -9) (undo-tree-id45023 . -9) (undo-tree-id45024 . -9) (undo-tree-id45025 . -9) (undo-tree-id45026 . -9) (undo-tree-id45027 . -9) (undo-tree-id45028 . -9) (undo-tree-id45029 . -9) (undo-tree-id45030 . -9) (undo-tree-id45031 . -9) (undo-tree-id45032 . -9) (undo-tree-id45033 . -9) (undo-tree-id45034 . -9) (undo-tree-id45035 . -9) (undo-tree-id45036 . -9) (undo-tree-id45037 . -9) (undo-tree-id45038 . -9) (undo-tree-id45039 . -9) (undo-tree-id45040 . -9) (undo-tree-id45041 . -9) (undo-tree-id45042 . -9) (undo-tree-id45043 . -9) (undo-tree-id45044 . -9) (undo-tree-id45045 . -9) (undo-tree-id45046 . -9) (undo-tree-id45047 . -9) (undo-tree-id45048 . -9) (undo-tree-id45049 . -9) (undo-tree-id45050 . -9) (undo-tree-id45051 . -9) (undo-tree-id45052 . -9) (undo-tree-id45053 . -9) (undo-tree-id45054 . -10) (undo-tree-id45055 . -10) (undo-tree-id45056 . -10) (undo-tree-id45057 . -10) (undo-tree-id45058 . -10) (undo-tree-id45059 . -10) (undo-tree-id45060 . -10) (undo-tree-id45061 . -10) (undo-tree-id45062 . -10) (undo-tree-id45063 . -10) (undo-tree-id45064 . -10) (undo-tree-id45065 . -10) (undo-tree-id45066 . -10) (undo-tree-id45067 . -10) (undo-tree-id45068 . -10) (undo-tree-id45069 . -10) (undo-tree-id45070 . -10) (undo-tree-id45071 . -10) (undo-tree-id45072 . -10) (undo-tree-id45073 . -10) (undo-tree-id45074 . -10) (undo-tree-id45075 . -10) (undo-tree-id45076 . -10) (undo-tree-id45077 . -10) (undo-tree-id45078 . -10) (undo-tree-id45079 . -10) (undo-tree-id45080 . -10) (undo-tree-id45081 . -10) (undo-tree-id45082 . -10) (undo-tree-id45083 . -10) (undo-tree-id45084 . -10) (undo-tree-id45085 . -10) (undo-tree-id45086 . -10) (undo-tree-id45087 . -10) (undo-tree-id45088 . -10) (undo-tree-id45089 . -10) (undo-tree-id45090 . -10) (undo-tree-id45091 . -10) (undo-tree-id45092 . -10) (undo-tree-id45093 . -10) (undo-tree-id45094 . -10) (undo-tree-id45095 . -10) (undo-tree-id45096 . -10) (undo-tree-id45097 . -10) (undo-tree-id45098 . -10) (undo-tree-id45099 . -10) (undo-tree-id45100 . -10) (undo-tree-id45101 . -10) (undo-tree-id45102 . -10) 7514 (7513 . 7514)) nil (26157 4175 242706 791000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7547 7550 nil nil nil nil #s(yas--exit 7551 nil))) #s(yas--exit 7551 nil) 217 nil #s(yas--field 1 7547 7550 nil nil nil nil #s(yas--exit 7551 nil)) nil nil)) (7543 . 7551) (#("and(${1:res})$0" 0 15 (fontified nil)) . 7543) (7543 . 7558) (#("and(…)" 0 6 (fontified nil)) . -7543) (7543 . 7549) (#("un" 0 2 (fontified t)) . -7543) (undo-tree-id44951 . -2) (undo-tree-id44952 . -2) (undo-tree-id44953 . -1) (undo-tree-id44954 . -1) (undo-tree-id44955 . -1) (undo-tree-id44956 . -1) (undo-tree-id44957 . -1) (undo-tree-id44958 . -1) (undo-tree-id44959 . -1) (undo-tree-id44960 . -1) (undo-tree-id44961 . -1) (undo-tree-id44962 . -1) (undo-tree-id44963 . -1) (undo-tree-id44964 . -1) (undo-tree-id44965 . -1) (undo-tree-id44966 . -1) (undo-tree-id44967 . -1) (undo-tree-id44968 . -1) (undo-tree-id44969 . -2) (undo-tree-id44970 . -2) (undo-tree-id44971 . -2) (undo-tree-id44972 . -2) (undo-tree-id44973 . -2) (undo-tree-id44974 . -2) (undo-tree-id44975 . -2) (undo-tree-id44976 . -2) (undo-tree-id44977 . -2) (undo-tree-id44978 . -2) (undo-tree-id44979 . -2) (undo-tree-id44980 . -2) (undo-tree-id44981 . -2) (undo-tree-id44982 . -2) (undo-tree-id44983 . -2) (undo-tree-id44984 . -2) (undo-tree-id44985 . -2) (undo-tree-id44986 . -2) (undo-tree-id44987 . -2) (undo-tree-id44988 . -2) (undo-tree-id44989 . -2) (undo-tree-id44990 . -2) (undo-tree-id44991 . -2) (undo-tree-id44992 . -2) (undo-tree-id44993 . -2) (undo-tree-id44994 . -2) 7545 (7542 . 7545)) nil (26157 4175 242341 427000) 0 nil])
([nil nil ((apply yas--snippet-revive 7543 7551 #s(yas--snippet nil (#s(yas--field 1 7547 7550 nil nil nil nil #s(yas--exit 7551 nil))) #s(yas--exit 7551 nil) 217 nil #s(yas--field 1 7547 7550 nil nil nil nil #s(yas--exit 7551 nil)) nil nil))) nil (26157 4175 242259 734000) 0 nil])
([nil nil ((#("and(res)" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face))) . 7543) (undo-tree-id44882 . 4) (undo-tree-id44883 . -3) (undo-tree-id44884 . -8) (undo-tree-id44885 . -8) (undo-tree-id44886 . -8) (undo-tree-id44887 . -8) (undo-tree-id44888 . -8) (undo-tree-id44889 . -8) (undo-tree-id44890 . -8) (undo-tree-id44891 . -8) (undo-tree-id44892 . -8) (undo-tree-id44893 . -4) (undo-tree-id44894 . -4) (undo-tree-id44895 . -4) (undo-tree-id44896 . -4) (undo-tree-id44897 . -4) (undo-tree-id44898 . -4) (undo-tree-id44899 . -4) (undo-tree-id44900 . -4) (undo-tree-id44901 . -4) (undo-tree-id44902 . -4) (undo-tree-id44903 . -4) (undo-tree-id44904 . -4) (undo-tree-id44905 . -4) (undo-tree-id44906 . -4) (undo-tree-id44907 . -4) (undo-tree-id44908 . -4) (undo-tree-id44909 . -4) (undo-tree-id44910 . -4) (undo-tree-id44911 . -4) (undo-tree-id44912 . -4) (undo-tree-id44913 . -3) (undo-tree-id44914 . -3) (undo-tree-id44915 . -3) (undo-tree-id44916 . -3) (undo-tree-id44917 . -3) (undo-tree-id44918 . -3) (undo-tree-id44919 . -3) (undo-tree-id44920 . -3) (undo-tree-id44921 . -3) (undo-tree-id44922 . -3) (undo-tree-id44923 . -3) (undo-tree-id44924 . -3) (undo-tree-id44925 . -3) (undo-tree-id44926 . -3) (undo-tree-id44927 . -3) (undo-tree-id44928 . -3) (undo-tree-id44929 . -3) (undo-tree-id44930 . -3) (undo-tree-id44931 . -3) (undo-tree-id44932 . -3) (undo-tree-id44933 . -3) (undo-tree-id44934 . -3) (undo-tree-id44935 . -3) (undo-tree-id44936 . -3) (undo-tree-id44937 . -3) (undo-tree-id44938 . -3) (undo-tree-id44939 . -3) (undo-tree-id44940 . -3) (undo-tree-id44941 . -3) (undo-tree-id44942 . -3) (undo-tree-id44943 . -3) (undo-tree-id44944 . -3) (undo-tree-id44945 . -3) (undo-tree-id44946 . -3) (undo-tree-id44947 . -3) (undo-tree-id44948 . -3) (undo-tree-id44949 . -3) (undo-tree-id44950 . -8)) nil (26157 4175 242250 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 7543 7551 #s(yas--snippet nil nil #s(yas--exit 7551 nil) 218 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7551 nil) 218 nil nil nil nil)) (7543 . 7551) (#("unwrap()$0" 0 10 (fontified nil)) . 7543) (7543 . 7553) (#("unw" 0 3 (fontified nil)) . 7543) (7543 . 7546) (#("unwrap()" 0 8 (fontified nil)) . -7543) (7543 . 7551) (#("unw" 0 3 (fontified t)) . -7543) (undo-tree-id44844 . -2) (undo-tree-id44845 . -3) (undo-tree-id44846 . -3) (undo-tree-id44847 . -2) (undo-tree-id44848 . -2) (undo-tree-id44849 . -2) (undo-tree-id44850 . -2) (undo-tree-id44851 . -2) (undo-tree-id44852 . -2) (undo-tree-id44853 . -2) (undo-tree-id44854 . -2) (undo-tree-id44855 . -2) (undo-tree-id44856 . -3) (undo-tree-id44857 . -3) (undo-tree-id44858 . -3) (undo-tree-id44859 . -3) (undo-tree-id44860 . -3) (undo-tree-id44861 . -3) (undo-tree-id44862 . -3) (undo-tree-id44863 . -3) (undo-tree-id44864 . -3) (undo-tree-id44865 . -3) (undo-tree-id44866 . -3) (undo-tree-id44867 . -3) (undo-tree-id44868 . -3) (undo-tree-id44869 . -3) (undo-tree-id44870 . -3) (undo-tree-id44871 . -3) (undo-tree-id44872 . -3) (undo-tree-id44873 . -3) (undo-tree-id44874 . -3) (undo-tree-id44875 . -3) (undo-tree-id44876 . -3) (undo-tree-id44877 . -3) (undo-tree-id44878 . -3) (undo-tree-id44879 . -3) (undo-tree-id44880 . -3) (undo-tree-id44881 . -3) 7546 (7543 . 7546)) nil (26157 4175 241733 411000) 0 nil])
([nil nil ((7551 . 7552)) nil (26157 4175 241611 672000) 0 nil])
([nil nil ((4936 . 4938) (t 26157 4175 375121 334000)) nil (26157 4201 464815 839000) 0 nil])
([nil nil ((7501 . 7502) (#("b" 0 1 (fontified t)) . -7501) (undo-tree-id45124 . -1) (undo-tree-id45125 . -1) (undo-tree-id45126 . -1) (undo-tree-id45127 . -1) (undo-tree-id45128 . -1) (undo-tree-id45129 . -1) (undo-tree-id45130 . -1) (undo-tree-id45131 . -1) (undo-tree-id45132 . -1) (undo-tree-id45133 . -1) (undo-tree-id45134 . -1) 7502 (t 26157 4201 562863 374000)) nil (26157 4229 25254 265000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7112) (undo-tree-id45175 . -4) (undo-tree-id45176 . -4) (undo-tree-id45177 . -4) (undo-tree-id45178 . -4) (undo-tree-id45179 . -4) (undo-tree-id45180 . -4) (undo-tree-id45181 . -4) (undo-tree-id45182 . -4) (undo-tree-id45183 . -4) (undo-tree-id45184 . -4) (undo-tree-id45185 . -4) 7116 (7112 . 7116) (#("    " 0 4 (fontified nil)) . 7111) (undo-tree-id45186 . -4) (undo-tree-id45187 . -4) (undo-tree-id45188 . -4) (undo-tree-id45189 . -4) (undo-tree-id45190 . -4) (undo-tree-id45191 . -4) (undo-tree-id45192 . -4) (undo-tree-id45193 . -4) (undo-tree-id45194 . -4) (undo-tree-id45195 . -4) (undo-tree-id45196 . -4) (7111 . 7116) (#("    " 0 4 (fontified nil)) . 7110) (7110 . 7114) (7110 . 7111) (t 26157 4229 150600 195000)) nil (26157 4312 656211 742000) 0 nil])
([nil nil ((7158 . 7160) (7151 . 7158) (#("f" 0 1 (fontified t face font-lock-string-face)) . -7151) (undo-tree-id45138 . -1) (undo-tree-id45139 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7152) (undo-tree-id45140 . -1) (undo-tree-id45141 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7153) (undo-tree-id45142 . -1) (undo-tree-id45143 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7154) (undo-tree-id45144 . -1) (undo-tree-id45145 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -7155) (undo-tree-id45146 . -1) (undo-tree-id45147 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -7156) (undo-tree-id45148 . -1) (undo-tree-id45149 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -7157) (undo-tree-id45150 . -1) (undo-tree-id45151 . -1) 7158 (7151 . 7158) (7150 . 7152) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7150) (undo-tree-id45152 . -1) (#("path" 0 4 (fontified nil)) . 7151) (undo-tree-id45153 . -4) (7150 . 7151) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7150 7161 nil nil nil t #s(yas--exit 7162 nil))) #s(yas--exit 7162 nil) 220 nil #s(yas--field 1 7150 7161 nil nil nil t #s(yas--exit 7162 nil)) nil nil)) (7134 . 7155) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 7134) (7134 . 7162) (#("wr" 0 2 (fontified nil)) . 7134) (7134 . 7136) (#("write_as_binary(…)" 0 18 (fontified nil)) . -7134) (7134 . 7152) (#("wr" 0 2 (fontified t)) . -7134) (undo-tree-id45154 . -1) (undo-tree-id45155 . -2) (undo-tree-id45156 . -2) 7136 (7135 . 7136) (7134 . 7135) (#("r" 0 1 (fontified t)) . -7134) (undo-tree-id45157 . -1) (undo-tree-id45158 . -1) (undo-tree-id45159 . -1) (#("s" 0 1 (fontified t)) . -7135) (undo-tree-id45160 . -1) (undo-tree-id45161 . -1) (undo-tree-id45162 . -1) (#("c" 0 1 (fontified t)) . -7136) (undo-tree-id45163 . -1) (undo-tree-id45164 . -1) (undo-tree-id45165 . -1) 7137 (7135 . 7137) (7134 . 7135) (7133 . 7134) (apply yas--snippet-revive 7125 7133 #s(yas--snippet nil nil #s(yas--exit 7133 nil) 219 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7133 nil) 219 nil nil nil nil)) (7125 . 7133) (#("to_pbm()$0" 0 10 (fontified nil)) . 7125) (7125 . 7135) (#("to" 0 2 (fontified nil)) . 7125) (7125 . 7127) (#("to_pbm()" 0 8 (fontified nil)) . -7125) (7125 . 7133) (#("to" 0 2 (fontified t)) . -7125) (undo-tree-id45166 . -2) (undo-tree-id45167 . -2) (undo-tree-id45168 . -2) 7127 (7124 . 7127) (7115 . 7124) (#("ro" 0 2 (fontified nil)) . 7115) (7115 . 7117) (#("robotscan" 0 9 (fontified nil)) . -7115) (7115 . 7124) (#("ro" 0 2 (fontified t)) . -7115) (undo-tree-id45169 . -2) (undo-tree-id45170 . -2) 7117 (7115 . 7117) (#("t" 0 1 (fontified t)) . -7115) (undo-tree-id45171 . -1) (undo-tree-id45172 . -1) (#("h" 0 1 (fontified t)) . -7116) (undo-tree-id45173 . -1) (undo-tree-id45174 . -1) 7117 (7115 . 7117) (7111 . 7115)) nil (26157 4312 656146 143000) 0 nil])
([nil nil ((7171 . 7172) (apply yas--snippet-revive 7163 7171 #s(yas--snippet nil nil #s(yas--exit 7171 nil) 221 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7171 nil) 221 nil nil nil nil)) (7163 . 7171) (#("unwrap()$0" 0 10 (fontified nil)) . 7163) (7163 . 7173) (#("un" 0 2 (fontified nil)) . 7163) (7163 . 7165) (#("unwrap()" 0 8 (fontified nil)) . -7163) (7163 . 7171) (#("un" 0 2 (fontified t)) . -7163) (undo-tree-id45135 . -2) (undo-tree-id45136 . -2) (undo-tree-id45137 . -2) 7165 (7162 . 7165) (apply yas--snippet-revive 7134 7162 #s(yas--snippet nil (#s(yas--field 1 7150 7161 nil nil nil t #s(yas--exit 7162 nil))) #s(yas--exit 7162 nil) 220 nil #s(yas--field 1 7150 7161 nil nil nil t #s(yas--exit 7162 nil)) nil nil))) nil (26157 4312 656046 890000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7176 . 7177) (#("
" 0 1 (fontified nil)) . -7234) (7172 . 7235) 7171 (t 26157 4312 785851 588000)) nil (26157 4321 12060 494000) 0 nil])
([nil nil ((#("thing" 0 5 (fontified t face font-lock-string-face)) . 7213) (undo-tree-id45197 . -4) (undo-tree-id45198 . -5)) nil (26157 4321 12052 205000) 0 nil])
([nil nil ((7213 . 7220)) nil (26157 4321 12022 287000) 0 nil])
([nil nil ((6515 . 6516) (t 26157 4321 109780 823000)) nil (26157 4974 605758 420000) 0 nil])
([nil nil ((#("25" 0 2 (fontified t)) . 7453) (undo-tree-id45243 . -1) (undo-tree-id45244 . -2) (t 26157 4974 733501 96000)) nil (26157 5026 197193 802000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7453) (undo-tree-id45242 . -1)) nil (26157 5026 197187 762000) 0 nil])
([nil nil ((#("0 " 0 1 (fontified t) 1 2 (fontified t)) . 7453) (undo-tree-id45219 . -1) (undo-tree-id45220 . -2) (undo-tree-id45221 . -2) (undo-tree-id45222 . -2) (undo-tree-id45223 . -2) (undo-tree-id45224 . -2) (undo-tree-id45225 . -2) (undo-tree-id45226 . -2) (undo-tree-id45227 . -2) (undo-tree-id45228 . -2) (undo-tree-id45229 . -2) (undo-tree-id45230 . -2) (undo-tree-id45231 . -2) (undo-tree-id45232 . -2) (undo-tree-id45233 . -2) (undo-tree-id45234 . -2) (undo-tree-id45235 . -2) (undo-tree-id45236 . -2) (undo-tree-id45237 . -2) (undo-tree-id45238 . -2) (undo-tree-id45239 . -2) (undo-tree-id45240 . -2) (undo-tree-id45241 . -2)) nil (26157 5026 197181 349000) 0 nil])
([nil nil ((7453 . 7458)) nil (26157 5026 196767 925000) 0 nil])
([nil nil ((7457 . 7458) (#("b" 0 1 (fontified t)) . -7457) (undo-tree-id45199 . -1) (undo-tree-id45200 . -1) (undo-tree-id45201 . -1) (undo-tree-id45202 . -1) (undo-tree-id45203 . -1) (undo-tree-id45204 . -1) (undo-tree-id45205 . -1) (undo-tree-id45206 . -1) (undo-tree-id45207 . -1) (undo-tree-id45208 . -1) (undo-tree-id45209 . -1) (undo-tree-id45210 . -1) (undo-tree-id45211 . -1) (undo-tree-id45212 . -1) (undo-tree-id45213 . -1) (undo-tree-id45214 . -1) (undo-tree-id45215 . -1) (undo-tree-id45216 . -1) (undo-tree-id45217 . -1) (undo-tree-id45218 . -1) 7458) nil (26157 5026 196757 160000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -7461) (undo-tree-id45248 . -2) (undo-tree-id45249 . -2) (undo-tree-id45250 . -2) (undo-tree-id45251 . -2) (undo-tree-id45252 . -2) (undo-tree-id45253 . -2) (undo-tree-id45254 . -2) (undo-tree-id45255 . -2) (undo-tree-id45256 . -2) (undo-tree-id45257 . -2) (undo-tree-id45258 . -2) 7463 (7461 . 7463) (#("		" 0 2 (fontified nil)) . 7460) (undo-tree-id45259 . -2) (undo-tree-id45260 . -2) (undo-tree-id45261 . -2) (undo-tree-id45262 . -2) (undo-tree-id45263 . -2) (undo-tree-id45264 . -2) (undo-tree-id45265 . -2) (undo-tree-id45266 . -2) (undo-tree-id45267 . -2) (undo-tree-id45268 . -2) (undo-tree-id45269 . -2) (7459 . 7463) (t 26157 5026 329826 105000)) nil (26157 5077 512261 194000) 0 nil])
([nil nil ((7473 . 7482) (7472 . 7474) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -7472) (7472 . 7473) (apply yas--snippet-revive 7463 7473 #s(yas--snippet nil nil #s(yas--exit 7472 nil) 222 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7472 nil) 222 nil nil nil nil)) (7463 . 7473) (#("println!($0)" 0 12 (fontified nil)) . 7463) (7463 . 7475) (#("pri" 0 3 (fontified nil)) . 7463) (7463 . 7466) (#("println!(…)" 0 11 (fontified nil)) . -7463) (7463 . 7474) (#("pri" 0 3 (fontified t)) . -7463) (undo-tree-id45245 . -3) (undo-tree-id45246 . -3) (undo-tree-id45247 . -3) 7466 (7463 . 7466) (7461 . 7463)) nil (26157 5077 512213 173000) 0 nil])
([nil nil ((7484 . 7485)) nil (26157 5077 512170 123000) 0 nil])
([nil nil ((7455 . 7456) (t 26157 5077 609776 871000)) nil (26157 5091 49984 854000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -7455) (undo-tree-id45312 . -1) (undo-tree-id45313 . -1) (undo-tree-id45314 . -1) (undo-tree-id45315 . -1) (undo-tree-id45316 . -1) (undo-tree-id45317 . -1) (undo-tree-id45318 . -1) (undo-tree-id45319 . -1) (undo-tree-id45320 . -1) (undo-tree-id45321 . -1) (undo-tree-id45322 . -1) (undo-tree-id45323 . -1) (undo-tree-id45324 . -1) (undo-tree-id45325 . -1) (undo-tree-id45326 . -1) (undo-tree-id45327 . -1) (undo-tree-id45328 . -1) (undo-tree-id45329 . -1) (undo-tree-id45330 . -1) (undo-tree-id45331 . -1) (undo-tree-id45332 . -1) (undo-tree-id45333 . -1) (undo-tree-id45334 . -1) (undo-tree-id45335 . -1) (undo-tree-id45336 . -1) (undo-tree-id45337 . -1) (undo-tree-id45338 . -1) (undo-tree-id45339 . -1) (undo-tree-id45340 . -1) (#("2" 0 1 (fontified t)) . -7456) (undo-tree-id45341 . 1) (undo-tree-id45342 . 1) (undo-tree-id45343 . -1) (undo-tree-id45344 . -1) (undo-tree-id45345 . -1) (undo-tree-id45346 . -1) (undo-tree-id45347 . -1) (undo-tree-id45348 . -1) (undo-tree-id45349 . -1) (undo-tree-id45350 . -1) (undo-tree-id45351 . -1) (undo-tree-id45352 . -1) (undo-tree-id45353 . -1) 7457 (t 26157 5091 178768 536000)) nil (26157 5140 18363 538000) 0 nil])
([nil nil ((7455 . 7456)) nil (26157 5140 18281 438000) 0 nil])
([nil nil ((7455 . 7456) (#("0" 0 1 (fontified t)) . -7455) (undo-tree-id45270 . -1) (undo-tree-id45271 . -1) (undo-tree-id45272 . -1) (undo-tree-id45273 . -1) (undo-tree-id45274 . -1) (undo-tree-id45275 . -1) (undo-tree-id45276 . -1) (undo-tree-id45277 . -1) (undo-tree-id45278 . -1) (undo-tree-id45279 . -1) (undo-tree-id45280 . -1) (undo-tree-id45281 . -1) (undo-tree-id45282 . -1) (undo-tree-id45283 . -1) (undo-tree-id45284 . -1) (undo-tree-id45285 . -1) (undo-tree-id45286 . -1) (undo-tree-id45287 . -1) (undo-tree-id45288 . -1) (undo-tree-id45289 . -1) (undo-tree-id45290 . -1) (undo-tree-id45291 . -1) (undo-tree-id45292 . -1) (undo-tree-id45293 . -1) (undo-tree-id45294 . -1) (undo-tree-id45295 . -1) (undo-tree-id45296 . -1) (undo-tree-id45297 . -1) (undo-tree-id45298 . -1) (#("5" 0 1 (fontified t)) . -7456) (undo-tree-id45299 . 1) (undo-tree-id45300 . -1) (undo-tree-id45301 . 1) (undo-tree-id45302 . -1) (undo-tree-id45303 . -1) (undo-tree-id45304 . -1) (undo-tree-id45305 . -1) (undo-tree-id45306 . -1) (undo-tree-id45307 . -1) (undo-tree-id45308 . -1) (undo-tree-id45309 . -1) (undo-tree-id45310 . -1) (undo-tree-id45311 . -1) 7457) nil (26157 5140 18268 794000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -7053) (undo-tree-id45354 . -1) (undo-tree-id45355 . -1) (undo-tree-id45356 . -1) (undo-tree-id45357 . -1) (undo-tree-id45358 . -1) (undo-tree-id45359 . -1) (undo-tree-id45360 . -1) (undo-tree-id45361 . -1) (undo-tree-id45362 . -1) (undo-tree-id45363 . -1) (undo-tree-id45364 . -1) 7054 (t 26157 5140 122171 955000)) nil (26157 5174 704940 290000) 0 nil])
([nil nil ((7053 . 7054)) nil (26157 5174 704893 493000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -7376) (undo-tree-id45440 . -1) (undo-tree-id45441 . -1) (undo-tree-id45442 . -1) (undo-tree-id45443 . -1) (undo-tree-id45444 . -1) (undo-tree-id45445 . -1) (undo-tree-id45446 . -1) (undo-tree-id45447 . -1) (undo-tree-id45448 . -1) (undo-tree-id45449 . -1) (undo-tree-id45450 . -1) (undo-tree-id45451 . -1) (undo-tree-id45452 . -1) (undo-tree-id45453 . -1) (undo-tree-id45454 . -1) (undo-tree-id45455 . -1) (undo-tree-id45456 . -1) (undo-tree-id45457 . -1) (undo-tree-id45458 . -1) (undo-tree-id45459 . -1) (undo-tree-id45460 . -1) (undo-tree-id45461 . -1) (undo-tree-id45462 . -1) (undo-tree-id45463 . -1) (undo-tree-id45464 . -1) (undo-tree-id45465 . -1) (undo-tree-id45466 . -1) (undo-tree-id45467 . -1) (undo-tree-id45468 . -1) 7377 (7376 . 7377) (#("	" 0 1 (fontified nil)) . 7375) (7375 . 7376) (7375 . 7376) (t 26157 5174 812429 785000)) nil (26157 5189 211418 197000) 0 nil])
([nil nil ((#("m" 0 1 (fontified nil)) . 7405) (undo-tree-id45365 . -1) (7404 . 7405) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7404 7405 nil nil nil t #s(yas--exit 7406 nil))) #s(yas--exit 7406 nil) 223 nil #s(yas--field 1 7404 7405 nil nil nil t #s(yas--exit 7406 nil)) nil nil)) (7387 . 7406) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 7387) (7387 . 7413) (#("sa" 0 2 (fontified nil)) . 7387) (7387 . 7389) (#("separate_and_set(…)" 0 19 (fontified nil)) . -7387) (7387 . 7406) (#("sa" 0 2 (fontified t)) . -7387) (undo-tree-id45366 . -1) (undo-tree-id45367 . -2) (undo-tree-id45368 . -2) (undo-tree-id45369 . -1) (undo-tree-id45370 . -1) (undo-tree-id45371 . -1) (undo-tree-id45372 . -2) (undo-tree-id45373 . -2) (undo-tree-id45374 . -2) (undo-tree-id45375 . -2) (undo-tree-id45376 . -2) (undo-tree-id45377 . -2) (undo-tree-id45378 . -2) (undo-tree-id45379 . -2) (undo-tree-id45380 . -2) (undo-tree-id45381 . -2) (undo-tree-id45382 . -2) (undo-tree-id45383 . -2) (undo-tree-id45384 . -2) (undo-tree-id45385 . -2) (undo-tree-id45386 . -2) (undo-tree-id45387 . -2) (undo-tree-id45388 . -2) (undo-tree-id45389 . -2) (undo-tree-id45390 . -2) (undo-tree-id45391 . -2) (undo-tree-id45392 . -2) (undo-tree-id45393 . -2) (undo-tree-id45394 . -2) (undo-tree-id45395 . -2) (undo-tree-id45396 . -2) (undo-tree-id45397 . -2) (undo-tree-id45398 . -2) (undo-tree-id45399 . -2) (undo-tree-id45400 . -2) (undo-tree-id45401 . -2) (undo-tree-id45402 . -2) (undo-tree-id45403 . -2) (undo-tree-id45404 . -2) (undo-tree-id45405 . -2) (undo-tree-id45406 . -2) (undo-tree-id45407 . -2) (undo-tree-id45408 . -2) (undo-tree-id45409 . -2) (undo-tree-id45410 . -2) (undo-tree-id45411 . -2) (undo-tree-id45412 . -2) (undo-tree-id45413 . -2) (undo-tree-id45414 . -2) (undo-tree-id45415 . -2) (undo-tree-id45416 . -2) (undo-tree-id45417 . -2) (undo-tree-id45418 . -2) (undo-tree-id45419 . -2) (undo-tree-id45420 . -2) (undo-tree-id45421 . -2) (undo-tree-id45422 . -2) (undo-tree-id45423 . -2) (undo-tree-id45424 . -2) (undo-tree-id45425 . -2) (undo-tree-id45426 . -2) (undo-tree-id45427 . -2) (undo-tree-id45428 . -2) (undo-tree-id45429 . -2) (undo-tree-id45430 . -2) (undo-tree-id45431 . -2) (undo-tree-id45432 . -2) (undo-tree-id45433 . -2) (undo-tree-id45434 . -2) (undo-tree-id45435 . -2) 7389 (7386 . 7389) (7377 . 7386) (#("th" 0 2 (fontified nil)) . 7377) (7377 . 7379) (#("this_scan" 0 9 (fontified nil)) . -7377) (7377 . 7386) (#("th" 0 2 (fontified t)) . -7377) (undo-tree-id45436 . -2) (undo-tree-id45437 . -2) (undo-tree-id45438 . -2) 7379 (7377 . 7379) (7376 . 7377) (#("	" 0 1 (fontified nil)) . 7375) (undo-tree-id45439 . -1) (7376 . 7377) (7375 . 7376)) nil (26157 5189 211343 237000) 0 nil])
([nil nil ((7406 . 7407) (apply yas--snippet-revive 7387 7406 #s(yas--snippet nil (#s(yas--field 1 7404 7405 nil nil nil t #s(yas--exit 7406 nil))) #s(yas--exit 7406 nil) 223 nil #s(yas--field 1 7404 7405 nil nil nil t #s(yas--exit 7406 nil)) nil nil))) nil (26157 5189 211156 693000) 0 nil])
([nil nil ((7280 . 7284) (t 26157 5189 349340 198000)) nil (26157 5196 175720 191000) 0 nil])
([nil nil ((7492 . 7493) (#("1" 0 1 (fontified t)) . -7492) (undo-tree-id45469 . -1) 7493 (t 26157 5196 281767 204000)) nil (26157 5220 941240 997000) 0 nil])
([nil nil ((#("		println!(\"found one\");
" 0 2 (fontified t) 2 10 (fontified t face rust-builtin-formatting-macro) 10 11 (fontified t face (rainbow-delimiters-depth-5-face)) 11 22 (fontified t face font-lock-string-face) 22 23 (fontified t face (rainbow-delimiters-depth-5-face)) 23 24 (fontified t) 24 25 (fontified t)) . 7497) (undo-tree-id45470 . -24) (undo-tree-id45471 . -9) (undo-tree-id45472 . -9) (undo-tree-id45473 . -9) (undo-tree-id45474 . -9) (undo-tree-id45475 . -9) (undo-tree-id45476 . -9) (undo-tree-id45477 . -9) (undo-tree-id45478 . -9) (undo-tree-id45479 . -9) (undo-tree-id45480 . -9) (undo-tree-id45481 . -9) (undo-tree-id45482 . -9) (undo-tree-id45483 . -9) (undo-tree-id45484 . -9) (undo-tree-id45485 . -9) (undo-tree-id45486 . -9) (undo-tree-id45487 . -9) (undo-tree-id45488 . -9) (undo-tree-id45489 . -25) 7506 (t 26157 5221 43255 748000)) nil (26157 5224 231137 655000) 0 nil])
([nil nil ((7721 . 7725) (t 26157 5224 363451 77000)) nil (26157 5480 153166 108000) 0 nil])
([nil nil ((7723 . 7727) (#("    " 0 4 (fontified nil)) . 7722) (undo-tree-id45591 . -4) (7722 . 7727) (#("    " 0 4 (fontified nil)) . 7721) (undo-tree-id45592 . -4) (7721 . 7726) (#("    " 0 4 (fontified nil)) . 7720) (undo-tree-id45593 . -4) (7724 . 7725) (7720 . 7724)) nil (26157 5480 153162 365000) 0 nil])
([nil nil ((7722 . 7726)) nil (26157 5480 153152 750000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5797) (undo-tree-id45589 . -1) 5798 (5797 . 5798) (#("	" 0 1 (fontified nil)) . 5796) (undo-tree-id45590 . -1) (5795 . 5798)) nil (26157 5480 153149 660000) 0 nil])
([nil nil ((5831 . 5834) (#("l" 0 1 (fontified t)) . -5831) (undo-tree-id45575 . -1) (undo-tree-id45576 . -1) 5832 (5830 . 5832) (5828 . 5830) (5826 . 5828) (5825 . 5826) (#("s" 0 1 (fontified t)) . -5825) (undo-tree-id45577 . -1) (undo-tree-id45578 . -1) (#("e" 0 1 (fontified t)) . -5826) (undo-tree-id45579 . -1) (undo-tree-id45580 . -1) (#("l" 0 1 (fontified t)) . -5827) (undo-tree-id45581 . -1) (undo-tree-id45582 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -5828) (undo-tree-id45583 . -1) (undo-tree-id45584 . -1) 5829 (5828 . 5829) (5825 . 5828) (#("&" 0 1 (fontified t)) . -5825) (undo-tree-id45585 . -1) 5826 (5825 . 5826) (5816 . 5826) (5813 . 5816) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -5813) (undo-tree-id45586 . -1) (#("v" 0 1 (fontified t face font-lock-function-name-face)) . -5814) (undo-tree-id45587 . -1) 5815 (5809 . 5815) (5805 . 5809) (#("    " 0 4 (fontified nil)) . 5804) (undo-tree-id45588 . -4) (5808 . 5809) (5804 . 5808)) nil (26157 5480 153137 976000) 0 nil])
([nil nil ((5835 . 5836)) nil (26157 5480 153106 902000) 0 nil])
([nil nil ((5848 . 5853) (#("us" 0 2 (fontified nil)) . 5848) (5848 . 5850) (#("usize" 0 5 (fontified nil)) . -5848) (5848 . 5853) (#("us" 0 2 (fontified t)) . -5848) (undo-tree-id45567 . -2) (undo-tree-id45568 . -2) 5850 (5844 . 5850) (#(":" 0 1 (fontified t)) . -5844) (undo-tree-id45569 . -1) 5845 (5844 . 5845) (#(" " 0 1 (fontified t)) . -5844) (undo-tree-id45570 . -1) 5845 (5844 . 5845) (5839 . 5844) (#("usi" 0 3 (fontified nil)) . 5839) (5839 . 5842) (#("usize" 0 5 (fontified nil)) . -5839) (5839 . 5844) (#("usi" 0 3 (fontified t)) . -5839) (undo-tree-id45571 . -3) (undo-tree-id45572 . -3) 5842 (5841 . 5842) (5838 . 5841) (5837 . 5838) (5836 . 5837) (#("x" 0 1 (fontified t)) . -5836) (undo-tree-id45573 . -1) (undo-tree-id45574 . -1) 5837 (5834 . 5837)) nil (26157 5480 153098 877000) 0 nil])
([nil nil ((5857 . 5858) (5858 . 5862) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5857) (5857 . 5858) (5856 . 5858) (5855 . 5857) (#(" " 0 1 (fontified t)) . -5855) (undo-tree-id45566 . -1) 5856 (5855 . 5856)) nil (26157 5480 153073 15000) 0 nil])
([nil nil ((5865 . 5868) (#("=" 0 1 (fontified t)) . -5865) (undo-tree-id45493 . -1) (undo-tree-id45494 . -1) (undo-tree-id45495 . -1) (undo-tree-id45496 . -1) (undo-tree-id45497 . -1) (undo-tree-id45498 . -1) (undo-tree-id45499 . -1) (undo-tree-id45500 . -1) (undo-tree-id45501 . -1) (undo-tree-id45502 . -1) (undo-tree-id45503 . -1) (undo-tree-id45504 . -1) (undo-tree-id45505 . -1) (undo-tree-id45506 . -1) (undo-tree-id45507 . -1) (undo-tree-id45508 . -1) (undo-tree-id45509 . -1) (undo-tree-id45510 . -1) (undo-tree-id45511 . -1) (undo-tree-id45512 . -1) (undo-tree-id45513 . -1) (undo-tree-id45514 . -1) (undo-tree-id45515 . -1) (undo-tree-id45516 . -1) (undo-tree-id45517 . -1) (undo-tree-id45518 . -1) (undo-tree-id45519 . -1) (undo-tree-id45520 . -1) (undo-tree-id45521 . -1) (undo-tree-id45522 . -1) (undo-tree-id45523 . -1) (undo-tree-id45524 . -1) (undo-tree-id45525 . -1) (undo-tree-id45526 . -1) (undo-tree-id45527 . -1) (undo-tree-id45528 . -1) (undo-tree-id45529 . -1) (undo-tree-id45530 . -1) (undo-tree-id45531 . -1) (undo-tree-id45532 . -1) (undo-tree-id45533 . -1) (undo-tree-id45534 . -1) (undo-tree-id45535 . -1) (undo-tree-id45536 . -1) (undo-tree-id45537 . -1) (undo-tree-id45538 . -1) (undo-tree-id45539 . -1) (undo-tree-id45540 . -1) (undo-tree-id45541 . -1) (undo-tree-id45542 . -1) (undo-tree-id45543 . -1) (undo-tree-id45544 . -1) (undo-tree-id45545 . -1) (undo-tree-id45546 . -1) (undo-tree-id45547 . -1) (undo-tree-id45548 . -1) (undo-tree-id45549 . -1) (undo-tree-id45550 . -1) (undo-tree-id45551 . -1) (undo-tree-id45552 . -1) (undo-tree-id45553 . -1) (undo-tree-id45554 . -1) (undo-tree-id45555 . -1) (undo-tree-id45556 . -1) (undo-tree-id45557 . -1) (undo-tree-id45558 . -1) (undo-tree-id45559 . -1) (undo-tree-id45560 . -1) (undo-tree-id45561 . -1) (undo-tree-id45562 . -1) (undo-tree-id45563 . -1) 5866 (5865 . 5866) (5863 . 5865) (5862 . 5863) (5858 . 5862) (#("se" 0 2 (fontified nil)) . 5858) (5858 . 5860) (#("self" 0 4 (fontified nil)) . -5858) (5858 . 5862) (#("se" 0 2 (fontified t)) . -5858) (undo-tree-id45564 . -2) (undo-tree-id45565 . -2) 5860 (5858 . 5860)) nil (26157 5480 153057 832000) 0 nil])
([nil nil ((5837 . 5838)) nil (26157 5480 152927 166000) 0 nil])
([nil nil ((5848 . 5849)) nil (26157 5480 152925 235000) 0 nil])
([nil nil ((5872 . 5873) (5871 . 5872) (5870 . 5871)) nil (26157 5480 152923 9000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5874 . 5875) (#("
" 0 1 (fontified nil)) . -5888) (5873 . 5889) 5872) nil (26157 5480 152919 552000) 0 nil])
([nil nil ((5880 . 5881) (#("x" 0 1 (fontified t)) . 5880) (undo-tree-id45491 . -1) (undo-tree-id45492 . -1)) nil (26157 5480 152914 209000) 0 nil])
([nil nil ((5885 . 5886) (#("x" 0 1 (fontified t)) . 5885) (undo-tree-id45490 . -1)) nil (26157 5480 152900 388000) 0 nil])
([nil nil ((#("    
    
//     dbg!(height);
//     dbg!(width);
//     dbg!(map_data.get(379, 523));

//     let newimage = map_data.to_pgm();

//     let mut thing = map_data.lidar_reading_no_rotation(map_data.width / 2, map_data.height / 2, 100).get_points();
//     let mut thing2 = map_data.lidar_reading_no_rotation(map_data.width / 2 + 50, map_data.height / 2 + 0, 100).get_points();



//     thing.to_pbm().write_as_binary(\"data2.pbm\").expect(\"couldn't write bitch\");
//     thing2.to_pbm().write_as_binary(\"data4.pbm\").expect(\"couldn't write bitch\");
    

//     thing.separate_and_set(10);
//     thing2.separate_and_set(10);

//     thing.to_pbm().write_as_binary(\"data3.pbm\").expect(\"couldn't write bitch\");
//     thing2.to_pbm().write_as_binary(\"data5.pbm\").expect(\"couldn't write bitch\");

// //    thing2.separate_and_set(5);
    
//     let index = jaccard_index(&thing, &thing2, 0);

//     dbg!(index);
" 0 4 (fontified t) 4 5 (fontified t) 5 9 (fontified t) 9 10 (fontified t) 10 13 (fontified t face font-lock-comment-delimiter-face) 13 16 (fontified t face font-lock-comment-delimiter-face) 16 17 (fontified t face font-lock-comment-delimiter-face) 17 18 (fontified t face font-lock-comment-face) 18 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face) 21 22 (fontified t face font-lock-comment-face) 22 25 (fontified t face font-lock-comment-face) 25 28 (fontified t face font-lock-comment-face) 28 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face) 31 34 (fontified t face font-lock-comment-delimiter-face) 34 36 (fontified t face font-lock-comment-delimiter-face) 36 38 (fontified t face font-lock-comment-delimiter-face) 38 39 (fontified t face font-lock-comment-face) 39 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face font-lock-comment-face) 43 44 (fontified t face font-lock-comment-face) 44 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-face) 46 48 (fontified t face font-lock-comment-face) 48 49 (fontified t face font-lock-comment-face) 49 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 54 (fontified t face font-lock-comment-delimiter-face) 54 56 (fontified t face font-lock-comment-delimiter-face) 56 58 (fontified t face font-lock-comment-delimiter-face) 58 59 (fontified t face font-lock-comment-face) 59 60 (fontified t face font-lock-comment-face) 60 62 (fontified t face font-lock-comment-face) 62 63 (fontified t face font-lock-comment-face) 63 68 (fontified t face font-lock-comment-face) 68 75 (fontified t face font-lock-comment-face) 75 76 (fontified t face font-lock-comment-face) 76 77 (fontified t face font-lock-comment-face) 77 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face) 80 84 (fontified t face font-lock-comment-face) 84 85 (fontified t face font-lock-comment-face) 85 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 89 (fontified t) 89 92 (fontified t face font-lock-comment-delimiter-face) 92 94 (fontified t face font-lock-comment-delimiter-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 99 (fontified t face font-lock-comment-face) 99 100 (fontified t face font-lock-comment-face) 100 101 (fontified t face font-lock-comment-face) 101 103 (fontified t face font-lock-comment-face) 103 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 109 (fontified t face font-lock-comment-face) 109 111 (fontified t face font-lock-comment-face) 111 113 (fontified t face font-lock-comment-face) 113 116 (fontified t face font-lock-comment-face) 116 120 (fontified t face font-lock-comment-face) 120 126 (fontified t face font-lock-comment-face) 126 127 (fontified t face font-lock-comment-face) 127 128 (fontified t face font-lock-comment-face) 128 130 (fontified t face font-lock-comment-face) 130 131 (fontified t) 131 134 (fontified t face font-lock-comment-delimiter-face) 134 136 (fontified t face font-lock-comment-delimiter-face) 136 138 (fontified t face font-lock-comment-delimiter-face) 138 141 (fontified t face font-lock-comment-face) 141 142 (fontified t face font-lock-comment-face) 142 145 (fontified t face font-lock-comment-face) 145 146 (fontified t face font-lock-comment-face) 146 149 (fontified t face font-lock-comment-face) 149 151 (fontified t face font-lock-comment-face) 151 152 (fontified t face font-lock-comment-face) 152 153 (face font-lock-comment-face fontified t) 153 154 (face font-lock-comment-face fontified t) 154 158 (face font-lock-comment-face fontified t) 158 163 (face font-lock-comment-face fontified t) 163 173 (face font-lock-comment-face fontified t) 173 174 (face font-lock-comment-face fontified t) 174 175 (face font-lock-comment-face fontified t) 175 176 (face font-lock-comment-face fontified t) 176 177 (face font-lock-comment-face fontified t) 177 183 (face font-lock-comment-face fontified t) 183 188 (face font-lock-comment-face fontified t) 188 189 (face font-lock-comment-face fontified t) 189 192 (face font-lock-comment-face fontified t) 192 194 (face font-lock-comment-face fontified t) 194 195 (face font-lock-comment-face fontified t) 195 196 (face font-lock-comment-face fontified t) 196 197 (face font-lock-comment-face fontified t) 197 198 (face font-lock-comment-face fontified t) 198 200 (face font-lock-comment-face fontified t) 200 202 (face font-lock-comment-face fontified t) 202 204 (face font-lock-comment-face fontified t) 204 205 (face font-lock-comment-face fontified t) 205 206 (face font-lock-comment-face fontified t) 206 207 (face font-lock-comment-face fontified t) 207 209 (face font-lock-comment-face fontified t) 209 212 (face font-lock-comment-face fontified t) 212 213 (face font-lock-comment-face fontified t) 213 214 (face font-lock-comment-face fontified t) 214 215 (face font-lock-comment-face fontified t) 215 216 (face font-lock-comment-face fontified t) 216 218 (face font-lock-comment-face fontified t) 218 219 (face font-lock-comment-face fontified t) 219 221 (face font-lock-comment-face fontified t) 221 222 (face font-lock-comment-face fontified t) 222 223 (face font-lock-comment-face fontified t) 223 224 (face font-lock-comment-face fontified t) 224 228 (face font-lock-comment-face fontified t) 228 229 (face font-lock-comment-face fontified t) 229 231 (face font-lock-comment-face fontified t) 231 233 (face font-lock-comment-face fontified t) 233 234 (face font-lock-comment-face fontified t) 234 235 (face font-lock-comment-face fontified t) 235 236 (face font-lock-comment-face fontified t) 236 240 (face font-lock-comment-face fontified t) 240 241 (face font-lock-comment-face fontified t) 241 242 (face font-lock-comment-face fontified t) 242 243 (face font-lock-comment-face fontified t) 243 244 (face font-lock-comment-face fontified t) 244 245 (face font-lock-comment-face fontified t) 245 246 (face font-lock-comment-face fontified t) 246 247 (face font-lock-comment-face fontified t) 247 248 (face font-lock-comment-face fontified t) 248 249 (face font-lock-comment-face fontified t) 249 252 (fontified t face font-lock-comment-delimiter-face) 252 253 (fontified t face font-lock-comment-delimiter-face) 253 256 (fontified t face font-lock-comment-delimiter-face) 256 259 (fontified t face font-lock-comment-face) 259 260 (fontified t face font-lock-comment-face) 260 263 (fontified t face font-lock-comment-face) 263 264 (fontified t face font-lock-comment-face) 264 266 (fontified t face font-lock-comment-face) 266 269 (fontified t face font-lock-comment-face) 269 270 (fontified t face font-lock-comment-face) 270 273 (fontified t face font-lock-comment-face) 273 274 (fontified t face font-lock-comment-face) 274 277 (fontified t face font-lock-comment-face) 277 279 (fontified t face font-lock-comment-face) 279 282 (fontified t face font-lock-comment-face) 282 285 (fontified t face font-lock-comment-face) 285 291 (fontified t face font-lock-comment-face) 291 302 (fontified t face font-lock-comment-face) 302 306 (fontified t face font-lock-comment-face) 306 307 (fontified t face font-lock-comment-face) 307 308 (fontified t face font-lock-comment-face) 308 314 (fontified t face font-lock-comment-face) 314 317 (fontified t face font-lock-comment-face) 317 325 (fontified t face font-lock-comment-face) 325 331 (fontified t face font-lock-comment-face) 331 333 (fontified t face font-lock-comment-face) 333 339 (fontified t face font-lock-comment-face) 339 340 (fontified t face font-lock-comment-face) 340 342 (fontified t face font-lock-comment-face) 342 351 (fontified t face font-lock-comment-face) 351 356 (fontified t face font-lock-comment-face) 356 358 (fontified t face font-lock-comment-face) 358 361 (fontified t face font-lock-comment-face) 361 362 (fontified t face font-lock-comment-face) 362 363 (fontified t face font-lock-comment-face) 363 365 (fontified t face font-lock-comment-face) 365 373 (fontified t face font-lock-comment-face) 373 374 (fontified t face font-lock-comment-face) 374 375 (fontified t face font-lock-comment-face) 375 377 (fontified t face font-lock-comment-face) 377 378 (fontified t) 378 379 (fontified t) 379 380 (fontified t) 380 383 (fontified t face font-lock-comment-delimiter-face) 383 386 (fontified t face font-lock-comment-delimiter-face) 386 387 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 387 393 (fontified t face font-lock-comment-face) 393 395 (fontified t face font-lock-comment-face) 395 396 (fontified t face font-lock-comment-face) 396 399 (fontified t face font-lock-comment-face) 399 400 (fontified t face font-lock-comment-face) 400 401 (fontified t face font-lock-comment-face) 401 402 (fontified t face font-lock-comment-face) 402 410 (fontified t face font-lock-comment-face) 410 414 (fontified t face font-lock-comment-face) 414 417 (fontified t face font-lock-comment-face) 417 418 (fontified t face font-lock-comment-face) 418 419 (fontified t face font-lock-comment-face) 419 421 (fontified t face font-lock-comment-face) 421 422 (fontified t face font-lock-comment-face) 422 428 (fontified t face font-lock-comment-face) 428 429 (fontified t face font-lock-comment-face) 429 430 (fontified t face font-lock-comment-face) 430 431 (fontified t face font-lock-comment-face) 431 433 (fontified t face font-lock-comment-face) 433 437 (fontified t face font-lock-comment-face) 437 438 (fontified t face font-lock-comment-face) 438 439 (fontified t face font-lock-comment-face) 439 440 (fontified t face font-lock-comment-face) 440 441 (fontified t face font-lock-comment-face) 441 444 (fontified t face font-lock-comment-face) 444 450 (fontified t face font-lock-comment-face) 450 454 (fontified t face font-lock-comment-face) 454 456 (fontified t face font-lock-comment-face) 456 458 (fontified t face font-lock-comment-face) 458 460 (fontified t face font-lock-comment-face) 460 461 (fontified t face font-lock-comment-face) 461 462 (fontified t face font-lock-comment-face) 462 463 (fontified t face font-lock-comment-face) 463 464 (fontified t face font-lock-comment-delimiter-face) 464 466 (fontified t face font-lock-comment-delimiter-face) 466 467 (fontified t face font-lock-comment-delimiter-face) 467 468 (fontified t face font-lock-comment-delimiter-face) 468 469 (fontified t face font-lock-comment-delimiter-face) 469 470 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 470 473 (fontified t face font-lock-comment-face) 473 477 (fontified t face font-lock-comment-face) 477 483 (fontified t face font-lock-comment-face) 483 484 (fontified t face font-lock-comment-face) 484 485 (fontified t face font-lock-comment-face) 485 486 (fontified t face font-lock-comment-face) 486 488 (fontified t face font-lock-comment-face) 488 490 (fontified t face font-lock-comment-face) 490 493 (fontified t face font-lock-comment-face) 493 494 (fontified t face font-lock-comment-face) 494 495 (fontified t face font-lock-comment-face) 495 497 (fontified t face font-lock-comment-face) 497 498 (fontified t face font-lock-comment-face) 498 499 (fontified t face font-lock-comment-face) 499 500 (fontified t face font-lock-comment-face) 500 501 (fontified t face font-lock-comment-face) 501 502 (fontified t face font-lock-comment-face) 502 503 (fontified t face font-lock-comment-face) 503 504 (fontified t face font-lock-comment-face) 504 505 (fontified t face font-lock-comment-face) 505 506 (fontified t face font-lock-comment-face) 506 508 (fontified t face font-lock-comment-face) 508 509 (fontified t face font-lock-comment-face) 509 510 (fontified t face font-lock-comment-face) 510 512 (fontified t face font-lock-comment-face) 512 513 (fontified t face font-lock-comment-face) 513 514 (fontified t face font-lock-comment-face) 514 515 (fontified t face font-lock-comment-face) 515 521 (fontified t face font-lock-comment-face) 521 522 (fontified t face font-lock-comment-face) 522 524 (fontified t face font-lock-comment-face) 524 534 (fontified t face font-lock-comment-face) 534 538 (fontified t face font-lock-comment-face) 538 540 (fontified t face font-lock-comment-face) 540 542 (fontified t face font-lock-comment-face) 542 544 (fontified t face font-lock-comment-face) 544 545 (fontified t face font-lock-comment-face) 545 546 (fontified t face font-lock-comment-face) 546 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 552 (fontified t) 552 553 (fontified t) 553 556 (fontified t face font-lock-comment-delimiter-face) 556 560 (fontified t face font-lock-comment-delimiter-face) 560 566 (fontified t face font-lock-comment-face) 566 582 (fontified t face font-lock-comment-face) 582 583 (fontified t face font-lock-comment-face) 583 585 (fontified t face font-lock-comment-face) 585 586 (fontified t face font-lock-comment-face) 586 588 (fontified t face font-lock-comment-face) 588 591 (fontified t face font-lock-comment-delimiter-face) 591 595 (fontified t face font-lock-comment-delimiter-face) 595 602 (fontified t face font-lock-comment-face) 602 618 (fontified t face font-lock-comment-face) 618 619 (fontified t face font-lock-comment-face) 619 621 (fontified t face font-lock-comment-face) 621 622 (fontified t face font-lock-comment-face) 622 623 (fontified t face font-lock-comment-face) 623 624 (fontified t face font-lock-comment-face) 624 625 (fontified t) 625 628 (fontified t face font-lock-comment-delimiter-face) 628 630 (fontified t face font-lock-comment-delimiter-face) 630 631 (fontified t face font-lock-comment-delimiter-face) 631 632 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 632 638 (fontified t face font-lock-comment-face) 638 642 (fontified t face font-lock-comment-face) 642 644 (fontified t face font-lock-comment-face) 644 645 (fontified t face font-lock-comment-face) 645 646 (fontified t face font-lock-comment-face) 646 647 (fontified t face font-lock-comment-face) 647 651 (fontified t face font-lock-comment-face) 651 662 (fontified t face font-lock-comment-face) 662 663 (fontified t face font-lock-comment-face) 663 664 (fontified t face font-lock-comment-face) 664 666 (fontified t face font-lock-comment-face) 666 667 (fontified t face font-lock-comment-face) 667 668 (fontified t face font-lock-comment-face) 668 669 (fontified t face font-lock-comment-face) 669 673 (fontified t face font-lock-comment-face) 673 674 (fontified t face font-lock-comment-face) 674 675 (fontified t face font-lock-comment-face) 675 676 (fontified t face font-lock-comment-face) 676 682 (fontified t face font-lock-comment-face) 682 683 (fontified t face font-lock-comment-face) 683 685 (fontified t face font-lock-comment-face) 685 695 (fontified t face font-lock-comment-face) 695 699 (fontified t face font-lock-comment-face) 699 701 (fontified t face font-lock-comment-face) 701 703 (fontified t face font-lock-comment-face) 703 705 (fontified t face font-lock-comment-face) 705 706 (fontified t face font-lock-comment-face) 706 707 (fontified t face font-lock-comment-face) 707 708 (fontified t face font-lock-comment-face) 708 711 (fontified t face font-lock-comment-delimiter-face) 711 714 (fontified t face font-lock-comment-delimiter-face) 714 715 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 715 722 (fontified t face font-lock-comment-face) 722 728 (fontified t face font-lock-comment-face) 728 729 (fontified t face font-lock-comment-face) 729 730 (fontified t face font-lock-comment-face) 730 731 (fontified t face font-lock-comment-face) 731 746 (fontified t face font-lock-comment-face) 746 747 (fontified t face font-lock-comment-face) 747 748 (fontified t face font-lock-comment-face) 748 749 (fontified t face font-lock-comment-face) 749 750 (face font-lock-comment-face fontified t) 750 751 (face font-lock-comment-face fontified t) 751 753 (face font-lock-comment-face fontified t) 753 757 (face font-lock-comment-face fontified t) 757 758 (face font-lock-comment-face fontified t) 758 759 (face font-lock-comment-face fontified t) 759 760 (face font-lock-comment-face fontified t) 760 766 (face font-lock-comment-face fontified t) 766 767 (face font-lock-comment-face fontified t) 767 769 (face font-lock-comment-face fontified t) 769 770 (face font-lock-comment-face fontified t) 770 779 (face font-lock-comment-face fontified t) 779 783 (face font-lock-comment-face fontified t) 783 785 (face font-lock-comment-face fontified t) 785 787 (face font-lock-comment-face fontified t) 787 789 (face font-lock-comment-face fontified t) 789 790 (face font-lock-comment-face fontified t) 790 791 (face font-lock-comment-face fontified t) 791 792 (face font-lock-comment-face fontified t) 792 793 (fontified t) 793 796 (fontified t face font-lock-comment-delimiter-face) 796 798 (fontified t face font-lock-comment-face) 798 802 (fontified t face font-lock-comment-face) 802 809 (fontified t face font-lock-comment-face) 809 825 (fontified t face font-lock-comment-face) 825 826 (fontified t face font-lock-comment-face) 826 827 (fontified t face font-lock-comment-face) 827 828 (fontified t face font-lock-comment-face) 828 829 (fontified t face font-lock-comment-face) 829 830 (fontified t face font-lock-comment-face) 830 834 (fontified t) 834 835 (fontified t) 835 838 (fontified t face font-lock-comment-delimiter-face) 838 842 (fontified t face font-lock-comment-delimiter-face) 842 845 (fontified t face font-lock-comment-face) 845 846 (fontified t face font-lock-comment-face) 846 847 (fontified t face font-lock-comment-face) 847 851 (fontified t face font-lock-comment-face) 851 854 (fontified t face font-lock-comment-face) 854 867 (fontified t face font-lock-comment-face) 867 868 (fontified t face font-lock-comment-face) 868 869 (fontified t face font-lock-comment-face) 869 874 (fontified t face font-lock-comment-face) 874 876 (fontified t face font-lock-comment-face) 876 877 (fontified t face font-lock-comment-face) 877 883 (fontified t face font-lock-comment-face) 883 886 (fontified t face font-lock-comment-face) 886 887 (fontified t face font-lock-comment-face) 887 889 (fontified t face font-lock-comment-face) 889 890 (fontified t) 890 893 (fontified t face font-lock-comment-delimiter-face) 893 894 (fontified t face font-lock-comment-delimiter-face) 894 897 (fontified t face font-lock-comment-delimiter-face) 897 901 (fontified t face font-lock-comment-face) 901 902 (fontified t face font-lock-comment-face) 902 904 (fontified t face font-lock-comment-face) 904 905 (fontified t face font-lock-comment-face) 905 906 (fontified t face font-lock-comment-face) 906 907 (fontified t face font-lock-comment-face) 907 908 (fontified t face font-lock-comment-face) 908 909 (fontified t face font-lock-comment-face) 909 910 (fontified t face font-lock-comment-face)) . 7819) (undo-tree-id45594 . -909) (undo-tree-id45595 . -909) (undo-tree-id45596 . -89) (undo-tree-id45597 . -89) (undo-tree-id45598 . -909) (undo-tree-id45599 . -89) (undo-tree-id45600 . -89) (undo-tree-id45601 . -619) (undo-tree-id45602 . -89) (undo-tree-id45603 . -89) (undo-tree-id45604 . -89) (undo-tree-id45605 . -89) (undo-tree-id45606 . -89) (undo-tree-id45607 . -89) (undo-tree-id45608 . -89) (undo-tree-id45609 . -89) (undo-tree-id45610 . -89) (undo-tree-id45611 . -234) (undo-tree-id45612 . -234) (undo-tree-id45613 . -238) (undo-tree-id45614 . -238) (undo-tree-id45615 . -238) (undo-tree-id45616 . -238) (undo-tree-id45617 . -910) (undo-tree-id45618 . -890) (undo-tree-id45619 . -909) (undo-tree-id45620 . -910) (undo-tree-id45621 . -909) (undo-tree-id45622 . -377) (undo-tree-id45623 . -377) (undo-tree-id45624 . -377) (undo-tree-id45625 . -377) (undo-tree-id45626 . -377) (undo-tree-id45627 . -377) (undo-tree-id45628 . -377) (undo-tree-id45629 . -377) (undo-tree-id45630 . -377) (undo-tree-id45631 . -378) (undo-tree-id45632 . -378) (undo-tree-id45633 . -378) (undo-tree-id45634 . -378) (undo-tree-id45635 . -378) (undo-tree-id45636 . -378) (undo-tree-id45637 . -378) (undo-tree-id45638 . -378) (undo-tree-id45639 . -378) (undo-tree-id45640 . -379) (undo-tree-id45641 . -379) (undo-tree-id45642 . -379) (undo-tree-id45643 . -379) (undo-tree-id45644 . -379) (undo-tree-id45645 . -379) (undo-tree-id45646 . -379) (undo-tree-id45647 . -379) (undo-tree-id45648 . -379) (undo-tree-id45649 . -380) (undo-tree-id45650 . -380) (undo-tree-id45651 . -380) (undo-tree-id45652 . -380) (undo-tree-id45653 . -380) (undo-tree-id45654 . -380) (undo-tree-id45655 . -380) (undo-tree-id45656 . -380) (undo-tree-id45657 . -380) (undo-tree-id45658 . -380) (undo-tree-id45659 . -380) (undo-tree-id45660 . -380) (undo-tree-id45661 . -380) (undo-tree-id45662 . -380) (undo-tree-id45663 . -380) (undo-tree-id45664 . -380) (undo-tree-id45665 . -463) (undo-tree-id45666 . -463) (undo-tree-id45667 . -463) (undo-tree-id45668 . -463) (undo-tree-id45669 . -463) (undo-tree-id45670 . -463) (undo-tree-id45671 . -463) (undo-tree-id45672 . -463) (undo-tree-id45673 . -463) (undo-tree-id45674 . -463) (undo-tree-id45675 . -463) (undo-tree-id45676 . -463) (undo-tree-id45677 . -463) (undo-tree-id45678 . -463) (undo-tree-id45679 . -463) (undo-tree-id45680 . -463) (undo-tree-id45681 . -547) (undo-tree-id45682 . -547) (undo-tree-id45683 . -547) (undo-tree-id45684 . -547) (undo-tree-id45685 . -547) (undo-tree-id45686 . -547) (undo-tree-id45687 . -547) (undo-tree-id45688 . -547) (undo-tree-id45689 . -547) (undo-tree-id45690 . -552) (undo-tree-id45691 . -552) (undo-tree-id45692 . -552) (undo-tree-id45693 . -552) (undo-tree-id45694 . -552) (undo-tree-id45695 . -552) (undo-tree-id45696 . -552) (undo-tree-id45697 . -552) (undo-tree-id45698 . -552) (undo-tree-id45699 . -553) (undo-tree-id45700 . -553) (undo-tree-id45701 . -553) (undo-tree-id45702 . -553) (undo-tree-id45703 . -553) (undo-tree-id45704 . -553) (undo-tree-id45705 . -553) (undo-tree-id45706 . -553) (undo-tree-id45707 . -553) (undo-tree-id45708 . -588) (undo-tree-id45709 . -588) (undo-tree-id45710 . -588) (undo-tree-id45711 . -588) (undo-tree-id45712 . -588) (undo-tree-id45713 . -588) (undo-tree-id45714 . -588) (undo-tree-id45715 . -588) (undo-tree-id45716 . -588) (undo-tree-id45717 . -624) (undo-tree-id45718 . -624) (undo-tree-id45719 . -624) (undo-tree-id45720 . -624) (undo-tree-id45721 . -624) (undo-tree-id45722 . -624) (undo-tree-id45723 . -624) (undo-tree-id45724 . -624) (undo-tree-id45725 . -624) (undo-tree-id45726 . -625) (undo-tree-id45727 . -625) (undo-tree-id45728 . -625) (undo-tree-id45729 . -625) (undo-tree-id45730 . -625) (undo-tree-id45731 . -625) (undo-tree-id45732 . -625) (undo-tree-id45733 . -625) (undo-tree-id45734 . -625) (undo-tree-id45735 . -625) (undo-tree-id45736 . -625) (undo-tree-id45737 . -625) (undo-tree-id45738 . -625) (undo-tree-id45739 . -625) (undo-tree-id45740 . -625) (undo-tree-id45741 . -625) (undo-tree-id45742 . -708) (undo-tree-id45743 . -708) (undo-tree-id45744 . -708) (undo-tree-id45745 . -708) (undo-tree-id45746 . -708) (undo-tree-id45747 . -708) (undo-tree-id45748 . -708) (undo-tree-id45749 . -708) (undo-tree-id45750 . -708) (undo-tree-id45751 . -708) (undo-tree-id45752 . -708) (undo-tree-id45753 . -708) (undo-tree-id45754 . -708) (undo-tree-id45755 . -708) (undo-tree-id45756 . -708) (undo-tree-id45757 . -708) (undo-tree-id45758 . -792) (undo-tree-id45759 . -792) (undo-tree-id45760 . -792) (undo-tree-id45761 . -792) (undo-tree-id45762 . -792) (undo-tree-id45763 . -792) (undo-tree-id45764 . -792) (undo-tree-id45765 . -792) (undo-tree-id45766 . -792) (undo-tree-id45767 . -793) (undo-tree-id45768 . -793) (undo-tree-id45769 . -793) (undo-tree-id45770 . -793) (undo-tree-id45771 . -793) (undo-tree-id45772 . -793) (undo-tree-id45773 . -793) (undo-tree-id45774 . -793) (undo-tree-id45775 . -793) (undo-tree-id45776 . -830) (undo-tree-id45777 . -830) (undo-tree-id45778 . -830) (undo-tree-id45779 . -830) (undo-tree-id45780 . -830) (undo-tree-id45781 . -830) (undo-tree-id45782 . -830) (undo-tree-id45783 . -830) (undo-tree-id45784 . -830) (undo-tree-id45785 . -835) (undo-tree-id45786 . -835) (undo-tree-id45787 . -835) (undo-tree-id45788 . -835) (undo-tree-id45789 . -835) (undo-tree-id45790 . -835) (undo-tree-id45791 . -835) (undo-tree-id45792 . -835) (undo-tree-id45793 . -835) (undo-tree-id45794 . -889) (undo-tree-id45795 . -889) (undo-tree-id45796 . -889) (undo-tree-id45797 . -889) (undo-tree-id45798 . -889) (undo-tree-id45799 . -889) (undo-tree-id45800 . -889) (undo-tree-id45801 . -889) (undo-tree-id45802 . -889) (undo-tree-id45803 . -890) (undo-tree-id45804 . -890) (undo-tree-id45805 . -890) (undo-tree-id45806 . -890) (undo-tree-id45807 . -890) (undo-tree-id45808 . -890) (undo-tree-id45809 . -890) (undo-tree-id45810 . -890) (undo-tree-id45811 . -890) (undo-tree-id45812 . -890) (undo-tree-id45813 . -890) (undo-tree-id45814 . -890) (undo-tree-id45815 . -890) (undo-tree-id45816 . -890) (undo-tree-id45817 . -890) (undo-tree-id45818 . -890) (undo-tree-id45819 . -890) (undo-tree-id45820 . -890) (undo-tree-id45821 . -890) (undo-tree-id45822 . -890) (undo-tree-id45823 . -890) (undo-tree-id45824 . -890) (undo-tree-id45825 . -890) (undo-tree-id45826 . -890) (undo-tree-id45827 . -890) (undo-tree-id45828 . -890) (undo-tree-id45829 . -890) (undo-tree-id45830 . -890) (undo-tree-id45831 . -890) (undo-tree-id45832 . -890) (undo-tree-id45833 . -890) (undo-tree-id45834 . -890) (undo-tree-id45835 . -890) (undo-tree-id45836 . -890) (undo-tree-id45837 . -890) (undo-tree-id45838 . -890) (undo-tree-id45839 . -890) (undo-tree-id45840 . -890) (undo-tree-id45841 . -909) (undo-tree-id45842 . -909) (undo-tree-id45843 . -909) (undo-tree-id45844 . -909) (undo-tree-id45845 . -909) (undo-tree-id45846 . -909) (undo-tree-id45847 . -909) (undo-tree-id45848 . -909) (undo-tree-id45849 . -909) (undo-tree-id45850 . -909) (undo-tree-id45851 . -910) 8728 (t 26157 5480 287974 404000)) nil (26157 5494 908998 481000) 0 nil])
([nil nil ((7813 . 7817) (t 26157 5495 40568 670000)) nil (26157 5539 741318 153000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6611) (undo-tree-id45916 . -4) 6615 (6610 . 6615)) nil (26157 5539 741315 422000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6611 . 6612) (#("
" 0 1 (fontified nil)) . -6612) (6611 . 6613)) nil (26157 5539 741310 609000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6611 . 6612) (#("
" 0 1 (rear-nonsticky t fontified nil)) . -6612) (6611 . 6613)) nil (26157 5539 741307 724000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6614 . 6615) (#("
" 0 1 (fontified nil)) . -6670) (6610 . 6671) 6551) nil (26157 5539 741304 546000) 0 nil])
([nil nil ((6650 . 6652) (#("0" 0 1 (fontified t)) . -6650) (undo-tree-id45865 . -1) (undo-tree-id45866 . -1) (undo-tree-id45867 . -1) (undo-tree-id45868 . -1) (undo-tree-id45869 . -1) (undo-tree-id45870 . -1) (undo-tree-id45871 . -1) (undo-tree-id45872 . -1) (undo-tree-id45873 . -1) (undo-tree-id45874 . -1) (undo-tree-id45875 . -1) (undo-tree-id45876 . -1) (undo-tree-id45877 . -1) (undo-tree-id45878 . -1) (undo-tree-id45879 . -1) (undo-tree-id45880 . -1) (undo-tree-id45881 . -1) (undo-tree-id45882 . -1) (undo-tree-id45883 . -1) (undo-tree-id45884 . -1) (undo-tree-id45885 . -1) (undo-tree-id45886 . -1) (undo-tree-id45887 . -1) (undo-tree-id45888 . -1) (undo-tree-id45889 . -1) (undo-tree-id45890 . -1) (undo-tree-id45891 . -1) (undo-tree-id45892 . -1) (undo-tree-id45893 . -1) (undo-tree-id45894 . -1) (undo-tree-id45895 . -1) (undo-tree-id45896 . -1) (undo-tree-id45897 . -1) (undo-tree-id45898 . -1) (undo-tree-id45899 . -1) (undo-tree-id45900 . -1) (undo-tree-id45901 . -1) (undo-tree-id45902 . -1) (undo-tree-id45903 . -1) (undo-tree-id45904 . -1) (#("0" 0 1 (fontified t)) . -6651) (undo-tree-id45905 . -1) (undo-tree-id45906 . -1) (undo-tree-id45907 . -1) (undo-tree-id45908 . -1) (undo-tree-id45909 . -1) (undo-tree-id45910 . -1) (undo-tree-id45911 . -1) (undo-tree-id45912 . -1) (undo-tree-id45913 . -1) (undo-tree-id45914 . -1) (undo-tree-id45915 . -1) 6652) nil (26157 5539 741295 620000) 0 nil])
([nil nil ((6655 . 6657) (#("0" 0 1 (fontified t)) . -6655) (undo-tree-id45863 . -1) (#("0" 0 1 (fontified t)) . -6656) (undo-tree-id45864 . -1) 6657) nil (26157 5539 741196 969000) 0 nil])
([nil nil ((6659 . 6661) (#("5" 0 1 (fontified t)) . -6659) (undo-tree-id45852 . -1) (undo-tree-id45853 . -1) (undo-tree-id45854 . -1) (undo-tree-id45855 . -1) (undo-tree-id45856 . -1) (undo-tree-id45857 . -1) (undo-tree-id45858 . -1) (undo-tree-id45859 . -1) (undo-tree-id45860 . -1) (undo-tree-id45861 . -1) (undo-tree-id45862 . -1) 6660) nil (26157 5539 741182 275000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -6607) (undo-tree-id45930 . -1) (undo-tree-id45931 . -1) (undo-tree-id45932 . -1) (undo-tree-id45933 . -1) (undo-tree-id45934 . -1) (undo-tree-id45935 . -1) (undo-tree-id45936 . -1) (undo-tree-id45937 . -1) (undo-tree-id45938 . -1) (undo-tree-id45939 . -1) (undo-tree-id45940 . -1) (undo-tree-id45941 . -1) (undo-tree-id45942 . -1) (undo-tree-id45943 . -1) (undo-tree-id45944 . -1) (undo-tree-id45945 . -1) (undo-tree-id45946 . -1) (undo-tree-id45947 . -1) (undo-tree-id45948 . -1) (undo-tree-id45949 . -1) (undo-tree-id45950 . -1) (undo-tree-id45951 . -1) (undo-tree-id45952 . -1) (undo-tree-id45953 . -1) (undo-tree-id45954 . -1) (undo-tree-id45955 . -1) (undo-tree-id45956 . -1) (undo-tree-id45957 . -1) (undo-tree-id45958 . -1) (undo-tree-id45959 . -1) (undo-tree-id45960 . -1) (undo-tree-id45961 . -1) (undo-tree-id45962 . -1) (undo-tree-id45963 . -1) (undo-tree-id45964 . -1) (undo-tree-id45965 . -1) 6608 (t 26157 5539 850304 724000)) nil (26157 64273 225351 871000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -6667) (undo-tree-id45917 . -1) (undo-tree-id45918 . -1) (undo-tree-id45919 . -1) (undo-tree-id45920 . -1) (undo-tree-id45921 . -1) (undo-tree-id45922 . -1) (undo-tree-id45923 . -1) (undo-tree-id45924 . -1) (undo-tree-id45925 . -1) (undo-tree-id45926 . -1) (undo-tree-id45927 . -1) (undo-tree-id45928 . -1) (undo-tree-id45929 . -1) 6668) nil (26157 64273 225272 842000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6729) (6669 . 6730) 6666 (t 26157 64273 361479 328000)) nil (26157 64355 278307 90000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6789) (6729 . 6790) 6674) nil (26157 64355 278303 383000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6849) (6789 . 6850) 6734) nil (26157 64355 278300 217000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -6709) (undo-tree-id46392 . -1) (undo-tree-id46393 . -1) (undo-tree-id46394 . -1) (undo-tree-id46395 . -1) (undo-tree-id46396 . -1) (undo-tree-id46397 . -1) (undo-tree-id46398 . -1) (undo-tree-id46399 . -1) (undo-tree-id46400 . -1) (undo-tree-id46401 . -1) (undo-tree-id46402 . -1) (undo-tree-id46403 . -1) (undo-tree-id46404 . -1) (undo-tree-id46405 . -1) (undo-tree-id46406 . -1) (undo-tree-id46407 . -1) (undo-tree-id46408 . -1) (undo-tree-id46409 . -1) (undo-tree-id46410 . -1) (undo-tree-id46411 . -1) (undo-tree-id46412 . -1) (undo-tree-id46413 . -1) (undo-tree-id46414 . -1) (undo-tree-id46415 . -1) (undo-tree-id46416 . -1) (undo-tree-id46417 . -1) (undo-tree-id46418 . -1) (undo-tree-id46419 . -1) (undo-tree-id46420 . -1) (undo-tree-id46421 . -1) (undo-tree-id46422 . -1) (undo-tree-id46423 . -1) (undo-tree-id46424 . -1) (undo-tree-id46425 . -1) (undo-tree-id46426 . -1) (undo-tree-id46427 . -1) (undo-tree-id46428 . -1) (undo-tree-id46429 . -1) (undo-tree-id46430 . -1) (undo-tree-id46431 . -1) (undo-tree-id46432 . -1) (undo-tree-id46433 . -1) (undo-tree-id46434 . -1) (undo-tree-id46435 . -1) (undo-tree-id46436 . -1) (undo-tree-id46437 . -1) (undo-tree-id46438 . -1) (undo-tree-id46439 . -1) (undo-tree-id46440 . -1) (undo-tree-id46441 . -1) (undo-tree-id46442 . -1) (undo-tree-id46443 . -1) (undo-tree-id46444 . -1) (undo-tree-id46445 . -1) (undo-tree-id46446 . -1) (undo-tree-id46447 . -1) (undo-tree-id46448 . -1) (undo-tree-id46449 . -1) 6710 (6709 . 6710)) nil (26157 64355 278291 355000) 0 nil])
([nil nil ((6708 . 6709) (#("6" 0 1 (fontified t)) . -6708) (undo-tree-id46164 . -1) (undo-tree-id46165 . -1) (undo-tree-id46166 . -1) (undo-tree-id46167 . -1) (undo-tree-id46168 . -1) (undo-tree-id46169 . -1) (undo-tree-id46170 . -1) (undo-tree-id46171 . -1) (undo-tree-id46172 . -1) (undo-tree-id46173 . -1) (undo-tree-id46174 . -1) (undo-tree-id46175 . -1) (undo-tree-id46176 . -1) (undo-tree-id46177 . -1) (undo-tree-id46178 . -1) (undo-tree-id46179 . -1) (undo-tree-id46180 . -1) (undo-tree-id46181 . -1) (undo-tree-id46182 . -1) (undo-tree-id46183 . -1) (undo-tree-id46184 . -1) (undo-tree-id46185 . -1) (undo-tree-id46186 . -1) (undo-tree-id46187 . -1) (undo-tree-id46188 . -1) (undo-tree-id46189 . -1) (undo-tree-id46190 . -1) (undo-tree-id46191 . -1) (undo-tree-id46192 . -1) (undo-tree-id46193 . -1) (undo-tree-id46194 . -1) (undo-tree-id46195 . -1) (undo-tree-id46196 . -1) (undo-tree-id46197 . -1) (undo-tree-id46198 . -1) (undo-tree-id46199 . -1) (undo-tree-id46200 . -1) (undo-tree-id46201 . -1) (undo-tree-id46202 . -1) (undo-tree-id46203 . -1) (undo-tree-id46204 . -1) (undo-tree-id46205 . -1) (undo-tree-id46206 . -1) (undo-tree-id46207 . -1) (undo-tree-id46208 . -1) (undo-tree-id46209 . -1) (undo-tree-id46210 . -1) (undo-tree-id46211 . -1) (undo-tree-id46212 . -1) (undo-tree-id46213 . -1) (undo-tree-id46214 . -1) (undo-tree-id46215 . -1) (undo-tree-id46216 . -1) (undo-tree-id46217 . -1) (undo-tree-id46218 . -1) (undo-tree-id46219 . -1) (undo-tree-id46220 . -1) (undo-tree-id46221 . -1) (undo-tree-id46222 . -1) (undo-tree-id46223 . -1) (undo-tree-id46224 . -1) (undo-tree-id46225 . -1) (undo-tree-id46226 . -1) (undo-tree-id46227 . -1) (undo-tree-id46228 . -1) (undo-tree-id46229 . -1) (undo-tree-id46230 . -1) (undo-tree-id46231 . -1) (undo-tree-id46232 . -1) (undo-tree-id46233 . -1) (undo-tree-id46234 . -1) (undo-tree-id46235 . -1) (undo-tree-id46236 . -1) (undo-tree-id46237 . -1) (undo-tree-id46238 . -1) (undo-tree-id46239 . -1) (undo-tree-id46240 . -1) (undo-tree-id46241 . -1) (undo-tree-id46242 . -1) (undo-tree-id46243 . -1) (undo-tree-id46244 . -1) (undo-tree-id46245 . -1) (undo-tree-id46246 . -1) (undo-tree-id46247 . -1) (undo-tree-id46248 . -1) (undo-tree-id46249 . -1) (undo-tree-id46250 . -1) (undo-tree-id46251 . -1) (undo-tree-id46252 . -1) (undo-tree-id46253 . -1) (undo-tree-id46254 . -1) (undo-tree-id46255 . -1) (undo-tree-id46256 . -1) (undo-tree-id46257 . -1) (undo-tree-id46258 . -1) (undo-tree-id46259 . -1) (undo-tree-id46260 . -1) (undo-tree-id46261 . -1) (undo-tree-id46262 . -1) (undo-tree-id46263 . -1) (undo-tree-id46264 . -1) (undo-tree-id46265 . -1) (undo-tree-id46266 . -1) (undo-tree-id46267 . -1) (undo-tree-id46268 . -1) (undo-tree-id46269 . -1) (undo-tree-id46270 . -1) (undo-tree-id46271 . -1) (undo-tree-id46272 . -1) (undo-tree-id46273 . -1) (undo-tree-id46274 . -1) (undo-tree-id46275 . -1) (undo-tree-id46276 . -1) (undo-tree-id46277 . -1) (undo-tree-id46278 . -1) (undo-tree-id46279 . -1) (undo-tree-id46280 . -1) (undo-tree-id46281 . -1) (undo-tree-id46282 . -1) (undo-tree-id46283 . -1) (undo-tree-id46284 . -1) (undo-tree-id46285 . -1) (undo-tree-id46286 . -1) (undo-tree-id46287 . -1) (undo-tree-id46288 . -1) (undo-tree-id46289 . -1) (undo-tree-id46290 . -1) (undo-tree-id46291 . -1) (undo-tree-id46292 . -1) (undo-tree-id46293 . -1) (undo-tree-id46294 . -1) (undo-tree-id46295 . -1) (undo-tree-id46296 . -1) (undo-tree-id46297 . -1) (undo-tree-id46298 . -1) (undo-tree-id46299 . -1) (undo-tree-id46300 . -1) (undo-tree-id46301 . -1) (undo-tree-id46302 . -1) (undo-tree-id46303 . -1) (undo-tree-id46304 . -1) (undo-tree-id46305 . -1) (undo-tree-id46306 . -1) (undo-tree-id46307 . -1) (undo-tree-id46308 . -1) (undo-tree-id46309 . -1) (undo-tree-id46310 . -1) (undo-tree-id46311 . -1) (undo-tree-id46312 . -1) (undo-tree-id46313 . -1) (undo-tree-id46314 . -1) (undo-tree-id46315 . -1) (undo-tree-id46316 . -1) (undo-tree-id46317 . -1) (undo-tree-id46318 . -1) (#("5" 0 1 (fontified t)) . -6709) (undo-tree-id46319 . 1) (undo-tree-id46320 . -1) (undo-tree-id46321 . -1) (undo-tree-id46322 . 1) (undo-tree-id46323 . -1) (undo-tree-id46324 . -1) (undo-tree-id46325 . -1) (undo-tree-id46326 . -1) (undo-tree-id46327 . -1) (undo-tree-id46328 . -1) (undo-tree-id46329 . -1) (undo-tree-id46330 . -1) (undo-tree-id46331 . -1) (undo-tree-id46332 . -1) (undo-tree-id46333 . -1) (undo-tree-id46334 . -1) (undo-tree-id46335 . -1) (undo-tree-id46336 . -1) (undo-tree-id46337 . -1) (undo-tree-id46338 . -1) (undo-tree-id46339 . -1) (undo-tree-id46340 . -1) (undo-tree-id46341 . -1) (undo-tree-id46342 . -1) (undo-tree-id46343 . -1) (undo-tree-id46344 . -1) (undo-tree-id46345 . -1) (undo-tree-id46346 . -1) (undo-tree-id46347 . -1) (undo-tree-id46348 . -1) (undo-tree-id46349 . -1) (undo-tree-id46350 . -1) (undo-tree-id46351 . -1) (undo-tree-id46352 . -1) (undo-tree-id46353 . -1) (undo-tree-id46354 . -1) (undo-tree-id46355 . -1) (undo-tree-id46356 . -1) (undo-tree-id46357 . -1) (undo-tree-id46358 . -1) (undo-tree-id46359 . -1) (undo-tree-id46360 . -1) (undo-tree-id46361 . -1) (undo-tree-id46362 . -1) (undo-tree-id46363 . -1) (undo-tree-id46364 . -1) (undo-tree-id46365 . -1) (undo-tree-id46366 . -1) (undo-tree-id46367 . -1) (undo-tree-id46368 . -1) (undo-tree-id46369 . -1) (undo-tree-id46370 . -1) (undo-tree-id46371 . -1) (undo-tree-id46372 . -1) (undo-tree-id46373 . -1) (undo-tree-id46374 . -1) (undo-tree-id46375 . -1) (undo-tree-id46376 . -1) (undo-tree-id46377 . -1) (undo-tree-id46378 . -1) (#("0" 0 1 (fontified t)) . -6710) (undo-tree-id46379 . -1) (undo-tree-id46380 . -1) (undo-tree-id46381 . -1) (undo-tree-id46382 . -1) (undo-tree-id46383 . -1) (undo-tree-id46384 . -1) (undo-tree-id46385 . -1) (undo-tree-id46386 . -1) (undo-tree-id46387 . -1) (undo-tree-id46388 . -1) (undo-tree-id46389 . -1) (undo-tree-id46390 . -1) (undo-tree-id46391 . -1) 6711) nil (26157 64355 278170 249000) 0 nil])
([nil nil ((#("650" 0 3 (fontified t)) . 6711) (undo-tree-id46162 . -2) (undo-tree-id46163 . -3)) nil (26157 64355 277767 888000) 0 nil])
([nil nil ((6711 . 6712)) nil (26157 64355 277762 440000) 0 nil])
([nil nil ((#("650" 0 3 (fontified t)) . 6764) (undo-tree-id46139 . -2) (undo-tree-id46140 . -3) (undo-tree-id46141 . -3) (undo-tree-id46142 . -3) (undo-tree-id46143 . -3) (undo-tree-id46144 . -3) (undo-tree-id46145 . -3) (undo-tree-id46146 . -3) (undo-tree-id46147 . -3) (undo-tree-id46148 . -3) (undo-tree-id46149 . -3) (undo-tree-id46150 . -3) (undo-tree-id46151 . -3) (undo-tree-id46152 . -3) (undo-tree-id46153 . -3) (undo-tree-id46154 . -3) (undo-tree-id46155 . -3) (undo-tree-id46156 . -3) (undo-tree-id46157 . -3) (undo-tree-id46158 . -3) (undo-tree-id46159 . -3) (undo-tree-id46160 . -3) (undo-tree-id46161 . -3)) nil (26157 64355 277757 320000) 0 nil])
([nil nil ((#("    add_particles(&mut particle_list, , 650, 100, 1000);
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t face rust-ampersand-face) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 36 (fontified t) 36 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 56 (fontified t) 56 57 (fontified t)) . 6726) (undo-tree-id46015 . -56) (undo-tree-id46016 . -38) (undo-tree-id46017 . -38) (undo-tree-id46018 . -38) (undo-tree-id46019 . -38) (undo-tree-id46020 . -38) (undo-tree-id46021 . -38) (undo-tree-id46022 . -38) (undo-tree-id46023 . -38) (undo-tree-id46024 . -38) (undo-tree-id46025 . -38) (undo-tree-id46026 . -38) (undo-tree-id46027 . -38) (undo-tree-id46028 . -38) (undo-tree-id46029 . -38) (undo-tree-id46030 . -38) (undo-tree-id46031 . -38) (undo-tree-id46032 . -38) (undo-tree-id46033 . -38) (undo-tree-id46034 . -38) (undo-tree-id46035 . -38) (undo-tree-id46036 . -38) (undo-tree-id46037 . -38) (undo-tree-id46038 . -38) (undo-tree-id46039 . -38) (undo-tree-id46040 . -38) (undo-tree-id46041 . -38) (undo-tree-id46042 . -38) (undo-tree-id46043 . -38) (undo-tree-id46044 . -38) (undo-tree-id46045 . -38) (undo-tree-id46046 . -38) (undo-tree-id46047 . -38) (undo-tree-id46048 . -38) (undo-tree-id46049 . -38) (undo-tree-id46050 . -38) (undo-tree-id46051 . -38) (undo-tree-id46052 . -38) (undo-tree-id46053 . -38) (undo-tree-id46054 . -38) (undo-tree-id46055 . -38) (undo-tree-id46056 . -38) (undo-tree-id46057 . -38) (undo-tree-id46058 . -38) (undo-tree-id46059 . -38) (undo-tree-id46060 . -38) (undo-tree-id46061 . -38) (undo-tree-id46062 . -39) (undo-tree-id46063 . -39) (undo-tree-id46064 . -40) (undo-tree-id46065 . -39) (undo-tree-id46066 . -40) (undo-tree-id46067 . -43) (undo-tree-id46068 . -44) (undo-tree-id46069 . -43) (undo-tree-id46070 . -44) (undo-tree-id46071 . -48) (undo-tree-id46072 . -49) (undo-tree-id46073 . -48) (undo-tree-id46074 . -49) (undo-tree-id46075 . -54) (undo-tree-id46076 . -55) (undo-tree-id46077 . -54) (undo-tree-id46078 . -55) (undo-tree-id46079 . -4) (undo-tree-id46080 . -39) (undo-tree-id46081 . -38) (undo-tree-id46082 . -38) (undo-tree-id46083 . -38) (undo-tree-id46084 . -38) (undo-tree-id46085 . -38) (undo-tree-id46086 . -38) (undo-tree-id46087 . -38) (undo-tree-id46088 . -38) (undo-tree-id46089 . -38) (undo-tree-id46090 . -38) (undo-tree-id46091 . -38) (undo-tree-id46092 . -38) (undo-tree-id46093 . -38) (undo-tree-id46094 . -38) (undo-tree-id46095 . -38) (undo-tree-id46096 . -38) (undo-tree-id46097 . -38) (undo-tree-id46098 . -38) (undo-tree-id46099 . -38) (undo-tree-id46100 . -38) (undo-tree-id46101 . -38) (undo-tree-id46102 . -38) (undo-tree-id46103 . -38) (undo-tree-id46104 . -38) (undo-tree-id46105 . -38) (undo-tree-id46106 . -38) (undo-tree-id46107 . -38) (undo-tree-id46108 . -38) (undo-tree-id46109 . -38) (undo-tree-id46110 . -38) (undo-tree-id46111 . -38) (undo-tree-id46112 . -38) (undo-tree-id46113 . -38) (undo-tree-id46114 . -38) (undo-tree-id46115 . -38) (undo-tree-id46116 . -38) (undo-tree-id46117 . -38) (undo-tree-id46118 . -38) (undo-tree-id46119 . -38) (undo-tree-id46120 . -38) (undo-tree-id46121 . -38) (undo-tree-id46122 . -38) (undo-tree-id46123 . -38) (undo-tree-id46124 . -38) (undo-tree-id46125 . -38) (undo-tree-id46126 . -38) (undo-tree-id46127 . -38) (undo-tree-id46128 . -38) (undo-tree-id46129 . -38) (undo-tree-id46130 . -38) (undo-tree-id46131 . -38) (undo-tree-id46132 . -38) (undo-tree-id46133 . -38) (undo-tree-id46134 . -38) (undo-tree-id46135 . -38) (undo-tree-id46136 . -38) (undo-tree-id46137 . -38) (undo-tree-id46138 . -57) 6764) nil (26157 64355 277438 207000) 0 nil])
([nil nil ((#("    add_particles(&mut particle_list, 650, 650, 100, 1000);
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t face rust-ampersand-face) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 36 (fontified t) 36 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t) 59 60 (fontified t)) . 6726) (undo-tree-id45966 . -59) (undo-tree-id45967 . -38) (undo-tree-id45968 . -59) (undo-tree-id45969 . -38) (undo-tree-id45970 . -38) (undo-tree-id45971 . -38) (undo-tree-id45972 . -38) (undo-tree-id45973 . -38) (undo-tree-id45974 . -38) (undo-tree-id45975 . -38) (undo-tree-id45976 . -38) (undo-tree-id45977 . -38) (undo-tree-id45978 . -38) (undo-tree-id45979 . -38) (undo-tree-id45980 . -38) (undo-tree-id45981 . -38) (undo-tree-id45982 . -38) (undo-tree-id45983 . -38) (undo-tree-id45984 . -38) (undo-tree-id45985 . -38) (undo-tree-id45986 . -38) (undo-tree-id45987 . -38) (undo-tree-id45988 . -38) (undo-tree-id45989 . -38) (undo-tree-id45990 . -38) (undo-tree-id45991 . -38) (undo-tree-id45992 . -38) (undo-tree-id45993 . -38) (undo-tree-id45994 . -38) (undo-tree-id45995 . -38) (undo-tree-id45996 . -38) (undo-tree-id45997 . -38) (undo-tree-id45998 . -38) (undo-tree-id45999 . -38) (undo-tree-id46000 . -38) (undo-tree-id46001 . -38) (undo-tree-id46002 . -38) (undo-tree-id46003 . -38) (undo-tree-id46004 . -38) (undo-tree-id46005 . -38) (undo-tree-id46006 . -38) (undo-tree-id46007 . -38) (undo-tree-id46008 . -38) (undo-tree-id46009 . -38) (undo-tree-id46010 . -38) (undo-tree-id46011 . -38) (undo-tree-id46012 . -38) (undo-tree-id46013 . -38) (undo-tree-id46014 . -60) 6764) nil (26157 64355 277205 697000) 0 nil])
([nil nil ((6716 . 6717)) nil (26157 64355 276496 359000) 0 nil])
([nil nil ((6723 . 6726)) nil (26157 64355 276485 825000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -6725) (undo-tree-id46516 . -1) (undo-tree-id46517 . -1) (undo-tree-id46518 . -1) (undo-tree-id46519 . -1) (undo-tree-id46520 . -1) (undo-tree-id46521 . -1) (undo-tree-id46522 . -1) (undo-tree-id46523 . -1) (undo-tree-id46524 . -1) (undo-tree-id46525 . -1) (undo-tree-id46526 . -1) (undo-tree-id46527 . -1) (undo-tree-id46528 . -1) 6726 (t 26157 64355 416235 326000)) nil (26157 64408 332608 863000) 0 nil])
([nil nil ((6708 . 6711) (#("0" 0 1 (fontified t)) . -6708) (undo-tree-id46503 . -1) (undo-tree-id46504 . -1) (undo-tree-id46505 . -1) (undo-tree-id46506 . -1) (undo-tree-id46507 . -1) (undo-tree-id46508 . -1) (undo-tree-id46509 . -1) (undo-tree-id46510 . -1) (undo-tree-id46511 . -1) (undo-tree-id46512 . -1) (undo-tree-id46513 . -1) (undo-tree-id46514 . -1) (undo-tree-id46515 . -1) 6709) nil (26157 64408 332578 730000) 0 nil])
([nil nil ((6713 . 6716) (#("0" 0 1 (fontified t)) . -6713) (undo-tree-id46490 . -1) (undo-tree-id46491 . -1) (undo-tree-id46492 . -1) (undo-tree-id46493 . -1) (undo-tree-id46494 . -1) (undo-tree-id46495 . -1) (undo-tree-id46496 . -1) (undo-tree-id46497 . -1) (undo-tree-id46498 . -1) (undo-tree-id46499 . -1) (undo-tree-id46500 . -1) (undo-tree-id46501 . -1) (undo-tree-id46502 . -1) 6714) nil (26157 64408 332551 350000) 0 nil])
([nil nil ((#("1000" 0 4 (fontified t)) . 6718) (undo-tree-id46453 . -3) (undo-tree-id46454 . -1) (undo-tree-id46455 . -1) (undo-tree-id46456 . -1) (undo-tree-id46457 . -1) (undo-tree-id46458 . -1) (undo-tree-id46459 . -1) (undo-tree-id46460 . -1) (undo-tree-id46461 . -1) (undo-tree-id46462 . -1) (undo-tree-id46463 . -1) (undo-tree-id46464 . -1) (undo-tree-id46465 . -1) (undo-tree-id46466 . -1) (undo-tree-id46467 . -1) (undo-tree-id46468 . -1) (undo-tree-id46469 . -1) (undo-tree-id46470 . -1) (undo-tree-id46471 . -1) (undo-tree-id46472 . -1) (undo-tree-id46473 . -1) (undo-tree-id46474 . -1) (undo-tree-id46475 . -1) (undo-tree-id46476 . -1) (undo-tree-id46477 . -1) (undo-tree-id46478 . -2) (undo-tree-id46479 . -2) (undo-tree-id46480 . -2) (undo-tree-id46481 . -2) (undo-tree-id46482 . -2) (undo-tree-id46483 . -2) (undo-tree-id46484 . -2) (undo-tree-id46485 . -2) (undo-tree-id46486 . -2) (undo-tree-id46487 . -2) (undo-tree-id46488 . -2) (undo-tree-id46489 . -4)) nil (26157 64408 332519 426000) 0 nil])
([nil nil ((6718 . 6721) (#("3" 0 1 (fontified t)) . -6718) (undo-tree-id46452 . -1) 6719 (6718 . 6719)) nil (26157 64408 332011 193000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 6725) (undo-tree-id46450 . -1) (undo-tree-id46451 . -1)) nil (26157 64408 331997 130000) 0 nil])
([nil nil ((#("    add_particles(&mut particle_list, 100, 100, 500, 10000);
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t face rust-ampersand-face) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 36 (fontified t) 36 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 60 (fontified t) 60 61 (fontified t)) . 6670) (undo-tree-id46529 . -60) (undo-tree-id46530 . 10) (undo-tree-id46531 . 10) (undo-tree-id46532 . -55) (undo-tree-id46533 . -55) 6725 (t 26157 64408 470499 572000)) nil (26157 64424 126918 846000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6729) (6669 . 6730) 6610 (t 26157 64424 270408 967000)) nil (26157 64462 12371 589000) 0 nil])
([nil nil ((#("650" 0 3 (fontified t)) . 6708) (undo-tree-id46667 . -2)) nil (26157 64462 12367 958000) 0 nil])
([nil nil ((6708 . 6711)) nil (26157 64462 12364 4000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -6708) (undo-tree-id46663 . -1) (undo-tree-id46664 . -1) (#("0" 0 1 (fontified t)) . -6709) (undo-tree-id46665 . -1) (undo-tree-id46666 . -1) 6710) nil (26157 64462 12360 643000) 0 nil])
([nil nil ((6708 . 6710)) nil (26157 64462 12345 161000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . 6713)) nil (26157 64462 12342 315000) 0 nil])
([nil nil ((6715 . 6716)) nil (26157 64462 12334 791000) 0 nil])
([nil nil ((6718 . 6721) (#("1" 0 1 (fontified t)) . -6718) (undo-tree-id46534 . -1) (undo-tree-id46535 . -1) (undo-tree-id46536 . -1) (undo-tree-id46537 . -1) (undo-tree-id46538 . -1) (undo-tree-id46539 . -1) (undo-tree-id46540 . -1) (undo-tree-id46541 . -1) (undo-tree-id46542 . -1) (undo-tree-id46543 . -1) (undo-tree-id46544 . -1) (undo-tree-id46545 . -1) (undo-tree-id46546 . -1) (undo-tree-id46547 . -1) (undo-tree-id46548 . -1) (undo-tree-id46549 . -1) (undo-tree-id46550 . -1) (undo-tree-id46551 . -1) (undo-tree-id46552 . -1) (undo-tree-id46553 . -1) (undo-tree-id46554 . -1) (undo-tree-id46555 . -1) (undo-tree-id46556 . -1) (undo-tree-id46557 . -1) (undo-tree-id46558 . -1) (undo-tree-id46559 . -1) (undo-tree-id46560 . -1) (undo-tree-id46561 . -1) (undo-tree-id46562 . -1) (undo-tree-id46563 . -1) (undo-tree-id46564 . -1) (undo-tree-id46565 . -1) (undo-tree-id46566 . -1) (undo-tree-id46567 . -1) (undo-tree-id46568 . -1) (undo-tree-id46569 . -1) (undo-tree-id46570 . -1) (undo-tree-id46571 . -1) (undo-tree-id46572 . -1) (undo-tree-id46573 . -1) (undo-tree-id46574 . -1) (undo-tree-id46575 . -1) (undo-tree-id46576 . -1) (undo-tree-id46577 . -1) (undo-tree-id46578 . -1) (undo-tree-id46579 . -1) (undo-tree-id46580 . -1) (undo-tree-id46581 . -1) (undo-tree-id46582 . -1) (undo-tree-id46583 . -1) (undo-tree-id46584 . -1) (undo-tree-id46585 . -1) (undo-tree-id46586 . -1) (undo-tree-id46587 . -1) (undo-tree-id46588 . -1) (undo-tree-id46589 . -1) (undo-tree-id46590 . -1) (undo-tree-id46591 . -1) (undo-tree-id46592 . -1) (undo-tree-id46593 . -1) (undo-tree-id46594 . -1) (undo-tree-id46595 . -1) (undo-tree-id46596 . -1) (#("0" 0 1 (fontified t)) . -6719) (undo-tree-id46597 . -1) (undo-tree-id46598 . -1) (undo-tree-id46599 . -1) (undo-tree-id46600 . -1) (undo-tree-id46601 . -1) (undo-tree-id46602 . -1) (undo-tree-id46603 . -1) (undo-tree-id46604 . -1) (undo-tree-id46605 . -1) (undo-tree-id46606 . -1) (undo-tree-id46607 . -1) (undo-tree-id46608 . -1) (undo-tree-id46609 . -1) (undo-tree-id46610 . -1) (undo-tree-id46611 . -1) (undo-tree-id46612 . -1) (undo-tree-id46613 . -1) (undo-tree-id46614 . -1) (undo-tree-id46615 . -1) (undo-tree-id46616 . -1) (undo-tree-id46617 . -1) (undo-tree-id46618 . -1) (undo-tree-id46619 . -1) (undo-tree-id46620 . -1) (undo-tree-id46621 . -1) (undo-tree-id46622 . -1) (undo-tree-id46623 . -1) (undo-tree-id46624 . -1) (undo-tree-id46625 . -1) (undo-tree-id46626 . -1) (undo-tree-id46627 . -1) (undo-tree-id46628 . -1) (undo-tree-id46629 . -1) (undo-tree-id46630 . -1) (undo-tree-id46631 . -1) (undo-tree-id46632 . -1) (undo-tree-id46633 . -1) (undo-tree-id46634 . -1) (undo-tree-id46635 . -1) (undo-tree-id46636 . -1) (undo-tree-id46637 . -1) (undo-tree-id46638 . -1) (undo-tree-id46639 . -1) (undo-tree-id46640 . -1) (undo-tree-id46641 . -1) (undo-tree-id46642 . -1) (undo-tree-id46643 . -1) (undo-tree-id46644 . -1) (undo-tree-id46645 . -1) (undo-tree-id46646 . -1) (undo-tree-id46647 . -1) (undo-tree-id46648 . -1) (undo-tree-id46649 . -1) (#("0" 0 1 (fontified t)) . -6720) (undo-tree-id46650 . -1) (undo-tree-id46651 . -1) (undo-tree-id46652 . -1) (undo-tree-id46653 . -1) (undo-tree-id46654 . -1) (undo-tree-id46655 . -1) (undo-tree-id46656 . -1) (undo-tree-id46657 . -1) (undo-tree-id46658 . -1) (undo-tree-id46659 . -1) (undo-tree-id46660 . -1) (undo-tree-id46661 . -1) (undo-tree-id46662 . -1) 6721) nil (26157 64462 12263 42000) 0 nil])
([nil nil ((6726 . 6728) (t 26157 64462 164598 146000)) nil (26157 64482 45830 667000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 6726) (undo-tree-id46668 . -1) (undo-tree-id46669 . -1) (undo-tree-id46670 . -1) (undo-tree-id46671 . -1) (undo-tree-id46672 . -1) (undo-tree-id46673 . -1) (undo-tree-id46674 . -1) (undo-tree-id46675 . -1) (undo-tree-id46676 . -1) (undo-tree-id46677 . -1) (undo-tree-id46678 . -1) (undo-tree-id46679 . -1) (undo-tree-id46680 . -1) (undo-tree-id46681 . -1) (undo-tree-id46682 . -1) (undo-tree-id46683 . -1) (undo-tree-id46684 . -1) (undo-tree-id46685 . -1) (undo-tree-id46686 . -1) (undo-tree-id46687 . -1) (undo-tree-id46688 . -1) (undo-tree-id46689 . -1) (undo-tree-id46690 . -1) (undo-tree-id46691 . -1) (undo-tree-id46692 . -1) (undo-tree-id46693 . -1) (undo-tree-id46694 . -1) (undo-tree-id46695 . -1) (undo-tree-id46696 . -1) (undo-tree-id46697 . -1) (undo-tree-id46698 . -1) (undo-tree-id46699 . -1) (undo-tree-id46700 . -1) (undo-tree-id46701 . -1) (undo-tree-id46702 . -1) (undo-tree-id46703 . -1) (undo-tree-id46704 . -1) (undo-tree-id46705 . -1) (undo-tree-id46706 . -1) (undo-tree-id46707 . -1) (undo-tree-id46708 . -1) (undo-tree-id46709 . -1) (undo-tree-id46710 . -1) (undo-tree-id46711 . -1) (undo-tree-id46712 . -1) (undo-tree-id46713 . -1) (undo-tree-id46714 . -1) (undo-tree-id46715 . -1) (undo-tree-id46716 . -1) (undo-tree-id46717 . -1) (undo-tree-id46718 . -1) (undo-tree-id46719 . -1) (undo-tree-id46720 . -1) (undo-tree-id46721 . -1) (undo-tree-id46722 . -1) (undo-tree-id46723 . -1) (undo-tree-id46724 . -1) (undo-tree-id46725 . -1) (undo-tree-id46726 . -1) (undo-tree-id46727 . -1) (undo-tree-id46728 . -1) (undo-tree-id46729 . -1) (undo-tree-id46730 . -1) (undo-tree-id46731 . -1) (undo-tree-id46732 . -1) (undo-tree-id46733 . -1) (undo-tree-id46734 . -1) (undo-tree-id46735 . -1) (undo-tree-id46736 . -1) (undo-tree-id46737 . -1) (undo-tree-id46738 . -1) (undo-tree-id46739 . -1) (undo-tree-id46740 . -1) (undo-tree-id46741 . -1) (undo-tree-id46742 . -1) (undo-tree-id46743 . -1) (undo-tree-id46744 . -1) (undo-tree-id46745 . -1) (undo-tree-id46746 . -1) (undo-tree-id46747 . -1) (undo-tree-id46748 . -1) (undo-tree-id46749 . -1) (undo-tree-id46750 . -1) (undo-tree-id46751 . -1) (undo-tree-id46752 . -1) (undo-tree-id46753 . -1) (undo-tree-id46754 . -1) (undo-tree-id46755 . -1) (undo-tree-id46756 . -1) (undo-tree-id46757 . -1) (undo-tree-id46758 . -1) (undo-tree-id46759 . -1) (undo-tree-id46760 . -1) (undo-tree-id46761 . -1) (undo-tree-id46762 . -1) (undo-tree-id46763 . -1) (undo-tree-id46764 . -1) (undo-tree-id46765 . -1) (undo-tree-id46766 . -1) (undo-tree-id46767 . -1) (undo-tree-id46768 . -1) (undo-tree-id46769 . -1) (undo-tree-id46770 . -1) (undo-tree-id46771 . -1) (undo-tree-id46772 . -1) (undo-tree-id46773 . -1) (undo-tree-id46774 . -1) (undo-tree-id46775 . -1) (undo-tree-id46776 . -1) (undo-tree-id46777 . -1) (undo-tree-id46778 . -1) (undo-tree-id46779 . -1) (undo-tree-id46780 . -1) (undo-tree-id46781 . -1) (undo-tree-id46782 . -1) (undo-tree-id46783 . -1) (undo-tree-id46784 . -1) (undo-tree-id46785 . -1) (undo-tree-id46786 . -1) (undo-tree-id46787 . -1) (undo-tree-id46788 . -1) (undo-tree-id46789 . -1) (undo-tree-id46790 . -1) (undo-tree-id46791 . -1) (undo-tree-id46792 . -1) (undo-tree-id46793 . -1) (undo-tree-id46794 . -1) (undo-tree-id46795 . -1) (undo-tree-id46796 . -1) (undo-tree-id46797 . -1) (undo-tree-id46798 . -1) (undo-tree-id46799 . -1) (undo-tree-id46800 . -1) (undo-tree-id46801 . -1) (undo-tree-id46802 . -1) (undo-tree-id46803 . -1) (undo-tree-id46804 . -1) (undo-tree-id46805 . -1) (undo-tree-id46806 . -1) (undo-tree-id46807 . -1) (undo-tree-id46808 . -1) (undo-tree-id46809 . -1) (undo-tree-id46810 . -1) (undo-tree-id46811 . -1) (undo-tree-id46812 . -1) (undo-tree-id46813 . -1) (undo-tree-id46814 . -1) (undo-tree-id46815 . -1) (undo-tree-id46816 . -1) (undo-tree-id46817 . -1) (undo-tree-id46818 . -1) (undo-tree-id46819 . -1) (undo-tree-id46820 . -1) (undo-tree-id46821 . -1) (undo-tree-id46822 . -1) (undo-tree-id46823 . -1) (undo-tree-id46824 . -1) (undo-tree-id46825 . -1) (undo-tree-id46826 . -1) (undo-tree-id46827 . -1) (undo-tree-id46828 . -1) (undo-tree-id46829 . -1) (undo-tree-id46830 . -1) (undo-tree-id46831 . -1) (undo-tree-id46832 . -1) (undo-tree-id46833 . -1) (undo-tree-id46834 . -1) (undo-tree-id46835 . -1) (undo-tree-id46836 . -1) (undo-tree-id46837 . -1) (undo-tree-id46838 . -1) (undo-tree-id46839 . -1) (undo-tree-id46840 . -1) (undo-tree-id46841 . -1) (undo-tree-id46842 . -1) (undo-tree-id46843 . -1) (undo-tree-id46844 . -1) (undo-tree-id46845 . -1) (undo-tree-id46846 . -1) (undo-tree-id46847 . -1) (undo-tree-id46848 . -1) (undo-tree-id46849 . -1) (undo-tree-id46850 . -1) (undo-tree-id46851 . -1) (undo-tree-id46852 . -1) (undo-tree-id46853 . -1) (undo-tree-id46854 . -1) (undo-tree-id46855 . -1) (undo-tree-id46856 . -1) (undo-tree-id46857 . -1) (undo-tree-id46858 . -1) (undo-tree-id46859 . -1) (undo-tree-id46860 . -1) (undo-tree-id46861 . -1) (undo-tree-id46862 . -1) (undo-tree-id46863 . -1) (undo-tree-id46864 . -1) (undo-tree-id46865 . -1) (undo-tree-id46866 . -1) (undo-tree-id46867 . -1) (undo-tree-id46868 . -1) (undo-tree-id46869 . -1) (undo-tree-id46870 . -1) (undo-tree-id46871 . -1) (undo-tree-id46872 . -1) (undo-tree-id46873 . -1) (undo-tree-id46874 . -1) (undo-tree-id46875 . -1) (undo-tree-id46876 . -1) (undo-tree-id46877 . -1) (undo-tree-id46878 . -1) (undo-tree-id46879 . -1) (undo-tree-id46880 . -1) (undo-tree-id46881 . -1) (undo-tree-id46882 . -1) (undo-tree-id46883 . -1) (undo-tree-id46884 . -1) (undo-tree-id46885 . -1) (undo-tree-id46886 . -1) (undo-tree-id46887 . -1) (undo-tree-id46888 . -1) (undo-tree-id46889 . -1) (undo-tree-id46890 . -1) (undo-tree-id46891 . -1) (undo-tree-id46892 . -1) (undo-tree-id46893 . -1) (undo-tree-id46894 . -1) (undo-tree-id46895 . -1) (undo-tree-id46896 . -1) (undo-tree-id46897 . -1) (undo-tree-id46898 . -1) (undo-tree-id46899 . -1) (t 26157 64482 198783 84000)) nil (26157 64524 186998 522000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6791) (6730 . 6792) 6726 (t 26157 64524 326490 205000)) nil (26157 64573 697234 729000) 0 nil])
([nil nil ((6769 . 6770) (#("5" 0 1 (fontified t)) . 6769) (undo-tree-id46900 . -1) (undo-tree-id46901 . -1) (undo-tree-id46902 . -1) (undo-tree-id46903 . -1) (undo-tree-id46904 . -1) (undo-tree-id46905 . -1) (undo-tree-id46906 . -1) (undo-tree-id46907 . -1) (undo-tree-id46908 . -1) (undo-tree-id46909 . -1) (undo-tree-id46910 . -1) (undo-tree-id46911 . -1) (undo-tree-id46912 . -1) (undo-tree-id46913 . -1) (undo-tree-id46914 . -1) (undo-tree-id46915 . -1) (undo-tree-id46916 . -1) (undo-tree-id46917 . -1) (undo-tree-id46918 . -1) (undo-tree-id46919 . -1) (undo-tree-id46920 . -1) (undo-tree-id46921 . -1) (undo-tree-id46922 . -1) (undo-tree-id46923 . -1) (undo-tree-id46924 . -1) (undo-tree-id46925 . -1) (undo-tree-id46926 . -1) (undo-tree-id46927 . -1) (undo-tree-id46928 . -1) (undo-tree-id46929 . -1) (undo-tree-id46930 . -1) (undo-tree-id46931 . -1) (undo-tree-id46932 . -1) (undo-tree-id46933 . -1) (undo-tree-id46934 . -1)) nil (26157 64573 697221 537000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -6852) (6791 . 6853) 6769 (t 26157 64573 828520 920000)) nil (26157 64614 82054 362000) 0 nil])
([nil nil ((#("800" 0 1 (fontified t) 1 3 (fontified t)) . 6830) (undo-tree-id46936 . -2)) nil (26157 64614 82050 497000) 0 nil])
([nil nil ((6830 . 6833)) nil (26157 64614 82045 472000) 0 nil])
([nil nil ((#("500" 0 3 (fontified t)) . 6835) (undo-tree-id46935 . -2)) nil (26157 64614 82039 409000) 0 nil])
([nil nil ((6835 . 6838)) nil (26157 64614 82010 314000) 0 nil])
([nil nil ((#("603" 0 3 (fontified t)) . 6999) (undo-tree-id47233 . -2) (undo-tree-id47234 . -3) (t 26157 64614 231580 879000)) nil (26157 64681 673567 55000) 0 nil])
([nil nil ((6999 . 7002) (#("1" 0 1 (fontified t)) . -6999) (undo-tree-id46999 . -1) (undo-tree-id47000 . -1) (undo-tree-id47001 . -1) (undo-tree-id47002 . -1) (undo-tree-id47003 . -1) (undo-tree-id47004 . -1) (undo-tree-id47005 . -1) (undo-tree-id47006 . -1) (undo-tree-id47007 . -1) (undo-tree-id47008 . -1) (undo-tree-id47009 . -1) (undo-tree-id47010 . -1) (undo-tree-id47011 . -1) (undo-tree-id47012 . -1) (undo-tree-id47013 . -1) (undo-tree-id47014 . -1) (undo-tree-id47015 . -1) (undo-tree-id47016 . -1) (undo-tree-id47017 . -1) (undo-tree-id47018 . -1) (undo-tree-id47019 . -1) (undo-tree-id47020 . -1) (undo-tree-id47021 . -1) (undo-tree-id47022 . -1) (undo-tree-id47023 . -1) (undo-tree-id47024 . -1) (undo-tree-id47025 . -1) (undo-tree-id47026 . -1) (undo-tree-id47027 . -1) (undo-tree-id47028 . -1) (undo-tree-id47029 . -1) (undo-tree-id47030 . -1) (undo-tree-id47031 . -1) (undo-tree-id47032 . -1) (undo-tree-id47033 . -1) (undo-tree-id47034 . -1) (undo-tree-id47035 . -1) (undo-tree-id47036 . -1) (undo-tree-id47037 . -1) (undo-tree-id47038 . -1) (undo-tree-id47039 . -1) (undo-tree-id47040 . -1) (undo-tree-id47041 . -1) (undo-tree-id47042 . -1) (undo-tree-id47043 . -1) (undo-tree-id47044 . -1) (undo-tree-id47045 . -1) (undo-tree-id47046 . -1) (undo-tree-id47047 . -1) (undo-tree-id47048 . -1) (undo-tree-id47049 . -1) (undo-tree-id47050 . -1) (undo-tree-id47051 . -1) (undo-tree-id47052 . -1) (undo-tree-id47053 . -1) (undo-tree-id47054 . -1) (undo-tree-id47055 . -1) (undo-tree-id47056 . -1) (undo-tree-id47057 . -1) (undo-tree-id47058 . -1) (undo-tree-id47059 . -1) (undo-tree-id47060 . -1) (undo-tree-id47061 . -1) (undo-tree-id47062 . -1) (undo-tree-id47063 . -1) (undo-tree-id47064 . -1) (undo-tree-id47065 . -1) (undo-tree-id47066 . -1) (undo-tree-id47067 . -1) (undo-tree-id47068 . -1) (undo-tree-id47069 . -1) (undo-tree-id47070 . -1) (undo-tree-id47071 . -1) (undo-tree-id47072 . -1) (undo-tree-id47073 . -1) (undo-tree-id47074 . -1) (undo-tree-id47075 . -1) (undo-tree-id47076 . -1) (undo-tree-id47077 . -1) (undo-tree-id47078 . -1) (undo-tree-id47079 . -1) (undo-tree-id47080 . -1) (undo-tree-id47081 . -1) (undo-tree-id47082 . -1) (undo-tree-id47083 . -1) (undo-tree-id47084 . -1) (undo-tree-id47085 . -1) (undo-tree-id47086 . -1) (undo-tree-id47087 . -1) (undo-tree-id47088 . -1) (undo-tree-id47089 . -1) (undo-tree-id47090 . -1) (undo-tree-id47091 . -1) (undo-tree-id47092 . -1) (undo-tree-id47093 . -1) (undo-tree-id47094 . -1) (undo-tree-id47095 . -1) (undo-tree-id47096 . -1) (#("5" 0 1 (fontified t)) . -7000) (undo-tree-id47097 . -1) (undo-tree-id47098 . -1) (undo-tree-id47099 . -1) (undo-tree-id47100 . -1) (undo-tree-id47101 . -1) (undo-tree-id47102 . -1) (undo-tree-id47103 . -1) (undo-tree-id47104 . -1) (undo-tree-id47105 . -1) (undo-tree-id47106 . -1) (undo-tree-id47107 . -1) (undo-tree-id47108 . -1) (undo-tree-id47109 . -1) (undo-tree-id47110 . -1) (undo-tree-id47111 . -1) (undo-tree-id47112 . -1) (undo-tree-id47113 . -1) (undo-tree-id47114 . -1) (undo-tree-id47115 . -1) (undo-tree-id47116 . -1) (undo-tree-id47117 . -1) (undo-tree-id47118 . -1) (undo-tree-id47119 . -1) (undo-tree-id47120 . -1) (undo-tree-id47121 . -1) (undo-tree-id47122 . -1) (undo-tree-id47123 . -1) (undo-tree-id47124 . -1) (undo-tree-id47125 . -1) (undo-tree-id47126 . -1) (undo-tree-id47127 . -1) (undo-tree-id47128 . -1) (undo-tree-id47129 . -1) (undo-tree-id47130 . -1) (undo-tree-id47131 . -1) (undo-tree-id47132 . -1) (undo-tree-id47133 . -1) (undo-tree-id47134 . -1) (undo-tree-id47135 . -1) (undo-tree-id47136 . -1) (undo-tree-id47137 . -1) (undo-tree-id47138 . -1) (undo-tree-id47139 . -1) (undo-tree-id47140 . -1) (undo-tree-id47141 . -1) (undo-tree-id47142 . -1) (undo-tree-id47143 . -1) (undo-tree-id47144 . -1) (undo-tree-id47145 . -1) (undo-tree-id47146 . -1) (undo-tree-id47147 . -1) (undo-tree-id47148 . -1) (undo-tree-id47149 . -1) (undo-tree-id47150 . -1) (undo-tree-id47151 . -1) (undo-tree-id47152 . -1) (undo-tree-id47153 . -1) (undo-tree-id47154 . -1) (undo-tree-id47155 . -1) (undo-tree-id47156 . -1) (undo-tree-id47157 . -1) (undo-tree-id47158 . -1) (undo-tree-id47159 . -1) (undo-tree-id47160 . -1) (undo-tree-id47161 . -1) (undo-tree-id47162 . -1) (undo-tree-id47163 . -1) (undo-tree-id47164 . -1) (undo-tree-id47165 . -1) (undo-tree-id47166 . -1) (undo-tree-id47167 . -1) (undo-tree-id47168 . -1) (undo-tree-id47169 . -1) (undo-tree-id47170 . -1) (undo-tree-id47171 . -1) (undo-tree-id47172 . -1) (undo-tree-id47173 . -1) (undo-tree-id47174 . -1) (#("0" 0 1 (fontified t)) . -7001) (undo-tree-id47175 . -1) (undo-tree-id47176 . -1) (undo-tree-id47177 . -1) (undo-tree-id47178 . -1) (undo-tree-id47179 . -1) (undo-tree-id47180 . -1) (undo-tree-id47181 . -1) (undo-tree-id47182 . -1) (undo-tree-id47183 . -1) (undo-tree-id47184 . -1) (undo-tree-id47185 . -1) (undo-tree-id47186 . -1) (undo-tree-id47187 . -1) (undo-tree-id47188 . -1) (undo-tree-id47189 . -1) (undo-tree-id47190 . -1) (undo-tree-id47191 . -1) (undo-tree-id47192 . -1) (undo-tree-id47193 . -1) (undo-tree-id47194 . -1) (undo-tree-id47195 . -1) (undo-tree-id47196 . -1) (undo-tree-id47197 . -1) (undo-tree-id47198 . -1) (undo-tree-id47199 . -1) (undo-tree-id47200 . -1) (undo-tree-id47201 . -1) (undo-tree-id47202 . -1) (undo-tree-id47203 . -1) (undo-tree-id47204 . -1) (undo-tree-id47205 . -1) (undo-tree-id47206 . -1) (undo-tree-id47207 . -1) (undo-tree-id47208 . -1) (undo-tree-id47209 . -1) (undo-tree-id47210 . -1) (undo-tree-id47211 . -1) (undo-tree-id47212 . -1) (undo-tree-id47213 . -1) (undo-tree-id47214 . -1) (undo-tree-id47215 . -1) (undo-tree-id47216 . -1) (undo-tree-id47217 . -1) (undo-tree-id47218 . -1) (undo-tree-id47219 . -1) (undo-tree-id47220 . -1) (undo-tree-id47221 . -1) (undo-tree-id47222 . -1) (undo-tree-id47223 . -1) (undo-tree-id47224 . -1) (undo-tree-id47225 . -1) (undo-tree-id47226 . -1) (undo-tree-id47227 . -1) (undo-tree-id47228 . -1) (undo-tree-id47229 . -1) (undo-tree-id47230 . -1) (undo-tree-id47231 . -1) (undo-tree-id47232 . -1) 7002 (6999 . 7002)) nil (26157 64681 673536 980000) 0 nil])
([nil nil ((#("623" 0 3 (fontified t)) . 7008) (undo-tree-id46976 . -2) (undo-tree-id46977 . -2) (undo-tree-id46978 . -2) (undo-tree-id46979 . -2) (undo-tree-id46980 . -2) (undo-tree-id46981 . -2) (undo-tree-id46982 . -2) (undo-tree-id46983 . -2) (undo-tree-id46984 . -2) (undo-tree-id46985 . -2) (undo-tree-id46986 . -2) (undo-tree-id46987 . -2) (undo-tree-id46988 . -2) (undo-tree-id46989 . -2) (undo-tree-id46990 . -2) (undo-tree-id46991 . -2) (undo-tree-id46992 . -2) (undo-tree-id46993 . -2) (undo-tree-id46994 . -2) (undo-tree-id46995 . -2) (undo-tree-id46996 . -2) (undo-tree-id46997 . -2) (undo-tree-id46998 . -3)) nil (26157 64681 672682 962000) 0 nil])
([nil nil ((7008 . 7011) (#("4" 0 1 (fontified t)) . -7008) (undo-tree-id46937 . -1) (undo-tree-id46938 . -1) (undo-tree-id46939 . -1) (undo-tree-id46940 . -1) (undo-tree-id46941 . -1) (undo-tree-id46942 . -1) (undo-tree-id46943 . -1) (undo-tree-id46944 . -1) (undo-tree-id46945 . -1) (undo-tree-id46946 . -1) (undo-tree-id46947 . -1) (undo-tree-id46948 . -1) (undo-tree-id46949 . -1) (undo-tree-id46950 . -1) (undo-tree-id46951 . -1) (undo-tree-id46952 . -1) (undo-tree-id46953 . -1) (undo-tree-id46954 . -1) (undo-tree-id46955 . -1) (undo-tree-id46956 . -1) (undo-tree-id46957 . -1) (undo-tree-id46958 . -1) (undo-tree-id46959 . -1) (undo-tree-id46960 . -1) (undo-tree-id46961 . -1) (undo-tree-id46962 . -1) (undo-tree-id46963 . -1) (undo-tree-id46964 . -1) (undo-tree-id46965 . -1) (undo-tree-id46966 . -1) (undo-tree-id46967 . -1) (undo-tree-id46968 . -1) (undo-tree-id46969 . -1) (undo-tree-id46970 . -1) (undo-tree-id46971 . -1) (undo-tree-id46972 . -1) 7009 (#("8" 0 1 (fontified t)) . -7009) (undo-tree-id46973 . -1) (#("7" 0 1 (fontified t)) . -7010) (undo-tree-id46974 . -1) (#("5" 0 1 (fontified t)) . -7011) (undo-tree-id46975 . -1) 7012 (7008 . 7012)) nil (26157 64681 672624 73000) 0 nil])
([nil nil ((apply -68 7576 8051 undo--wrap-and-run-primitive-undo 7576 8051 ((8045 . 8048) (7976 . 7979) (7976 . 7977) (#("	" 0 1 (fontified t)) . 7976) (7972 . 7976) (7939 . 7942) (7929 . 7932) (7919 . 7922) (7919 . 7920) (#("	" 0 1 (fontified t)) . 7919) (7915 . 7919) (7905 . 7908) (7905 . 7906) (#("	" 0 1 (fontified t)) . 7905) (7901 . 7905) (7869 . 7872) (7869 . 7870) (#("	" 0 1 (fontified t)) . 7869) (7865 . 7869) (7841 . 7844) (7841 . 7842) (#("	" 0 1 (fontified t)) . 7841) (7837 . 7841) (7771 . 7774) (7771 . 7772) (#("	" 0 1 (fontified t)) . 7771) (7767 . 7771) (7731 . 7734) (7731 . 7732) (#("	" 0 1 (fontified t)) . 7731) (7727 . 7731) (7619 . 7622) (7619 . 7620) (#("	" 0 1 (fontified t)) . 7619) (7615 . 7619) (7580 . 7583) 7983)) (t 26157 64681 792160 716000)) nil (26157 64780 102063 437000) 0 nil])
([nil nil ((apply -3 8051 8129 undo--wrap-and-run-primitive-undo 8051 8129 ((8055 . 8058) 8051))) nil (26157 64780 102052 256000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7577) (undo-tree-id47322 . -4) 7581 (7577 . 7581) (#("    " 0 4 (fontified nil)) . 7576) (undo-tree-id47323 . -4) (7576 . 7581) (#("    " 0 4 (fontified nil)) . 7575) (7575 . 7579) (7575 . 7576) (t 26157 64780 245185 733000)) nil (26157 64958 453699 581000) 0 nil])
([nil nil ((7579 . 7583) (#("    " 0 4 (fontified nil)) . 7578) (undo-tree-id47320 . -4) (7578 . 7583) (#("    " 0 4 (fontified nil)) . 7577) (undo-tree-id47321 . -4) (7581 . 7582) (7577 . 7581)) nil (26157 64958 453689 777000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -7582) (undo-tree-id47317 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -7583) (undo-tree-id47318 . -1) (#(" " 0 1 (fontified t)) . -7584) (undo-tree-id47319 . -1) 7585 (7582 . 7585) (7578 . 7582)) nil (26157 64958 453681 230000) 0 nil])
([nil nil ((7625 . 7626) (#("predicate" 0 9 (fontified nil)) . 7625) (7624 . 7625) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7624 7643 nil nil nil t #s(yas--exit 7644 nil))) #s(yas--exit 7644 nil) 225 nil #s(yas--field 1 7624 7643 nil nil nil t #s(yas--exit 7644 nil)) nil nil)) (7617 . 7634) (#("filter(${1:predicate})$0" 0 24 (fontified nil)) . 7617) (7617 . 7641) (#("fil" 0 3 (fontified nil)) . 7617) (7617 . 7620) (#("filter(…) (as Iterator)" 0 23 (fontified nil)) . -7617) (7617 . 7640) (#("fil" 0 3 (fontified t)) . -7617) (undo-tree-id47309 . -2) (undo-tree-id47310 . -3) (undo-tree-id47311 . -3) 7620 (7619 . 7620) (7617 . 7619) (7616 . 7617) (apply yas--snippet-revive 7610 7616 #s(yas--snippet nil nil #s(yas--exit 7616 nil) 224 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7616 nil) 224 nil nil nil nil)) (7610 . 7616) (#("iter()$0" 0 8 (fontified nil)) . 7610) (7610 . 7618) (#("it" 0 2 (fontified nil)) . 7610) (7610 . 7612) (#("iter()" 0 6 (fontified nil)) . -7610) (7610 . 7616) (#("it" 0 2 (fontified t)) . -7610) (undo-tree-id47312 . -2) (undo-tree-id47313 . -2) 7612 (7610 . 7612) (7609 . 7610) (7596 . 7609) (#("pa" 0 2 (fontified nil)) . 7596) (7596 . 7598) (#("particle_list" 0 13 (fontified nil)) . -7596) (7596 . 7609) (#("pa" 0 2 (fontified t)) . -7596) (undo-tree-id47314 . -2) (undo-tree-id47315 . -2) (undo-tree-id47316 . -2) 7598 (7582 . 7598)) nil (26157 64958 453665 284000) 0 nil])
([nil nil ((7625 . 7633)) nil (26157 64958 453628 407000) 0 nil])
([nil nil ((7636 . 7637) (7637 . 7641) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 7636) (7636 . 7637) (7635 . 7637) (7634 . 7636)) nil (26157 64958 453624 938000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7645) (undo-tree-id47304 . -1) (undo-tree-id47305 . -1) (#("o" 0 1 (fontified t)) . -7646) (undo-tree-id47306 . -1) (undo-tree-id47307 . -1) 7647 (7644 . 7647) (#("," 0 1 (fontified t)) . -7644) (undo-tree-id47308 . -1) 7645 (7644 . 7645) (apply yas--snippet-revive 7617 7644 #s(yas--snippet nil (#s(yas--field 1 7624 7643 nil nil nil t #s(yas--exit 7644 nil))) #s(yas--exit 7644 nil) 225 nil #s(yas--field 1 7624 7643 nil nil nil t #s(yas--exit 7644 nil)) nil nil))) nil (26157 64958 453618 715000) 0 nil])
([nil nil ((7637 . 7645) (#("par" 0 3 (fontified nil)) . 7637) (7637 . 7640) (#("particle" 0 8 (fontified nil)) . -7637) (7637 . 7645) (#("par" 0 3 (fontified t)) . -7637) (undo-tree-id47302 . -3) (undo-tree-id47303 . -3) 7640 (7639 . 7640) (7637 . 7639)) nil (26157 64958 453604 3000) 0 nil])
([nil nil ((7662 . 7663) (apply yas--snippet-revive 7653 7662 #s(yas--snippet nil nil #s(yas--exit 7662 nil) 226 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7662 nil) 226 nil nil nil nil)) (7653 . 7662) (#("collect()$0" 0 11 (fontified nil)) . 7653) (7653 . 7664) (#("col" 0 3 (fontified nil)) . 7653) (7653 . 7656) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -7653) (7653 . 7676) (#("col" 0 3 (fontified t)) . -7653) (undo-tree-id47299 . -3) (undo-tree-id47300 . -3) (undo-tree-id47301 . -3) 7656 (7653 . 7656)) nil (26157 64958 453592 163000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -7637) (undo-tree-id47284 . -1) (undo-tree-id47285 . -1) (#("a" 0 1 (fontified t)) . -7638) (undo-tree-id47286 . -1) (undo-tree-id47287 . -1) (#("r" 0 1 (fontified t)) . -7639) (undo-tree-id47288 . -1) (undo-tree-id47289 . -1) (#("t" 0 1 (fontified t)) . -7640) (undo-tree-id47290 . -1) (undo-tree-id47291 . -1) (#("i" 0 1 (fontified t)) . -7641) (undo-tree-id47292 . -1) (undo-tree-id47293 . -1) (#("c" 0 1 (fontified t)) . -7642) (undo-tree-id47294 . -1) (undo-tree-id47295 . -1) (#("l" 0 1 (fontified t)) . -7643) (undo-tree-id47296 . -1) (undo-tree-id47297 . -1) (#("e" 0 1 (fontified t)) . -7644) (undo-tree-id47298 . -1) 7645) nil (26157 64958 453573 737000) 0 nil])
([nil nil ((7773 . 7774) (#("	" 0 1 (fontified nil)) . 7772) (undo-tree-id47257 . -1) (7771 . 7774) (7770 . 7771) (apply yas--snippet-revive 7751 7770 #s(yas--snippet nil (#s(yas--field 1 7768 7769 nil nil nil t #s(yas--exit 7770 nil))) #s(yas--exit 7770 nil) 229 nil #s(yas--field 1 7768 7769 nil nil nil t #s(yas--exit 7770 nil)) nil nil)) (#("m" 0 1 (fontified nil)) . 7769) (7768 . 7769) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7768 7769 nil nil nil t #s(yas--exit 7770 nil))) #s(yas--exit 7770 nil) 229 nil #s(yas--field 1 7768 7769 nil nil nil t #s(yas--exit 7770 nil)) nil nil)) (7751 . 7770) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 7751) (7751 . 7777) (#("s" 0 1 (fontified nil)) . 7751) (7751 . 7752) (#("separate_and_set(…)" 0 19 (fontified nil)) . -7751) (7751 . 7770) (#("s" 0 1 (fontified t)) . -7751) (undo-tree-id47258 . -1) (undo-tree-id47259 . -1) (undo-tree-id47260 . -1) 7752 (7750 . 7752) (7741 . 7750) (#("th" 0 2 (fontified nil)) . 7741) (7741 . 7743) (#("this_scan" 0 9 (fontified nil)) . -7741) (7741 . 7750) (#("th" 0 2 (fontified t)) . -7741) (undo-tree-id47261 . -2) (undo-tree-id47262 . -2) 7743 (7741 . 7743) (7739 . 7741) (7738 . 7739) (apply yas--snippet-revive 7726 7738 #s(yas--snippet nil nil #s(yas--exit 7738 nil) 228 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7738 nil) 228 nil nil nil nil)) (7726 . 7738) (#("get_points()$0" 0 14 (fontified nil)) . 7726) (7726 . 7740) (#("ge" 0 2 (fontified nil)) . 7726) (7726 . 7728) (#("get_points()" 0 12 (fontified nil)) . -7726) (7726 . 7738) (#("ge" 0 2 (fontified t)) . -7726) (undo-tree-id47263 . -1) (undo-tree-id47264 . -2) (undo-tree-id47265 . -2) 7728 (7725 . 7728) (apply yas--snippet-revive 7671 7725 #s(yas--snippet nil (#s(yas--field 1 7697 7707 nil nil nil t #s(yas--field 2 7709 7719 nil nil nil t #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil)))) #s(yas--field 2 7709 7719 nil nil nil t #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil))) #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil))) #s(yas--exit 7725 nil) 227 nil #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil)) nil nil)) (7722 . 7724) (#("rad" 0 3 (fontified nil)) . 7722) (7721 . 7722) (7718 . 7719) (#("y" 0 1 (fontified nil)) . 7718) (7718 . 7719) (#("y" 0 1 (fontified t)) . -7718) (undo-tree-id47266 . -1) (undo-tree-id47267 . -1) (undo-tree-id47268 . -1) 7719 (7717 . 7719) (7709 . 7717) (#("pa" 0 2 (fontified nil)) . 7709) (7709 . 7711) (#("particle" 0 8 (fontified nil)) . -7709) (7709 . 7717) (#("pa" 0 2 (fontified t)) . -7709) (undo-tree-id47269 . -2) (undo-tree-id47270 . -2) 7711 (7710 . 7711) (#("y" 0 1 (fontified nil)) . 7710) (7709 . 7710) (7706 . 7707) (#("x" 0 1 (fontified nil)) . 7706) (7706 . 7707) (#("x" 0 1 (fontified t)) . -7706) (undo-tree-id47271 . -1) (undo-tree-id47272 . -1) (undo-tree-id47273 . -1) 7707 (7705 . 7707) (7697 . 7705) (#("pa" 0 2 (fontified nil)) . 7697) (7697 . 7699) (#("particle" 0 8 (fontified nil)) . -7697) (7697 . 7705) (#("pa" 0 2 (fontified t)) . -7697) (undo-tree-id47274 . -2) (undo-tree-id47275 . -2) 7699 (7698 . 7699) (#("x" 0 1 (fontified nil)) . 7698) (7697 . 7698) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7697 7707 nil nil nil t #s(yas--field 2 7709 7719 nil nil nil t #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil)))) #s(yas--field 2 7709 7719 nil nil nil t #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil))) #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil))) #s(yas--exit 7725 nil) 227 nil #s(yas--field 3 7721 7724 nil nil nil t #s(yas--exit 7725 nil)) nil nil)) (7671 . 7707) (#("lidar_reading_no_rotation(${1:x}, ${2:y}, ${3:rad})$0" 0 53 (fontified nil)) . 7671) (7671 . 7724) (#("li" 0 2 (fontified nil)) . 7671) (7671 . 7673) (#("lidar_reading_no_rotation(…)" 0 28 (fontified nil)) . -7671) (7671 . 7699) (#("li" 0 2 (fontified t)) . -7671) (undo-tree-id47276 . -1) (undo-tree-id47277 . -2) (undo-tree-id47278 . -2) 7673 (7670 . 7673) (7657 . 7670) (#("for_li" 0 6 (fontified nil)) . 7657) (7657 . 7663) (#("for_lidar_map" 0 13 (fontified nil)) . -7657) (7657 . 7670) (#("for_li" 0 6 (fontified t)) . -7657) (undo-tree-id47279 . -5) (undo-tree-id47280 . -6) (undo-tree-id47281 . -6) 7663 (7660 . 7663) (#(" " 0 1 (fontified t)) . -7660) (undo-tree-id47282 . -1) (undo-tree-id47283 . -1) 7661 (7658 . 7661) (7637 . 7658)) nil (26157 64958 452595 277000) 0 nil])
([nil nil ((7773 . 7774) (#("	" 0 1 (fontified nil)) . 7772) (undo-tree-id47256 . -1) (7773 . 7774) (7772 . 7773)) nil (26157 64958 452508 466000) 0 nil])
([nil nil ((7787 . 7790) (7786 . 7788) (7782 . 7786) (#("So" 0 2 (fontified nil)) . 7782) (7782 . 7784) (#("Some" 0 4 (fontified nil)) . -7782) (7782 . 7786) (#("So" 0 2 (fontified t face font-lock-type-face)) . -7782) (undo-tree-id47253 . -1) (undo-tree-id47254 . -2) (undo-tree-id47255 . -2) 7784 (7782 . 7784) (7774 . 7783)) nil (26157 64958 452501 680000) 0 nil])
([nil nil ((7839 . 7844) (7840 . 7841) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-4-face))) . 7839) (7839 . 7844) (7838 . 7840) (7836 . 7839) (apply yas--snippet-revive 7796 7836 #s(yas--snippet nil (#s(yas--field 1 7810 7820 nil nil nil t #s(yas--field 2 7822 7832 nil nil nil t #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil)))) #s(yas--field 2 7822 7832 nil nil nil t #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil))) #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil))) #s(yas--exit 7836 nil) 230 nil #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil)) nil nil)) (#("tol" 0 3 (fontified nil)) . 7835) (7834 . 7835) (7822 . 7823) (7822 . 7831) (#("th" 0 2 (fontified nil)) . 7822) (7822 . 7824) (#("&this_scan" 0 10 (fontified nil)) . -7822) (7822 . 7832) (#("th" 0 2 (fontified t)) . -7822) (undo-tree-id47246 . -2) (undo-tree-id47247 . -2) (undo-tree-id47248 . -2) 7824 (7823 . 7824) (#("map2" 0 4 (fontified nil)) . 7823) (7822 . 7823) (7811 . 7820) (#("ro" 0 2 (fontified nil)) . 7811) (7811 . 7813) (#("robotscan" 0 9 (fontified nil)) . -7811) (7811 . 7820) (#("ro" 0 2 (fontified t)) . -7811) (undo-tree-id47249 . -2) (undo-tree-id47250 . -2) 7813 (7811 . 7813) (#("map1" 0 4 (fontified nil)) . 7811) (7810 . 7811) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7810 7820 nil nil nil t #s(yas--field 2 7822 7832 nil nil nil t #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil)))) #s(yas--field 2 7822 7832 nil nil nil t #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil))) #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil))) #s(yas--exit 7836 nil) 230 nil #s(yas--field 3 7834 7835 nil nil nil t #s(yas--exit 7836 nil)) nil nil)) (7796 . 7826) (#("jaccard_index(${1:map1}, ${2:map2}, ${3:tol})$0" 0 47 (fontified nil)) . 7796) (7796 . 7843) (#("j" 0 1 (fontified nil)) . 7796) (7796 . 7797) (#("jaccard_index(…)" 0 16 (fontified nil)) . -7796) (7796 . 7812) (#("j" 0 1 (fontified t)) . -7796) (undo-tree-id47251 . -1) (undo-tree-id47252 . -1) 7797 (7793 . 7797) (7792 . 7793)) nil (26157 64958 452481 895000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 7793)) nil (26157 64958 452450 968000) 0 nil])
([nil nil ((7847 . 7856) (7843 . 7848)) nil (26157 64958 452448 752000) 0 nil])
([nil nil ((7860 . 7862) (7861 . 7866) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-5-face))) . 7860) (7860 . 7862) (7859 . 7861) (7857 . 7860)) nil (26157 64958 452444 912000) 0 nil])
([nil nil ((#("another " 0 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t)) . 7586) (undo-tree-id47245 . -7)) nil (26157 64958 452440 634000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -7586) (undo-tree-id47235 . -1) (undo-tree-id47236 . -1) (#("a" 0 1 (fontified t)) . -7587) (undo-tree-id47237 . -1) (undo-tree-id47238 . -1) (#("r" 0 1 (fontified t)) . -7588) (undo-tree-id47239 . -1) (undo-tree-id47240 . -1) (#("t" 0 1 (fontified t)) . -7589) (undo-tree-id47241 . -1) (undo-tree-id47242 . -1) (#("i" 0 1 (fontified t)) . -7590) (undo-tree-id47243 . -1) (undo-tree-id47244 . -1) 7591 (7589 . 7591) (7588 . 7589) (7586 . 7588)) nil (26157 64958 452431 183000) 0 nil])
([nil nil ((7586 . 7587)) nil (26157 64958 452390 516000) 0 nil])
([nil nil ((7586 . 7599)) nil (26157 64958 452378 926000) 0 nil])
([nil nil ((apply yas--snippet-revive 7868 7872 #s(yas--snippet nil nil nil 231 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 231 nil nil nil nil)) (7868 . 7872) (#("true" 0 4 (fontified nil)) . 7868) (7868 . 7872) (#("tr" 0 2 (fontified nil)) . 7868) (7868 . 7870) (#("true" 0 4 (fontified nil)) . -7868) (7868 . 7872) (#("tr" 0 2 (fontified t)) . -7868) (undo-tree-id47324 . -2) (undo-tree-id47325 . -2) (undo-tree-id47326 . -1) (undo-tree-id47327 . -1) (undo-tree-id47328 . -1) (undo-tree-id47329 . -1) (undo-tree-id47330 . -1) (undo-tree-id47331 . -1) (undo-tree-id47332 . -1) (undo-tree-id47333 . -1) (undo-tree-id47334 . -1) (undo-tree-id47335 . -1) (undo-tree-id47336 . -1) (undo-tree-id47337 . -1) (undo-tree-id47338 . -1) (undo-tree-id47339 . -1) (undo-tree-id47340 . -1) (undo-tree-id47341 . -1) (undo-tree-id47342 . -1) (undo-tree-id47343 . -1) (undo-tree-id47344 . -1) (undo-tree-id47345 . -1) (undo-tree-id47346 . -1) (undo-tree-id47347 . -1) (undo-tree-id47348 . -1) (undo-tree-id47349 . -1) (undo-tree-id47350 . -1) (undo-tree-id47351 . -1) (undo-tree-id47352 . -1) (undo-tree-id47353 . -1) (undo-tree-id47354 . -1) (undo-tree-id47355 . -1) (undo-tree-id47356 . -1) (undo-tree-id47357 . -1) (undo-tree-id47358 . -1) (undo-tree-id47359 . -1) (undo-tree-id47360 . -1) (undo-tree-id47361 . -1) (undo-tree-id47362 . -1) (undo-tree-id47363 . -1) (undo-tree-id47364 . -1) (undo-tree-id47365 . -1) (undo-tree-id47366 . -1) (undo-tree-id47367 . -1) (undo-tree-id47368 . -1) (undo-tree-id47369 . -1) (undo-tree-id47370 . -1) (undo-tree-id47371 . -1) (undo-tree-id47372 . -1) (undo-tree-id47373 . -1) (undo-tree-id47374 . -1) (undo-tree-id47375 . -1) (undo-tree-id47376 . -1) (undo-tree-id47377 . -1) (undo-tree-id47378 . -1) (undo-tree-id47379 . -1) (undo-tree-id47380 . -1) (undo-tree-id47381 . -1) (undo-tree-id47382 . -1) (undo-tree-id47383 . -1) (undo-tree-id47384 . -1) (undo-tree-id47385 . -1) (undo-tree-id47386 . -2) (undo-tree-id47387 . -2) (undo-tree-id47388 . -2) (undo-tree-id47389 . -2) (undo-tree-id47390 . -2) (undo-tree-id47391 . -2) (undo-tree-id47392 . -2) (undo-tree-id47393 . -2) (undo-tree-id47394 . -2) (undo-tree-id47395 . -2) (undo-tree-id47396 . -2) (undo-tree-id47397 . -2) (undo-tree-id47398 . -2) (undo-tree-id47399 . -2) (undo-tree-id47400 . -2) (undo-tree-id47401 . -2) (undo-tree-id47402 . -2) (undo-tree-id47403 . -2) (undo-tree-id47404 . -2) (undo-tree-id47405 . -2) (undo-tree-id47406 . -2) (undo-tree-id47407 . -2) (undo-tree-id47408 . -2) (undo-tree-id47409 . -2) (undo-tree-id47410 . -2) (undo-tree-id47411 . -2) (undo-tree-id47412 . -2) (undo-tree-id47413 . -2) (undo-tree-id47414 . -2) (undo-tree-id47415 . -2) (undo-tree-id47416 . -2) (undo-tree-id47417 . -2) (undo-tree-id47418 . -2) (undo-tree-id47419 . -2) (undo-tree-id47420 . -2) (undo-tree-id47421 . -2) (undo-tree-id47422 . -2) (undo-tree-id47423 . -2) (undo-tree-id47424 . -2) (undo-tree-id47425 . -2) (undo-tree-id47426 . -2) (undo-tree-id47427 . -2) (undo-tree-id47428 . -2) (undo-tree-id47429 . -2) (undo-tree-id47430 . -2) (undo-tree-id47431 . -2) (undo-tree-id47432 . -2) (undo-tree-id47433 . -2) (undo-tree-id47434 . -2) (undo-tree-id47435 . -2) (undo-tree-id47436 . -2) (undo-tree-id47437 . -2) (undo-tree-id47438 . -2) (undo-tree-id47439 . -2) (undo-tree-id47440 . -2) (undo-tree-id47441 . -2) (undo-tree-id47442 . -2) (undo-tree-id47443 . -2) (undo-tree-id47444 . -2) (undo-tree-id47445 . -2) (undo-tree-id47446 . -2) (undo-tree-id47447 . -2) (undo-tree-id47448 . -2) (undo-tree-id47449 . -2) (undo-tree-id47450 . -2) (undo-tree-id47451 . -2) (undo-tree-id47452 . -2) (undo-tree-id47453 . -2) (undo-tree-id47454 . -2) (undo-tree-id47455 . -2) (undo-tree-id47456 . -2) (undo-tree-id47457 . -2) (undo-tree-id47458 . -2) (undo-tree-id47459 . -2) 7870 (7868 . 7870) (#("T" 0 1 (fontified t face font-lock-type-face)) . -7868) (undo-tree-id47460 . -1) (undo-tree-id47461 . -1) (undo-tree-id47462 . -1) (undo-tree-id47463 . -1) (undo-tree-id47464 . -1) (undo-tree-id47465 . -1) (undo-tree-id47466 . -1) (undo-tree-id47467 . -1) (undo-tree-id47468 . -1) (undo-tree-id47469 . -1) (undo-tree-id47470 . -1) (undo-tree-id47471 . -1) (undo-tree-id47472 . -1) (undo-tree-id47473 . -1) (undo-tree-id47474 . -1) (undo-tree-id47475 . -1) (undo-tree-id47476 . -1) (undo-tree-id47477 . -1) (undo-tree-id47478 . -1) (undo-tree-id47479 . -1) (undo-tree-id47480 . -1) (undo-tree-id47481 . -1) (undo-tree-id47482 . -1) (undo-tree-id47483 . -1) (undo-tree-id47484 . -1) (undo-tree-id47485 . -1) (undo-tree-id47486 . -1) (undo-tree-id47487 . -1) (undo-tree-id47488 . -1) (undo-tree-id47489 . -1) (undo-tree-id47490 . -1) (undo-tree-id47491 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -7869) (undo-tree-id47492 . -1) (undo-tree-id47493 . -1) (undo-tree-id47494 . -1) (undo-tree-id47495 . -1) (undo-tree-id47496 . -1) (undo-tree-id47497 . -1) (undo-tree-id47498 . -1) (undo-tree-id47499 . -1) (undo-tree-id47500 . -1) (undo-tree-id47501 . -1) (undo-tree-id47502 . -1) (undo-tree-id47503 . -1) (undo-tree-id47504 . -1) (undo-tree-id47505 . -1) (undo-tree-id47506 . -1) (undo-tree-id47507 . -1) (undo-tree-id47508 . -1) (undo-tree-id47509 . -1) (undo-tree-id47510 . -1) (undo-tree-id47511 . -1) (undo-tree-id47512 . -1) (undo-tree-id47513 . -1) (undo-tree-id47514 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -7870) (undo-tree-id47515 . -1) (undo-tree-id47516 . -1) (undo-tree-id47517 . -1) 7871 (#("e" 0 1 (fontified t face font-lock-type-face)) . -7871) (undo-tree-id47518 . -1) (undo-tree-id47519 . -1) 7872 (7870 . 7872) (7868 . 7870) (t 26157 64958 602950 426000)) nil (26157 64968 968143 279000) 0 nil])
([nil nil ((7892 . 7894) (7889 . 7892) (7887 . 7889) (7888 . 7893) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-5-face))) . 7887) (7887 . 7889) (7886 . 7888) (7879 . 7887) (t 26157 64969 104769 917000)) nil (26157 64974 288133 472000) 0 nil])
([nil nil ((7917 . 7922) (7912 . 7917) (7913 . 7914) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-4-face))) . 7912) (7912 . 7917) (7911 . 7913) (7904 . 7912) (t 26157 64974 429689 365000)) nil (26157 64979 957709 298000) 0 nil])
([nil nil ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 7582) (undo-tree-id47520 . -3) (undo-tree-id47521 . -4) (undo-tree-id47522 . -4) (t 26157 64980 98666 49000)) nil (26157 64989 347051 529000) 0 nil])
([nil nil ((#("iter" 0 4 (fontified t)) . 7612) (undo-tree-id47662 . -3) (undo-tree-id47663 . -4) (t 26157 64989 488279 49000)) nil (26157 65008 151077 944000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7612) (undo-tree-id47659 . -1) (undo-tree-id47660 . -1) (undo-tree-id47661 . -1)) nil (26157 65008 151070 859000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7612) (undo-tree-id47657 . -1) (undo-tree-id47658 . -1)) nil (26157 65008 151061 76000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7611) (undo-tree-id47523 . -1) (undo-tree-id47524 . -1) (undo-tree-id47525 . -1) (undo-tree-id47526 . -1) (undo-tree-id47527 . -1) (undo-tree-id47528 . -1) (undo-tree-id47529 . -1) (undo-tree-id47530 . -1) (undo-tree-id47531 . -1) (undo-tree-id47532 . -1) (undo-tree-id47533 . -1) (undo-tree-id47534 . -1) (undo-tree-id47535 . -1) (undo-tree-id47536 . -1) (undo-tree-id47537 . -1) (undo-tree-id47538 . -1) (undo-tree-id47539 . -1) (undo-tree-id47540 . -1) (undo-tree-id47541 . -1) (undo-tree-id47542 . -1) (undo-tree-id47543 . -1) (undo-tree-id47544 . -1) (undo-tree-id47545 . -1) (undo-tree-id47546 . -1) (undo-tree-id47547 . -1) (undo-tree-id47548 . -1) (undo-tree-id47549 . -1) (undo-tree-id47550 . -1) (undo-tree-id47551 . -1) (undo-tree-id47552 . -1) (undo-tree-id47553 . -1) (undo-tree-id47554 . -1) (undo-tree-id47555 . -1) (undo-tree-id47556 . -1) (undo-tree-id47557 . -1) (undo-tree-id47558 . -1) (undo-tree-id47559 . -1) (undo-tree-id47560 . -1) (undo-tree-id47561 . -1) (undo-tree-id47562 . -1) (undo-tree-id47563 . -1) (undo-tree-id47564 . -1) (undo-tree-id47565 . -1) (undo-tree-id47566 . -1) (undo-tree-id47567 . -1) (undo-tree-id47568 . -1) (undo-tree-id47569 . -1) (undo-tree-id47570 . -1) (undo-tree-id47571 . -1) (undo-tree-id47572 . -1) (undo-tree-id47573 . -1) (undo-tree-id47574 . -1) (undo-tree-id47575 . -1) (undo-tree-id47576 . -1) (undo-tree-id47577 . -1) (undo-tree-id47578 . -1) (undo-tree-id47579 . -1) (undo-tree-id47580 . -1) (undo-tree-id47581 . -1) (undo-tree-id47582 . -1) (undo-tree-id47583 . -1) (undo-tree-id47584 . -1) (undo-tree-id47585 . -1) (undo-tree-id47586 . -1) (undo-tree-id47587 . -1) (undo-tree-id47588 . -1) (undo-tree-id47589 . -1) (undo-tree-id47590 . -1) (undo-tree-id47591 . -1) (undo-tree-id47592 . -1) (undo-tree-id47593 . -1) (undo-tree-id47594 . -1) (undo-tree-id47595 . -1) (undo-tree-id47596 . -1) (undo-tree-id47597 . -1) (undo-tree-id47598 . -1) (undo-tree-id47599 . -1) (undo-tree-id47600 . -1) (undo-tree-id47601 . -1) (undo-tree-id47602 . -1) (undo-tree-id47603 . -1) (undo-tree-id47604 . -1) (undo-tree-id47605 . -1) (undo-tree-id47606 . -1) (undo-tree-id47607 . -1) (undo-tree-id47608 . -1) (undo-tree-id47609 . -1) (undo-tree-id47610 . -1) (undo-tree-id47611 . -1) (undo-tree-id47612 . -1) (undo-tree-id47613 . -1) (undo-tree-id47614 . -1) (undo-tree-id47615 . -1) (undo-tree-id47616 . -1) (undo-tree-id47617 . -1) (undo-tree-id47618 . -1) (undo-tree-id47619 . -1) (undo-tree-id47620 . -1) (undo-tree-id47621 . -1) (undo-tree-id47622 . -1) (undo-tree-id47623 . -1) (undo-tree-id47624 . -1) (undo-tree-id47625 . -1) (undo-tree-id47626 . -1) (undo-tree-id47627 . -1) (undo-tree-id47628 . -1) (undo-tree-id47629 . -1) (undo-tree-id47630 . -1) (undo-tree-id47631 . -1) (undo-tree-id47632 . -1) (undo-tree-id47633 . -1) (undo-tree-id47634 . -1) (undo-tree-id47635 . -1) (undo-tree-id47636 . -1) (undo-tree-id47637 . -1) (undo-tree-id47638 . -1) (undo-tree-id47639 . -1) (undo-tree-id47640 . -1) (undo-tree-id47641 . -1) (undo-tree-id47642 . -1) (undo-tree-id47643 . -1) (undo-tree-id47644 . -1) (undo-tree-id47645 . -1) (undo-tree-id47646 . -1) (undo-tree-id47647 . -1) (undo-tree-id47648 . -1) (undo-tree-id47649 . -1) (undo-tree-id47650 . -1) (undo-tree-id47651 . -1) (undo-tree-id47652 . -1) (undo-tree-id47653 . -1) (undo-tree-id47654 . -1) (undo-tree-id47655 . -1) (undo-tree-id47656 . -1)) nil (26157 65008 151034 440000) 0 nil])
([nil nil ((7612 . 7613) (t 26157 65008 295493 763000)) nil (26157 65018 916727 906000) 0 nil])
([nil nil ((apply yas--snippet-revive 7612 7623 #s(yas--snippet nil nil #s(yas--exit 7623 nil) 232 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7623 nil) 232 nil nil nil nil)) (7612 . 7623) (#("into_iter()$0" 0 13 (fontified nil)) . 7612) (7612 . 7625) (#("i" 0 1 (fontified nil)) . 7612) (7612 . 7613) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -7612) (7612 . 7641) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -7612) (undo-tree-id47664 . -2) (undo-tree-id47665 . -2) (undo-tree-id47666 . -1) (undo-tree-id47667 . -1) (undo-tree-id47668 . -1) (undo-tree-id47669 . -1) (undo-tree-id47670 . -1) (undo-tree-id47671 . -1) (undo-tree-id47672 . -1) (undo-tree-id47673 . -1) (undo-tree-id47674 . -1) (undo-tree-id47675 . -1) (undo-tree-id47676 . -1) (undo-tree-id47677 . -1) (undo-tree-id47678 . -1) (undo-tree-id47679 . -1) (undo-tree-id47680 . -1) (undo-tree-id47681 . -1) (undo-tree-id47682 . -1) (undo-tree-id47683 . -1) (undo-tree-id47684 . -1) (undo-tree-id47685 . -1) (undo-tree-id47686 . -1) (undo-tree-id47687 . -1) (undo-tree-id47688 . -1) (undo-tree-id47689 . -1) (undo-tree-id47690 . -1) (undo-tree-id47691 . -1) (undo-tree-id47692 . -1) (undo-tree-id47693 . -1) (undo-tree-id47694 . -1) (undo-tree-id47695 . -1) (undo-tree-id47696 . -1) (undo-tree-id47697 . -1) (undo-tree-id47698 . -1) (undo-tree-id47699 . -1) (undo-tree-id47700 . -1) (undo-tree-id47701 . -1) (undo-tree-id47702 . -1) (undo-tree-id47703 . -1) (undo-tree-id47704 . -1) (undo-tree-id47705 . -1) (undo-tree-id47706 . -1) (undo-tree-id47707 . -1) (undo-tree-id47708 . -1) (undo-tree-id47709 . -1) (undo-tree-id47710 . -1) (undo-tree-id47711 . -1) (undo-tree-id47712 . -1) (undo-tree-id47713 . -1) (undo-tree-id47714 . -2) (undo-tree-id47715 . -2) (undo-tree-id47716 . -2) (undo-tree-id47717 . -2) (undo-tree-id47718 . -2) (undo-tree-id47719 . -2) (undo-tree-id47720 . -2) (undo-tree-id47721 . -2) (undo-tree-id47722 . -2) (undo-tree-id47723 . -2) (undo-tree-id47724 . -2) (undo-tree-id47725 . -2) (undo-tree-id47726 . -2) (undo-tree-id47727 . -2) (undo-tree-id47728 . -2) (undo-tree-id47729 . -2) (undo-tree-id47730 . -2) (undo-tree-id47731 . -2) (undo-tree-id47732 . -2) (undo-tree-id47733 . -2) (undo-tree-id47734 . -1) (undo-tree-id47735 . -1) (undo-tree-id47736 . -1) (undo-tree-id47737 . -2) (undo-tree-id47738 . -2) (undo-tree-id47739 . -2) (undo-tree-id47740 . -2) (undo-tree-id47741 . -2) (undo-tree-id47742 . -2) (undo-tree-id47743 . -2) (undo-tree-id47744 . -2) (undo-tree-id47745 . -2) (undo-tree-id47746 . -2) (undo-tree-id47747 . -2) (undo-tree-id47748 . -2) (undo-tree-id47749 . -2) (undo-tree-id47750 . -2) (undo-tree-id47751 . -2) (undo-tree-id47752 . -2) (undo-tree-id47753 . -2) (undo-tree-id47754 . -2) (undo-tree-id47755 . -2) (undo-tree-id47756 . -2) (undo-tree-id47757 . -2) (undo-tree-id47758 . -2) (undo-tree-id47759 . -2) (undo-tree-id47760 . -2) (undo-tree-id47761 . -2) (undo-tree-id47762 . -2) (undo-tree-id47763 . -2) (undo-tree-id47764 . -2) (undo-tree-id47765 . -2) (undo-tree-id47766 . -2) (undo-tree-id47767 . -2) (undo-tree-id47768 . -2) (undo-tree-id47769 . -2) (undo-tree-id47770 . -2) (undo-tree-id47771 . -2) (undo-tree-id47772 . -2) (undo-tree-id47773 . -2) (undo-tree-id47774 . -2) (undo-tree-id47775 . -2) (undo-tree-id47776 . -2) (undo-tree-id47777 . -2) (undo-tree-id47778 . -2) (undo-tree-id47779 . -2) (undo-tree-id47780 . -2) (undo-tree-id47781 . -2) (undo-tree-id47782 . -2) (undo-tree-id47783 . -2) (undo-tree-id47784 . -2) (undo-tree-id47785 . -2) (undo-tree-id47786 . -2) (undo-tree-id47787 . -2) (undo-tree-id47788 . -2) (undo-tree-id47789 . -2) (undo-tree-id47790 . -2) (undo-tree-id47791 . -2) (undo-tree-id47792 . -2) (undo-tree-id47793 . -2) (undo-tree-id47794 . -2) (undo-tree-id47795 . -2) (undo-tree-id47796 . -2) (undo-tree-id47797 . -2) (undo-tree-id47798 . -2) (undo-tree-id47799 . -2) (undo-tree-id47800 . -2) (undo-tree-id47801 . -2) (undo-tree-id47802 . -2) (undo-tree-id47803 . -2) (undo-tree-id47804 . -2) (undo-tree-id47805 . -2) (undo-tree-id47806 . -2) (undo-tree-id47807 . -2) (undo-tree-id47808 . -2) (undo-tree-id47809 . -2) (undo-tree-id47810 . -2) (undo-tree-id47811 . -2) (undo-tree-id47812 . -2) (undo-tree-id47813 . -2) (undo-tree-id47814 . -2) (undo-tree-id47815 . -2) (undo-tree-id47816 . -2) (undo-tree-id47817 . -2) (undo-tree-id47818 . -2) (undo-tree-id47819 . -2) (undo-tree-id47820 . -2) (undo-tree-id47821 . -2) (undo-tree-id47822 . -2) (undo-tree-id47823 . -2) (undo-tree-id47824 . -2) (undo-tree-id47825 . -2) (undo-tree-id47826 . -2) (undo-tree-id47827 . -2) (undo-tree-id47828 . -2) (undo-tree-id47829 . -2) (undo-tree-id47830 . -2) (undo-tree-id47831 . -2) (undo-tree-id47832 . -2) (undo-tree-id47833 . -2) (undo-tree-id47834 . -2) (undo-tree-id47835 . -2) (undo-tree-id47836 . -2) (undo-tree-id47837 . -2) (undo-tree-id47838 . -2) (undo-tree-id47839 . -2) 7614 (7612 . 7614)) nil (26157 65018 916693 760000) 0 nil])
([nil nil ((apply -13 6857 6973 undo--wrap-and-run-primitive-undo 6857 6973 ((6967 . 6970) (6901 . 6904) (6901 . 6902) (#("	" 0 1 (fontified t)) . 6901) (6897 . 6901) (6861 . 6864) 6857)) (t 26157 65019 61325 233000)) nil (26157 65098 688184 854000) 0 nil])
([nil nil ((6974 . 6978) (#("    " 0 4 (fontified nil)) . 6973) (undo-tree-id48002 . -4) (6973 . 6978) (#("    " 0 4 (fontified nil)) . 6972) (undo-tree-id48003 . -4) (6976 . 6977) (6972 . 6976)) nil (26157 65098 688181 240000) 0 nil])
([nil nil ((7012 . 7013) (7013 . 7017) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 7012) (7012 . 7013) (7011 . 7013) (7008 . 7012) (#("f" 0 1 (fontified nil)) . 7008) (7007 . 7008) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7007 7019 nil nil nil t #s(yas--exit 7020 nil))) #s(yas--exit 7020 nil) 234 nil #s(yas--field 1 7007 7019 nil nil nil t #s(yas--exit 7020 nil)) nil nil)) (6998 . 7009) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 6998) (6998 . 7016) (#("fo" 0 2 (fontified nil)) . 6998) (6998 . 7000) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -6998) (6998 . 7023) (#("fo" 0 2 (fontified t)) . -6998) (undo-tree-id47990 . -2) (undo-tree-id47991 . -2) (undo-tree-id47992 . -2) 7000 (6997 . 7000) (apply yas--snippet-revive 6991 6997 #s(yas--snippet nil nil #s(yas--exit 6997 nil) 233 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6997 nil) 233 nil nil nil nil)) (6991 . 6997) (#("iter()$0" 0 8 (fontified nil)) . 6991) (6991 . 6999) (#("it" 0 2 (fontified nil)) . 6991) (6991 . 6993) (#("iter()" 0 6 (fontified nil)) . -6991) (6991 . 6997) (#("it" 0 2 (fontified t)) . -6991) (undo-tree-id47993 . -2) (undo-tree-id47994 . -2) 6993 (6990 . 6993) (6977 . 6990) (#("pa" 0 2 (fontified nil)) . 6977) (6977 . 6979) (#("particle_list" 0 13 (fontified nil)) . -6977) (6977 . 6990) (#("pa" 0 2 (fontified t)) . -6977) (undo-tree-id47995 . -2) (undo-tree-id47996 . -2) (undo-tree-id47997 . -2) 6979 (6977 . 6979) (#("m" 0 1 (fontified t)) . -6977) (undo-tree-id47998 . -1) (undo-tree-id47999 . -1) (#("a" 0 1 (fontified t)) . -6978) (undo-tree-id48000 . -1) (undo-tree-id48001 . -1) 6979 (6977 . 6979) (6973 . 6977)) nil (26157 65098 688153 608000) 0 nil])
([nil nil ((7020 . 7021) (apply yas--snippet-revive 6998 7020 #s(yas--snippet nil (#s(yas--field 1 7007 7019 nil nil nil t #s(yas--exit 7020 nil))) #s(yas--exit 7020 nil) 234 nil #s(yas--field 1 7007 7019 nil nil nil t #s(yas--exit 7020 nil)) nil nil))) nil (26157 65098 688114 948000) 0 nil])
([nil nil ((7044 . 7045) (#("x" 0 1 (fontified nil)) . 7044) (undo-tree-id47978 . -1) (7043 . 7044) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7043 7045 nil nil nil t #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil)))) #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil))) #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil))) #s(yas--exit 7054 nil) 235 nil #s(yas--field 1 7043 7045 nil nil nil t #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil)))) nil nil)) (7022 . 7053) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 7022) (7022 . 7070) (#("ma" 0 2 (fontified nil)) . 7022) (7022 . 7024) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -7022) (7022 . 7045) (#("ma" 0 2 (fontified t)) . -7022) (undo-tree-id47979 . -1) (undo-tree-id47980 . -2) (undo-tree-id47981 . -2) 7024 (7021 . 7024) (7013 . 7021) (#("map_da" 0 6 (fontified nil)) . 7013) (7013 . 7019) (#("map_data" 0 8 (fontified nil)) . -7013) (7013 . 7021) (#("map_da" 0 6 (fontified t)) . -7013) (undo-tree-id47982 . -6) (undo-tree-id47983 . -6) 7019 (7016 . 7019) (#("." 0 1 (fontified t)) . -7016) (undo-tree-id47984 . -1) (undo-tree-id47985 . -1) (#("d" 0 1 (fontified t)) . -7017) (undo-tree-id47986 . -1) (undo-tree-id47987 . -1) (#("a" 0 1 (fontified t)) . -7018) (undo-tree-id47988 . -1) (undo-tree-id47989 . -1) 7019 (7013 . 7019)) nil (26157 65098 688105 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 7022 7054 #s(yas--snippet nil (#s(yas--field 1 7043 7045 nil nil nil t #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil)))) #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil))) #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil))) #s(yas--exit 7054 nil) 235 nil #s(yas--field 1 7043 7045 nil nil nil t #s(yas--field 2 7047 7048 nil nil nil nil #s(yas--field 3 7050 7053 nil nil nil nil #s(yas--exit 7054 nil)))) nil nil))) nil (26157 65098 687768 374000) 0 nil])
([nil nil ((7011 . 7016) (#("t" 0 1 (fontified t)) . -7011) (undo-tree-id47970 . -1) (undo-tree-id47971 . -1) (#("i" 0 1 (fontified t)) . -7012) (undo-tree-id47972 . -1) (undo-tree-id47973 . -1) (#("l" 0 1 (fontified t)) . -7013) (undo-tree-id47974 . -1) (undo-tree-id47975 . -1) (#("e" 0 1 (fontified t)) . -7014) (undo-tree-id47976 . -1) (undo-tree-id47977 . -1) 7015 (7008 . 7015)) nil (26157 65098 687764 139000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -7061) (undo-tree-id47842 . -1) (undo-tree-id47843 . -1) (undo-tree-id47844 . -1) (undo-tree-id47845 . -1) (undo-tree-id47846 . -1) (undo-tree-id47847 . -1) (undo-tree-id47848 . -1) (undo-tree-id47849 . -1) (undo-tree-id47850 . -1) (undo-tree-id47851 . -1) (undo-tree-id47852 . -1) (undo-tree-id47853 . -1) (undo-tree-id47854 . -1) (undo-tree-id47855 . -1) (undo-tree-id47856 . -1) (undo-tree-id47857 . -1) (undo-tree-id47858 . -1) (undo-tree-id47859 . -1) (undo-tree-id47860 . -1) (undo-tree-id47861 . -1) (undo-tree-id47862 . -1) (undo-tree-id47863 . -1) (undo-tree-id47864 . -1) (undo-tree-id47865 . -1) (undo-tree-id47866 . -1) (undo-tree-id47867 . -1) (undo-tree-id47868 . -1) (undo-tree-id47869 . -1) (undo-tree-id47870 . -1) (undo-tree-id47871 . -1) (undo-tree-id47872 . -1) (undo-tree-id47873 . -1) (undo-tree-id47874 . -1) (undo-tree-id47875 . -1) (undo-tree-id47876 . -1) 7062 (7061 . 7062) (7060 . 7061) (#("x" 0 1 (fontified nil)) . 7060) (7060 . 7061) (#("x" 0 1 (fontified t)) . -7060) (undo-tree-id47877 . -1) (undo-tree-id47878 . -1) (undo-tree-id47879 . -1) (undo-tree-id47880 . -1) (undo-tree-id47881 . -1) (undo-tree-id47882 . -1) (undo-tree-id47883 . -1) (undo-tree-id47884 . -1) (undo-tree-id47885 . -1) (undo-tree-id47886 . -1) (undo-tree-id47887 . -1) (undo-tree-id47888 . -1) (undo-tree-id47889 . -1) (undo-tree-id47890 . -1) (undo-tree-id47891 . -1) (undo-tree-id47892 . -1) (undo-tree-id47893 . -1) (undo-tree-id47894 . -1) (undo-tree-id47895 . -1) (undo-tree-id47896 . -1) (undo-tree-id47897 . -1) (undo-tree-id47898 . -1) (undo-tree-id47899 . -1) (undo-tree-id47900 . -1) (undo-tree-id47901 . -1) (undo-tree-id47902 . -1) (undo-tree-id47903 . -1) (undo-tree-id47904 . -1) (undo-tree-id47905 . -1) (undo-tree-id47906 . -1) (undo-tree-id47907 . -1) (undo-tree-id47908 . -1) (undo-tree-id47909 . -1) (undo-tree-id47910 . -1) (undo-tree-id47911 . -1) (undo-tree-id47912 . -1) (undo-tree-id47913 . -1) (undo-tree-id47914 . -1) (undo-tree-id47915 . -1) (undo-tree-id47916 . -1) (undo-tree-id47917 . -1) (undo-tree-id47918 . -1) (undo-tree-id47919 . -1) (undo-tree-id47920 . -1) (undo-tree-id47921 . -1) (undo-tree-id47922 . -1) (undo-tree-id47923 . -1) (undo-tree-id47924 . -1) (undo-tree-id47925 . -1) (undo-tree-id47926 . -1) (undo-tree-id47927 . -1) (undo-tree-id47928 . -1) (undo-tree-id47929 . -1) (undo-tree-id47930 . -1) (undo-tree-id47931 . -1) (undo-tree-id47932 . -1) (undo-tree-id47933 . -1) (undo-tree-id47934 . -1) (undo-tree-id47935 . -1) (undo-tree-id47936 . -1) (undo-tree-id47937 . -1) (undo-tree-id47938 . -1) (undo-tree-id47939 . -1) (undo-tree-id47940 . -1) (undo-tree-id47941 . -1) (undo-tree-id47942 . -1) (undo-tree-id47943 . -1) (undo-tree-id47944 . -1) (undo-tree-id47945 . -1) (undo-tree-id47946 . -1) (undo-tree-id47947 . -1) (undo-tree-id47948 . -1) (undo-tree-id47949 . -1) (undo-tree-id47950 . -1) (undo-tree-id47951 . -1) (undo-tree-id47952 . -1) (undo-tree-id47953 . -1) (undo-tree-id47954 . -1) 7061 (7059 . 7061) (7051 . 7059) (#("par" 0 3 (fontified nil)) . 7051) (7051 . 7054) (#("particle" 0 8 (fontified nil)) . -7051) (7051 . 7059) (#("par" 0 3 (fontified t)) . -7051) (undo-tree-id47955 . -3) (undo-tree-id47956 . -3) (undo-tree-id47957 . -3) (undo-tree-id47958 . -3) (undo-tree-id47959 . -3) (undo-tree-id47960 . -3) (undo-tree-id47961 . -3) (undo-tree-id47962 . -3) (undo-tree-id47963 . -3) (undo-tree-id47964 . -3) (undo-tree-id47965 . -3) (undo-tree-id47966 . -3) (undo-tree-id47967 . -3) (undo-tree-id47968 . -3) (undo-tree-id47969 . -3) 7054 (7053 . 7054)) nil (26157 65098 687732 277000) 0 nil])
([nil nil ((7063 . 7072)) nil (26157 65098 687497 457000) 0 nil])
([nil nil ((#("rad" 0 3 (fontified t)) . 7075) (undo-tree-id47840 . -2) (undo-tree-id47841 . -3)) nil (26157 65098 687493 567000) 0 nil])
([nil nil ((7075 . 7076)) nil (26157 65098 687471 862000) 0 nil])
([nil nil ((7077 . 7078)) nil (26157 65098 687457 491000) 0 nil])
([nil nil ((6852 . 6853) (t 26157 65098 830745 66000)) nil (26157 65119 129468 269000) 0 nil])
([nil nil ((6584 . 6586) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -6584) (undo-tree-id48004 . -1) (undo-tree-id48005 . -1) (undo-tree-id48006 . -1) (undo-tree-id48007 . -1) (undo-tree-id48008 . -1) (undo-tree-id48009 . -1) (undo-tree-id48010 . -1) (undo-tree-id48011 . -1) (undo-tree-id48012 . -1) (undo-tree-id48013 . -1) (undo-tree-id48014 . -1) (undo-tree-id48015 . -1) (undo-tree-id48016 . -1) (undo-tree-id48017 . -1) 6585 (6576 . 6585) (6555 . 6576) (6551 . 6555) (#("    " 0 4 (fontified nil)) . 6550) (undo-tree-id48018 . -4) (6549 . 6555)) nil (26157 65119 129456 175000) 0 nil])
([nil nil ((#("    // for particle in &particle_list {
    // 	map_data.make_black_rectangle(particle.x, particle.y, 1);
    // }

" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 22 (fontified t face font-lock-comment-face) 22 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face) 24 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face) 39 40 (fontified t face font-lock-comment-face) 40 44 (fontified t) 44 47 (fontified t face font-lock-comment-delimiter-face) 47 48 (fontified t face font-lock-comment-delimiter-face) 48 50 (fontified t face font-lock-comment-face) 50 57 (fontified t face font-lock-comment-face) 57 77 (fontified t face font-lock-comment-face) 77 78 (fontified t face font-lock-comment-face) 78 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 90 (fontified t face font-lock-comment-face) 90 94 (fontified t face font-lock-comment-face) 94 99 (fontified t face font-lock-comment-face) 99 100 (fontified t face font-lock-comment-face) 100 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 105 (fontified t face font-lock-comment-face) 105 106 (fontified t face font-lock-comment-face) 106 110 (fontified t) 110 113 (fontified t face font-lock-comment-delimiter-face) 113 114 (fontified t face font-lock-comment-face) 114 115 (fontified t face font-lock-comment-face) 115 116 (fontified t)) . 6895) (undo-tree-id48019 . -115) (undo-tree-id48020 . -115) (undo-tree-id48021 . -115) (undo-tree-id48022 . -34) (undo-tree-id48023 . -34) (undo-tree-id48024 . -34) (undo-tree-id48025 . -34) (undo-tree-id48026 . -34) (undo-tree-id48027 . -34) (undo-tree-id48028 . -34) (undo-tree-id48029 . -34) (undo-tree-id48030 . -34) (undo-tree-id48031 . -74) (undo-tree-id48032 . -74) (undo-tree-id48033 . -74) (undo-tree-id48034 . -74) (undo-tree-id48035 . -74) (undo-tree-id48036 . -74) (undo-tree-id48037 . -74) (undo-tree-id48038 . -74) (undo-tree-id48039 . -74) (undo-tree-id48040 . -113) (undo-tree-id48041 . -113) (undo-tree-id48042 . -113) (undo-tree-id48043 . -113) (undo-tree-id48044 . -113) (undo-tree-id48045 . -113) (undo-tree-id48046 . -113) (undo-tree-id48047 . -113) (undo-tree-id48048 . -113) (undo-tree-id48049 . -115) (undo-tree-id48050 . -115) (undo-tree-id48051 . -115) (undo-tree-id48052 . -115) (undo-tree-id48053 . -115) (undo-tree-id48054 . -115) (undo-tree-id48055 . -115) (undo-tree-id48056 . -115) (undo-tree-id48057 . -115) (undo-tree-id48058 . -115) (undo-tree-id48059 . -115) (undo-tree-id48060 . -115) (undo-tree-id48061 . -115) (undo-tree-id48062 . -115) (undo-tree-id48063 . -115) (undo-tree-id48064 . -115) (undo-tree-id48065 . -115) (undo-tree-id48066 . -115) (undo-tree-id48067 . -115) (undo-tree-id48068 . -115) (undo-tree-id48069 . -115) (undo-tree-id48070 . -115) (undo-tree-id48071 . -115) (undo-tree-id48072 . -115) (undo-tree-id48073 . -115) (undo-tree-id48074 . -115) (undo-tree-id48075 . -115) (undo-tree-id48076 . -115) (undo-tree-id48077 . -115) (undo-tree-id48078 . -115) (undo-tree-id48079 . -115) (undo-tree-id48080 . -115) (undo-tree-id48081 . -115) (undo-tree-id48082 . -115) (undo-tree-id48083 . -115) (undo-tree-id48084 . -115) (undo-tree-id48085 . -115) (undo-tree-id48086 . -115) (undo-tree-id48087 . -115) (undo-tree-id48088 . -115) (undo-tree-id48089 . -115) (undo-tree-id48090 . -115) (undo-tree-id48091 . -115) (undo-tree-id48092 . -115) (undo-tree-id48093 . -115) (undo-tree-id48094 . -115) (undo-tree-id48095 . -115) (undo-tree-id48096 . -115) (undo-tree-id48097 . -115) (undo-tree-id48098 . -116) (undo-tree-id48099 . -115) (undo-tree-id48100 . -115) (undo-tree-id48101 . -115) (undo-tree-id48102 . -115) (undo-tree-id48103 . -115) (undo-tree-id48104 . -115) (undo-tree-id48105 . -115) (undo-tree-id48106 . -115) (undo-tree-id48107 . -115) (undo-tree-id48108 . -115) (undo-tree-id48109 . -115) (undo-tree-id48110 . -115) (undo-tree-id48111 . -106) (undo-tree-id48112 . -106) (undo-tree-id48113 . -106) (undo-tree-id48114 . -106) (undo-tree-id48115 . -106) (undo-tree-id48116 . -106) (undo-tree-id48117 . -106) (undo-tree-id48118 . -106) (undo-tree-id48119 . -106) (undo-tree-id48120 . -40) (undo-tree-id48121 . -40) (undo-tree-id48122 . -40) (undo-tree-id48123 . -40) (undo-tree-id48124 . -40) (undo-tree-id48125 . -40) (undo-tree-id48126 . -40) (undo-tree-id48127 . -40) (undo-tree-id48128 . -40) (undo-tree-id48129 . -116) (t 26157 65119 274152 292000)) nil (26157 65134 879397 732000) 0 nil])
([nil nil ((#("    // for particle in particle_list {
    // 	let mut this_scan = for_lidar_map.lidar_reading_no_rotation(particle.x, particle.y, 100).get_points();

    // 	this_scan.separate_and_set(7);

    // 	if let Some(val) = jaccard_index(&robotscan, &this_scan, 0) {
    // 	    if val > 0.4 {

    // 		new_vector.push(particle);
    // 	    }
    // 	}
    // }

" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 22 (fontified t face font-lock-comment-face) 22 23 (fontified t face font-lock-comment-face) 23 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face) 39 43 (fontified t) 43 46 (fontified t face font-lock-comment-delimiter-face) 46 47 (fontified t face font-lock-comment-delimiter-face) 47 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 54 (fontified t face font-lock-comment-face) 54 55 (fontified t face font-lock-comment-face) 55 59 (fontified t face font-lock-comment-face) 59 64 (fontified t face font-lock-comment-face) 64 67 (fontified t face font-lock-comment-face) 67 81 (fontified t face font-lock-comment-face) 81 105 (fontified t face font-lock-comment-face) 105 106 (fontified t face font-lock-comment-face) 106 107 (fontified t face font-lock-comment-face) 107 116 (fontified t face font-lock-comment-face) 116 117 (fontified t face font-lock-comment-face) 117 119 (fontified t face font-lock-comment-face) 119 128 (fontified t face font-lock-comment-face) 128 129 (fontified t face font-lock-comment-face) 129 134 (fontified t face font-lock-comment-face) 134 135 (fontified t face font-lock-comment-face) 135 136 (fontified t face font-lock-comment-face) 136 146 (fontified t face font-lock-comment-face) 146 147 (fontified t face font-lock-comment-face) 147 148 (fontified t face font-lock-comment-face) 148 150 (fontified t face font-lock-comment-face) 150 155 (fontified t) 155 158 (fontified t face font-lock-comment-delimiter-face) 158 159 (fontified t face font-lock-comment-delimiter-face) 159 169 (fontified t face font-lock-comment-face) 169 185 (fontified t face font-lock-comment-face) 185 186 (fontified t face font-lock-comment-face) 186 187 (fontified t face font-lock-comment-face) 187 188 (fontified t face font-lock-comment-face) 188 189 (fontified t face font-lock-comment-face) 189 190 (fontified t face font-lock-comment-face) 190 191 (fontified t) 191 195 (fontified t) 195 198 (fontified t face font-lock-comment-delimiter-face) 198 199 (fontified t face font-lock-comment-delimiter-face) 199 201 (fontified t face font-lock-comment-face) 201 202 (fontified t face font-lock-comment-face) 202 205 (fontified t face font-lock-comment-face) 205 206 (fontified t face font-lock-comment-face) 206 210 (fontified t face font-lock-comment-face) 210 211 (fontified t face font-lock-comment-face) 211 214 (fontified t face font-lock-comment-face) 214 215 (fontified t face font-lock-comment-face) 215 218 (fontified t face font-lock-comment-face) 218 231 (fontified t face font-lock-comment-face) 231 232 (fontified t face font-lock-comment-face) 232 233 (fontified t face font-lock-comment-face) 233 238 (fontified t face font-lock-comment-face) 238 242 (fontified t face font-lock-comment-face) 242 244 (fontified t face font-lock-comment-face) 244 245 (fontified t face font-lock-comment-face) 245 254 (fontified t face font-lock-comment-face) 254 257 (fontified t face font-lock-comment-face) 257 258 (fontified t face font-lock-comment-face) 258 259 (fontified t face font-lock-comment-face) 259 260 (fontified t face font-lock-comment-face) 260 261 (fontified t face font-lock-comment-face) 261 265 (fontified t) 265 268 (fontified t face font-lock-comment-delimiter-face) 268 269 (fontified t face font-lock-comment-delimiter-face) 269 273 (fontified t face font-lock-comment-delimiter-face) 273 275 (fontified t face font-lock-comment-face) 275 276 (fontified t face font-lock-comment-face) 276 280 (fontified t face font-lock-comment-face) 280 281 (syntax-table (1) fontified t face font-lock-comment-face) 281 286 (fontified t face font-lock-comment-face) 286 287 (fontified t face font-lock-comment-face) 287 288 (fontified t face font-lock-comment-face) 288 293 (fontified t) 293 296 (fontified t face font-lock-comment-delimiter-face) 296 297 (fontified t face font-lock-comment-delimiter-face) 297 298 (fontified t face font-lock-comment-delimiter-face) 298 309 (fontified t face font-lock-comment-face) 309 313 (fontified t face font-lock-comment-face) 313 314 (fontified t face font-lock-comment-face) 314 321 (fontified t face font-lock-comment-face) 321 322 (fontified t face font-lock-comment-face) 322 323 (fontified t face font-lock-comment-face) 323 324 (fontified t face font-lock-comment-face) 324 325 (fontified t face font-lock-comment-face) 325 329 (fontified t) 329 332 (fontified t face font-lock-comment-delimiter-face) 332 333 (fontified t face font-lock-comment-delimiter-face) 333 337 (fontified t face font-lock-comment-delimiter-face) 337 338 (fontified t face font-lock-comment-face) 338 339 (fontified t face font-lock-comment-face) 339 343 (fontified t) 343 346 (fontified t face font-lock-comment-delimiter-face) 346 347 (fontified t face font-lock-comment-delimiter-face) 347 348 (fontified t face font-lock-comment-face) 348 349 (fontified t face font-lock-comment-face) 349 353 (fontified t) 353 356 (fontified t face font-lock-comment-delimiter-face) 356 357 (fontified t face font-lock-comment-face) 357 358 (fontified t face font-lock-comment-face) 358 359 (fontified t)) . 8006) (undo-tree-id48372 . -358) (undo-tree-id48373 . -358) (undo-tree-id48374 . -358) (undo-tree-id48375 . -37) (undo-tree-id48376 . -37) (undo-tree-id48377 . -358) (undo-tree-id48378 . -358) (undo-tree-id48379 . -358) (undo-tree-id48380 . -358) (undo-tree-id48381 . -358) (undo-tree-id48382 . -358) (undo-tree-id48383 . -358) (undo-tree-id48384 . -358) (undo-tree-id48385 . -358) (undo-tree-id48386 . -358) (undo-tree-id48387 . -358) (undo-tree-id48388 . -358) (undo-tree-id48389 . -358) (undo-tree-id48390 . -358) (undo-tree-id48391 . -358) (undo-tree-id48392 . -358) (undo-tree-id48393 . -358) (undo-tree-id48394 . -358) (undo-tree-id48395 . -358) (undo-tree-id48396 . -358) (undo-tree-id48397 . -359) (undo-tree-id48398 . -358) (undo-tree-id48399 . -358) (undo-tree-id48400 . -358) (undo-tree-id48401 . -358) (undo-tree-id48402 . -358) (undo-tree-id48403 . -358) (undo-tree-id48404 . -358) (undo-tree-id48405 . -358) (undo-tree-id48406 . -358) (undo-tree-id48407 . -358) (undo-tree-id48408 . -358) (undo-tree-id48409 . -358) (undo-tree-id48410 . -349) (undo-tree-id48411 . -349) (undo-tree-id48412 . -349) (undo-tree-id48413 . -349) (undo-tree-id48414 . -349) (undo-tree-id48415 . -349) (undo-tree-id48416 . -349) (undo-tree-id48417 . -349) (undo-tree-id48418 . -349) (undo-tree-id48419 . -349) (undo-tree-id48420 . -349) (undo-tree-id48421 . -349) (undo-tree-id48422 . -349) (undo-tree-id48423 . -349) (undo-tree-id48424 . -349) (undo-tree-id48425 . -349) (undo-tree-id48426 . -349) (undo-tree-id48427 . -349) (undo-tree-id48428 . -349) (undo-tree-id48429 . -349) (undo-tree-id48430 . -349) (undo-tree-id48431 . -349) (undo-tree-id48432 . -349) (undo-tree-id48433 . -349) (undo-tree-id48434 . -349) (undo-tree-id48435 . -349) (undo-tree-id48436 . -349) (undo-tree-id48437 . -349) (undo-tree-id48438 . -349) (undo-tree-id48439 . -349) (undo-tree-id48440 . -349) (undo-tree-id48441 . -339) (undo-tree-id48442 . -339) (undo-tree-id48443 . -339) (undo-tree-id48444 . -339) (undo-tree-id48445 . -339) (undo-tree-id48446 . -339) (undo-tree-id48447 . -339) (undo-tree-id48448 . -339) (undo-tree-id48449 . -339) (undo-tree-id48450 . -325) (undo-tree-id48451 . -325) (undo-tree-id48452 . -325) (undo-tree-id48453 . -325) (undo-tree-id48454 . -325) (undo-tree-id48455 . -325) (undo-tree-id48456 . -325) (undo-tree-id48457 . -325) (undo-tree-id48458 . -325) (undo-tree-id48459 . -289) (undo-tree-id48460 . -289) (undo-tree-id48461 . -289) (undo-tree-id48462 . -289) (undo-tree-id48463 . -289) (undo-tree-id48464 . -289) (undo-tree-id48465 . -289) (undo-tree-id48466 . -289) (undo-tree-id48467 . -289) (undo-tree-id48468 . -288) (undo-tree-id48469 . -288) (undo-tree-id48470 . -288) (undo-tree-id48471 . -288) (undo-tree-id48472 . -288) (undo-tree-id48473 . -288) (undo-tree-id48474 . -288) (undo-tree-id48475 . -288) (undo-tree-id48476 . -288) (undo-tree-id48477 . -261) (undo-tree-id48478 . -261) (undo-tree-id48479 . -261) (undo-tree-id48480 . -261) (undo-tree-id48481 . -261) (undo-tree-id48482 . -261) (undo-tree-id48483 . -261) (undo-tree-id48484 . -261) (undo-tree-id48485 . -261) (undo-tree-id48486 . -191) (undo-tree-id48487 . -191) (undo-tree-id48488 . -191) (undo-tree-id48489 . -191) (undo-tree-id48490 . -191) (undo-tree-id48491 . -191) (undo-tree-id48492 . -191) (undo-tree-id48493 . -191) (undo-tree-id48494 . -191) (undo-tree-id48495 . -190) (undo-tree-id48496 . -190) (undo-tree-id48497 . -190) (undo-tree-id48498 . -190) (undo-tree-id48499 . -190) (undo-tree-id48500 . -190) (undo-tree-id48501 . -190) (undo-tree-id48502 . -190) (undo-tree-id48503 . -190) (undo-tree-id48504 . -151) (undo-tree-id48505 . -151) (undo-tree-id48506 . -151) (undo-tree-id48507 . -151) (undo-tree-id48508 . -151) (undo-tree-id48509 . -151) (undo-tree-id48510 . -151) (undo-tree-id48511 . -151) (undo-tree-id48512 . -151) (undo-tree-id48513 . -150) (undo-tree-id48514 . -150) (undo-tree-id48515 . -150) (undo-tree-id48516 . -150) (undo-tree-id48517 . -150) (undo-tree-id48518 . -150) (undo-tree-id48519 . -150) (undo-tree-id48520 . -150) (undo-tree-id48521 . -150) (undo-tree-id48522 . -39) (undo-tree-id48523 . -39) (undo-tree-id48524 . -39) (undo-tree-id48525 . -39) (undo-tree-id48526 . -39) (undo-tree-id48527 . -39) (undo-tree-id48528 . -39) (undo-tree-id48529 . -39) (undo-tree-id48530 . -39) (undo-tree-id48531 . -359) (t 26157 65135 20770 236000)) nil (26157 65214 931991 518000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8002) (undo-tree-id48346 . -4) (undo-tree-id48347 . -4) (undo-tree-id48348 . -4) (undo-tree-id48349 . -4) (undo-tree-id48350 . -4) (undo-tree-id48351 . -4) (undo-tree-id48352 . -4) (undo-tree-id48353 . -4) (undo-tree-id48354 . -4) (undo-tree-id48355 . -4) (undo-tree-id48356 . -4) (undo-tree-id48357 . -4) (undo-tree-id48358 . -4) 8006 (8002 . 8006) (#("    " 0 4 (fontified nil)) . 8001) (undo-tree-id48359 . -4) (undo-tree-id48360 . -4) (undo-tree-id48361 . -4) (undo-tree-id48362 . -4) (undo-tree-id48363 . -4) (undo-tree-id48364 . -4) (undo-tree-id48365 . -4) (undo-tree-id48366 . -4) (undo-tree-id48367 . -4) (undo-tree-id48368 . -4) (undo-tree-id48369 . -4) (undo-tree-id48370 . -4) (undo-tree-id48371 . -4) (8000 . 8006)) nil (26157 65214 931697 968000) 0 nil])
([nil nil ((8037 . 8038) (#("f" 0 1 (fontified nil)) . 8037) (undo-tree-id48227 . -1) (8036 . 8037) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil))) #s(yas--exit 8107 nil) 237 nil #s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil)) nil nil)) (8027 . 8038) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 8027) (8027 . 8045) (#("for" 0 3 (fontified nil)) . 8027) (8027 . 8030) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -8027) (8027 . 8052) (#("for" 0 3 (fontified t face font-lock-keyword-face)) . -8027) (undo-tree-id48228 . -3) (undo-tree-id48229 . -3) (undo-tree-id48230 . -3) (undo-tree-id48231 . -2) (undo-tree-id48232 . -2) (undo-tree-id48233 . -2) (undo-tree-id48234 . -2) (undo-tree-id48235 . -2) (undo-tree-id48236 . -2) (undo-tree-id48237 . -2) (undo-tree-id48238 . -2) (undo-tree-id48239 . -2) (undo-tree-id48240 . -2) (undo-tree-id48241 . -2) (undo-tree-id48242 . -2) (undo-tree-id48243 . -2) (undo-tree-id48244 . -2) (undo-tree-id48245 . -2) (undo-tree-id48246 . -2) (undo-tree-id48247 . -2) (undo-tree-id48248 . -2) (undo-tree-id48249 . -2) (undo-tree-id48250 . -2) (undo-tree-id48251 . -3) (undo-tree-id48252 . -3) (undo-tree-id48253 . -3) (undo-tree-id48254 . -3) (undo-tree-id48255 . -3) (undo-tree-id48256 . -3) (undo-tree-id48257 . -3) (undo-tree-id48258 . -3) (undo-tree-id48259 . -3) (undo-tree-id48260 . -3) (undo-tree-id48261 . -3) (undo-tree-id48262 . -3) (undo-tree-id48263 . -3) (undo-tree-id48264 . -3) (undo-tree-id48265 . -3) (undo-tree-id48266 . -3) (undo-tree-id48267 . -3) (undo-tree-id48268 . -3) (undo-tree-id48269 . -3) (undo-tree-id48270 . -3) (undo-tree-id48271 . -3) (undo-tree-id48272 . -3) (undo-tree-id48273 . -3) (undo-tree-id48274 . -3) (undo-tree-id48275 . -3) (undo-tree-id48276 . -3) (undo-tree-id48277 . -3) (undo-tree-id48278 . -3) (undo-tree-id48279 . -3) (undo-tree-id48280 . -3) (undo-tree-id48281 . -1) (undo-tree-id48282 . -1) (undo-tree-id48283 . -3) (undo-tree-id48284 . -3) (undo-tree-id48285 . -3) (undo-tree-id48286 . -3) (undo-tree-id48287 . -3) (undo-tree-id48288 . -3) (undo-tree-id48289 . -3) (undo-tree-id48290 . -3) (undo-tree-id48291 . -3) (undo-tree-id48292 . -3) (undo-tree-id48293 . -3) (undo-tree-id48294 . -3) (undo-tree-id48295 . -3) (undo-tree-id48296 . -3) (undo-tree-id48297 . -3) (undo-tree-id48298 . -3) (undo-tree-id48299 . -3) (undo-tree-id48300 . -3) (undo-tree-id48301 . -3) (undo-tree-id48302 . -3) (undo-tree-id48303 . -3) (undo-tree-id48304 . -3) (undo-tree-id48305 . -3) (undo-tree-id48306 . -3) (undo-tree-id48307 . -3) (undo-tree-id48308 . -3) (undo-tree-id48309 . -3) (undo-tree-id48310 . -3) (undo-tree-id48311 . -3) (undo-tree-id48312 . -3) (undo-tree-id48313 . -3) (undo-tree-id48314 . -3) (undo-tree-id48315 . -3) (undo-tree-id48316 . -3) (undo-tree-id48317 . -3) (undo-tree-id48318 . -3) (undo-tree-id48319 . -3) (undo-tree-id48320 . -3) (undo-tree-id48321 . -3) (undo-tree-id48322 . -3) (undo-tree-id48323 . -3) (undo-tree-id48324 . -3) (undo-tree-id48325 . -3) (undo-tree-id48326 . -3) (undo-tree-id48327 . -3) (undo-tree-id48328 . -3) (undo-tree-id48329 . -3) (undo-tree-id48330 . -3) 8030 (8028 . 8030) (8026 . 8028) (apply yas--snippet-revive 8020 8026 #s(yas--snippet nil nil #s(yas--exit 8026 nil) 236 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8026 nil) 236 nil nil nil nil)) (8020 . 8026) (#("iter()$0" 0 8 (fontified nil)) . 8020) (8020 . 8028) (#("it" 0 2 (fontified nil)) . 8020) (8020 . 8022) (#("iter()" 0 6 (fontified nil)) . -8020) (8020 . 8026) (#("it" 0 2 (fontified t)) . -8020) (undo-tree-id48331 . -2) (undo-tree-id48332 . -2) 8022 (8020 . 8022) (8019 . 8020) (8006 . 8019) (#("particle_li" 0 11 (fontified nil)) . 8006) (8006 . 8017) (#("particle_list" 0 13 (fontified nil)) . -8006) (8006 . 8019) (#("particle_li" 0 11 (fontified t)) . -8006) (undo-tree-id48333 . -11) (undo-tree-id48334 . -11) (undo-tree-id48335 . -11) 8017 (8016 . 8017) (#("i" 0 1 (fontified t)) . -8016) (undo-tree-id48336 . -1) (undo-tree-id48337 . -1) (#("s" 0 1 (fontified t)) . -8017) (undo-tree-id48338 . -1) (undo-tree-id48339 . -1) (#("t" 0 1 (fontified t)) . -8018) (undo-tree-id48340 . -1) (undo-tree-id48341 . -1) 8019 (#("." 0 1 (fontified t)) . -8019) (undo-tree-id48342 . -1) (undo-tree-id48343 . -1) 8020 (8019 . 8020) (8006 . 8019) (#("pa" 0 2 (fontified nil)) . 8006) (8006 . 8008) (#("particle_list" 0 13 (fontified nil)) . -8006) (8006 . 8019) (#("par" 0 3 (fontified t)) . -8006) (undo-tree-id48344 . -3) (undo-tree-id48345 . -3) 8009 (8006 . 8009) (8002 . 8006)) nil (26157 65214 931624 126000) 0 nil])
([nil nil ((8041 . 8045) (8037 . 8041)) nil (26157 65214 931148 14000) 0 nil])
([nil nil ((8049 . 8050) (8050 . 8054) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 8049) (8049 . 8050) (8048 . 8050) (8046 . 8049)) nil (26157 65214 931143 696000) 0 nil])
([nil nil ((8107 . 8108) (apply yas--snippet-revive 8027 8107 #s(yas--snippet nil (#s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil))) #s(yas--exit 8107 nil) 237 nil #s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil)) nil nil)) (apply yas--snippet-revive 8059 8106 #s(yas--snippet nil (#s(yas--field 1 8080 8090 nil nil nil t #s(yas--field 2 8092 8102 nil nil nil t #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil)))) #s(yas--field 2 8092 8102 nil nil nil t #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil))) #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil))) #s(yas--exit 8106 nil) 238 nil #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil)) #s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil)) nil)) (#("rad" 0 3 (fontified nil)) . 8105) (undo-tree-id48130 . -3) (8104 . 8105) (8101 . 8102) (#("y" 0 1 (fontified nil)) . 8101) (undo-tree-id48131 . -1) (8101 . 8102) (#("y" 0 1 (fontified t)) . -8101) (undo-tree-id48132 . -1) (undo-tree-id48133 . -1) (undo-tree-id48134 . -1) (undo-tree-id48135 . -1) (undo-tree-id48136 . -1) (undo-tree-id48137 . -1) (undo-tree-id48138 . -1) (undo-tree-id48139 . -1) (undo-tree-id48140 . -1) (undo-tree-id48141 . -1) (undo-tree-id48142 . -1) (undo-tree-id48143 . -1) (undo-tree-id48144 . -1) (undo-tree-id48145 . -1) (undo-tree-id48146 . -1) (undo-tree-id48147 . -1) (undo-tree-id48148 . -1) (undo-tree-id48149 . -1) (undo-tree-id48150 . -1) (undo-tree-id48151 . -1) (undo-tree-id48152 . -1) (undo-tree-id48153 . -1) (undo-tree-id48154 . -1) (undo-tree-id48155 . -1) (undo-tree-id48156 . -1) (undo-tree-id48157 . -1) (undo-tree-id48158 . -1) (undo-tree-id48159 . -1) (undo-tree-id48160 . -1) (undo-tree-id48161 . -1) (undo-tree-id48162 . -1) (undo-tree-id48163 . -1) (undo-tree-id48164 . -1) (undo-tree-id48165 . -1) (undo-tree-id48166 . -1) (undo-tree-id48167 . -1) (undo-tree-id48168 . -1) (undo-tree-id48169 . -1) (undo-tree-id48170 . -1) (undo-tree-id48171 . -1) (undo-tree-id48172 . -1) (undo-tree-id48173 . -1) (undo-tree-id48174 . -1) (undo-tree-id48175 . -1) 8102 (8101 . 8102) (8100 . 8101) (8092 . 8100) (#("pa" 0 2 (fontified nil)) . 8092) (undo-tree-id48176 . -2) (8092 . 8094) (#("particle" 0 8 (fontified nil)) . -8092) (undo-tree-id48177 . -8) (8092 . 8100) (#("par" 0 3 (fontified t)) . -8092) (undo-tree-id48178 . -2) (undo-tree-id48179 . -3) (undo-tree-id48180 . -3) (undo-tree-id48181 . -3) 8095 (8093 . 8095) (#("y" 0 1 (fontified nil)) . 8093) (undo-tree-id48182 . -1) (8092 . 8093) (8089 . 8090) (#("x" 0 1 (fontified t)) . -8089) (undo-tree-id48183 . -1) (undo-tree-id48184 . -1) (undo-tree-id48185 . -1) 8090 (8088 . 8090) (8080 . 8088) (#("pa" 0 2 (fontified nil)) . 8080) (undo-tree-id48186 . -2) (8080 . 8082) (#("particle" 0 8 (fontified nil)) . -8080) (undo-tree-id48187 . -8) (8080 . 8088) (#("pa" 0 2 (fontified t)) . -8080) (undo-tree-id48188 . -2) (undo-tree-id48189 . -2) (undo-tree-id48190 . -2) 8082 (8081 . 8082) (#("x" 0 1 (fontified nil)) . 8081) (undo-tree-id48191 . -1) (8080 . 8081) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8080 8090 nil nil nil t #s(yas--field 2 8092 8102 nil nil nil t #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil)))) #s(yas--field 2 8092 8102 nil nil nil t #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil))) #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil))) #s(yas--exit 8106 nil) 238 nil #s(yas--field 3 8104 8105 nil nil nil t #s(yas--exit 8106 nil)) #s(yas--field 1 8036 8106 nil nil nil t #s(yas--exit 8107 nil)) nil)) (8059 . 8090) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 8059) (undo-tree-id48192 . -48) (8059 . 8107) (#("ma" 0 2 (fontified nil)) . 8059) (undo-tree-id48193 . -2) (8059 . 8061) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -8059) (undo-tree-id48194 . -23) (8059 . 8082) (#("ma" 0 2 (fontified t)) . -8059) (undo-tree-id48195 . -1) (undo-tree-id48196 . -2) (undo-tree-id48197 . -2) (undo-tree-id48198 . -2) 8061 (8059 . 8061) (8058 . 8059) (8047 . 8058) (#("a" 0 1 (fontified nil)) . 8047) (undo-tree-id48199 . -1) (8047 . 8048) (#("another_map" 0 11 (fontified nil)) . -8047) (undo-tree-id48200 . -11) (8047 . 8058) (#("an" 0 2 (fontified t)) . -8047) (undo-tree-id48201 . -2) (undo-tree-id48202 . -2) (undo-tree-id48203 . -2) 8049 (8047 . 8049) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8047) (undo-tree-id48204 . -1) (undo-tree-id48205 . -1) (undo-tree-id48206 . -1) (undo-tree-id48207 . -1) (#("
" 0 1 (fontified t)) . -8048) (undo-tree-id48208 . -1) (undo-tree-id48209 . -1) (undo-tree-id48210 . -1) (#("	" 0 1 (fontified t)) . -8049) (undo-tree-id48211 . -1) (undo-tree-id48212 . -1) (undo-tree-id48213 . -1) (#("
" 0 1 (fontified t)) . -8050) (undo-tree-id48214 . 1) (undo-tree-id48215 . -1) (undo-tree-id48216 . -1) (#(" " 0 1 (fontified t)) . -8051) (undo-tree-id48217 . -1) (undo-tree-id48218 . -1) (#(" " 0 1 (fontified t)) . -8052) (undo-tree-id48219 . -1) (undo-tree-id48220 . -1) (#(" " 0 1 (fontified t)) . -8053) (undo-tree-id48221 . -1) (undo-tree-id48222 . -1) (#(" " 0 1 (fontified t)) . -8054) (undo-tree-id48223 . -1) (undo-tree-id48224 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8055) (undo-tree-id48225 . -1) (undo-tree-id48226 . -1) 8056) nil (26157 65214 931107 790000) 0 nil])
([nil nil ((#("    // for particle in &new_vector {
    // 	another_map.make_black_rectangle(particle.x, particle.y, 1);
    // }

" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 22 (fontified t face font-lock-comment-face) 22 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face) 24 29 (fontified t face font-lock-comment-face) 29 35 (fontified t face font-lock-comment-face) 35 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-face) 37 41 (fontified t) 41 44 (fontified t face font-lock-comment-delimiter-face) 44 45 (fontified t face font-lock-comment-delimiter-face) 45 57 (fontified t face font-lock-comment-face) 57 77 (fontified t face font-lock-comment-face) 77 78 (fontified t face font-lock-comment-face) 78 85 (fontified t face font-lock-comment-face) 85 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 90 (fontified t face font-lock-comment-face) 90 99 (fontified t face font-lock-comment-face) 99 100 (fontified t face font-lock-comment-face) 100 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 105 (fontified t face font-lock-comment-face) 105 106 (fontified t face font-lock-comment-face) 106 107 (fontified t) 107 110 (fontified t) 110 113 (fontified t face font-lock-comment-delimiter-face) 113 114 (fontified t face font-lock-comment-face) 114 115 (fontified t face font-lock-comment-face) 115 116 (fontified t)) . 8114) (undo-tree-id48642 . -115) (undo-tree-id48643 . -115) (undo-tree-id48644 . -115) (undo-tree-id48645 . -113) (undo-tree-id48646 . -113) (undo-tree-id48647 . -113) (undo-tree-id48648 . -113) (undo-tree-id48649 . -113) (undo-tree-id48650 . -113) (undo-tree-id48651 . -113) (undo-tree-id48652 . -113) (undo-tree-id48653 . -113) (undo-tree-id48654 . -115) (undo-tree-id48655 . -115) (undo-tree-id48656 . -115) (undo-tree-id48657 . -115) (undo-tree-id48658 . -115) (undo-tree-id48659 . -115) (undo-tree-id48660 . -115) (undo-tree-id48661 . -115) (undo-tree-id48662 . -115) (undo-tree-id48663 . -115) (undo-tree-id48664 . -115) (undo-tree-id48665 . -115) (undo-tree-id48666 . -115) (undo-tree-id48667 . -115) (undo-tree-id48668 . -115) (undo-tree-id48669 . -115) (undo-tree-id48670 . -115) (undo-tree-id48671 . -115) (undo-tree-id48672 . -113) (undo-tree-id48673 . -113) (undo-tree-id48674 . -113) (undo-tree-id48675 . -113) (undo-tree-id48676 . -113) (undo-tree-id48677 . -113) (undo-tree-id48678 . -113) (undo-tree-id48679 . -113) (undo-tree-id48680 . -113) (undo-tree-id48681 . -115) (undo-tree-id48682 . -115) (undo-tree-id48683 . -115) (undo-tree-id48684 . -115) (undo-tree-id48685 . -115) (undo-tree-id48686 . -115) (undo-tree-id48687 . -115) (undo-tree-id48688 . -115) (undo-tree-id48689 . -115) (undo-tree-id48690 . -115) (undo-tree-id48691 . -115) (undo-tree-id48692 . -115) (undo-tree-id48693 . -115) (undo-tree-id48694 . -115) (undo-tree-id48695 . -115) (undo-tree-id48696 . -115) (undo-tree-id48697 . -115) (undo-tree-id48698 . -115) (undo-tree-id48699 . -116) (undo-tree-id48700 . -115) (undo-tree-id48701 . -115) (undo-tree-id48702 . -115) (undo-tree-id48703 . -115) (undo-tree-id48704 . -115) (undo-tree-id48705 . -115) (undo-tree-id48706 . -115) (undo-tree-id48707 . -115) (undo-tree-id48708 . -115) (undo-tree-id48709 . -115) (undo-tree-id48710 . -115) (undo-tree-id48711 . -115) (undo-tree-id48712 . -106) (undo-tree-id48713 . -106) (undo-tree-id48714 . -106) (undo-tree-id48715 . -106) (undo-tree-id48716 . -106) (undo-tree-id48717 . -106) (undo-tree-id48718 . -106) (undo-tree-id48719 . -106) (undo-tree-id48720 . -106) (undo-tree-id48721 . -37) (undo-tree-id48722 . -37) (undo-tree-id48723 . -37) (undo-tree-id48724 . -37) (undo-tree-id48725 . -37) (undo-tree-id48726 . -37) (undo-tree-id48727 . -37) (undo-tree-id48728 . -37) (undo-tree-id48729 . -37) (undo-tree-id48730 . -116) (t 26157 65215 50010 305000)) nil (26157 65244 714334 247000) 0 nil])
([nil nil ((apply 3 8114 8189 undo--wrap-and-run-primitive-undo 8114 8189 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -8118) 8114))) nil (26157 65266 940979 420000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 7842) (undo-tree-id48923 . -1) (undo-tree-id48924 . -1) (undo-tree-id48925 . -1) (undo-tree-id48926 . -1) (t 26157 65268 178758 750000)) nil (26157 65335 470812 547000) 0 nil] [nil nil ((#("another" 0 5 (fontified t) 5 7 (fontified t)) . 8118) (undo-tree-id48640 . -6)) ((8118 . 8125)) (26157 65266 488429 646000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7851) (undo-tree-id48916 . -1) (undo-tree-id48917 . -1) (undo-tree-id48918 . -1) (undo-tree-id48919 . -1) (undo-tree-id48920 . -1) (undo-tree-id48921 . -1) (undo-tree-id48922 . -1)) nil (26157 65335 470793 528000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8118)) ((8118 . 8119)) (26157 65265 867773 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 7915) (undo-tree-id48931 . -1) (undo-tree-id48932 . -1) (undo-tree-id48933 . -1) (t 26157 65335 601833 115000)) nil (26157 65340 143094 995000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 8118) (undo-tree-id48637 . -2)) ((8118 . 8121)) (26157 65265 415227 158000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 7905) (undo-tree-id48927 . -1) (undo-tree-id48928 . -1) (undo-tree-id48929 . -1) (undo-tree-id48930 . -1)) nil (26157 65340 143076 608000) 0 nil])
([nil nil ((8118 . 8131) (#("pa" 0 2 (fontified nil)) . 8118) (8118 . 8120) (#("particle_list" 0 13 (fontified nil)) . -8118) (8118 . 8131) (#("pa" 0 2 (fontified t)) . -8118) (undo-tree-id48532 . -2) (undo-tree-id48533 . -2) (undo-tree-id48535 . -1) (undo-tree-id48537 . -1) (undo-tree-id48539 . -1) (undo-tree-id48541 . -1) (undo-tree-id48543 . -1) (undo-tree-id48545 . -2) (undo-tree-id48547 . -2) (undo-tree-id48549 . -2) (undo-tree-id48551 . -2) (undo-tree-id48553 . -2) (undo-tree-id48555 . -2) (undo-tree-id48557 . -2) (undo-tree-id48559 . -2) (undo-tree-id48561 . -2) (undo-tree-id48563 . -2) (undo-tree-id48565 . -2) (undo-tree-id48567 . -2) (undo-tree-id48569 . -2) (undo-tree-id48571 . -2) (undo-tree-id48573 . -2) (undo-tree-id48575 . -2) (undo-tree-id48577 . -2) (undo-tree-id48579 . -2) (undo-tree-id48581 . -2) (undo-tree-id48583 . -2) (undo-tree-id48585 . -2) (undo-tree-id48587 . -2) (undo-tree-id48589 . -2) (undo-tree-id48591 . -2) (undo-tree-id48593 . -2) (undo-tree-id48595 . -2) (undo-tree-id48597 . -2) (undo-tree-id48599 . -2) (undo-tree-id48601 . -2) (undo-tree-id48603 . -2) (undo-tree-id48605 . -2) (undo-tree-id48607 . -2) (undo-tree-id48609 . -2) (undo-tree-id48611 . -2) (undo-tree-id48613 . -2) (undo-tree-id48615 . -2) (undo-tree-id48617 . -2) (undo-tree-id48619 . -2) (undo-tree-id48621 . -2) (undo-tree-id48623 . -2) (undo-tree-id48625 . -2) (undo-tree-id48627 . -2) (undo-tree-id48629 . -2) (undo-tree-id48631 . -2) (undo-tree-id48633 . -2) (undo-tree-id48635 . -2) 8120 (8118 . 8120)) ((#("pa" 0 2 (fontified nil)) . 8118) (8118 . 8120) (#("particle_list" 0 13 (fontified nil)) . 8118) (8118 . 8131) (#("pa" 0 2 (fontified nil)) . 8118) (8118 . 8120) (#("particle_list" 0 8 (fontified t) 8 13 (fontified t)) . 8118) (undo-tree-id48851 . -12) (undo-tree-id48852 . -12) (undo-tree-id48853 . -12) (undo-tree-id48854 . -12) (undo-tree-id48855 . -12) (undo-tree-id48856 . -12) (undo-tree-id48857 . -12) (undo-tree-id48858 . -12) (undo-tree-id48859 . -12) (undo-tree-id48860 . -12) (undo-tree-id48861 . -12) (undo-tree-id48862 . -12) (undo-tree-id48863 . -12) (undo-tree-id48864 . -12) (undo-tree-id48865 . -12) (undo-tree-id48866 . -12) (undo-tree-id48867 . -12) (undo-tree-id48868 . -12) (undo-tree-id48869 . -12) (undo-tree-id48870 . -12) (undo-tree-id48871 . -12) (undo-tree-id48872 . -12) (undo-tree-id48873 . -9) (undo-tree-id48874 . -9) (undo-tree-id48875 . -9) (undo-tree-id48876 . -9) (undo-tree-id48877 . -9) (undo-tree-id48878 . -9) (undo-tree-id48879 . -9) (undo-tree-id48880 . -9) (undo-tree-id48881 . -9) (undo-tree-id48882 . -9) (undo-tree-id48883 . -9) (undo-tree-id48884 . -9) (undo-tree-id48885 . -9) (undo-tree-id48886 . -9) (undo-tree-id48887 . -9) (undo-tree-id48888 . -9) (undo-tree-id48889 . -9) (undo-tree-id48890 . -9) (undo-tree-id48891 . -9) (undo-tree-id48892 . -9) (undo-tree-id48893 . -9) (undo-tree-id48894 . -9) (undo-tree-id48895 . -9) (undo-tree-id48896 . -9) (undo-tree-id48897 . -9) (undo-tree-id48898 . -9) (undo-tree-id48899 . -9) (undo-tree-id48900 . -9) (undo-tree-id48901 . -9) (undo-tree-id48902 . -9) (undo-tree-id48903 . -9) (undo-tree-id48904 . -9) (undo-tree-id48905 . -9) (undo-tree-id48906 . -9) (undo-tree-id48907 . -9) (undo-tree-id48908 . -9) (undo-tree-id48909 . -9) (undo-tree-id48910 . -9) (undo-tree-id48911 . -9) (undo-tree-id48912 . -9) (undo-tree-id48913 . -9) (undo-tree-id48914 . -9) (undo-tree-id48915 . -9) (t 26157 65244 854921 110000)) (26157 65264 990251 705000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7998) (undo-tree-id49322 . -4) 8002 (7998 . 8002) (#("    " 0 4 (fontified nil)) . 7997) (undo-tree-id49323 . -4) (7996 . 8002) (t 26157 65340 286601 767000)) nil (26157 65468 361796 354000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 8117) (undo-tree-id48850 . -1) (t 26157 65244 854921 110000)) ((8117 . 8118)) (26157 65264 590624 906000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . 7917) (undo-tree-id49321 . -1)) nil (26157 65468 361787 369000) 0 nil])
([nil nil ((#("particle" 0 8 (fontified t)) . 8117) (undo-tree-id48848 . -7) (undo-tree-id48849 . -8)) ((8117 . 8125)) (26157 65264 243405 305000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7916) (undo-tree-id49317 . -1) (undo-tree-id49318 . -1) (undo-tree-id49319 . -1) (undo-tree-id49320 . -1) 7917) nil (26157 65468 361782 618000) 0 nil])
([nil nil ((#("   _list.to_pgm().write_as_binary(\"another_datalol.pgm\").unwrap();
" 0 2 (fontified t) 2 3 (fontified t) 3 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t) 18 21 (fontified t) 21 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 55 (fontified t face font-lock-string-face) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 57 (fontified t) 57 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-2-face)) 64 65 (fontified t face (rainbow-delimiters-depth-2-face)) 65 66 (fontified t) 66 67 (fontified t)) . 8114) (undo-tree-id48731 . -67) (undo-tree-id48732 . -66) (undo-tree-id48733 . 59) (undo-tree-id48734 . -67) (undo-tree-id48735 . -65) (undo-tree-id48736 . -65) (undo-tree-id48737 . -4) (undo-tree-id48738 . -7) (undo-tree-id48739 . -7) (undo-tree-id48740 . -7) (undo-tree-id48741 . -7) (undo-tree-id48742 . -7) (undo-tree-id48743 . -7) (undo-tree-id48744 . -7) (undo-tree-id48745 . -7) (undo-tree-id48746 . -7) (undo-tree-id48747 . -7) (undo-tree-id48748 . -7) (undo-tree-id48749 . -7) (undo-tree-id48750 . -7) (undo-tree-id48751 . -7) (undo-tree-id48752 . -7) (undo-tree-id48753 . -7) (undo-tree-id48754 . -7) (undo-tree-id48755 . -7) (undo-tree-id48756 . -7) (undo-tree-id48757 . -7) (undo-tree-id48758 . -7) (undo-tree-id48759 . -7) (undo-tree-id48760 . -3) (undo-tree-id48761 . -3) (undo-tree-id48762 . -3) (undo-tree-id48763 . -3) (undo-tree-id48764 . -3) (undo-tree-id48765 . -3) (undo-tree-id48766 . -3) (undo-tree-id48767 . -3) (undo-tree-id48768 . -3) (undo-tree-id48769 . -3) (undo-tree-id48770 . -3) (undo-tree-id48771 . -3) (undo-tree-id48772 . -3) (undo-tree-id48773 . -3) (undo-tree-id48774 . -3) (undo-tree-id48775 . -3) (undo-tree-id48776 . -3) (undo-tree-id48777 . -3) (undo-tree-id48778 . -3) (undo-tree-id48779 . -3) (undo-tree-id48780 . -3) (undo-tree-id48781 . -3) (undo-tree-id48782 . -3) (undo-tree-id48783 . -3) (undo-tree-id48784 . -3) (undo-tree-id48785 . -3) (undo-tree-id48786 . -3) (undo-tree-id48787 . -3) (undo-tree-id48788 . -3) (undo-tree-id48789 . -3) (undo-tree-id48790 . -3) (undo-tree-id48791 . -3) (undo-tree-id48792 . -3) (undo-tree-id48793 . -3) (undo-tree-id48794 . -3) (undo-tree-id48795 . -3) (undo-tree-id48796 . -3) (undo-tree-id48797 . -3) (undo-tree-id48798 . -3) (undo-tree-id48799 . -3) (undo-tree-id48800 . -3) (undo-tree-id48801 . -3) (undo-tree-id48802 . -3) (undo-tree-id48803 . -3) (undo-tree-id48804 . -3) (undo-tree-id48805 . -3) (undo-tree-id48806 . -3) (undo-tree-id48807 . -3) (undo-tree-id48808 . -3) (undo-tree-id48809 . -3) (undo-tree-id48810 . -3) (undo-tree-id48811 . -3) (undo-tree-id48812 . -3) (undo-tree-id48813 . -3) (undo-tree-id48814 . -3) (undo-tree-id48815 . -3) (undo-tree-id48816 . -3) (undo-tree-id48817 . -3) (undo-tree-id48818 . -3) (undo-tree-id48819 . -3) (undo-tree-id48820 . -3) (undo-tree-id48821 . -3) (undo-tree-id48822 . -18) (undo-tree-id48823 . -24) (undo-tree-id48824 . -4) (undo-tree-id48825 . -4) (undo-tree-id48826 . -4) (undo-tree-id48827 . -4) (undo-tree-id48828 . -4) (undo-tree-id48829 . -4) (undo-tree-id48830 . -4) (undo-tree-id48831 . -4) (undo-tree-id48832 . -4) (undo-tree-id48833 . -4) (undo-tree-id48834 . -4) (undo-tree-id48835 . -4) (undo-tree-id48836 . -4) (undo-tree-id48837 . -4) (undo-tree-id48838 . -4) (undo-tree-id48839 . -4) (undo-tree-id48840 . -4) (undo-tree-id48841 . -4) (undo-tree-id48842 . -4) (undo-tree-id48843 . -4) (undo-tree-id48844 . -4) (undo-tree-id48845 . -4) (undo-tree-id48846 . -4) (undo-tree-id48847 . -67) 8118) ((8114 . 8181)) (26157 65264 242326 154000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -7921) (undo-tree-id49315 . -1) (#("w" 0 1 (fontified t)) . -7922) (undo-tree-id49316 . -1) 7923 (7921 . 7923)) nil (26157 65468 361769 828000) 0 nil])
nil
([nil nil ((#("	    " 0 5 (fontified t)) . 7921) (undo-tree-id49312 . -4) (undo-tree-id49313 . 5) (undo-tree-id49314 . 5)) nil (26157 65468 361762 868000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7920) (undo-tree-id49309 . -1) (undo-tree-id49310 . -1) (undo-tree-id49311 . -1) 7921) nil (26157 65468 361755 5000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . 7929) (undo-tree-id49308 . -1)) nil (26157 65468 361747 482000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7928) (undo-tree-id49304 . -1) (undo-tree-id49305 . -1) (undo-tree-id49306 . -1) (undo-tree-id49307 . -1) 7929) nil (26157 65468 361742 855000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . 7934) (undo-tree-id49291 . -4) (undo-tree-id49292 . -5) (undo-tree-id49293 . -5) (undo-tree-id49294 . -5) (undo-tree-id49295 . -5) (undo-tree-id49296 . -5) (undo-tree-id49297 . -5) (undo-tree-id49298 . -5) (undo-tree-id49299 . -5) (undo-tree-id49300 . -5) (undo-tree-id49301 . -5) (undo-tree-id49302 . -5) (undo-tree-id49303 . -5)) nil (26157 65468 361732 192000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7933) (undo-tree-id49218 . -1) (undo-tree-id49219 . -1) (undo-tree-id49220 . -1) (undo-tree-id49221 . -1) (undo-tree-id49222 . -1) (undo-tree-id49223 . -1) (undo-tree-id49224 . -1) (undo-tree-id49225 . -1) (undo-tree-id49226 . -1) (undo-tree-id49227 . -1) (undo-tree-id49228 . -1) (undo-tree-id49229 . -1) (undo-tree-id49230 . -1) (undo-tree-id49231 . -1) (undo-tree-id49232 . -1) (undo-tree-id49233 . -1) (undo-tree-id49234 . -1) (undo-tree-id49235 . -1) (undo-tree-id49236 . -1) (undo-tree-id49237 . -1) (undo-tree-id49238 . -1) (undo-tree-id49239 . -1) (undo-tree-id49240 . -1) (undo-tree-id49241 . -1) (undo-tree-id49242 . -1) (undo-tree-id49243 . -1) (undo-tree-id49244 . -1) (undo-tree-id49245 . -1) (undo-tree-id49246 . -1) (undo-tree-id49247 . -1) (undo-tree-id49248 . -1) (undo-tree-id49249 . -1) (undo-tree-id49250 . -1) (undo-tree-id49251 . -1) (undo-tree-id49252 . -1) (undo-tree-id49253 . -1) (undo-tree-id49254 . -1) (undo-tree-id49255 . -1) (undo-tree-id49256 . -1) (undo-tree-id49257 . -1) (undo-tree-id49258 . -1) (undo-tree-id49259 . -1) (undo-tree-id49260 . -1) (undo-tree-id49261 . -1) (undo-tree-id49262 . -1) (undo-tree-id49263 . -1) (undo-tree-id49264 . -1) (undo-tree-id49265 . -1) (undo-tree-id49266 . -1) (undo-tree-id49267 . -1) (undo-tree-id49268 . -1) (undo-tree-id49269 . -1) (undo-tree-id49270 . -1) (undo-tree-id49271 . -1) (undo-tree-id49272 . -1) (undo-tree-id49273 . -1) (undo-tree-id49274 . -1) (undo-tree-id49275 . -1) (undo-tree-id49276 . -1) (undo-tree-id49277 . -1) (undo-tree-id49278 . -1) (undo-tree-id49279 . -1) (undo-tree-id49280 . -1) (undo-tree-id49281 . -1) (undo-tree-id49282 . -1) (undo-tree-id49283 . -1) (undo-tree-id49284 . -1) (undo-tree-id49285 . -1) (undo-tree-id49286 . -1) (undo-tree-id49287 . -1) (undo-tree-id49288 . -1) (undo-tree-id49289 . -1) (undo-tree-id49290 . -1) 7934) nil (26157 65468 361698 916000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . 7945) (undo-tree-id49174 . -4) (undo-tree-id49175 . -3) (undo-tree-id49176 . -3) (undo-tree-id49177 . -3) (undo-tree-id49178 . -3) (undo-tree-id49179 . -3) (undo-tree-id49180 . -3) (undo-tree-id49181 . -3) (undo-tree-id49182 . -3) (undo-tree-id49183 . -3) (undo-tree-id49184 . -3) (undo-tree-id49185 . -3) (undo-tree-id49186 . -3) (undo-tree-id49187 . -3) (undo-tree-id49188 . -3) (undo-tree-id49189 . -3) (undo-tree-id49190 . -3) (undo-tree-id49191 . -3) (undo-tree-id49192 . -3) (undo-tree-id49193 . -3) (undo-tree-id49194 . -3) (undo-tree-id49195 . -3) (undo-tree-id49196 . -3) (undo-tree-id49197 . -3) (undo-tree-id49198 . -3) (undo-tree-id49199 . -3) (undo-tree-id49200 . -3) (undo-tree-id49201 . -3) (undo-tree-id49202 . -3) (undo-tree-id49203 . -3) (undo-tree-id49204 . -3) (undo-tree-id49205 . -3) (undo-tree-id49206 . -3) (undo-tree-id49207 . -3) (undo-tree-id49208 . -3) (undo-tree-id49209 . -3) (undo-tree-id49210 . -3) (undo-tree-id49211 . -3) (undo-tree-id49212 . -3) (undo-tree-id49213 . -3) (undo-tree-id49214 . -3) (undo-tree-id49215 . -3) (undo-tree-id49216 . -3) (undo-tree-id49217 . -5)) nil (26157 65468 361351 559000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7944) (undo-tree-id49094 . -1) (undo-tree-id49095 . -1) (undo-tree-id49096 . -1) (undo-tree-id49097 . -1) (undo-tree-id49098 . -1) (undo-tree-id49099 . -1) (undo-tree-id49100 . -1) (undo-tree-id49101 . -1) (undo-tree-id49102 . -1) (undo-tree-id49103 . -1) (undo-tree-id49104 . -1) (undo-tree-id49105 . -1) (undo-tree-id49106 . -1) (undo-tree-id49107 . -1) (undo-tree-id49108 . -1) (undo-tree-id49109 . -1) (undo-tree-id49110 . -1) (undo-tree-id49111 . -1) (undo-tree-id49112 . -1) (undo-tree-id49113 . -1) (undo-tree-id49114 . -1) (undo-tree-id49115 . -1) (undo-tree-id49116 . -1) (undo-tree-id49117 . -1) (undo-tree-id49118 . -1) (undo-tree-id49119 . -1) (undo-tree-id49120 . -1) (undo-tree-id49121 . -1) (undo-tree-id49122 . -1) (undo-tree-id49123 . -1) (undo-tree-id49124 . -1) (undo-tree-id49125 . -1) (undo-tree-id49126 . -1) (undo-tree-id49127 . -1) (undo-tree-id49128 . -1) (undo-tree-id49129 . -1) (undo-tree-id49130 . -1) (undo-tree-id49131 . -1) (undo-tree-id49132 . -1) (undo-tree-id49133 . -1) (undo-tree-id49134 . -1) (undo-tree-id49135 . -1) (undo-tree-id49136 . -1) (undo-tree-id49137 . -1) (undo-tree-id49138 . -1) (undo-tree-id49139 . -1) (undo-tree-id49140 . -1) (undo-tree-id49141 . -1) (undo-tree-id49142 . -1) (undo-tree-id49143 . -1) (undo-tree-id49144 . -1) (undo-tree-id49145 . -1) (undo-tree-id49146 . -1) (undo-tree-id49147 . -1) (undo-tree-id49148 . -1) (undo-tree-id49149 . -1) (undo-tree-id49150 . -1) (undo-tree-id49151 . -1) (undo-tree-id49152 . -1) (undo-tree-id49153 . -1) (undo-tree-id49154 . -1) (undo-tree-id49155 . -1) (undo-tree-id49156 . -1) (undo-tree-id49157 . -1) (undo-tree-id49158 . -1) (undo-tree-id49159 . -1) (undo-tree-id49160 . -1) (undo-tree-id49161 . -1) (undo-tree-id49162 . -1) (undo-tree-id49163 . -1) (undo-tree-id49164 . -1) (undo-tree-id49165 . -1) (undo-tree-id49166 . -1) (undo-tree-id49167 . -1) (undo-tree-id49168 . -1) (undo-tree-id49169 . -1) (undo-tree-id49170 . -1) (undo-tree-id49171 . -1) (undo-tree-id49172 . -1) (undo-tree-id49173 . -1) 7945) nil (26157 65468 361260 48000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . 7950) (undo-tree-id49038 . -1) (undo-tree-id49039 . -1) (undo-tree-id49040 . -1) (undo-tree-id49041 . -1) (undo-tree-id49042 . -1) (undo-tree-id49043 . -1) (undo-tree-id49044 . -1) (undo-tree-id49045 . -1) (undo-tree-id49046 . -1) (undo-tree-id49047 . -1) (undo-tree-id49048 . -1) (undo-tree-id49049 . -1) (undo-tree-id49050 . -1) (undo-tree-id49051 . -1) (undo-tree-id49052 . -1) (undo-tree-id49053 . -1) (undo-tree-id49054 . -1) (undo-tree-id49055 . -1) (undo-tree-id49056 . -1) (undo-tree-id49057 . -1) (undo-tree-id49058 . -1) (undo-tree-id49059 . -1) (undo-tree-id49060 . -1) (undo-tree-id49061 . -1) (undo-tree-id49062 . -1) (undo-tree-id49063 . -1) (undo-tree-id49064 . -1) (undo-tree-id49065 . -1) (undo-tree-id49066 . -1) (undo-tree-id49067 . -1) (undo-tree-id49068 . -1) (undo-tree-id49069 . -1) (undo-tree-id49070 . -1) (undo-tree-id49071 . -1) (undo-tree-id49072 . -1) (undo-tree-id49073 . -1) (undo-tree-id49074 . -1) (undo-tree-id49075 . -1) (undo-tree-id49076 . -1) (undo-tree-id49077 . -1) (undo-tree-id49078 . -1) (undo-tree-id49079 . -1) (undo-tree-id49080 . -1) (undo-tree-id49081 . -1) (undo-tree-id49082 . -1) (undo-tree-id49083 . -1) (undo-tree-id49084 . -1) (undo-tree-id49085 . -1) (undo-tree-id49086 . -1) (undo-tree-id49087 . -1) (undo-tree-id49088 . -1) (undo-tree-id49089 . -1) (undo-tree-id49090 . -1) (undo-tree-id49091 . -1) (undo-tree-id49092 . -1) (undo-tree-id49093 . -1)) nil (26157 65468 360817 704000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7949) (undo-tree-id48934 . -1) (undo-tree-id48935 . -1) (undo-tree-id48936 . -1) (undo-tree-id48937 . -1) (undo-tree-id48938 . -1) (undo-tree-id48939 . -1) (undo-tree-id48940 . -1) (undo-tree-id48941 . -1) (undo-tree-id48942 . -1) (undo-tree-id48943 . -1) (undo-tree-id48944 . -1) (undo-tree-id48945 . -1) (undo-tree-id48946 . -1) (undo-tree-id48947 . -1) (undo-tree-id48948 . -1) (undo-tree-id48949 . -1) (undo-tree-id48950 . -1) (undo-tree-id48951 . -1) (undo-tree-id48952 . -1) (undo-tree-id48953 . -1) (undo-tree-id48954 . -1) (undo-tree-id48955 . -1) (undo-tree-id48956 . -1) (undo-tree-id48957 . -1) (undo-tree-id48958 . -1) (undo-tree-id48959 . -1) (undo-tree-id48960 . -1) (undo-tree-id48961 . -1) (undo-tree-id48962 . -1) (undo-tree-id48963 . -1) (undo-tree-id48964 . -1) (undo-tree-id48965 . -1) (undo-tree-id48966 . -1) (undo-tree-id48967 . -1) (undo-tree-id48968 . -1) (undo-tree-id48969 . -1) (undo-tree-id48970 . -1) (undo-tree-id48971 . -1) (undo-tree-id48972 . -1) (undo-tree-id48973 . -1) (undo-tree-id48974 . -1) (undo-tree-id48975 . -1) (undo-tree-id48976 . -1) (undo-tree-id48977 . -1) (undo-tree-id48978 . -1) (undo-tree-id48979 . -1) (undo-tree-id48980 . -1) (undo-tree-id48981 . -1) (undo-tree-id48982 . -1) (undo-tree-id48983 . -1) (undo-tree-id48984 . -1) (undo-tree-id48985 . -1) (undo-tree-id48986 . -1) (undo-tree-id48987 . -1) (undo-tree-id48988 . -1) (undo-tree-id48989 . -1) (undo-tree-id48990 . -1) (undo-tree-id48991 . -1) (undo-tree-id48992 . -1) (undo-tree-id48993 . -1) (undo-tree-id48994 . -1) (undo-tree-id48995 . -1) (undo-tree-id48996 . -1) (undo-tree-id48997 . -1) (undo-tree-id48998 . -1) (undo-tree-id48999 . -1) (undo-tree-id49000 . -1) (undo-tree-id49001 . -1) (undo-tree-id49002 . -1) (undo-tree-id49003 . -1) (undo-tree-id49004 . -1) (undo-tree-id49005 . -1) (undo-tree-id49006 . -1) (undo-tree-id49007 . -1) (undo-tree-id49008 . -1) (undo-tree-id49009 . -1) (undo-tree-id49010 . -1) (undo-tree-id49011 . -1) (undo-tree-id49012 . -1) (undo-tree-id49013 . -1) (undo-tree-id49014 . -1) (undo-tree-id49015 . -1) (undo-tree-id49016 . -1) (undo-tree-id49017 . -1) (undo-tree-id49018 . -1) (undo-tree-id49019 . -1) (undo-tree-id49020 . -1) (undo-tree-id49021 . -1) (undo-tree-id49022 . -1) (undo-tree-id49023 . -1) (undo-tree-id49024 . -1) (undo-tree-id49025 . -1) (undo-tree-id49026 . -1) (undo-tree-id49027 . -1) (undo-tree-id49028 . -1) (undo-tree-id49029 . -1) (undo-tree-id49030 . -1) (undo-tree-id49031 . -1) (undo-tree-id49032 . -1) (undo-tree-id49033 . -1) (undo-tree-id49034 . -1) (undo-tree-id49035 . -1) (undo-tree-id49036 . -1) (undo-tree-id49037 . -1) 7950) nil (26157 65468 360691 151000) 0 nil])
([nil nil ((7913 . 7914) (#("4" 0 1 (fontified t)) . -7913) (undo-tree-id49324 . -1) (undo-tree-id49325 . -1) (undo-tree-id49326 . -1) (undo-tree-id49327 . -1) (undo-tree-id49328 . -1) (undo-tree-id49329 . -1) (undo-tree-id49330 . -1) (undo-tree-id49331 . -1) (undo-tree-id49332 . -1) (undo-tree-id49333 . -1) (undo-tree-id49334 . -1) (undo-tree-id49335 . -1) (undo-tree-id49336 . -1) (undo-tree-id49337 . -1) (undo-tree-id49338 . -1) (undo-tree-id49339 . -1) (undo-tree-id49340 . -1) (undo-tree-id49341 . -1) (undo-tree-id49342 . -1) (undo-tree-id49343 . -1) (undo-tree-id49344 . -1) (undo-tree-id49345 . -1) (undo-tree-id49346 . -1) (undo-tree-id49347 . -1) (undo-tree-id49348 . -1) (undo-tree-id49349 . -1) (undo-tree-id49350 . -1) (undo-tree-id49351 . -1) (undo-tree-id49352 . -1) (undo-tree-id49353 . -1) (undo-tree-id49354 . -1) (undo-tree-id49355 . -1) (undo-tree-id49356 . -1) (undo-tree-id49357 . -1) (undo-tree-id49358 . -1) 7914 (t 26157 65468 507575 304000)) nil (26157 65481 956093 96000) 0 nil])
([nil nil ((7913 . 7914) (#("7" 0 1 (fontified t)) . -7913) (undo-tree-id49359 . -1) (undo-tree-id49360 . -1) (undo-tree-id49361 . -1) (undo-tree-id49362 . -1) (undo-tree-id49363 . -1) (undo-tree-id49364 . -1) (undo-tree-id49365 . -1) (undo-tree-id49366 . -1) (undo-tree-id49367 . -1) (undo-tree-id49368 . -1) (undo-tree-id49369 . -1) (undo-tree-id49370 . -1) (undo-tree-id49371 . -1) 7914 (t 26157 65482 75879 1000)) nil (26157 65521 639618 781000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8162) (undo-tree-id49850 . -4) (undo-tree-id49851 . -4) (undo-tree-id49852 . -4) (undo-tree-id49853 . -4) (undo-tree-id49854 . -4) (undo-tree-id49855 . -4) (undo-tree-id49856 . -4) (undo-tree-id49857 . -4) (undo-tree-id49858 . -4) (undo-tree-id49859 . -4) (undo-tree-id49860 . -4) (undo-tree-id49861 . -4) (undo-tree-id49862 . -4) 8166 (8162 . 8166) (#("    " 0 4 (fontified nil)) . 8161) (undo-tree-id49863 . -4) (undo-tree-id49864 . -4) (undo-tree-id49865 . -4) (undo-tree-id49866 . -4) (undo-tree-id49867 . -4) (undo-tree-id49868 . -4) (undo-tree-id49869 . -4) (undo-tree-id49870 . -4) (undo-tree-id49871 . -4) (undo-tree-id49872 . -4) (undo-tree-id49873 . -4) (undo-tree-id49874 . -4) (undo-tree-id49875 . -4) (8161 . 8166) (#("    " 0 4 (fontified nil)) . 8160) (8160 . 8164) (8160 . 8161) (t 26157 65521 783141 224000)) nil (26158 70 714098 261000) 0 nil])
([nil nil ((8204 . 8208) (#("    " 0 4 (fontified nil)) . 8203) (undo-tree-id49814 . -4) (undo-tree-id49815 . -4) (8202 . 8208) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8202) (undo-tree-id49816 . -1) 8203 (8190 . 8203) (8174 . 8190) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -8174) (undo-tree-id49817 . -1) (undo-tree-id49818 . -1) (undo-tree-id49819 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -8175) (undo-tree-id49820 . -1) (undo-tree-id49821 . -1) (undo-tree-id49822 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -8176) (undo-tree-id49823 . -1) (undo-tree-id49824 . -1) (undo-tree-id49825 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8177) (undo-tree-id49826 . -1) (undo-tree-id49827 . -1) (undo-tree-id49828 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -8178) (undo-tree-id49829 . -1) (undo-tree-id49830 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -8179) (undo-tree-id49831 . -1) (undo-tree-id49832 . -1) 8180 (8178 . 8180) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -8178) (undo-tree-id49833 . -1) (undo-tree-id49834 . -1) (undo-tree-id49835 . -1) 8179 (8174 . 8179) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -8174) (undo-tree-id49836 . -1) (undo-tree-id49837 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -8175) (undo-tree-id49838 . -1) (undo-tree-id49839 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -8176) (undo-tree-id49840 . -1) (undo-tree-id49841 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -8177) (undo-tree-id49842 . -1) (undo-tree-id49843 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -8178) (undo-tree-id49844 . -1) (undo-tree-id49845 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8179) (undo-tree-id49846 . -1) (undo-tree-id49847 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -8180) (undo-tree-id49848 . -1) (undo-tree-id49849 . -1) 8181 (8166 . 8181) (8162 . 8166)) nil (26158 70 714035 139000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -8209) (undo-tree-id49524 . -1) (undo-tree-id49525 . -1) (undo-tree-id49526 . -1) (undo-tree-id49527 . -1) (undo-tree-id49528 . -1) (undo-tree-id49529 . -1) (undo-tree-id49530 . -1) (undo-tree-id49531 . -1) (undo-tree-id49532 . -1) (undo-tree-id49533 . -1) (undo-tree-id49534 . -1) (undo-tree-id49535 . -1) (undo-tree-id49536 . -1) (undo-tree-id49537 . -1) (undo-tree-id49538 . -1) (undo-tree-id49539 . -1) (undo-tree-id49540 . -1) (undo-tree-id49541 . -1) (undo-tree-id49542 . -1) (undo-tree-id49543 . -1) (undo-tree-id49544 . -1) (undo-tree-id49545 . -1) (undo-tree-id49546 . -1) (undo-tree-id49547 . -1) (undo-tree-id49548 . -1) (undo-tree-id49549 . -1) (undo-tree-id49550 . -1) (undo-tree-id49551 . -1) (undo-tree-id49552 . -1) (undo-tree-id49553 . -1) (undo-tree-id49554 . -1) (undo-tree-id49555 . -1) (undo-tree-id49556 . -1) (undo-tree-id49557 . -1) (undo-tree-id49558 . -1) (undo-tree-id49559 . -1) (undo-tree-id49560 . -1) (undo-tree-id49561 . -1) (undo-tree-id49562 . -1) (undo-tree-id49563 . -1) (undo-tree-id49564 . -1) (undo-tree-id49565 . -1) (undo-tree-id49566 . -1) (undo-tree-id49567 . -1) (undo-tree-id49568 . -1) (undo-tree-id49569 . -1) (undo-tree-id49570 . -1) (undo-tree-id49571 . -1) (undo-tree-id49572 . -1) (undo-tree-id49573 . -1) (undo-tree-id49574 . -1) (undo-tree-id49575 . -1) (undo-tree-id49576 . -1) (undo-tree-id49577 . -1) (undo-tree-id49578 . -1) (undo-tree-id49579 . -1) (undo-tree-id49580 . -1) (undo-tree-id49581 . -1) (undo-tree-id49582 . -1) (undo-tree-id49583 . -1) (undo-tree-id49584 . -1) (undo-tree-id49585 . -1) (undo-tree-id49586 . -1) (undo-tree-id49587 . -1) (undo-tree-id49588 . -1) (undo-tree-id49589 . -1) (undo-tree-id49590 . -1) (undo-tree-id49591 . -1) (undo-tree-id49592 . -1) (undo-tree-id49593 . -1) (undo-tree-id49594 . -1) (undo-tree-id49595 . -1) (undo-tree-id49596 . -1) (#("v" 0 1 (fontified t)) . -8210) (undo-tree-id49597 . -1) (undo-tree-id49598 . -1) (undo-tree-id49599 . -1) (undo-tree-id49600 . -1) (undo-tree-id49601 . -1) (undo-tree-id49602 . -1) (undo-tree-id49603 . -1) (undo-tree-id49604 . -1) (undo-tree-id49605 . -1) (undo-tree-id49606 . -1) (undo-tree-id49607 . -1) (undo-tree-id49608 . -1) (undo-tree-id49609 . -1) (undo-tree-id49610 . -1) (undo-tree-id49611 . -1) (undo-tree-id49612 . -1) (undo-tree-id49613 . -1) (undo-tree-id49614 . -1) (undo-tree-id49615 . -1) (undo-tree-id49616 . -1) (undo-tree-id49617 . -1) (undo-tree-id49618 . -1) (undo-tree-id49619 . -1) (undo-tree-id49620 . -1) (undo-tree-id49621 . -1) (undo-tree-id49622 . -1) (undo-tree-id49623 . -1) (undo-tree-id49624 . -1) (undo-tree-id49625 . -1) (undo-tree-id49626 . -1) (undo-tree-id49627 . -1) (undo-tree-id49628 . -1) (undo-tree-id49629 . -1) (undo-tree-id49630 . -1) (undo-tree-id49631 . -1) (undo-tree-id49632 . -1) (undo-tree-id49633 . -1) (undo-tree-id49634 . -1) (undo-tree-id49635 . -1) (undo-tree-id49636 . -1) (undo-tree-id49637 . -1) (undo-tree-id49638 . -1) (undo-tree-id49639 . -1) (undo-tree-id49640 . -1) (undo-tree-id49641 . -1) (undo-tree-id49642 . -1) (undo-tree-id49643 . -1) (undo-tree-id49644 . -1) (undo-tree-id49645 . -1) (undo-tree-id49646 . -1) (undo-tree-id49647 . -1) (undo-tree-id49648 . -1) (undo-tree-id49649 . -1) (undo-tree-id49650 . -1) (undo-tree-id49651 . -1) (undo-tree-id49652 . -1) (undo-tree-id49653 . -1) (undo-tree-id49654 . -1) (undo-tree-id49655 . -1) (undo-tree-id49656 . -1) (undo-tree-id49657 . -1) (undo-tree-id49658 . -1) (undo-tree-id49659 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -8211) (undo-tree-id49660 . -1) (undo-tree-id49661 . -1) (undo-tree-id49662 . -1) (undo-tree-id49663 . -1) (undo-tree-id49664 . -1) (undo-tree-id49665 . -1) (undo-tree-id49666 . -1) (undo-tree-id49667 . -1) (undo-tree-id49668 . -1) (undo-tree-id49669 . -1) (undo-tree-id49670 . -1) (undo-tree-id49671 . -1) (undo-tree-id49672 . -1) (undo-tree-id49673 . -1) (undo-tree-id49674 . -1) (undo-tree-id49675 . -1) (undo-tree-id49676 . -1) (undo-tree-id49677 . -1) (undo-tree-id49678 . -1) (undo-tree-id49679 . -1) (undo-tree-id49680 . -1) (undo-tree-id49681 . -1) (undo-tree-id49682 . -1) (undo-tree-id49683 . -1) (undo-tree-id49684 . -1) (undo-tree-id49685 . -1) (undo-tree-id49686 . -1) (undo-tree-id49687 . -1) (undo-tree-id49688 . -1) (undo-tree-id49689 . -1) (undo-tree-id49690 . -1) (undo-tree-id49691 . -1) (undo-tree-id49692 . -1) (undo-tree-id49693 . -1) (undo-tree-id49694 . -1) (undo-tree-id49695 . -1) (undo-tree-id49696 . -1) (undo-tree-id49697 . -1) (undo-tree-id49698 . -1) (undo-tree-id49699 . -1) (undo-tree-id49700 . -1) (undo-tree-id49701 . -1) (undo-tree-id49702 . -1) (undo-tree-id49703 . -1) (undo-tree-id49704 . -1) (undo-tree-id49705 . -1) (undo-tree-id49706 . -1) (undo-tree-id49707 . -1) (undo-tree-id49708 . -1) (undo-tree-id49709 . -1) (undo-tree-id49710 . -1) (undo-tree-id49711 . -1) (undo-tree-id49712 . -1) (#(" " 0 1 (fontified t)) . -8212) (undo-tree-id49713 . -1) (undo-tree-id49714 . -1) (undo-tree-id49715 . -1) (undo-tree-id49716 . -1) (undo-tree-id49717 . -1) (undo-tree-id49718 . -1) (undo-tree-id49719 . -1) (undo-tree-id49720 . -1) (undo-tree-id49721 . -1) (undo-tree-id49722 . -1) (undo-tree-id49723 . -1) (undo-tree-id49724 . -1) (undo-tree-id49725 . -1) (undo-tree-id49726 . -1) (undo-tree-id49727 . -1) (undo-tree-id49728 . -1) (undo-tree-id49729 . -1) (undo-tree-id49730 . -1) (undo-tree-id49731 . -1) (undo-tree-id49732 . -1) (undo-tree-id49733 . -1) (undo-tree-id49734 . -1) (undo-tree-id49735 . -1) (undo-tree-id49736 . -1) (undo-tree-id49737 . -1) (undo-tree-id49738 . -1) (undo-tree-id49739 . -1) (undo-tree-id49740 . -1) (undo-tree-id49741 . -1) (undo-tree-id49742 . -1) (undo-tree-id49743 . -1) (undo-tree-id49744 . -1) (undo-tree-id49745 . -1) (undo-tree-id49746 . -1) (undo-tree-id49747 . -1) (undo-tree-id49748 . -1) (undo-tree-id49749 . -1) (undo-tree-id49750 . -1) (undo-tree-id49751 . -1) (undo-tree-id49752 . -1) (undo-tree-id49753 . -1) (undo-tree-id49754 . -1) (undo-tree-id49755 . -1) (#("t" 0 1 (fontified t)) . -8213) (undo-tree-id49756 . -1) (undo-tree-id49757 . -1) (undo-tree-id49758 . -1) (undo-tree-id49759 . -1) (undo-tree-id49760 . -1) (undo-tree-id49761 . -1) (undo-tree-id49762 . -1) (undo-tree-id49763 . -1) (undo-tree-id49764 . -1) (undo-tree-id49765 . -1) (undo-tree-id49766 . -1) (undo-tree-id49767 . -1) (undo-tree-id49768 . -1) (undo-tree-id49769 . -1) (undo-tree-id49770 . -1) (undo-tree-id49771 . -1) (undo-tree-id49772 . -1) (undo-tree-id49773 . -1) (undo-tree-id49774 . -1) (undo-tree-id49775 . -1) (undo-tree-id49776 . -1) (undo-tree-id49777 . -1) (undo-tree-id49778 . -1) (undo-tree-id49779 . -1) (undo-tree-id49780 . -1) (undo-tree-id49781 . -1) (undo-tree-id49782 . -1) (undo-tree-id49783 . -1) (undo-tree-id49784 . -1) (undo-tree-id49785 . -1) (undo-tree-id49786 . -1) (undo-tree-id49787 . -1) (#("r" 0 1 (fontified t)) . -8214) (undo-tree-id49788 . -1) (undo-tree-id49789 . -1) (undo-tree-id49790 . -1) (undo-tree-id49791 . -1) (undo-tree-id49792 . -1) (undo-tree-id49793 . -1) (undo-tree-id49794 . -1) (undo-tree-id49795 . -1) (undo-tree-id49796 . -1) (undo-tree-id49797 . -1) (undo-tree-id49798 . -1) (undo-tree-id49799 . -1) (undo-tree-id49800 . -1) (undo-tree-id49801 . -1) (undo-tree-id49802 . -1) (undo-tree-id49803 . -1) (undo-tree-id49804 . -1) (undo-tree-id49805 . -1) (undo-tree-id49806 . -1) (undo-tree-id49807 . -1) (undo-tree-id49808 . -1) (undo-tree-id49809 . -1) (undo-tree-id49810 . -1) (#("o" 0 1 (fontified t)) . -8215) (undo-tree-id49811 . -1) (undo-tree-id49812 . -1) (undo-tree-id49813 . -1) 8216 (8208 . 8216)) nil (26158 70 713926 780000) 0 nil])
([nil nil ((8240 . 8241) (apply yas--snippet-revive 8221 8240 #s(yas--snippet nil (#s(yas--field 1 8234 8236 nil nil nil t #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil))) #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil))) #s(yas--exit 8240 nil) 239 nil #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil)) nil nil)) (8238 . 8239) (#("0" 0 1 (fontified t)) . -8238) (undo-tree-id49372 . -1) (undo-tree-id49373 . -1) (undo-tree-id49374 . -1) (undo-tree-id49375 . -1) (undo-tree-id49376 . -1) (undo-tree-id49377 . -1) (undo-tree-id49378 . -1) (undo-tree-id49379 . -1) (undo-tree-id49380 . -1) (undo-tree-id49381 . -1) (undo-tree-id49382 . -1) (undo-tree-id49383 . -1) (undo-tree-id49384 . -1) (undo-tree-id49385 . -1) (undo-tree-id49386 . -1) (undo-tree-id49387 . -1) (undo-tree-id49388 . -1) (undo-tree-id49389 . -1) (undo-tree-id49390 . -1) (undo-tree-id49391 . -1) (undo-tree-id49392 . -1) (undo-tree-id49393 . -1) (undo-tree-id49394 . -1) (undo-tree-id49395 . -1) (undo-tree-id49396 . -1) (undo-tree-id49397 . -1) (undo-tree-id49398 . -1) (undo-tree-id49399 . -1) (undo-tree-id49400 . -1) (undo-tree-id49401 . -1) (undo-tree-id49402 . -1) (undo-tree-id49403 . -1) (undo-tree-id49404 . -1) (undo-tree-id49405 . -1) (undo-tree-id49406 . -1) (undo-tree-id49407 . -1) (undo-tree-id49408 . -1) (undo-tree-id49409 . -1) (undo-tree-id49410 . -1) (undo-tree-id49411 . -1) (undo-tree-id49412 . -1) (undo-tree-id49413 . -1) (undo-tree-id49414 . -1) (undo-tree-id49415 . -1) (undo-tree-id49416 . -1) (undo-tree-id49417 . -1) (undo-tree-id49418 . -1) (undo-tree-id49419 . -1) (undo-tree-id49420 . -1) (undo-tree-id49421 . -1) (undo-tree-id49422 . -1) (undo-tree-id49423 . -1) (undo-tree-id49424 . -1) (undo-tree-id49425 . -1) (undo-tree-id49426 . -1) (undo-tree-id49427 . -1) (undo-tree-id49428 . -1) (undo-tree-id49429 . -1) (undo-tree-id49430 . -1) (undo-tree-id49431 . -1) (undo-tree-id49432 . -1) (undo-tree-id49433 . -1) (undo-tree-id49434 . -1) (undo-tree-id49435 . -1) (undo-tree-id49436 . -1) (undo-tree-id49437 . -1) (undo-tree-id49438 . -1) (undo-tree-id49439 . -1) 8239 (#("ya" 0 2 (fontified nil)) . 8239) (undo-tree-id49440 . -2) (8238 . 8239) (8234 . 8236) (#("3" 0 1 (fontified t)) . -8234) (undo-tree-id49441 . -1) (undo-tree-id49442 . -1) (undo-tree-id49443 . -1) (#("0" 0 1 (fontified t)) . -8235) (undo-tree-id49444 . -1) (undo-tree-id49445 . -1) (undo-tree-id49446 . -1) 8236 (8235 . 8236) (#("xa" 0 2 (fontified nil)) . 8235) (undo-tree-id49447 . -2) (8234 . 8235) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8234 8236 nil nil nil t #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil))) #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil))) #s(yas--exit 8240 nil) 239 nil #s(yas--field 2 8238 8239 nil nil nil t #s(yas--exit 8240 nil)) nil nil)) (8221 . 8241) (#("moveparticle(${1:xa}, ${2:ya})$0" 0 32 (fontified nil)) . 8221) (8221 . 8253) (#("mo" 0 2 (fontified nil)) . 8221) (8221 . 8223) (#("moveparticle(…)" 0 15 (fontified nil)) . -8221) (8221 . 8236) (#("mo" 0 2 (fontified t)) . -8221) (undo-tree-id49448 . -1) (undo-tree-id49449 . -2) (undo-tree-id49450 . -2) 8223 (8221 . 8223) (8220 . 8221) (8208 . 8220) (#("rea" 0 3 (fontified nil)) . 8208) (8208 . 8211) (#("realparticle" 0 12 (fontified nil)) . -8208) (8208 . 8220) (#("rea" 0 3 (fontified t)) . -8208) (undo-tree-id49451 . -3) (undo-tree-id49452 . -3) 8211 (8208 . 8211) (#("m" 0 1 (fontified t)) . -8208) (undo-tree-id49453 . -1) (undo-tree-id49454 . -1) (undo-tree-id49455 . -1) (undo-tree-id49456 . -1) (undo-tree-id49457 . -1) (undo-tree-id49458 . -1) (undo-tree-id49459 . -1) (undo-tree-id49460 . -1) (undo-tree-id49461 . -1) (undo-tree-id49462 . -1) (undo-tree-id49463 . -1) (undo-tree-id49464 . -1) (undo-tree-id49465 . -1) (undo-tree-id49466 . -1) (undo-tree-id49467 . -1) (undo-tree-id49468 . -1) (undo-tree-id49469 . -1) (undo-tree-id49470 . -1) (undo-tree-id49471 . -1) (undo-tree-id49472 . -1) (undo-tree-id49473 . -1) (undo-tree-id49474 . -1) (undo-tree-id49475 . -1) (undo-tree-id49476 . -1) (undo-tree-id49477 . -1) (undo-tree-id49478 . -1) (undo-tree-id49479 . -1) (undo-tree-id49480 . -1) (undo-tree-id49481 . -1) (undo-tree-id49482 . -1) (undo-tree-id49483 . -1) (undo-tree-id49484 . -1) (undo-tree-id49485 . -1) (undo-tree-id49486 . -1) (undo-tree-id49487 . -1) (undo-tree-id49488 . -1) (undo-tree-id49489 . -1) (undo-tree-id49490 . -1) (undo-tree-id49491 . -1) (undo-tree-id49492 . -1) (undo-tree-id49493 . -1) (undo-tree-id49494 . -1) (undo-tree-id49495 . -1) (undo-tree-id49496 . -1) (undo-tree-id49497 . -1) (undo-tree-id49498 . -1) (undo-tree-id49499 . -1) (undo-tree-id49500 . -1) (undo-tree-id49501 . -1) (undo-tree-id49502 . -1) (undo-tree-id49503 . -1) (undo-tree-id49504 . -1) (undo-tree-id49505 . -1) (undo-tree-id49506 . -1) (undo-tree-id49507 . -1) (undo-tree-id49508 . -1) (undo-tree-id49509 . -1) (undo-tree-id49510 . -1) (undo-tree-id49511 . -1) (undo-tree-id49512 . -1) (undo-tree-id49513 . -1) (undo-tree-id49514 . -1) (undo-tree-id49515 . -1) (undo-tree-id49516 . -1) (undo-tree-id49517 . -1) (undo-tree-id49518 . -1) (undo-tree-id49519 . -1) (undo-tree-id49520 . -1) (undo-tree-id49521 . -1) (undo-tree-id49522 . -1) (undo-tree-id49523 . -1) 8209) nil (26158 70 713347 53000) 0 nil])
([nil nil ((7023 . 7027)) nil (26158 70 712820 75000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8247) (undo-tree-id49980 . -4) (undo-tree-id49981 . -4) (undo-tree-id49982 . -4) (undo-tree-id49983 . -4) (undo-tree-id49984 . -4) (undo-tree-id49985 . -4) (undo-tree-id49986 . -4) (undo-tree-id49987 . -4) (undo-tree-id49988 . -4) (undo-tree-id49989 . -4) (undo-tree-id49990 . -4) (undo-tree-id49991 . -4) (undo-tree-id49992 . -4) 8251 (8247 . 8251) (#("    " 0 4 (fontified nil)) . 8246) (undo-tree-id49993 . -4) (undo-tree-id49994 . -4) (undo-tree-id49995 . -4) (undo-tree-id49996 . -4) (undo-tree-id49997 . -4) (undo-tree-id49998 . -4) (undo-tree-id49999 . -4) (undo-tree-id50000 . -4) (undo-tree-id50001 . -4) (undo-tree-id50002 . -4) (undo-tree-id50003 . -4) (undo-tree-id50004 . -4) (undo-tree-id50005 . -4) (8245 . 8251) (t 26158 70 862171 590000)) nil (26158 117 153621 832000) 0 nil])
([nil nil ((8298 . 8299) (#("f" 0 1 (fontified nil)) . 8298) (undo-tree-id49893 . -1) (8297 . 8298) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil))) #s(yas--exit 8337 nil) 242 nil #s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil)) nil nil)) (8293 . 8299) (#("map(${1:f})$0" 0 13 (fontified nil)) . 8293) (8293 . 8306) (#("ma" 0 2 (fontified nil)) . 8293) (8293 . 8295) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -8293) (8293 . 8313) (#("ma" 0 2 (fontified t)) . -8293) (undo-tree-id49894 . -2) (undo-tree-id49895 . -2) (undo-tree-id49896 . -2) 8295 (8292 . 8295) (apply yas--snippet-revive 8281 8292 #s(yas--snippet nil nil #s(yas--exit 8292 nil) 241 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8292 nil) 241 nil nil nil nil)) (8281 . 8292) (#("into_iter()$0" 0 13 (fontified nil)) . 8281) (8281 . 8294) (#("in" 0 2 (fontified nil)) . 8281) (8281 . 8283) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -8281) (8281 . 8310) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -8281) (undo-tree-id49897 . -2) (undo-tree-id49898 . -2) 8283 (8280 . 8283) (8267 . 8280) (#("p" 0 1 (fontified nil)) . 8267) (8267 . 8268) (#("particle_list" 0 13 (fontified nil)) . -8267) (8267 . 8280) (#("p" 0 1 (fontified t)) . -8267) (undo-tree-id49899 . -1) (undo-tree-id49900 . -1) 8268 (8264 . 8268) (8251 . 8264) (#("pa" 0 2 (fontified nil)) . 8251) (8251 . 8253) (#("particle_list" 0 13 (fontified nil)) . -8251) (8251 . 8264) (#("pa" 0 2 (fontified t)) . -8251) (undo-tree-id49901 . -2) (undo-tree-id49902 . -2) (undo-tree-id49903 . -2) 8253 (8251 . 8253) (#("p" 0 1 (fontified t)) . -8251) (undo-tree-id49904 . -1) (undo-tree-id49905 . -1) (undo-tree-id49906 . -1) (#("a" 0 1 (fontified t)) . -8252) (undo-tree-id49907 . -1) (undo-tree-id49908 . -1) (undo-tree-id49909 . -1) (#("r" 0 1 (fontified t)) . -8253) (undo-tree-id49910 . -1) (undo-tree-id49911 . -1) (undo-tree-id49912 . -1) (#("t" 0 1 (fontified t)) . -8254) (undo-tree-id49913 . -1) (undo-tree-id49914 . -1) (undo-tree-id49915 . -1) (#("i" 0 1 (fontified t)) . -8255) (undo-tree-id49916 . -1) (undo-tree-id49917 . -1) (undo-tree-id49918 . -1) (#("c" 0 1 (fontified t)) . -8256) (undo-tree-id49919 . -1) (undo-tree-id49920 . -1) (undo-tree-id49921 . -1) (#("l" 0 1 (fontified t)) . -8257) (undo-tree-id49922 . -1) (undo-tree-id49923 . -1) (undo-tree-id49924 . -1) (#("e" 0 1 (fontified t)) . -8258) (undo-tree-id49925 . -1) (undo-tree-id49926 . -1) (undo-tree-id49927 . -1) (#("_" 0 1 (fontified t)) . -8259) (undo-tree-id49928 . -1) (undo-tree-id49929 . -1) (undo-tree-id49930 . -1) (#("l" 0 1 (fontified t)) . -8260) (undo-tree-id49931 . -1) (undo-tree-id49932 . -1) (undo-tree-id49933 . -1) (#("i" 0 1 (fontified t)) . -8261) (undo-tree-id49934 . -1) (undo-tree-id49935 . -1) (undo-tree-id49936 . -1) (#("s" 0 1 (fontified t)) . -8262) (undo-tree-id49937 . -1) (undo-tree-id49938 . -1) (undo-tree-id49939 . -1) (#("t" 0 1 (fontified nil)) . -8263) (undo-tree-id49940 . -1) (undo-tree-id49941 . -1) (undo-tree-id49942 . -1) (#("." 0 1 (fontified nil)) . -8264) (undo-tree-id49943 . -1) (undo-tree-id49944 . -1) (undo-tree-id49945 . -1) (#("i" 0 1 (fontified nil)) . -8265) (undo-tree-id49946 . -1) (undo-tree-id49947 . -1) (undo-tree-id49948 . -1) (#("t" 0 1 (fontified nil)) . -8266) (undo-tree-id49949 . -1) (undo-tree-id49950 . -1) (undo-tree-id49951 . -1) (#("e" 0 1 (fontified nil)) . -8267) (undo-tree-id49952 . -1) (undo-tree-id49953 . -1) (undo-tree-id49954 . -1) (#("r" 0 1 (fontified nil)) . -8268) (undo-tree-id49955 . -1) (undo-tree-id49956 . -1) (undo-tree-id49957 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -8269) (undo-tree-id49958 . -1) (undo-tree-id49959 . -1) (undo-tree-id49960 . -1) 8270 (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -8270) (undo-tree-id49961 . -1) (undo-tree-id49962 . -1) (undo-tree-id49963 . -1) (#("." 0 1 (fontified t)) . -8271) (undo-tree-id49964 . -1) (undo-tree-id49965 . -1) (undo-tree-id49966 . -1) (#("f" 0 1 (fontified t)) . -8272) (undo-tree-id49967 . -1) (undo-tree-id49968 . -1) (undo-tree-id49969 . -1) (#("o" 0 1 (fontified t)) . -8273) (undo-tree-id49970 . -1) (undo-tree-id49971 . -1) (undo-tree-id49972 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -8274) (undo-tree-id49973 . -1) (undo-tree-id49974 . -1) (undo-tree-id49975 . -1) 8275 (8271 . 8275) (apply yas--snippet-revive 8265 8271 #s(yas--snippet nil nil #s(yas--exit 8271 nil) 240 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8271 nil) 240 nil nil nil nil)) (8265 . 8271) (#("iter()$0" 0 8 (fontified nil)) . 8265) (8265 . 8273) (#("it" 0 2 (fontified nil)) . 8265) (8265 . 8267) (#("iter()" 0 6 (fontified nil)) . -8265) (8265 . 8271) (#("it" 0 2 (fontified t)) . -8265) (undo-tree-id49976 . -2) (undo-tree-id49977 . -2) 8267 (8264 . 8267) (8251 . 8264) (#("par" 0 3 (fontified nil)) . 8251) (8251 . 8254) (#("particle_list" 0 13 (fontified nil)) . -8251) (8251 . 8264) (#("par" 0 3 (fontified t)) . -8251) (undo-tree-id49978 . -3) (undo-tree-id49979 . -3) 8254 (8251 . 8254) (8247 . 8251)) nil (26158 117 153544 159000) 0 nil])
([nil nil ((8298 . 8306)) nil (26158 117 153344 941000) 0 nil])
([nil nil ((8337 . 8338) (apply yas--snippet-revive 8293 8337 #s(yas--snippet nil (#s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil))) #s(yas--exit 8337 nil) 242 nil #s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil)) nil nil)) (apply yas--snippet-revive 8317 8336 #s(yas--snippet nil (#s(yas--field 1 8330 8332 nil nil nil t #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil))) #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil))) #s(yas--exit 8336 nil) 243 nil #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil)) #s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil)) nil)) (#("ya" 0 2 (fontified nil)) . 8335) (undo-tree-id49876 . -2) (8334 . 8335) (8331 . 8332) (#("xa" 0 2 (fontified nil)) . 8331) (undo-tree-id49877 . -2) (8330 . 8331) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8330 8332 nil nil nil t #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil))) #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil))) #s(yas--exit 8336 nil) 243 nil #s(yas--field 2 8334 8335 nil nil nil t #s(yas--exit 8336 nil)) #s(yas--field 1 8297 8336 nil nil nil t #s(yas--exit 8337 nil)) nil)) (8317 . 8337) (#("moveparticle(${1:xa}, ${2:ya})$0" 0 32 (fontified nil)) . 8317) (undo-tree-id49878 . -32) (8317 . 8349) (#("mo" 0 2 (fontified nil)) . 8317) (undo-tree-id49879 . -2) (8317 . 8319) (#("moveparticle(…)" 0 15 (fontified nil)) . -8317) (undo-tree-id49880 . -15) (8317 . 8332) (#("mo" 0 2 (fontified t)) . -8317) (undo-tree-id49881 . -1) (undo-tree-id49882 . -2) (undo-tree-id49883 . -2) (undo-tree-id49884 . -2) 8319 (8316 . 8319) (8308 . 8316) (#("pa" 0 2 (fontified nil)) . 8308) (undo-tree-id49885 . -2) (8308 . 8310) (#("particle" 0 8 (fontified nil)) . -8308) (undo-tree-id49886 . -8) (8308 . 8316) (#("pa" 0 2 (fontified t)) . -8308) (undo-tree-id49887 . -2) (undo-tree-id49888 . -2) (undo-tree-id49889 . -2) 8310 (8307 . 8310) (#("," 0 1 (fontified t)) . -8307) (undo-tree-id49890 . -1) (undo-tree-id49891 . -1) (undo-tree-id49892 . -1) 8308 (8307 . 8308)) nil (26158 117 153328 493000) 0 nil])
([nil nil ((apply yas--snippet-revive 8338 8347 #s(yas--snippet nil nil #s(yas--exit 8347 nil) 244 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8347 nil) 244 nil nil nil nil)) (8338 . 8347) (#("collect()$0" 0 11 (fontified nil)) . 8338) (8338 . 8349) (#("col" 0 3 (fontified nil)) . 8338) (8338 . 8341) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -8338) (8338 . 8361) (#("col" 0 3 (fontified t)) . -8338) (undo-tree-id50006 . -3) (undo-tree-id50007 . -3) (undo-tree-id50008 . -3) (undo-tree-id50009 . -2) (undo-tree-id50010 . -2) (undo-tree-id50011 . -2) (undo-tree-id50012 . -2) (undo-tree-id50013 . -2) (undo-tree-id50014 . -2) (undo-tree-id50015 . -2) (undo-tree-id50016 . -2) (undo-tree-id50017 . -2) (undo-tree-id50018 . -2) (undo-tree-id50019 . -2) (undo-tree-id50020 . -2) (undo-tree-id50021 . -2) (undo-tree-id50022 . -2) (undo-tree-id50023 . -2) (undo-tree-id50024 . -2) (undo-tree-id50025 . -2) (undo-tree-id50026 . -2) (undo-tree-id50027 . -2) (undo-tree-id50028 . -2) (undo-tree-id50029 . -3) (undo-tree-id50030 . -3) (undo-tree-id50031 . -3) (undo-tree-id50032 . -3) (undo-tree-id50033 . -3) (undo-tree-id50034 . -3) (undo-tree-id50035 . -3) (undo-tree-id50036 . -3) (undo-tree-id50037 . -3) (undo-tree-id50038 . -3) (undo-tree-id50039 . -3) (undo-tree-id50040 . -3) (undo-tree-id50041 . -3) (undo-tree-id50042 . -3) (undo-tree-id50043 . -3) (undo-tree-id50044 . -3) (undo-tree-id50045 . -3) (undo-tree-id50046 . -3) (undo-tree-id50047 . -3) (undo-tree-id50048 . -3) (undo-tree-id50049 . -3) (undo-tree-id50050 . -3) (undo-tree-id50051 . -3) (undo-tree-id50052 . -3) (undo-tree-id50053 . -3) (undo-tree-id50054 . -3) (undo-tree-id50055 . -3) (undo-tree-id50056 . -3) (undo-tree-id50057 . -3) (undo-tree-id50058 . -3) (undo-tree-id50059 . -3) (undo-tree-id50060 . -3) (undo-tree-id50061 . -3) (undo-tree-id50062 . -3) (undo-tree-id50063 . -3) (undo-tree-id50064 . -3) (undo-tree-id50065 . -3) (undo-tree-id50066 . -3) (undo-tree-id50067 . -3) (undo-tree-id50068 . -3) (undo-tree-id50069 . -3) (undo-tree-id50070 . -3) (undo-tree-id50071 . -3) (undo-tree-id50072 . -3) (undo-tree-id50073 . -3) (undo-tree-id50074 . -3) (undo-tree-id50075 . -3) (undo-tree-id50076 . -3) (undo-tree-id50077 . -3) (undo-tree-id50078 . -3) (undo-tree-id50079 . -3) (undo-tree-id50080 . -3) (undo-tree-id50081 . -3) (undo-tree-id50082 . -3) (undo-tree-id50083 . -3) (undo-tree-id50084 . -3) (undo-tree-id50085 . -3) (undo-tree-id50086 . -3) (undo-tree-id50087 . -3) (undo-tree-id50088 . -3) (undo-tree-id50089 . -3) (undo-tree-id50090 . -3) (undo-tree-id50091 . -3) (undo-tree-id50092 . -3) (undo-tree-id50093 . -3) (undo-tree-id50094 . -3) (undo-tree-id50095 . -3) (undo-tree-id50096 . -3) (undo-tree-id50097 . -3) (undo-tree-id50098 . -3) (undo-tree-id50099 . -3) (undo-tree-id50100 . -3) (undo-tree-id50101 . -3) (undo-tree-id50102 . -3) (undo-tree-id50103 . -3) 8341 (8339 . 8341) (#("l" 0 1 (fontified t)) . -8339) (undo-tree-id50104 . -1) (undo-tree-id50105 . -1) (undo-tree-id50106 . -1) 8340 (8337 . 8340) (t 26158 117 303061 353000)) nil (26158 128 759019 915000) 0 nil])
([nil nil ((8336 . 8346) (t 26158 128 904960 847000)) nil (26158 159 954861 738000) 0 nil])
([nil nil ((8310 . 8311) (8311 . 8315) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 8310) (8310 . 8311) (8309 . 8311) (8308 . 8310) (t 26158 160 100370 599000)) nil (26158 178 984874 506000) 0 nil])
([nil nil ((#("particle.moveparticle(30, 7); particle" 0 9 (fontified t) 9 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 24 (fontified t) 24 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 38 (fontified t)) . 8317) (undo-tree-id50107 . -37) (undo-tree-id50108 . -37) (undo-tree-id50109 . -37) (undo-tree-id50110 . -36) (undo-tree-id50111 . -1) (undo-tree-id50112 . -37) (undo-tree-id50113 . -38) (undo-tree-id50114 . -37) (undo-tree-id50115 . -1) (undo-tree-id50116 . -1) (undo-tree-id50117 . -1) (undo-tree-id50118 . -1) (undo-tree-id50119 . -1) (undo-tree-id50120 . -1) (undo-tree-id50121 . -1) (undo-tree-id50122 . -1) (undo-tree-id50123 . -1) (undo-tree-id50124 . -28) (undo-tree-id50125 . -1) (undo-tree-id50126 . -28) (undo-tree-id50127 . -29) (undo-tree-id50128 . -38) (undo-tree-id50129 . -38) (undo-tree-id50130 . -1) (undo-tree-id50131 . -1) (undo-tree-id50132 . -1) (undo-tree-id50133 . -1) (undo-tree-id50134 . -1) (undo-tree-id50135 . -1) (undo-tree-id50136 . -1) (undo-tree-id50137 . -1) (undo-tree-id50138 . -1) (undo-tree-id50139 . -1) (undo-tree-id50140 . -1) (undo-tree-id50141 . -1) (undo-tree-id50142 . -1) (undo-tree-id50143 . -1) (undo-tree-id50144 . -1) (undo-tree-id50145 . -1) (undo-tree-id50146 . -1) (undo-tree-id50147 . -1) (undo-tree-id50148 . -1) (undo-tree-id50149 . -1) (undo-tree-id50150 . -1) (undo-tree-id50151 . -1) (undo-tree-id50152 . -1) (undo-tree-id50153 . -2) (undo-tree-id50154 . -2) (undo-tree-id50155 . -2) (undo-tree-id50156 . -2) (undo-tree-id50157 . -2) (undo-tree-id50158 . -2) (undo-tree-id50159 . -2) (undo-tree-id50160 . -2) (undo-tree-id50161 . -2) (undo-tree-id50162 . -2) (undo-tree-id50163 . -3) (undo-tree-id50164 . -3) (undo-tree-id50165 . -3) (undo-tree-id50166 . -3) (undo-tree-id50167 . -3) (undo-tree-id50168 . -3) (undo-tree-id50169 . -3) (undo-tree-id50170 . -3) (undo-tree-id50171 . -3) (undo-tree-id50172 . -4) (undo-tree-id50173 . -4) (undo-tree-id50174 . -4) (undo-tree-id50175 . -4) (undo-tree-id50176 . -4) (undo-tree-id50177 . -4) (undo-tree-id50178 . -4) (undo-tree-id50179 . -4) (undo-tree-id50180 . -4) (undo-tree-id50181 . -5) (undo-tree-id50182 . -5) (undo-tree-id50183 . -5) (undo-tree-id50184 . -5) (undo-tree-id50185 . -5) (undo-tree-id50186 . -5) (undo-tree-id50187 . -5) (undo-tree-id50188 . -5) (undo-tree-id50189 . -5) (undo-tree-id50190 . -6) (undo-tree-id50191 . -6) (undo-tree-id50192 . -6) (undo-tree-id50193 . -6) (undo-tree-id50194 . -6) (undo-tree-id50195 . -6) (undo-tree-id50196 . -6) (undo-tree-id50197 . -6) (undo-tree-id50198 . -6) (undo-tree-id50199 . -7) (undo-tree-id50200 . -7) (undo-tree-id50201 . -7) (undo-tree-id50202 . -7) (undo-tree-id50203 . -7) (undo-tree-id50204 . -7) (undo-tree-id50205 . -7) (undo-tree-id50206 . -7) (undo-tree-id50207 . -7) (undo-tree-id50208 . -8) (undo-tree-id50209 . -8) (undo-tree-id50210 . -8) (undo-tree-id50211 . -8) (undo-tree-id50212 . -8) (undo-tree-id50213 . -8) (undo-tree-id50214 . -8) (undo-tree-id50215 . -8) (undo-tree-id50216 . -8) (undo-tree-id50217 . -9) (undo-tree-id50218 . -9) (undo-tree-id50219 . -9) (undo-tree-id50220 . -9) (undo-tree-id50221 . -9) (undo-tree-id50222 . -9) (undo-tree-id50223 . -9) (undo-tree-id50224 . -9) (undo-tree-id50225 . -9) (undo-tree-id50226 . -10) (undo-tree-id50227 . -10) (undo-tree-id50228 . -10) (undo-tree-id50229 . -10) (undo-tree-id50230 . -10) (undo-tree-id50231 . -10) (undo-tree-id50232 . -10) (undo-tree-id50233 . -10) (undo-tree-id50234 . -10) (undo-tree-id50235 . -11) (undo-tree-id50236 . -11) (undo-tree-id50237 . -11) (undo-tree-id50238 . -11) (undo-tree-id50239 . -11) (undo-tree-id50240 . -11) (undo-tree-id50241 . -11) (undo-tree-id50242 . -11) (undo-tree-id50243 . -11) (undo-tree-id50244 . -12) (undo-tree-id50245 . -12) (undo-tree-id50246 . -12) (undo-tree-id50247 . -12) (undo-tree-id50248 . -12) (undo-tree-id50249 . -12) (undo-tree-id50250 . -12) (undo-tree-id50251 . -12) (undo-tree-id50252 . -12) (undo-tree-id50253 . -13) (undo-tree-id50254 . -13) (undo-tree-id50255 . -13) (undo-tree-id50256 . -13) (undo-tree-id50257 . -13) (undo-tree-id50258 . -13) (undo-tree-id50259 . -13) (undo-tree-id50260 . -13) (undo-tree-id50261 . -13) (undo-tree-id50262 . -14) (undo-tree-id50263 . -14) (undo-tree-id50264 . -14) (undo-tree-id50265 . -14) (undo-tree-id50266 . -14) (undo-tree-id50267 . -14) (undo-tree-id50268 . -14) (undo-tree-id50269 . -14) (undo-tree-id50270 . -14) (undo-tree-id50271 . -15) (undo-tree-id50272 . -15) (undo-tree-id50273 . -15) (undo-tree-id50274 . -15) (undo-tree-id50275 . -15) (undo-tree-id50276 . -15) (undo-tree-id50277 . -15) (undo-tree-id50278 . -15) (undo-tree-id50279 . -15) (undo-tree-id50280 . -16) (undo-tree-id50281 . -16) (undo-tree-id50282 . -16) (undo-tree-id50283 . -16) (undo-tree-id50284 . -16) (undo-tree-id50285 . -16) (undo-tree-id50286 . -16) (undo-tree-id50287 . -16) (undo-tree-id50288 . -16) (undo-tree-id50289 . -17) (undo-tree-id50290 . -17) (undo-tree-id50291 . -17) (undo-tree-id50292 . -17) (undo-tree-id50293 . -17) (undo-tree-id50294 . -17) (undo-tree-id50295 . -17) (undo-tree-id50296 . -17) (undo-tree-id50297 . -17) (undo-tree-id50298 . -18) (undo-tree-id50299 . -18) (undo-tree-id50300 . -18) (undo-tree-id50301 . -18) (undo-tree-id50302 . -18) (undo-tree-id50303 . -18) (undo-tree-id50304 . -18) (undo-tree-id50305 . -18) (undo-tree-id50306 . -18) (undo-tree-id50307 . -19) (undo-tree-id50308 . -19) (undo-tree-id50309 . -19) (undo-tree-id50310 . -19) (undo-tree-id50311 . -19) (undo-tree-id50312 . -19) (undo-tree-id50313 . -19) (undo-tree-id50314 . -19) (undo-tree-id50315 . -19) (undo-tree-id50316 . -20) (undo-tree-id50317 . -20) (undo-tree-id50318 . -20) (undo-tree-id50319 . -20) (undo-tree-id50320 . -20) (undo-tree-id50321 . -20) (undo-tree-id50322 . -20) (undo-tree-id50323 . -20) (undo-tree-id50324 . -20) (undo-tree-id50325 . -21) (undo-tree-id50326 . -21) (undo-tree-id50327 . -21) (undo-tree-id50328 . -21) (undo-tree-id50329 . -21) (undo-tree-id50330 . -21) (undo-tree-id50331 . -21) (undo-tree-id50332 . -21) (undo-tree-id50333 . -21) (undo-tree-id50334 . -22) (undo-tree-id50335 . -22) (undo-tree-id50336 . -22) (undo-tree-id50337 . -22) (undo-tree-id50338 . -22) (undo-tree-id50339 . -22) (undo-tree-id50340 . -22) (undo-tree-id50341 . -22) (undo-tree-id50342 . -22) (undo-tree-id50343 . -23) (undo-tree-id50344 . -23) (undo-tree-id50345 . -23) (undo-tree-id50346 . -23) (undo-tree-id50347 . -23) (undo-tree-id50348 . -23) (undo-tree-id50349 . -23) (undo-tree-id50350 . -23) (undo-tree-id50351 . -23) (undo-tree-id50352 . -24) (undo-tree-id50353 . -24) (undo-tree-id50354 . -24) (undo-tree-id50355 . -24) (undo-tree-id50356 . -24) (undo-tree-id50357 . -24) (undo-tree-id50358 . -24) (undo-tree-id50359 . -24) (undo-tree-id50360 . -24) (undo-tree-id50361 . -25) (undo-tree-id50362 . -25) (undo-tree-id50363 . -25) (undo-tree-id50364 . -25) (undo-tree-id50365 . -25) (undo-tree-id50366 . -25) (undo-tree-id50367 . -25) (undo-tree-id50368 . -25) (undo-tree-id50369 . -25) (undo-tree-id50370 . -26) (undo-tree-id50371 . -26) (undo-tree-id50372 . -26) (undo-tree-id50373 . -26) (undo-tree-id50374 . -26) (undo-tree-id50375 . -26) (undo-tree-id50376 . -26) (undo-tree-id50377 . -26) (undo-tree-id50378 . -26) (undo-tree-id50379 . -27) (undo-tree-id50380 . -27) (undo-tree-id50381 . -27) (undo-tree-id50382 . -27) (undo-tree-id50383 . -27) (undo-tree-id50384 . -27) (undo-tree-id50385 . -27) (undo-tree-id50386 . -27) (undo-tree-id50387 . -27) (undo-tree-id50388 . -28) (undo-tree-id50389 . -28) (undo-tree-id50390 . -28) (undo-tree-id50391 . -28) (undo-tree-id50392 . -28) (undo-tree-id50393 . -28) (undo-tree-id50394 . -28) (undo-tree-id50395 . -28) (undo-tree-id50396 . -28) (undo-tree-id50397 . -29) (undo-tree-id50398 . -29) (undo-tree-id50399 . -29) (undo-tree-id50400 . -29) (undo-tree-id50401 . -29) (undo-tree-id50402 . -29) (undo-tree-id50403 . -29) (undo-tree-id50404 . -29) (undo-tree-id50405 . -29) (undo-tree-id50406 . -30) (undo-tree-id50407 . -30) (undo-tree-id50408 . -30) (undo-tree-id50409 . -30) (undo-tree-id50410 . -30) (undo-tree-id50411 . -30) (undo-tree-id50412 . -30) (undo-tree-id50413 . -30) (undo-tree-id50414 . -30) (undo-tree-id50415 . -31) (undo-tree-id50416 . -31) (undo-tree-id50417 . -31) (undo-tree-id50418 . -31) (undo-tree-id50419 . -31) (undo-tree-id50420 . -31) (undo-tree-id50421 . -31) (undo-tree-id50422 . -31) (undo-tree-id50423 . -31) (undo-tree-id50424 . -32) (undo-tree-id50425 . -32) (undo-tree-id50426 . -32) (undo-tree-id50427 . -32) (undo-tree-id50428 . -32) (undo-tree-id50429 . -32) (undo-tree-id50430 . -32) (undo-tree-id50431 . -32) (undo-tree-id50432 . -32) (undo-tree-id50433 . -33) (undo-tree-id50434 . -33) (undo-tree-id50435 . -33) (undo-tree-id50436 . -33) (undo-tree-id50437 . -33) (undo-tree-id50438 . -33) (undo-tree-id50439 . -33) (undo-tree-id50440 . -33) (undo-tree-id50441 . -33) (undo-tree-id50442 . -34) (undo-tree-id50443 . -34) (undo-tree-id50444 . -34) (undo-tree-id50445 . -34) (undo-tree-id50446 . -34) (undo-tree-id50447 . -34) (undo-tree-id50448 . -34) (undo-tree-id50449 . -34) (undo-tree-id50450 . -34) (undo-tree-id50451 . -35) (undo-tree-id50452 . -35) (undo-tree-id50453 . -35) (undo-tree-id50454 . -35) (undo-tree-id50455 . -35) (undo-tree-id50456 . -35) (undo-tree-id50457 . -35) (undo-tree-id50458 . -35) (undo-tree-id50459 . -35) (undo-tree-id50460 . -36) (undo-tree-id50461 . -36) (undo-tree-id50462 . -36) (undo-tree-id50463 . -36) (undo-tree-id50464 . -36) (undo-tree-id50465 . -36) (undo-tree-id50466 . -36) (undo-tree-id50467 . -36) (undo-tree-id50468 . -36) (undo-tree-id50469 . -37) (undo-tree-id50470 . -37) (undo-tree-id50471 . -37) (undo-tree-id50472 . -37) (undo-tree-id50473 . -37) (undo-tree-id50474 . -37) (undo-tree-id50475 . -37) (undo-tree-id50476 . -37) (undo-tree-id50477 . -37) (undo-tree-id50478 . -37) (undo-tree-id50479 . -38) 8354) nil (26158 178 984828 851000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8348 . 8349) (nil fontified nil 8311 . 8349) (8311 . 8349) 8310) nil (26158 178 982761 753000) 0 nil])
([nil nil ((8341 . 8342) (#(" " 0 1 (fontified nil)) . 8341) (8340 . 8341)) nil (26158 178 982745 649000) 0 nil])
([nil nil ((8298 . 8302) (t 26158 179 130214 932000)) nil (26158 188 743700 375000) 0 nil])
([nil nil ((8375 . 8379) (#("    " 0 4 (fontified nil)) . 8374) (undo-tree-id50480 . -4) (8375 . 8379) (#("    " 0 4 (fontified nil)) . 8373) (undo-tree-id50481 . -3) (undo-tree-id50482 . -3) (undo-tree-id50483 . -3) (undo-tree-id50484 . -3) (undo-tree-id50485 . -3) (8376 . 8377) (8376 . 8377) (t 26158 188 865273 225000)) nil (26158 224 261177 601000) 0 nil])
([nil nil ((8374 . 8378)) nil (26158 224 261135 564000) 0 nil])
([nil nil ((8432 . 8433) (8433 . 8437) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 8432) (8432 . 8433) (8431 . 8433) (8429 . 8432) (8426 . 8429) (#("len" 0 3 (fontified nil)) . 8426) (8426 . 8429) (#("len" 0 3 (fontified t)) . -8426) (undo-tree-id51058 . -3) (undo-tree-id51059 . -3) 8429 (8423 . 8429) (#("p" 0 1 (fontified t)) . -8423) (undo-tree-id51060 . -1) (undo-tree-id51061 . -1) 8424 (8414 . 8424) (8410 . 8414) (#("    " 0 4 (fontified nil)) . 8409) (undo-tree-id51062 . -4) (8408 . 8414) (8407 . 8408) (apply yas--snippet-revive 8402 8407 #s(yas--snippet nil nil #s(yas--exit 8407 nil) 246 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8407 nil) 246 nil nil nil nil)) (8402 . 8407) (#("len()$0" 0 7 (fontified nil)) . 8402) (8402 . 8409) (#("le" 0 2 (fontified nil)) . 8402) (8402 . 8404) (#("len()" 0 5 (fontified nil)) . -8402) (8402 . 8407) (#("le" 0 2 (fontified t)) . -8402) (undo-tree-id51063 . -2) (undo-tree-id51064 . -2) 8404 (8401 . 8404) (8388 . 8401) (#("pa" 0 2 (fontified nil)) . 8388) (8388 . 8390) (#("particle_list" 0 13 (fontified nil)) . -8388) (8388 . 8401) (#("pa" 0 2 (fontified t)) . -8388) (undo-tree-id51065 . -2) (undo-tree-id51066 . -2) 8390 (8378 . 8390) (8377 . 8378) (#(" " 0 1 (fontified t)) . -8377) (undo-tree-id51067 . -1) (undo-tree-id51068 . -1) (undo-tree-id51069 . -1) (#("f" 0 1 (fontified t)) . -8378) (undo-tree-id51070 . -1) (undo-tree-id51071 . -1) (undo-tree-id51072 . -1) (#("o" 0 1 (fontified t)) . -8379) (undo-tree-id51073 . -1) (undo-tree-id51074 . -1) (undo-tree-id51075 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -8380) (undo-tree-id51076 . -1) (undo-tree-id51077 . -1) (undo-tree-id51078 . -1) (#(" " 0 1 (fontified nil)) . -8381) (undo-tree-id51079 . -1) (undo-tree-id51080 . -1) (undo-tree-id51081 . -1) (#("i" 0 1 (fontified nil face font-lock-variable-name-face)) . -8382) (undo-tree-id51082 . -1) (undo-tree-id51083 . -1) (undo-tree-id51084 . -1) (#(" " 0 1 (fontified nil)) . -8383) (undo-tree-id51085 . -1) (undo-tree-id51086 . -1) (undo-tree-id51087 . -1) (#("i" 0 1 (fontified nil face font-lock-keyword-face)) . -8384) (undo-tree-id51088 . -1) (undo-tree-id51089 . -1) (undo-tree-id51090 . -1) (#("n" 0 1 (fontified nil face font-lock-keyword-face)) . -8385) (undo-tree-id51091 . -1) (undo-tree-id51092 . -1) (undo-tree-id51093 . -1) (#(" " 0 1 (fontified nil)) . -8386) (undo-tree-id51094 . -1) (undo-tree-id51095 . -1) (undo-tree-id51096 . -1) (#("0" 0 1 (fontified t)) . -8387) (undo-tree-id51097 . -1) (undo-tree-id51098 . -1) (undo-tree-id51099 . -1) 8388 (#("." 0 1 (fontified t)) . -8388) (undo-tree-id51100 . -1) (undo-tree-id51101 . -1) (undo-tree-id51102 . -1) (#("." 0 1 (fontified t)) . -8389) (undo-tree-id51103 . -1) (undo-tree-id51104 . -1) (undo-tree-id51105 . -1) (#("p" 0 1 (fontified t)) . -8390) (undo-tree-id51106 . -1) (undo-tree-id51107 . -1) (#("a" 0 1 (fontified t)) . -8391) (undo-tree-id51108 . -1) (undo-tree-id51109 . -1) (#("r" 0 1 (fontified t)) . -8392) (undo-tree-id51110 . -1) (undo-tree-id51111 . -1) (#("t" 0 1 (fontified t)) . -8393) (undo-tree-id51112 . -1) (undo-tree-id51113 . -1) (#("i" 0 1 (fontified t)) . -8394) (undo-tree-id51114 . -1) (undo-tree-id51115 . -1) (#("c" 0 1 (fontified t)) . -8395) (undo-tree-id51116 . -1) (undo-tree-id51117 . -1) (#("l" 0 1 (fontified t)) . -8396) (undo-tree-id51118 . -1) (undo-tree-id51119 . -1) (#("e" 0 1 (fontified t)) . -8397) (undo-tree-id51120 . -1) (undo-tree-id51121 . -1) (#("_" 0 1 (fontified t)) . -8398) (undo-tree-id51122 . -1) (undo-tree-id51123 . -1) (#("l" 0 1 (fontified t)) . -8399) (undo-tree-id51124 . -1) (undo-tree-id51125 . -1) (#("i" 0 1 (fontified t)) . -8400) (undo-tree-id51126 . -1) (undo-tree-id51127 . -1) (#("s" 0 1 (fontified t)) . -8401) (undo-tree-id51128 . -1) (undo-tree-id51129 . -1) (#("t" 0 1 (fontified t)) . -8402) (undo-tree-id51130 . -1) (undo-tree-id51131 . -1) (#("." 0 1 (fontified t)) . -8403) (undo-tree-id51132 . -1) (undo-tree-id51133 . -1) (#("l" 0 1 (fontified t)) . -8404) (undo-tree-id51134 . -1) (undo-tree-id51135 . -1) (#("e" 0 1 (fontified t)) . -8405) (undo-tree-id51136 . -1) (undo-tree-id51137 . -1) (#("n" 0 1 (fontified t)) . -8406) (undo-tree-id51138 . -1) (undo-tree-id51139 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -8407) (undo-tree-id51140 . -1) (undo-tree-id51141 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -8408) (undo-tree-id51142 . -1) (undo-tree-id51143 . -1) 8409 (apply yas--snippet-revive 8404 8409 #s(yas--snippet nil nil #s(yas--exit 8409 nil) 245 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8409 nil) 245 nil nil nil nil)) (8404 . 8409) (#("len()$0" 0 7 (fontified nil)) . 8404) (8404 . 8411) (#("le" 0 2 (fontified nil)) . 8404) (8404 . 8406) (#("len()" 0 5 (fontified nil)) . -8404) (8404 . 8409) (#("le" 0 2 (fontified t)) . -8404) (undo-tree-id51144 . -2) (undo-tree-id51145 . -2) 8406 (8403 . 8406) (8390 . 8403) (#("pa" 0 2 (fontified nil)) . 8390) (8390 . 8392) (#("particle_list" 0 13 (fontified nil)) . -8390) (8390 . 8403) (#("pa" 0 2 (fontified t)) . -8390) (undo-tree-id51146 . -2) (undo-tree-id51147 . -2) (undo-tree-id51148 . -2) 8392 (8382 . 8392) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -8382) (undo-tree-id51149 . -1) (undo-tree-id51150 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -8383) (undo-tree-id51151 . -1) (undo-tree-id51152 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -8384) (undo-tree-id51153 . -1) (undo-tree-id51154 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -8385) (undo-tree-id51155 . -1) (undo-tree-id51156 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -8386) (undo-tree-id51157 . -1) (undo-tree-id51158 . -1) 8387 (8378 . 8387) (t 26158 224 406618 834000)) nil (26158 372 698610 39000) 0 nil])
([nil nil ((8451 . 8452) (#("i" 0 1 (fontified nil)) . 8451) (8451 . 8452) (#("i" 0 1 (fontified t)) . -8451) (undo-tree-id51048 . -1) (undo-tree-id51049 . -1) 8452 (#("index" 0 5 (fontified nil)) . 8452) (8451 . 8452) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8451 8452 nil nil nil t #s(yas--exit 8453 nil))) #s(yas--exit 8453 nil) 247 nil #s(yas--field 1 8451 8452 nil nil nil t #s(yas--exit 8453 nil)) nil nil)) (8447 . 8457) (#("get(${1:index})$0" 0 17 (fontified nil)) . 8447) (8447 . 8464) (#("ge" 0 2 (fontified nil)) . 8447) (8447 . 8449) (#("get(…)" 0 6 (fontified nil)) . -8447) (8447 . 8453) (#("ge" 0 2 (fontified t)) . -8447) (undo-tree-id51050 . -2) (undo-tree-id51051 . -2) (undo-tree-id51052 . -2) 8449 (8446 . 8449) (#("." 0 1 (fontified t)) . -8446) (undo-tree-id51053 . -1) (undo-tree-id51054 . -1) 8447 (8446 . 8447) (8433 . 8446) (#("pa" 0 2 (fontified nil)) . 8433) (8433 . 8435) (#("particle_list" 0 13 (fontified nil)) . -8433) (8433 . 8446) (#("pa" 0 2 (fontified t)) . -8433) (undo-tree-id51055 . -2) (undo-tree-id51056 . -2) (undo-tree-id51057 . -2) 8435 (8433 . 8435)) nil (26158 372 698206 181000) 0 nil])
([nil nil ((apply yas--snippet-revive 8447 8453 #s(yas--snippet nil (#s(yas--field 1 8451 8452 nil nil nil t #s(yas--exit 8453 nil))) #s(yas--exit 8453 nil) 247 nil #s(yas--field 1 8451 8452 nil nil nil t #s(yas--exit 8453 nil)) nil nil))) nil (26158 372 698149 809000) 0 nil])
([nil nil ((8443 . 8444) (8463 . 8464) (8434 . 8443) (#("s" 0 1 (fontified t)) . -8434) (undo-tree-id51041 . -1) (undo-tree-id51042 . -1) (undo-tree-id51043 . -1) (#("e" 0 1 (fontified t)) . -8435) (undo-tree-id51044 . -1) (undo-tree-id51045 . -1) 8436 (8433 . 8436) (#("u" 0 1 (fontified t)) . -8433) (undo-tree-id51046 . -1) (undo-tree-id51047 . -1) 8434 (8433 . 8434)) nil (26158 372 698141 581000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -8467) (undo-tree-id50784 . -1) (undo-tree-id50785 . -1) (undo-tree-id50786 . -1) (undo-tree-id50787 . -1) (undo-tree-id50788 . -1) (undo-tree-id50789 . -1) (undo-tree-id50790 . -1) (undo-tree-id50791 . -1) (undo-tree-id50792 . -1) (undo-tree-id50793 . -1) (undo-tree-id50794 . -1) (undo-tree-id50795 . -1) (undo-tree-id50796 . -1) (undo-tree-id50797 . -1) (undo-tree-id50798 . -1) (undo-tree-id50799 . -1) (undo-tree-id50800 . -1) (undo-tree-id50801 . -1) (undo-tree-id50802 . -1) (undo-tree-id50803 . -1) (undo-tree-id50804 . -1) (undo-tree-id50805 . -1) (undo-tree-id50806 . -1) (undo-tree-id50807 . -1) (undo-tree-id50808 . -1) (undo-tree-id50809 . -1) (undo-tree-id50810 . -1) (undo-tree-id50811 . -1) (undo-tree-id50812 . -1) (undo-tree-id50813 . -1) (undo-tree-id50814 . -1) (undo-tree-id50815 . -1) (undo-tree-id50816 . -1) (undo-tree-id50817 . -1) (undo-tree-id50818 . -1) (undo-tree-id50819 . -1) (undo-tree-id50820 . -1) (undo-tree-id50821 . -1) (undo-tree-id50822 . -1) (undo-tree-id50823 . -1) (undo-tree-id50824 . -1) (undo-tree-id50825 . -1) (undo-tree-id50826 . -1) (undo-tree-id50827 . -1) (undo-tree-id50828 . -1) (undo-tree-id50829 . -1) (undo-tree-id50830 . -1) (undo-tree-id50831 . -1) (undo-tree-id50832 . -1) (undo-tree-id50833 . -1) (undo-tree-id50834 . -1) (undo-tree-id50835 . -1) (undo-tree-id50836 . -1) (undo-tree-id50837 . -1) (undo-tree-id50838 . -1) (undo-tree-id50839 . -1) (undo-tree-id50840 . -1) (undo-tree-id50841 . -1) (undo-tree-id50842 . -1) (undo-tree-id50843 . -1) (undo-tree-id50844 . -1) (undo-tree-id50845 . -1) (undo-tree-id50846 . -1) (undo-tree-id50847 . -1) (undo-tree-id50848 . -1) (undo-tree-id50849 . -1) (undo-tree-id50850 . -1) (undo-tree-id50851 . -1) (undo-tree-id50852 . -1) (undo-tree-id50853 . -1) (undo-tree-id50854 . -1) (undo-tree-id50855 . -1) (undo-tree-id50856 . -1) (undo-tree-id50857 . -1) (undo-tree-id50858 . -1) (undo-tree-id50859 . -1) (undo-tree-id50860 . -1) (undo-tree-id50861 . -1) (undo-tree-id50862 . -1) (undo-tree-id50863 . -1) (undo-tree-id50864 . -1) (undo-tree-id50865 . -1) (undo-tree-id50866 . -1) (undo-tree-id50867 . -1) (undo-tree-id50868 . -1) (undo-tree-id50869 . -1) (undo-tree-id50870 . -1) (undo-tree-id50871 . -1) (undo-tree-id50872 . -1) (undo-tree-id50873 . -1) (undo-tree-id50874 . -1) (undo-tree-id50875 . -1) (undo-tree-id50876 . -1) (undo-tree-id50877 . -1) (undo-tree-id50878 . -1) (undo-tree-id50879 . -1) (undo-tree-id50880 . -1) (undo-tree-id50881 . -1) (undo-tree-id50882 . -1) (undo-tree-id50883 . -1) (undo-tree-id50884 . -1) (#("e" 0 1 (fontified t)) . -8468) (undo-tree-id50885 . -1) (undo-tree-id50886 . -1) (undo-tree-id50887 . -1) (undo-tree-id50888 . -1) (undo-tree-id50889 . -1) (undo-tree-id50890 . -1) (undo-tree-id50891 . -1) (undo-tree-id50892 . -1) (undo-tree-id50893 . -1) (undo-tree-id50894 . -1) (undo-tree-id50895 . -1) (undo-tree-id50896 . -1) (undo-tree-id50897 . -1) (undo-tree-id50898 . -1) (undo-tree-id50899 . -1) (undo-tree-id50900 . -1) (undo-tree-id50901 . -1) (undo-tree-id50902 . -1) (undo-tree-id50903 . -1) (undo-tree-id50904 . -1) (undo-tree-id50905 . -1) (undo-tree-id50906 . -1) (undo-tree-id50907 . -1) (undo-tree-id50908 . -1) (undo-tree-id50909 . -1) (undo-tree-id50910 . -1) (undo-tree-id50911 . -1) (undo-tree-id50912 . -1) (undo-tree-id50913 . -1) (undo-tree-id50914 . -1) (undo-tree-id50915 . -1) (undo-tree-id50916 . -1) (undo-tree-id50917 . -1) (undo-tree-id50918 . -1) (undo-tree-id50919 . -1) (undo-tree-id50920 . -1) (undo-tree-id50921 . -1) (undo-tree-id50922 . -1) (undo-tree-id50923 . -1) (undo-tree-id50924 . -1) (undo-tree-id50925 . -1) (undo-tree-id50926 . -1) (undo-tree-id50927 . -1) (undo-tree-id50928 . -1) (undo-tree-id50929 . -1) (undo-tree-id50930 . -1) (undo-tree-id50931 . -1) (undo-tree-id50932 . -1) (undo-tree-id50933 . -1) (undo-tree-id50934 . -1) (undo-tree-id50935 . -1) (undo-tree-id50936 . -1) (undo-tree-id50937 . -1) (undo-tree-id50938 . -1) (undo-tree-id50939 . -1) (undo-tree-id50940 . -1) (undo-tree-id50941 . -1) (undo-tree-id50942 . -1) (undo-tree-id50943 . -1) (undo-tree-id50944 . -1) (undo-tree-id50945 . -1) (undo-tree-id50946 . -1) (undo-tree-id50947 . -1) (undo-tree-id50948 . -1) (undo-tree-id50949 . -1) (undo-tree-id50950 . -1) (undo-tree-id50951 . -1) (undo-tree-id50952 . -1) (undo-tree-id50953 . -1) (undo-tree-id50954 . -1) (undo-tree-id50955 . -1) (undo-tree-id50956 . -1) (undo-tree-id50957 . -1) (undo-tree-id50958 . -1) (undo-tree-id50959 . -1) (undo-tree-id50960 . -1) (undo-tree-id50961 . -1) (undo-tree-id50962 . -1) (undo-tree-id50963 . -1) (undo-tree-id50964 . -1) (undo-tree-id50965 . -1) (#("n" 0 1 (fontified t)) . -8469) (undo-tree-id50966 . -1) (undo-tree-id50967 . -1) (undo-tree-id50968 . -1) (undo-tree-id50969 . -1) (undo-tree-id50970 . -1) (undo-tree-id50971 . -1) (undo-tree-id50972 . -1) (undo-tree-id50973 . -1) (undo-tree-id50974 . -1) (undo-tree-id50975 . -1) (undo-tree-id50976 . -1) (undo-tree-id50977 . -1) (undo-tree-id50978 . -1) (undo-tree-id50979 . -1) (undo-tree-id50980 . -1) (undo-tree-id50981 . -1) (undo-tree-id50982 . -1) (undo-tree-id50983 . -1) (undo-tree-id50984 . -1) (undo-tree-id50985 . -1) (undo-tree-id50986 . -1) (undo-tree-id50987 . -1) (undo-tree-id50988 . -1) (undo-tree-id50989 . -1) (undo-tree-id50990 . -1) (undo-tree-id50991 . -1) (undo-tree-id50992 . -1) (undo-tree-id50993 . -1) (undo-tree-id50994 . -1) (undo-tree-id50995 . -1) (undo-tree-id50996 . -1) (undo-tree-id50997 . -1) (undo-tree-id50998 . -1) (undo-tree-id50999 . -1) (undo-tree-id51000 . -1) (undo-tree-id51001 . -1) (undo-tree-id51002 . -1) (undo-tree-id51003 . -1) (undo-tree-id51004 . -1) (undo-tree-id51005 . -1) (undo-tree-id51006 . -1) (undo-tree-id51007 . -1) (undo-tree-id51008 . -1) (undo-tree-id51009 . -1) (undo-tree-id51010 . -1) (undo-tree-id51011 . -1) (undo-tree-id51012 . -1) (undo-tree-id51013 . -1) (undo-tree-id51014 . -1) (undo-tree-id51015 . -1) (undo-tree-id51016 . -1) (undo-tree-id51017 . -1) (undo-tree-id51018 . -1) (undo-tree-id51019 . -1) (undo-tree-id51020 . -1) (undo-tree-id51021 . -1) (undo-tree-id51022 . -1) (undo-tree-id51023 . -1) (undo-tree-id51024 . -1) (undo-tree-id51025 . -1) (undo-tree-id51026 . -1) (#(" " 0 1 (fontified t)) . -8470) (undo-tree-id51027 . -1) (undo-tree-id51028 . -1) (undo-tree-id51029 . -1) (undo-tree-id51030 . -1) (undo-tree-id51031 . -1) (undo-tree-id51032 . -1) (undo-tree-id51033 . -1) (undo-tree-id51034 . -1) (undo-tree-id51035 . -1) (undo-tree-id51036 . -1) (undo-tree-id51037 . -1) (undo-tree-id51038 . -1) (undo-tree-id51039 . -1) (undo-tree-id51040 . -1) 8471 (8467 . 8471) (8465 . 8467)) nil (26158 372 698065 388000) 0 nil])
([nil nil ((8470 . 8471) (#(" " 0 1 (fontified t)) . -8470) (undo-tree-id50776 . -1) (undo-tree-id50777 . -1) 8471 (8468 . 8471) (#("e" 0 1 (fontified t)) . -8468) (undo-tree-id50778 . -1) (undo-tree-id50779 . -1) (#(" " 0 1 (fontified t)) . -8469) (undo-tree-id50780 . -1) (undo-tree-id50781 . -1) (#("t" 0 1 (fontified t)) . -8470) (undo-tree-id50782 . -1) (undo-tree-id50783 . -1) 8471 (8467 . 8471)) nil (26158 372 695953 488000) 0 nil])
([nil nil ((#("	let 
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t)) . 8466) (undo-tree-id50486 . -5) (undo-tree-id50487 . 2) (undo-tree-id50488 . -3) (undo-tree-id50489 . -3) (undo-tree-id50490 . -1) (undo-tree-id50491 . -1) (undo-tree-id50492 . -1) (undo-tree-id50493 . -1) (undo-tree-id50494 . -1) (undo-tree-id50495 . -1) (undo-tree-id50496 . -1) (undo-tree-id50497 . -1) (undo-tree-id50498 . -1) (undo-tree-id50499 . -1) (undo-tree-id50500 . -1) (undo-tree-id50501 . -1) (undo-tree-id50502 . -1) (undo-tree-id50503 . -1) (undo-tree-id50504 . -1) (undo-tree-id50505 . -1) (undo-tree-id50506 . -1) (undo-tree-id50507 . -1) (undo-tree-id50508 . -1) (undo-tree-id50509 . -1) (undo-tree-id50510 . -1) (undo-tree-id50511 . -1) (undo-tree-id50512 . -1) (undo-tree-id50513 . -1) (undo-tree-id50514 . -1) (undo-tree-id50515 . -1) (undo-tree-id50516 . -1) (undo-tree-id50517 . -1) (undo-tree-id50518 . -1) (undo-tree-id50519 . -1) (undo-tree-id50520 . -1) (undo-tree-id50521 . -1) (undo-tree-id50522 . -1) (undo-tree-id50523 . -1) (undo-tree-id50524 . -1) (undo-tree-id50525 . -1) (undo-tree-id50526 . -1) (undo-tree-id50527 . -1) (undo-tree-id50528 . -1) (undo-tree-id50529 . -1) (undo-tree-id50530 . -1) (undo-tree-id50531 . -1) (undo-tree-id50532 . -1) (undo-tree-id50533 . -1) (undo-tree-id50534 . -1) (undo-tree-id50535 . -1) (undo-tree-id50536 . -1) (undo-tree-id50537 . -1) (undo-tree-id50538 . -1) (undo-tree-id50539 . -1) (undo-tree-id50540 . -1) (undo-tree-id50541 . -1) (undo-tree-id50542 . -1) (undo-tree-id50543 . -1) (undo-tree-id50544 . -1) (undo-tree-id50545 . -1) (undo-tree-id50546 . -1) (undo-tree-id50547 . -1) (undo-tree-id50548 . -1) (undo-tree-id50549 . -1) (undo-tree-id50550 . -1) (undo-tree-id50551 . -1) (undo-tree-id50552 . -1) (undo-tree-id50553 . -1) (undo-tree-id50554 . -1) (undo-tree-id50555 . -1) (undo-tree-id50556 . -1) (undo-tree-id50557 . -1) (undo-tree-id50558 . -1) (undo-tree-id50559 . -1) (undo-tree-id50560 . -1) (undo-tree-id50561 . -1) (undo-tree-id50562 . -1) (undo-tree-id50563 . -1) (undo-tree-id50564 . -1) (undo-tree-id50565 . -1) (undo-tree-id50566 . -1) (undo-tree-id50567 . -1) (undo-tree-id50568 . -1) (undo-tree-id50569 . -1) (undo-tree-id50570 . -1) (undo-tree-id50571 . -1) (undo-tree-id50572 . -1) (undo-tree-id50573 . -1) (undo-tree-id50574 . -1) (undo-tree-id50575 . -1) (undo-tree-id50576 . -1) (undo-tree-id50577 . -1) (undo-tree-id50578 . -1) (undo-tree-id50579 . -1) (undo-tree-id50580 . -1) (undo-tree-id50581 . -1) (undo-tree-id50582 . -1) (undo-tree-id50583 . -1) (undo-tree-id50584 . -1) (undo-tree-id50585 . -1) (undo-tree-id50586 . -1) (undo-tree-id50587 . -1) (undo-tree-id50588 . -4) (undo-tree-id50589 . -4) (undo-tree-id50590 . -4) (undo-tree-id50591 . -4) (undo-tree-id50592 . -4) (undo-tree-id50593 . -4) (undo-tree-id50594 . -4) (undo-tree-id50595 . -4) (undo-tree-id50596 . -4) (undo-tree-id50597 . -4) (undo-tree-id50598 . -4) (undo-tree-id50599 . -5) (undo-tree-id50600 . -5) (undo-tree-id50601 . -5) (undo-tree-id50602 . -5) (undo-tree-id50603 . -5) (undo-tree-id50604 . -5) (undo-tree-id50605 . -5) (undo-tree-id50606 . -5) (undo-tree-id50607 . -5) (undo-tree-id50608 . -5) (undo-tree-id50609 . -4) (undo-tree-id50610 . -5) (undo-tree-id50611 . -4) (undo-tree-id50612 . -5) (undo-tree-id50613 . -5) (undo-tree-id50614 . -5) (undo-tree-id50615 . -5) (undo-tree-id50616 . -5) (undo-tree-id50617 . -5) (undo-tree-id50618 . -5) (undo-tree-id50619 . -5) (undo-tree-id50620 . -5) (undo-tree-id50621 . -5) (undo-tree-id50622 . -5) (undo-tree-id50623 . -5) (undo-tree-id50624 . -5) (undo-tree-id50625 . -5) (undo-tree-id50626 . -5) (undo-tree-id50627 . -5) (undo-tree-id50628 . -5) (undo-tree-id50629 . -5) (undo-tree-id50630 . -5) (undo-tree-id50631 . -5) (undo-tree-id50632 . -5) (undo-tree-id50633 . -5) (undo-tree-id50634 . -5) (undo-tree-id50635 . -5) (undo-tree-id50636 . -5) (undo-tree-id50637 . -5) (undo-tree-id50638 . -5) (undo-tree-id50639 . -5) (undo-tree-id50640 . -5) (undo-tree-id50641 . -5) (undo-tree-id50642 . -5) (undo-tree-id50643 . -5) (undo-tree-id50644 . -5) (undo-tree-id50645 . -5) (undo-tree-id50646 . -4) (undo-tree-id50647 . -4) (undo-tree-id50648 . -4) (undo-tree-id50649 . -4) (undo-tree-id50650 . -4) (undo-tree-id50651 . -4) (undo-tree-id50652 . -4) (undo-tree-id50653 . -4) (undo-tree-id50654 . -4) (undo-tree-id50655 . -4) (undo-tree-id50656 . -4) (undo-tree-id50657 . -4) (undo-tree-id50658 . -4) (undo-tree-id50659 . -4) (undo-tree-id50660 . -4) (undo-tree-id50661 . -4) (undo-tree-id50662 . -4) (undo-tree-id50663 . -4) (undo-tree-id50664 . -4) (undo-tree-id50665 . -4) (undo-tree-id50666 . -4) (undo-tree-id50667 . -4) (undo-tree-id50668 . -4) (undo-tree-id50669 . -4) (undo-tree-id50670 . -4) (undo-tree-id50671 . -4) (undo-tree-id50672 . -4) (undo-tree-id50673 . -4) (undo-tree-id50674 . -4) (undo-tree-id50675 . -4) (undo-tree-id50676 . -4) (undo-tree-id50677 . -4) (undo-tree-id50678 . -4) (undo-tree-id50679 . -4) (undo-tree-id50680 . -4) (undo-tree-id50681 . -4) (undo-tree-id50682 . -4) (undo-tree-id50683 . -4) (undo-tree-id50684 . -4) (undo-tree-id50685 . -4) (undo-tree-id50686 . -4) (undo-tree-id50687 . -4) (undo-tree-id50688 . -4) (undo-tree-id50689 . -4) (undo-tree-id50690 . 2) (undo-tree-id50691 . -4) (undo-tree-id50692 . -4) (undo-tree-id50693 . -4) (undo-tree-id50694 . -4) (undo-tree-id50695 . -4) (undo-tree-id50696 . -4) (undo-tree-id50697 . -4) (undo-tree-id50698 . -4) (undo-tree-id50699 . -4) (undo-tree-id50700 . -4) (undo-tree-id50701 . -4) (undo-tree-id50702 . -4) (undo-tree-id50703 . -4) (undo-tree-id50704 . -4) (undo-tree-id50705 . -4) (undo-tree-id50706 . -4) (undo-tree-id50707 . -4) (undo-tree-id50708 . -4) (undo-tree-id50709 . -4) (undo-tree-id50710 . -4) (undo-tree-id50711 . -4) (undo-tree-id50712 . -4) (undo-tree-id50713 . -4) (undo-tree-id50714 . -4) (undo-tree-id50715 . -4) (undo-tree-id50716 . -4) (undo-tree-id50717 . -4) (undo-tree-id50718 . -4) (undo-tree-id50719 . -4) (undo-tree-id50720 . -4) (undo-tree-id50721 . -4) (undo-tree-id50722 . -4) (undo-tree-id50723 . -4) (undo-tree-id50724 . -4) (undo-tree-id50725 . -4) (undo-tree-id50726 . -4) (undo-tree-id50727 . -4) (undo-tree-id50728 . -4) (undo-tree-id50729 . -3) (undo-tree-id50730 . -3) (undo-tree-id50731 . -3) (undo-tree-id50732 . -3) (undo-tree-id50733 . -3) (undo-tree-id50734 . -3) (undo-tree-id50735 . -3) (undo-tree-id50736 . -3) (undo-tree-id50737 . -3) (undo-tree-id50738 . -3) (undo-tree-id50739 . -3) (undo-tree-id50740 . -3) (undo-tree-id50741 . -3) (undo-tree-id50742 . -3) (undo-tree-id50743 . -3) (undo-tree-id50744 . -3) (undo-tree-id50745 . -3) (undo-tree-id50746 . -3) (undo-tree-id50747 . -3) (undo-tree-id50748 . -3) (undo-tree-id50749 . -3) (undo-tree-id50750 . -3) (undo-tree-id50751 . -3) (undo-tree-id50752 . -3) (undo-tree-id50753 . -3) (undo-tree-id50754 . -3) (undo-tree-id50755 . -3) (undo-tree-id50756 . -3) (undo-tree-id50757 . -3) (undo-tree-id50758 . -3) (undo-tree-id50759 . -3) (undo-tree-id50760 . -3) (undo-tree-id50761 . -3) (undo-tree-id50762 . -3) (undo-tree-id50763 . -3) (undo-tree-id50764 . -3) (undo-tree-id50765 . -3) (undo-tree-id50766 . -3) (undo-tree-id50767 . -3) (undo-tree-id50768 . -3) (undo-tree-id50769 . -3) (undo-tree-id50770 . -3) (undo-tree-id50771 . -3) (undo-tree-id50772 . -3) (undo-tree-id50773 . -3) (undo-tree-id50774 . -3) (undo-tree-id50775 . -6) 8469) nil (26158 372 695900 745000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8486 8491 nil nil nil nil #s(yas--exit 8492 nil))) #s(yas--exit 8492 nil) 248 nil #s(yas--field 1 8486 8491 nil nil nil nil #s(yas--exit 8492 nil)) nil nil)) (8481 . 8492) (#("push(${1:value})$0" 0 18 (fontified nil)) . 8481) (8481 . 8499) (#("pu" 0 2 (fontified nil)) . 8481) (8481 . 8483) (#("push(…)" 0 7 (fontified nil)) . -8481) (8481 . 8488) (#("pu" 0 2 (fontified t)) . -8481) (undo-tree-id51219 . -2) (undo-tree-id51220 . -2) 8483 (8482 . 8483) (8481 . 8482) (#("a" 0 1 (fontified t)) . -8481) (undo-tree-id51221 . -1) (undo-tree-id51222 . -1) (undo-tree-id51223 . -1) (#("d" 0 1 (fontified t)) . -8482) (undo-tree-id51224 . -1) (undo-tree-id51225 . -1) (undo-tree-id51226 . -1) 8483 (8480 . 8483) (8467 . 8480) (#("par" 0 3 (fontified nil)) . 8467) (8467 . 8470) (#("particle_list" 0 13 (fontified nil)) . -8467) (8467 . 8480) (#("par" 0 3 (fontified t)) . -8467) (undo-tree-id51227 . -3) (undo-tree-id51228 . -3) 8470 (8467 . 8470) (8465 . 8467) (t 26158 372 843901 387000)) nil (26158 455 707009 445000) 0 nil])
([nil nil ((apply yas--snippet-revive 8481 8492 #s(yas--snippet nil (#s(yas--field 1 8486 8491 nil nil nil nil #s(yas--exit 8492 nil))) #s(yas--exit 8492 nil) 248 nil #s(yas--field 1 8486 8491 nil nil nil nil #s(yas--exit 8492 nil)) nil nil))) nil (26158 455 706979 896000) 0 nil])
([nil nil ((#("	particle_list.push(value)
" 0 1 (fontified t) 1 15 (fontified t) 15 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-3-face)) 20 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t)) . 8466) (undo-tree-id51214 . -26) (undo-tree-id51215 . 7) (undo-tree-id51216 . -19) (undo-tree-id51217 . -20) (undo-tree-id51218 . -19) 8485) nil (26158 455 706976 566000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -8506) (undo-tree-id51180 . -1) (undo-tree-id51181 . -1) (undo-tree-id51182 . -1) 8507 (#("h" 0 1 (fontified t)) . -8507) (undo-tree-id51183 . -1) (undo-tree-id51184 . -1) 8508 (8506 . 8508) (#("i" 0 1 (fontified t)) . -8506) (undo-tree-id51185 . -1) (undo-tree-id51186 . -1) (undo-tree-id51187 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -8507) (undo-tree-id51188 . -1) (undo-tree-id51189 . -1) (undo-tree-id51190 . -1) (#("t" 0 1 (fontified t)) . -8508) (undo-tree-id51191 . -1) (undo-tree-id51192 . -1) 8509 (8506 . 8509) (#("i" 0 1 (fontified t)) . -8506) (undo-tree-id51193 . -1) (undo-tree-id51194 . -1) (undo-tree-id51195 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -8507) (undo-tree-id51196 . -1) (undo-tree-id51197 . -1) (undo-tree-id51198 . -1) 8508 (8507 . 8508) (8505 . 8507) (#("." 0 1 (fontified t)) . -8505) (undo-tree-id51199 . -1) (undo-tree-id51200 . -1) 8506 (8505 . 8506) (8501 . 8505) (#("cu" 0 2 (fontified nil)) . 8501) (8501 . 8503) (#("curr" 0 4 (fontified nil)) . -8501) (8501 . 8505) (#("cu" 0 2 (fontified t)) . -8501) (undo-tree-id51201 . -2) (undo-tree-id51202 . -2) (undo-tree-id51203 . -2) 8503 (8501 . 8503) (#("v" 0 1 (fontified t)) . -8501) (undo-tree-id51204 . -1) (undo-tree-id51205 . -1) (#("u" 0 1 (fontified t)) . -8502) (undo-tree-id51206 . -1) (undo-tree-id51207 . -1) 8503 (8502 . 8503) (#("xc" 0 2 (fontified nil)) . 8502) (8501 . 8502) (8481 . 8486) (8481 . 8494) (#("pa" 0 2 (fontified nil)) . 8481) (8481 . 8483) (#("&mut particle_list" 0 18 (fontified nil)) . -8481) (8481 . 8499) (#("pa" 0 2 (fontified t)) . -8481) (undo-tree-id51208 . -2) (undo-tree-id51209 . -2) (undo-tree-id51210 . -2) 8483 (8482 . 8483) (#("list" 0 4 (fontified nil)) . 8482) (8481 . 8482) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8481 8499 nil nil nil t #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil)))))) #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))))) #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil)))) #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))) #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))) #s(yas--exit 8524 nil) 249 nil #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))))) nil nil)) (8467 . 8507) (#("add_particles(${1:list}, ${2:xc}, ${3:yc}, ${4:rad}, ${5:number})$0" 0 67 (fontified nil)) . 8467) (8467 . 8534) (#("add" 0 3 (fontified nil)) . 8467) (8467 . 8470) (#("add_particles(…)" 0 16 (fontified nil)) . -8467) (8467 . 8483) (#("add" 0 3 (fontified t)) . -8467) (undo-tree-id51211 . -2) (undo-tree-id51212 . -3) (undo-tree-id51213 . -3) 8470 (8468 . 8470) (8467 . 8468) (8465 . 8467)) nil (26158 455 706951 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 8467 8524 #s(yas--snippet nil (#s(yas--field 1 8481 8499 nil nil nil t #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil)))))) #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))))) #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil)))) #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))) #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))) #s(yas--exit 8524 nil) 249 nil #s(yas--field 2 8501 8506 nil nil nil t #s(yas--field 3 8508 8510 nil nil nil nil #s(yas--field 4 8512 8515 nil nil nil nil #s(yas--field 5 8517 8523 nil nil nil nil #s(yas--exit 8524 nil))))) nil nil))) nil (26158 455 706866 934000) 0 nil])
([nil nil ((apply yas--snippet-revive 8465 8473 #s(yas--snippet nil nil #s(yas--exit 8473 nil) 250 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8473 nil) 250 nil nil nil nil)) (8465 . 8473) (#("unwrap()$0" 0 10 (fontified nil)) . 8465) (8465 . 8475) (#("un" 0 2 (fontified nil)) . 8465) (8465 . 8467) (#("unwrap()" 0 8 (fontified nil)) . -8465) (8465 . 8473) (#("un" 0 2 (fontified t)) . -8465) (undo-tree-id51177 . -1) (undo-tree-id51178 . -2) (undo-tree-id51179 . -2) 8467 (8465 . 8467) (8464 . 8465)) nil (26158 455 706861 294000) 0 nil])
([nil nil ((8515 . 8516) (#("x" 0 1 (fontified nil)) . 8515) (8515 . 8516) (#("x" 0 1 (fontified t)) . -8515) (undo-tree-id51172 . -1) (undo-tree-id51173 . -1) (undo-tree-id51174 . -1) 8516 (8515 . 8516) (#("x" 0 1 (fontified nil)) . -8515) (8515 . 8516) (#("g" 0 1 (fontified t)) . -8515) (undo-tree-id51175 . -1) (undo-tree-id51176 . -1) 8516 (8515 . 8516)) nil (26158 455 705923 26000) 0 nil])
([nil nil ((#("yc" 0 2 (fontified t)) . 8518) (undo-tree-id51171 . -1)) nil (26158 455 705908 830000) 0 nil])
([nil nil ((8523 . 8524) (#("y" 0 1 (fontified nil)) . 8523) (8523 . 8524) (#("y" 0 1 (fontified t)) . -8523) (undo-tree-id51166 . -1) (undo-tree-id51167 . -1) (undo-tree-id51168 . -1) 8524 (8522 . 8524) (8518 . 8522) (#("cu" 0 2 (fontified nil)) . 8518) (8518 . 8520) (#("curr" 0 4 (fontified nil)) . -8518) (8518 . 8522) (#("cur" 0 3 (fontified t)) . -8518) (undo-tree-id51169 . -3) (undo-tree-id51170 . -3) 8521 (8518 . 8521)) nil (26158 455 705902 431000) 0 nil])
([nil nil ((#("rad" 0 3 (fontified t)) . 8526) (undo-tree-id51165 . -2)) nil (26158 455 705885 953000) 0 nil])
([nil nil ((8526 . 8528)) nil (26158 455 705882 269000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 8529)) nil (26158 455 705880 236000) 0 nil])
([nil nil ((#("number" 0 6 (fontified t)) . 8529) (undo-tree-id51164 . -5)) nil (26158 455 705877 564000) 0 nil])
([nil nil ((8530 . 8532) (#("1" 0 1 (fontified t)) . -8530) (undo-tree-id51159 . -1) (undo-tree-id51160 . -1) (#("0" 0 1 (fontified t)) . -8531) (undo-tree-id51161 . -1) (undo-tree-id51162 . -1) 8532 (8529 . 8532) (#(" " 0 1 (fontified t)) . -8529) (undo-tree-id51163 . -1) 8530 (8529 . 8530)) nil (26158 455 705868 558000) 0 nil])
([nil nil ((8533 . 8534)) nil (26158 455 705829 806000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -8475) (undo-tree-id51516 . -1) (undo-tree-id51517 . -1) (undo-tree-id51518 . -1) (undo-tree-id51519 . -1) (undo-tree-id51520 . -1) (undo-tree-id51521 . -1) (undo-tree-id51522 . -1) (undo-tree-id51523 . -1) (undo-tree-id51524 . -1) (undo-tree-id51525 . -1) (undo-tree-id51526 . -1) (undo-tree-id51527 . -1) (undo-tree-id51528 . -1) (undo-tree-id51529 . -1) (undo-tree-id51530 . -1) (undo-tree-id51531 . -1) (undo-tree-id51532 . -1) (undo-tree-id51533 . -1) (undo-tree-id51534 . -1) (undo-tree-id51535 . -1) (undo-tree-id51536 . -1) (undo-tree-id51537 . -1) (undo-tree-id51538 . -1) (undo-tree-id51539 . -1) (undo-tree-id51540 . -1) (undo-tree-id51541 . -1) (undo-tree-id51542 . -1) (undo-tree-id51543 . -1) (undo-tree-id51544 . -1) (undo-tree-id51545 . -1) (undo-tree-id51546 . -1) (undo-tree-id51547 . -1) (undo-tree-id51548 . -1) (undo-tree-id51549 . -1) (undo-tree-id51550 . -1) (undo-tree-id51551 . -1) (undo-tree-id51552 . -1) (undo-tree-id51553 . -1) (undo-tree-id51554 . -1) (undo-tree-id51555 . -1) (undo-tree-id51556 . -1) (undo-tree-id51557 . -1) (undo-tree-id51558 . -1) (undo-tree-id51559 . -1) (undo-tree-id51560 . -1) (undo-tree-id51561 . -1) (undo-tree-id51562 . -1) 8476 (8474 . 8476) (t 26158 455 825286 40000)) nil (26158 494 549320 33000) 0 nil])
([nil nil ((#("curr.x," 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 8511) (undo-tree-id51454 . -6) (undo-tree-id51455 . -6) (undo-tree-id51456 . -6) (undo-tree-id51457 . -6) (undo-tree-id51458 . -7) (undo-tree-id51459 . -6) (undo-tree-id51460 . -1) (undo-tree-id51461 . -1) (undo-tree-id51462 . -1) (undo-tree-id51463 . -1) (undo-tree-id51464 . -1) (undo-tree-id51465 . -1) (undo-tree-id51466 . -1) (undo-tree-id51467 . -1) (undo-tree-id51468 . -1) (undo-tree-id51469 . -2) (undo-tree-id51470 . -2) (undo-tree-id51471 . -2) (undo-tree-id51472 . -2) (undo-tree-id51473 . -2) (undo-tree-id51474 . -2) (undo-tree-id51475 . -2) (undo-tree-id51476 . -2) (undo-tree-id51477 . -2) (undo-tree-id51478 . -3) (undo-tree-id51479 . -3) (undo-tree-id51480 . -3) (undo-tree-id51481 . -3) (undo-tree-id51482 . -3) (undo-tree-id51483 . -3) (undo-tree-id51484 . -3) (undo-tree-id51485 . -3) (undo-tree-id51486 . -3) (undo-tree-id51487 . -4) (undo-tree-id51488 . -4) (undo-tree-id51489 . -4) (undo-tree-id51490 . -4) (undo-tree-id51491 . -4) (undo-tree-id51492 . -4) (undo-tree-id51493 . -4) (undo-tree-id51494 . -4) (undo-tree-id51495 . -4) (undo-tree-id51496 . -5) (undo-tree-id51497 . -5) (undo-tree-id51498 . -5) (undo-tree-id51499 . -5) (undo-tree-id51500 . -5) (undo-tree-id51501 . -5) (undo-tree-id51502 . -5) (undo-tree-id51503 . -5) (undo-tree-id51504 . -5) (undo-tree-id51505 . -6) (undo-tree-id51506 . -6) (undo-tree-id51507 . -6) (undo-tree-id51508 . -6) (undo-tree-id51509 . -6) (undo-tree-id51510 . -6) (undo-tree-id51511 . -6) (undo-tree-id51512 . -6) (undo-tree-id51513 . -6) (undo-tree-id51514 . -6) (undo-tree-id51515 . -7) 8517) nil (26158 494 549235 734000) 0 nil])
([nil nil ((#(" curr.y" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t)) . 8511) (undo-tree-id51421 . -6) (undo-tree-id51422 . -6) (undo-tree-id51423 . -6) (undo-tree-id51424 . -6) (undo-tree-id51425 . -1) (undo-tree-id51426 . -6) (undo-tree-id51427 . -1) (undo-tree-id51428 . -1) (undo-tree-id51429 . -1) (undo-tree-id51430 . -1) (undo-tree-id51431 . -1) (undo-tree-id51432 . -1) (undo-tree-id51433 . -1) (undo-tree-id51434 . -1) (undo-tree-id51435 . -1) (undo-tree-id51436 . -1) (undo-tree-id51437 . -1) (undo-tree-id51438 . -1) (undo-tree-id51439 . -1) (undo-tree-id51440 . -1) (undo-tree-id51441 . -1) (undo-tree-id51442 . -1) (undo-tree-id51443 . -1) (undo-tree-id51444 . -1) (undo-tree-id51445 . -1) (undo-tree-id51446 . -1) (undo-tree-id51447 . -1) (undo-tree-id51448 . -1) (undo-tree-id51449 . -1) (undo-tree-id51450 . -7) (undo-tree-id51451 . -6) (undo-tree-id51452 . -6) (undo-tree-id51453 . -7) 8517) nil (26158 494 549119 970000) 0 nil])
([nil nil ((8483 . 8487) (8482 . 8483) (8476 . 8482) (8474 . 8476)) nil (26158 494 548779 792000) 0 nil])
([nil nil ((#("	let curx = 
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t) 12 13 (fontified t)) . 8475) (undo-tree-id51302 . -12) (undo-tree-id51303 . 1) (undo-tree-id51304 . -8) (undo-tree-id51305 . -9) (undo-tree-id51306 . -11) (undo-tree-id51307 . -13) (undo-tree-id51308 . -13) (undo-tree-id51309 . -13) (undo-tree-id51310 . -13) (undo-tree-id51311 . -13) (undo-tree-id51312 . -13) (undo-tree-id51313 . -13) (undo-tree-id51314 . -13) (undo-tree-id51315 . -13) (undo-tree-id51316 . -13) (undo-tree-id51317 . -13) (undo-tree-id51318 . -13) (undo-tree-id51319 . -13) (undo-tree-id51320 . -13) (undo-tree-id51321 . -13) (undo-tree-id51322 . -13) (undo-tree-id51323 . -13) (undo-tree-id51324 . -13) (undo-tree-id51325 . -13) (undo-tree-id51326 . -13) (undo-tree-id51327 . -13) (undo-tree-id51328 . -13) (undo-tree-id51329 . -13) (undo-tree-id51330 . -13) (undo-tree-id51331 . -13) (undo-tree-id51332 . -13) (undo-tree-id51333 . -13) (undo-tree-id51334 . -13) (undo-tree-id51335 . -13) (undo-tree-id51336 . -13) (undo-tree-id51337 . -13) (undo-tree-id51338 . -13) (undo-tree-id51339 . -13) (undo-tree-id51340 . -13) (undo-tree-id51341 . -13) (undo-tree-id51342 . -13) (undo-tree-id51343 . -13) (undo-tree-id51344 . -13) (undo-tree-id51345 . -13) (undo-tree-id51346 . -13) (undo-tree-id51347 . -13) (undo-tree-id51348 . -13) (undo-tree-id51349 . -13) (undo-tree-id51350 . 1) (undo-tree-id51351 . -12) (undo-tree-id51352 . -12) (undo-tree-id51353 . -12) (undo-tree-id51354 . -12) (undo-tree-id51355 . -12) (undo-tree-id51356 . -12) (undo-tree-id51357 . -12) (undo-tree-id51358 . -12) (undo-tree-id51359 . -12) (undo-tree-id51360 . -12) (undo-tree-id51361 . -12) (undo-tree-id51362 . -13) (undo-tree-id51363 . -12) (undo-tree-id51364 . -13) (undo-tree-id51365 . -12) (undo-tree-id51366 . -12) (undo-tree-id51367 . -12) (undo-tree-id51368 . -12) (undo-tree-id51369 . -12) (undo-tree-id51370 . -12) (undo-tree-id51371 . -12) (undo-tree-id51372 . -12) (undo-tree-id51373 . -12) (undo-tree-id51374 . -12) (undo-tree-id51375 . -12) (undo-tree-id51376 . -12) (undo-tree-id51377 . -12) (undo-tree-id51378 . -12) (undo-tree-id51379 . -12) (undo-tree-id51380 . -12) (undo-tree-id51381 . -12) (undo-tree-id51382 . -12) (undo-tree-id51383 . -12) (undo-tree-id51384 . -12) (undo-tree-id51385 . -12) (undo-tree-id51386 . -12) (undo-tree-id51387 . -11) (undo-tree-id51388 . -11) (undo-tree-id51389 . -11) (undo-tree-id51390 . -11) (undo-tree-id51391 . -11) (undo-tree-id51392 . -11) (undo-tree-id51393 . -11) (undo-tree-id51394 . -11) (undo-tree-id51395 . -11) (undo-tree-id51396 . -11) (undo-tree-id51397 . -11) (undo-tree-id51398 . -11) (undo-tree-id51399 . -11) (undo-tree-id51400 . -11) (undo-tree-id51401 . -11) (undo-tree-id51402 . -11) (undo-tree-id51403 . -11) (undo-tree-id51404 . -11) (undo-tree-id51405 . -11) (undo-tree-id51406 . -11) (undo-tree-id51407 . -11) (undo-tree-id51408 . -11) (undo-tree-id51409 . -11) (undo-tree-id51410 . -11) (undo-tree-id51411 . -11) (undo-tree-id51412 . -11) (undo-tree-id51413 . -11) (undo-tree-id51414 . -11) (undo-tree-id51415 . -11) (undo-tree-id51416 . -11) (undo-tree-id51417 . -11) (undo-tree-id51418 . -11) (undo-tree-id51419 . -11) (undo-tree-id51420 . -13) 8486) nil (26158 494 548766 286000) 0 nil])
([nil nil ((8441 . 8442)) nil (26158 494 548558 241000) 0 nil])
([nil nil ((8441 . 8442) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -8441) (undo-tree-id51254 . -1) (undo-tree-id51255 . -1) (undo-tree-id51256 . -1) (undo-tree-id51257 . -1) (undo-tree-id51258 . -1) (undo-tree-id51259 . -1) (undo-tree-id51260 . -1) (undo-tree-id51261 . -1) (undo-tree-id51262 . -1) (undo-tree-id51263 . -1) (undo-tree-id51264 . -1) (undo-tree-id51265 . -1) (undo-tree-id51266 . -1) (undo-tree-id51267 . -1) (undo-tree-id51268 . -1) (undo-tree-id51269 . -1) (undo-tree-id51270 . -1) (undo-tree-id51271 . -1) (undo-tree-id51272 . -1) (undo-tree-id51273 . -1) (undo-tree-id51274 . -1) (undo-tree-id51275 . -1) (undo-tree-id51276 . -1) (undo-tree-id51277 . -1) (undo-tree-id51278 . -1) (undo-tree-id51279 . -1) (undo-tree-id51280 . -1) (undo-tree-id51281 . -1) (undo-tree-id51282 . -1) (undo-tree-id51283 . -1) (undo-tree-id51284 . -1) (undo-tree-id51285 . -1) (undo-tree-id51286 . -1) (undo-tree-id51287 . -1) (undo-tree-id51288 . -1) (undo-tree-id51289 . -1) (undo-tree-id51290 . -1) (undo-tree-id51291 . -1) (undo-tree-id51292 . -1) (undo-tree-id51293 . -1) (undo-tree-id51294 . -1) (undo-tree-id51295 . -1) (undo-tree-id51296 . -1) (undo-tree-id51297 . -1) (undo-tree-id51298 . -1) (undo-tree-id51299 . -1) (undo-tree-id51300 . -1) (undo-tree-id51301 . -1) 8442) nil (26158 494 548551 600000) 0 nil])
([nil nil ((8475 . 8476) (8474 . 8475)) nil (26158 494 548464 928000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8478 . 8479) (#("
" 0 1 (fontified nil)) . -8523) (8477 . 8524) 8475) nil (26158 494 548462 296000) 0 nil])
([nil nil ((8487 . 8488) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . 8487) (undo-tree-id51253 . -1)) nil (26158 494 548457 225000) 0 nil])
([nil nil ((8521 . 8522) (#("x" 0 1 (fontified t)) . -8521) (undo-tree-id51229 . -1) (undo-tree-id51230 . -1) (undo-tree-id51231 . -1) (undo-tree-id51232 . -1) (undo-tree-id51233 . -1) (undo-tree-id51234 . -1) (undo-tree-id51235 . -1) (undo-tree-id51236 . -1) (undo-tree-id51237 . -1) (undo-tree-id51238 . -1) (undo-tree-id51239 . -1) (undo-tree-id51240 . -1) (undo-tree-id51241 . -1) (undo-tree-id51242 . -1) (undo-tree-id51243 . -1) (undo-tree-id51244 . -1) (undo-tree-id51245 . -1) (undo-tree-id51246 . -1) (undo-tree-id51247 . -1) (undo-tree-id51248 . -1) (undo-tree-id51249 . -1) (undo-tree-id51250 . -1) (undo-tree-id51251 . -1) (undo-tree-id51252 . -1) 8522) nil (26158 494 548414 665000) 0 nil])
([nil nil ((8560 . 8565) (#("cu" 0 2 (fontified nil)) . 8560) (8560 . 8562) (#("currx" 0 5 (fontified nil)) . -8560) (8560 . 8565) (#("cu" 0 2 (fontified t)) . -8560) (undo-tree-id51647 . -2) (undo-tree-id51648 . -2) (undo-tree-id51649 . -2) (undo-tree-id51650 . -1) (undo-tree-id51651 . -2) (undo-tree-id51652 . -2) (undo-tree-id51653 . -2) (undo-tree-id51654 . -2) (undo-tree-id51655 . -2) (undo-tree-id51656 . -2) (undo-tree-id51657 . -2) (undo-tree-id51658 . -2) (undo-tree-id51659 . -2) (undo-tree-id51660 . -2) (undo-tree-id51661 . -2) (undo-tree-id51662 . -2) (undo-tree-id51663 . -2) (undo-tree-id51664 . -2) (undo-tree-id51665 . -2) (undo-tree-id51666 . -2) (undo-tree-id51667 . -2) (undo-tree-id51668 . -2) (undo-tree-id51669 . -2) (undo-tree-id51670 . -2) (undo-tree-id51671 . -2) (undo-tree-id51672 . -2) (undo-tree-id51673 . -2) (undo-tree-id51674 . -2) 8562 (8561 . 8562) (#("y" 0 1 (fontified t)) . -8561) (undo-tree-id51675 . -1) (undo-tree-id51676 . -1) (#("u" 0 1 (fontified t)) . -8562) (undo-tree-id51677 . -1) (undo-tree-id51678 . -1) 8563 (8561 . 8563) (8559 . 8561) (t 26158 494 697935 791000)) nil (26158 508 884093 467000) 0 nil])
([nil nil ((8567 . 8568)) nil (26158 508 883713 50000) 0 nil])
([nil nil ((8567 . 8568)) nil (26158 508 883709 665000) 0 nil])
([nil nil ((8568 . 8573) (#("curr" 0 4 (fontified nil)) . 8568) (8568 . 8572) (#("curry" 0 5 (fontified nil)) . -8568) (8568 . 8573) (#("curr" 0 4 (fontified t)) . -8568) (undo-tree-id51563 . -4) (undo-tree-id51564 . -4) (undo-tree-id51565 . -4) (undo-tree-id51566 . -4) (undo-tree-id51567 . -4) (undo-tree-id51568 . -4) (undo-tree-id51569 . -4) (undo-tree-id51570 . -4) (undo-tree-id51571 . -4) (undo-tree-id51572 . -4) (undo-tree-id51573 . -4) (undo-tree-id51574 . -4) (undo-tree-id51575 . -4) (undo-tree-id51576 . -4) (undo-tree-id51577 . -4) (undo-tree-id51578 . -4) (undo-tree-id51579 . -4) (undo-tree-id51580 . -4) (undo-tree-id51581 . -4) (undo-tree-id51582 . -4) (undo-tree-id51583 . -4) (undo-tree-id51584 . -4) (undo-tree-id51585 . -4) (undo-tree-id51586 . -4) (undo-tree-id51587 . -4) (undo-tree-id51588 . -4) (undo-tree-id51589 . -4) (undo-tree-id51590 . -4) (undo-tree-id51591 . -4) (undo-tree-id51592 . -4) (undo-tree-id51593 . -4) (undo-tree-id51594 . -4) (undo-tree-id51595 . -4) (undo-tree-id51596 . -4) (undo-tree-id51597 . -4) (undo-tree-id51598 . -4) (undo-tree-id51599 . -4) (undo-tree-id51600 . -4) (undo-tree-id51601 . -4) (undo-tree-id51602 . -4) (undo-tree-id51603 . -4) (undo-tree-id51604 . -4) (undo-tree-id51605 . -4) (undo-tree-id51606 . -4) (undo-tree-id51607 . -4) (undo-tree-id51608 . -4) (undo-tree-id51609 . -4) (undo-tree-id51610 . -4) (undo-tree-id51611 . -4) (undo-tree-id51612 . -4) (undo-tree-id51613 . -4) (undo-tree-id51614 . -4) (undo-tree-id51615 . -4) (undo-tree-id51616 . -4) (undo-tree-id51617 . -4) (undo-tree-id51618 . -4) (undo-tree-id51619 . -4) (undo-tree-id51620 . -4) (undo-tree-id51621 . -4) (undo-tree-id51622 . -4) (undo-tree-id51623 . -4) (undo-tree-id51624 . -4) (undo-tree-id51625 . -4) (undo-tree-id51626 . -4) (undo-tree-id51627 . -4) (undo-tree-id51628 . -4) (undo-tree-id51629 . -4) (undo-tree-id51630 . -4) (undo-tree-id51631 . -4) (undo-tree-id51632 . -4) (undo-tree-id51633 . -4) (undo-tree-id51634 . -4) (undo-tree-id51635 . -4) (undo-tree-id51636 . -4) (undo-tree-id51637 . -4) (undo-tree-id51638 . -4) (undo-tree-id51639 . -4) (undo-tree-id51640 . -4) (undo-tree-id51641 . -4) (undo-tree-id51642 . -4) (undo-tree-id51643 . -4) (undo-tree-id51644 . -4) (undo-tree-id51645 . -4) (undo-tree-id51646 . -4) 8572 (8571 . 8572) (8567 . 8571)) nil (26158 508 883690 699000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8592) (undo-tree-id51765 . -4) (undo-tree-id51766 . -4) (undo-tree-id51767 . -4) (undo-tree-id51768 . -4) (undo-tree-id51769 . -4) (undo-tree-id51770 . -4) (undo-tree-id51771 . -4) (undo-tree-id51772 . -4) (undo-tree-id51773 . -4) (undo-tree-id51774 . -4) (undo-tree-id51775 . -4) (undo-tree-id51776 . -4) (undo-tree-id51777 . -4) 8596 (8592 . 8596) (#("    " 0 4 (fontified nil)) . 8591) (undo-tree-id51778 . -4) (undo-tree-id51779 . -4) (undo-tree-id51780 . -4) (undo-tree-id51781 . -4) (undo-tree-id51782 . -4) (undo-tree-id51783 . -4) (undo-tree-id51784 . -4) (undo-tree-id51785 . -4) (undo-tree-id51786 . -4) (undo-tree-id51787 . -4) (undo-tree-id51788 . -4) (undo-tree-id51789 . -4) (undo-tree-id51790 . -4) (8590 . 8596) (t 26158 509 26205 562000)) nil (26158 553 528687 875000) 0 nil])
([nil nil ((8627 . 8628) (8624 . 8627) (8623 . 8624) (8618 . 8623) (8615 . 8618) (8599 . 8615) (#("w" 0 1 (fontified t face font-lock-comment-face)) . -8599) (undo-tree-id51735 . -1) (undo-tree-id51736 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -8600) (undo-tree-id51737 . -1) (undo-tree-id51738 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8601) (undo-tree-id51739 . -1) (undo-tree-id51740 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -8602) (undo-tree-id51741 . -1) (undo-tree-id51742 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -8603) (undo-tree-id51743 . -1) (undo-tree-id51744 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -8604) (undo-tree-id51745 . -1) (undo-tree-id51746 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8605) (undo-tree-id51747 . -1) (undo-tree-id51748 . -1) 8606 (8598 . 8606) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -8598) (undo-tree-id51749 . -1) (undo-tree-id51750 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -8599) (undo-tree-id51751 . -1) (undo-tree-id51752 . -1) 8600 (8588 . 8600) (8582 . 8588) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8582) (undo-tree-id51753 . -1) (undo-tree-id51754 . -1) 8583 (8566 . 8583) (8565 . 8566) (8555 . 8565) (8554 . 8555) (8553 . 8554) (#("M" 0 1 (fontified t face font-lock-comment-face)) . -8553) (undo-tree-id51755 . -1) (undo-tree-id51756 . -1) (undo-tree-id51757 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -8554) (undo-tree-id51758 . -1) (undo-tree-id51759 . -1) (undo-tree-id51760 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -8555) (undo-tree-id51761 . -1) (undo-tree-id51762 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -8556) (undo-tree-id51763 . -1) 8557 (8555 . 8557) (8554 . 8555) (8551 . 8554) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -8551) (undo-tree-id51764 . -1) 8552 (8545 . 8552) (8525 . 8545) (8524 . 8525)) nil (26158 553 528625 845000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-face)) . -8627) (undo-tree-id51679 . -1) (undo-tree-id51680 . -1) (undo-tree-id51681 . -1) (undo-tree-id51682 . -1) (undo-tree-id51683 . -1) (undo-tree-id51684 . -1) (undo-tree-id51685 . -1) (undo-tree-id51686 . -1) (undo-tree-id51687 . -1) (undo-tree-id51688 . -1) (undo-tree-id51689 . -1) (undo-tree-id51690 . -1) (undo-tree-id51691 . -1) (undo-tree-id51692 . -1) (undo-tree-id51693 . -1) (undo-tree-id51694 . -1) (undo-tree-id51695 . -1) (undo-tree-id51696 . -1) (undo-tree-id51697 . -1) (undo-tree-id51698 . -1) (undo-tree-id51699 . -1) (undo-tree-id51700 . -1) (undo-tree-id51701 . -1) (undo-tree-id51702 . -1) (undo-tree-id51703 . -1) (undo-tree-id51704 . -1) (undo-tree-id51705 . -1) (undo-tree-id51706 . -1) (undo-tree-id51707 . -1) (undo-tree-id51708 . -1) (undo-tree-id51709 . -1) (undo-tree-id51710 . -1) (undo-tree-id51711 . -1) (undo-tree-id51712 . -1) (undo-tree-id51713 . -1) (undo-tree-id51714 . -1) (undo-tree-id51715 . -1) (undo-tree-id51716 . -1) (undo-tree-id51717 . -1) (undo-tree-id51718 . -1) (undo-tree-id51719 . -1) (undo-tree-id51720 . -1) (undo-tree-id51721 . -1) (undo-tree-id51722 . -1) (undo-tree-id51723 . -1) (undo-tree-id51724 . -1) (undo-tree-id51725 . -1) (undo-tree-id51726 . -1) (undo-tree-id51727 . -1) (undo-tree-id51728 . -1) (undo-tree-id51729 . -1) (undo-tree-id51730 . -1) (undo-tree-id51731 . -1) (undo-tree-id51732 . -1) (undo-tree-id51733 . -1) (undo-tree-id51734 . -1) 8628) nil (26158 553 528548 83000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-comment-face)) . 8609) (undo-tree-id51793 . -1) (undo-tree-id51794 . -1) (t 26158 553 647137 713000)) nil (26158 568 597563 396000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-comment-face)) . 8609) (undo-tree-id51791 . -1) (undo-tree-id51792 . -1)) nil (26158 568 597547 801000) 0 nil])
([nil nil ((8694 . 8698) (#("    " 0 4 (fontified nil)) . 8693) (undo-tree-id51859 . -4) (undo-tree-id51860 . -4) (undo-tree-id51861 . -4) (undo-tree-id51862 . -4) (undo-tree-id51863 . -4) (undo-tree-id51864 . -4) (undo-tree-id51865 . -4) (undo-tree-id51866 . -4) (undo-tree-id51867 . -4) (undo-tree-id51868 . -4) (undo-tree-id51869 . -4) (undo-tree-id51870 . -4) (undo-tree-id51871 . -4) (8693 . 8698) (#("    " 0 4 (fontified nil)) . 8692) (undo-tree-id51872 . -4) (undo-tree-id51873 . -4) (undo-tree-id51874 . -4) (undo-tree-id51875 . -4) (undo-tree-id51876 . -4) (undo-tree-id51877 . -4) (undo-tree-id51878 . -4) (undo-tree-id51879 . -4) (undo-tree-id51880 . -4) (undo-tree-id51881 . -4) (undo-tree-id51882 . -4) (undo-tree-id51883 . -4) (8696 . 8697) (8692 . 8696) (t 26158 568 747481 807000)) nil (26158 597 662729 768000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8697 . 8698) (#("
" 0 1 (fontified nil)) . -8735) (8693 . 8736)) nil (26158 608 776775 82000) 0 nil] [nil nil ((8733 . 8734) (apply yas--snippet-revive 8726 8733 #s(yas--snippet nil nil #s(yas--exit #<marker at 8418 in main.rs> nil) 251 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 8418 in main.rs> nil) 251 nil nil nil nil)) (8726 . 8733) (#("clone()$0" 0 9 (fontified nil)) . 8726) (8726 . 8735) (#("cl" 0 2 (fontified nil)) . 8726) (8726 . 8728) (#("clone() (as Clone)" 0 18 (fontified nil)) . -8726) (8726 . 8744) (#("cl" 0 2 (fontified t)) . -8726) (undo-tree-id51795 . -1) (undo-tree-id51796 . -2) (undo-tree-id51797 . -2) (undo-tree-id51798 . -1) (undo-tree-id51799 . -1) (undo-tree-id51800 . -1) (undo-tree-id51801 . -1) (undo-tree-id51802 . -1) (undo-tree-id51803 . -1) (undo-tree-id51804 . -1) (undo-tree-id51805 . -1) (undo-tree-id51806 . -1) (undo-tree-id51807 . -1) (undo-tree-id51808 . -1) (undo-tree-id51809 . -2) (undo-tree-id51810 . -2) (undo-tree-id51811 . -2) (undo-tree-id51812 . -2) (undo-tree-id51813 . -2) (undo-tree-id51814 . -2) (undo-tree-id51815 . -2) (undo-tree-id51816 . -2) (undo-tree-id51817 . -2) (undo-tree-id51818 . -2) (undo-tree-id51819 . -2) (undo-tree-id51820 . -2) (undo-tree-id51821 . -2) (undo-tree-id51822 . -2) (undo-tree-id51823 . -2) (undo-tree-id51824 . -2) (undo-tree-id51825 . -2) (undo-tree-id51826 . -2) (undo-tree-id51827 . -2) (undo-tree-id51828 . -2) (undo-tree-id51829 . -2) (undo-tree-id51830 . -2) (undo-tree-id51831 . -2) (undo-tree-id51832 . -2) (undo-tree-id51833 . -2) (undo-tree-id51834 . -2) (undo-tree-id51835 . -2) (undo-tree-id51836 . -2) (undo-tree-id51837 . -2) (undo-tree-id51838 . -2) (undo-tree-id51839 . -2) 8728 (8726 . 8728) (8725 . 8726) (8712 . 8725) (#("fo" 0 2 (fontified nil)) . 8712) (8712 . 8714) (#("for_lidar_map" 0 13 (fontified nil)) . -8712) (8712 . 8725) (#("fo" 0 2 (fontified t)) . -8712) (undo-tree-id51840 . -2) (undo-tree-id51841 . -2) (undo-tree-id51842 . -2) 8714 (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -8714) (undo-tree-id51843 . -1) (undo-tree-id51844 . -1) 8715 (8713 . 8715) (8712 . 8713) (#("m" 0 1 (fontified t)) . -8712) (undo-tree-id51845 . -1) (undo-tree-id51846 . -1) (#("a" 0 1 (fontified t)) . -8713) (undo-tree-id51847 . -1) (undo-tree-id51848 . -1) (#("p" 0 1 (fontified t)) . -8714) (undo-tree-id51849 . -1) (undo-tree-id51850 . -1) 8715 (8714 . 8715) (8712 . 8714) (#("l" 0 1 (fontified t)) . -8712) (undo-tree-id51851 . -1) (undo-tree-id51852 . -1) (undo-tree-id51853 . -1) (#("i" 0 1 (fontified t)) . -8713) (undo-tree-id51854 . -1) (undo-tree-id51855 . -1) (undo-tree-id51856 . -1) (#("d" 0 1 (fontified t)) . -8714) (undo-tree-id51857 . -1) (undo-tree-id51858 . -1) 8715 (8714 . 8715) (8706 . 8714) (8705 . 8706) (8697 . 8705) (8693 . 8697)) ((#("    " 0 4 (fontified nil)) . 8693) (undo-tree-id51884 . -4) (undo-tree-id51885 . -4) (undo-tree-id51886 . -4) (undo-tree-id51887 . -4) (undo-tree-id51888 . -4) (undo-tree-id51889 . -4) (undo-tree-id51890 . -4) (undo-tree-id51891 . -4) (undo-tree-id51892 . -4) (undo-tree-id51893 . -4) (undo-tree-id51894 . -4) (undo-tree-id51895 . -4) (undo-tree-id51896 . -4) (undo-tree-id51897 . -4) (undo-tree-id51898 . -4) (undo-tree-id51899 . -4) (undo-tree-id51900 . -4) (undo-tree-id51901 . -4) (undo-tree-id51902 . -4) (undo-tree-id51903 . -4) (undo-tree-id51904 . -4) (undo-tree-id51905 . -4) (undo-tree-id51906 . -4) (undo-tree-id51907 . -4) (undo-tree-id51908 . -4) (undo-tree-id51909 . -4) (undo-tree-id51910 . -4) (undo-tree-id51911 . -4) (undo-tree-id51912 . -4) (undo-tree-id51913 . -4) (undo-tree-id51914 . -4) (undo-tree-id51915 . -4) (undo-tree-id51916 . -4) (undo-tree-id51917 . -4) (undo-tree-id51918 . -4) (undo-tree-id51919 . -4) (undo-tree-id51920 . -4) (undo-tree-id51921 . -4) (undo-tree-id51922 . -4) (undo-tree-id51923 . -4) (undo-tree-id51924 . -4) (undo-tree-id51925 . -4) (undo-tree-id51926 . -4) (undo-tree-id51927 . -4) (undo-tree-id51928 . -4) (undo-tree-id51929 . -4) (undo-tree-id51930 . -4) (undo-tree-id51931 . -4) (undo-tree-id51932 . -4) (undo-tree-id51933 . -4) (undo-tree-id51934 . -4) (undo-tree-id51935 . -4) (undo-tree-id51936 . -4) (undo-tree-id51937 . -4) (undo-tree-id51938 . -4) (undo-tree-id51939 . -4) (undo-tree-id51940 . -4) (undo-tree-id51941 . -4) (undo-tree-id51942 . -4) (undo-tree-id51943 . -4) (undo-tree-id51944 . -4) (undo-tree-id51945 . -4) (undo-tree-id51946 . -4) (undo-tree-id51947 . -4) (undo-tree-id51948 . -4) (undo-tree-id51949 . -4) (undo-tree-id51950 . -4) (undo-tree-id51951 . -4) (undo-tree-id51952 . -4) (undo-tree-id51953 . -4) (undo-tree-id51954 . -4) (undo-tree-id51955 . -4) (undo-tree-id51956 . -4) (undo-tree-id51957 . -4) (undo-tree-id51958 . -4) (undo-tree-id51959 . -4) (undo-tree-id51960 . -4) (undo-tree-id51961 . -4) (undo-tree-id51962 . -4) (undo-tree-id51963 . -4) (undo-tree-id51964 . -4) (undo-tree-id51965 . -4) (undo-tree-id51966 . -4) (undo-tree-id51967 . -4) (undo-tree-id51968 . -4) (undo-tree-id51969 . -4) (undo-tree-id51970 . -4) (undo-tree-id51971 . -4) (undo-tree-id51972 . -4) (undo-tree-id51973 . -4) (undo-tree-id51974 . -4) (undo-tree-id51975 . -4) (undo-tree-id51976 . -4) (undo-tree-id51977 . -4) (undo-tree-id51978 . -4) (undo-tree-id51979 . -4) (undo-tree-id51980 . -4) (undo-tree-id51981 . -4) (undo-tree-id51982 . -4) (undo-tree-id51983 . -4) (undo-tree-id51984 . -4) (undo-tree-id51985 . -4) (undo-tree-id51986 . -4) (undo-tree-id51987 . -4) (undo-tree-id51988 . -4) (undo-tree-id51989 . -4) (undo-tree-id51990 . -4) (undo-tree-id51991 . -4) (undo-tree-id51992 . -4) (undo-tree-id51993 . -4) (undo-tree-id51994 . -4) (undo-tree-id51995 . -4) (undo-tree-id51996 . -4) (undo-tree-id51997 . -4) (undo-tree-id51998 . -4) (undo-tree-id51999 . -4) (undo-tree-id52000 . -4) (undo-tree-id52001 . -4) (undo-tree-id52002 . -4) (undo-tree-id52003 . -4) (undo-tree-id52004 . -4) (undo-tree-id52005 . -4) (undo-tree-id52006 . -4) (undo-tree-id52007 . -4) (undo-tree-id52008 . -4) (undo-tree-id52009 . -4) (undo-tree-id52010 . -4) (undo-tree-id52011 . -4) (undo-tree-id52012 . -4) (#("let what" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 8 (fontified nil face font-lock-variable-name-face)) . 8697) (undo-tree-id52013 . -8) (undo-tree-id52014 . -8) (undo-tree-id52015 . -8) (undo-tree-id52016 . -8) (undo-tree-id52017 . -8) (undo-tree-id52018 . -8) (undo-tree-id52019 . -8) (undo-tree-id52020 . -8) (undo-tree-id52021 . -8) (undo-tree-id52022 . -8) (undo-tree-id52023 . -8) (undo-tree-id52024 . -8) (undo-tree-id52025 . -8) (undo-tree-id52026 . -8) (undo-tree-id52027 . -8) (undo-tree-id52028 . -8) (undo-tree-id52029 . -8) (undo-tree-id52030 . -8) (undo-tree-id52031 . -8) (undo-tree-id52032 . -8) (undo-tree-id52033 . -8) (undo-tree-id52034 . -8) (undo-tree-id52035 . -8) (undo-tree-id52036 . -8) (undo-tree-id52037 . -8) (undo-tree-id52038 . -8) (undo-tree-id52039 . -8) (undo-tree-id52040 . -8) (undo-tree-id52041 . -8) (undo-tree-id52042 . -8) (undo-tree-id52043 . -8) (undo-tree-id52044 . -8) (undo-tree-id52045 . -8) (undo-tree-id52046 . -8) (undo-tree-id52047 . -8) (undo-tree-id52048 . -8) (undo-tree-id52049 . -8) (undo-tree-id52050 . -8) (undo-tree-id52051 . -8) (undo-tree-id52052 . -8) (undo-tree-id52053 . -8) (undo-tree-id52054 . -8) (undo-tree-id52055 . -8) (undo-tree-id52056 . -8) (undo-tree-id52057 . -8) (undo-tree-id52058 . -8) (undo-tree-id52059 . -8) (undo-tree-id52060 . -8) (undo-tree-id52061 . -8) (undo-tree-id52062 . -8) (undo-tree-id52063 . -8) (undo-tree-id52064 . -8) (undo-tree-id52065 . -8) (undo-tree-id52066 . -8) (undo-tree-id52067 . -8) (undo-tree-id52068 . -8) (undo-tree-id52069 . -8) (undo-tree-id52070 . -8) (undo-tree-id52071 . -8) (undo-tree-id52072 . -8) (undo-tree-id52073 . -8) (undo-tree-id52074 . -8) (undo-tree-id52075 . -8) (undo-tree-id52076 . -8) (undo-tree-id52077 . -8) (undo-tree-id52078 . -8) (undo-tree-id52079 . -8) (undo-tree-id52080 . -8) (undo-tree-id52081 . -8) (undo-tree-id52082 . -8) (undo-tree-id52083 . -8) (undo-tree-id52084 . -8) (undo-tree-id52085 . -8) (undo-tree-id52086 . -8) (undo-tree-id52087 . -8) (undo-tree-id52088 . -8) (undo-tree-id52089 . -8) (undo-tree-id52090 . -8) (undo-tree-id52091 . -8) (undo-tree-id52092 . -8) (undo-tree-id52093 . -8) (undo-tree-id52094 . -8) (undo-tree-id52095 . -8) (undo-tree-id52096 . -8) (undo-tree-id52097 . -8) (undo-tree-id52098 . -8) (undo-tree-id52099 . -8) (undo-tree-id52100 . -8) (undo-tree-id52101 . -8) (undo-tree-id52102 . -4) (undo-tree-id52103 . -8) (undo-tree-id52104 . -4) (undo-tree-id52105 . -8) (undo-tree-id52106 . -8) (undo-tree-id52107 . -8) (undo-tree-id52108 . -8) (undo-tree-id52109 . -8) (undo-tree-id52110 . -8) (undo-tree-id52111 . -8) (undo-tree-id52112 . -8) (undo-tree-id52113 . -8) (undo-tree-id52114 . -8) (undo-tree-id52115 . -8) (undo-tree-id52116 . -8) (undo-tree-id52117 . -8) (undo-tree-id52118 . -8) (undo-tree-id52119 . -8) (undo-tree-id52120 . -8) (undo-tree-id52121 . -8) (undo-tree-id52122 . -8) (undo-tree-id52123 . -8) (undo-tree-id52124 . -8) (undo-tree-id52125 . -8) (undo-tree-id52126 . -8) (undo-tree-id52127 . -8) (undo-tree-id52128 . -8) (undo-tree-id52129 . -8) (undo-tree-id52130 . -8) (undo-tree-id52131 . -8) (undo-tree-id52132 . -8) (undo-tree-id52133 . -8) (undo-tree-id52134 . -8) (undo-tree-id52135 . -8) (undo-tree-id52136 . -8) (undo-tree-id52137 . -8) (undo-tree-id52138 . -8) (undo-tree-id52139 . -8) (undo-tree-id52140 . -8) (undo-tree-id52141 . -8) (#("e" 0 1 (fontified nil face font-lock-variable-name-face)) . 8705) (undo-tree-id52142 . -1) (undo-tree-id52143 . -1) (undo-tree-id52144 . -1) (undo-tree-id52145 . -1) (undo-tree-id52146 . -1) (undo-tree-id52147 . -1) (undo-tree-id52148 . -1) (undo-tree-id52149 . -1) (undo-tree-id52150 . -1) (undo-tree-id52151 . -1) (undo-tree-id52152 . -1) (undo-tree-id52153 . -1) (undo-tree-id52154 . -1) (undo-tree-id52155 . -1) (undo-tree-id52156 . -1) (undo-tree-id52157 . -1) (undo-tree-id52158 . -1) (undo-tree-id52159 . -1) (undo-tree-id52160 . -1) (undo-tree-id52161 . -1) (undo-tree-id52162 . -1) (undo-tree-id52163 . -1) (undo-tree-id52164 . -1) (undo-tree-id52165 . -1) (undo-tree-id52166 . -1) (undo-tree-id52167 . -1) (undo-tree-id52168 . -1) (undo-tree-id52169 . -1) (undo-tree-id52170 . -1) (undo-tree-id52171 . -1) (undo-tree-id52172 . -1) (undo-tree-id52173 . -1) (undo-tree-id52174 . -1) (undo-tree-id52175 . -1) (undo-tree-id52176 . -1) (undo-tree-id52177 . -1) (undo-tree-id52178 . -1) (undo-tree-id52179 . -1) (undo-tree-id52180 . -1) (undo-tree-id52181 . -1) (undo-tree-id52182 . -1) (undo-tree-id52183 . -1) (undo-tree-id52184 . -1) (undo-tree-id52185 . -1) (undo-tree-id52186 . -1) (undo-tree-id52187 . -1) (undo-tree-id52188 . -1) (undo-tree-id52189 . -1) (undo-tree-id52190 . -1) (undo-tree-id52191 . -1) (undo-tree-id52192 . -1) (undo-tree-id52193 . -1) (undo-tree-id52194 . -1) (undo-tree-id52195 . -1) (undo-tree-id52196 . -1) (undo-tree-id52197 . -1) (undo-tree-id52198 . -1) (undo-tree-id52199 . -1) (undo-tree-id52200 . -1) (undo-tree-id52201 . -1) (undo-tree-id52202 . -1) (undo-tree-id52203 . -1) (undo-tree-id52204 . -1) (undo-tree-id52205 . -1) (undo-tree-id52206 . -1) (undo-tree-id52207 . -1) (undo-tree-id52208 . -1) (undo-tree-id52209 . -1) (undo-tree-id52210 . -1) (undo-tree-id52211 . -1) (undo-tree-id52212 . -1) (undo-tree-id52213 . -1) (undo-tree-id52214 . -1) (undo-tree-id52215 . -1) (undo-tree-id52216 . -1) (undo-tree-id52217 . -1) (undo-tree-id52218 . -1) (undo-tree-id52219 . -1) (undo-tree-id52220 . -1) (undo-tree-id52221 . -1) (undo-tree-id52222 . -1) (undo-tree-id52223 . -1) (undo-tree-id52224 . -1) (undo-tree-id52225 . -1) (undo-tree-id52226 . -1) (undo-tree-id52227 . -1) (undo-tree-id52228 . -1) (undo-tree-id52229 . -1) (undo-tree-id52230 . -1) (undo-tree-id52231 . -1) (undo-tree-id52232 . -1) (undo-tree-id52233 . -1) (undo-tree-id52234 . -1) (undo-tree-id52235 . -1) (undo-tree-id52236 . -1) (undo-tree-id52237 . -1) (undo-tree-id52238 . -1) (undo-tree-id52239 . -1) (undo-tree-id52240 . -1) (undo-tree-id52241 . -1) (undo-tree-id52242 . -1) (undo-tree-id52243 . -1) (undo-tree-id52244 . -1) (undo-tree-id52245 . -1) (undo-tree-id52246 . -1) (undo-tree-id52247 . -1) (undo-tree-id52248 . -1) (undo-tree-id52249 . -1) (undo-tree-id52250 . -1) (undo-tree-id52251 . -1) (undo-tree-id52252 . -1) (undo-tree-id52253 . -1) (undo-tree-id52254 . -1) (undo-tree-id52255 . -1) (undo-tree-id52256 . -1) (undo-tree-id52257 . -1) (undo-tree-id52258 . -1) (undo-tree-id52259 . -1) (undo-tree-id52260 . -1) (undo-tree-id52261 . -1) (undo-tree-id52262 . -1) (undo-tree-id52263 . -1) (undo-tree-id52264 . -1) (undo-tree-id52265 . -1) (undo-tree-id52266 . -1) (undo-tree-id52267 . -1) (undo-tree-id52268 . -1) (#("ver = li" 0 3 (fontified nil face font-lock-variable-name-face) 3 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 8706) (undo-tree-id52269 . -6) (undo-tree-id52270 . -8) (undo-tree-id52271 . -6) (undo-tree-id52272 . -6) (undo-tree-id52273 . -6) (undo-tree-id52274 . -6) (undo-tree-id52275 . -6) (undo-tree-id52276 . -6) (undo-tree-id52277 . -6) (undo-tree-id52278 . -6) (undo-tree-id52279 . -6) (undo-tree-id52280 . -6) (undo-tree-id52281 . -6) (undo-tree-id52282 . -6) (undo-tree-id52283 . -6) (undo-tree-id52284 . -6) (undo-tree-id52285 . -6) (undo-tree-id52286 . -6) (undo-tree-id52287 . -6) (undo-tree-id52288 . -6) (undo-tree-id52289 . -6) (undo-tree-id52290 . -6) (undo-tree-id52291 . -6) (undo-tree-id52292 . -6) (undo-tree-id52293 . -6) (undo-tree-id52294 . -6) (undo-tree-id52295 . -6) (undo-tree-id52296 . -6) (undo-tree-id52297 . -6) (undo-tree-id52298 . -6) (undo-tree-id52299 . -6) (undo-tree-id52300 . -6) (undo-tree-id52301 . -6) (undo-tree-id52302 . -6) (undo-tree-id52303 . -6) (undo-tree-id52304 . -6) (undo-tree-id52305 . -6) (undo-tree-id52306 . -6) (undo-tree-id52307 . -6) (undo-tree-id52308 . -6) (undo-tree-id52309 . -6) (undo-tree-id52310 . -6) (undo-tree-id52311 . -6) (undo-tree-id52312 . -8) (undo-tree-id52313 . -8) (undo-tree-id52314 . -6) (undo-tree-id52315 . -6) (undo-tree-id52316 . -6) (undo-tree-id52317 . -6) (undo-tree-id52318 . -6) (undo-tree-id52319 . -6) (undo-tree-id52320 . -6) (undo-tree-id52321 . -6) (undo-tree-id52322 . -6) (undo-tree-id52323 . -6) (undo-tree-id52324 . -6) (undo-tree-id52325 . -6) (undo-tree-id52326 . -6) (undo-tree-id52327 . -6) (undo-tree-id52328 . -6) (undo-tree-id52329 . -6) (undo-tree-id52330 . -6) (undo-tree-id52331 . -6) (undo-tree-id52332 . -6) (undo-tree-id52333 . -6) (undo-tree-id52334 . -6) (undo-tree-id52335 . -6) (undo-tree-id52336 . -6) (undo-tree-id52337 . -6) (undo-tree-id52338 . -6) (undo-tree-id52339 . -6) (undo-tree-id52340 . -6) (undo-tree-id52341 . -6) (undo-tree-id52342 . -6) (undo-tree-id52343 . -6) (undo-tree-id52344 . -6) (undo-tree-id52345 . -6) (undo-tree-id52346 . -6) (undo-tree-id52347 . -6) (undo-tree-id52348 . -6) (undo-tree-id52349 . -6) (undo-tree-id52350 . -6) (undo-tree-id52351 . -6) (undo-tree-id52352 . -6) (undo-tree-id52353 . -6) (undo-tree-id52354 . -6) (undo-tree-id52355 . -6) (undo-tree-id52356 . -6) (undo-tree-id52357 . -6) (undo-tree-id52358 . -3) (undo-tree-id52359 . -3) (undo-tree-id52360 . -6) (undo-tree-id52361 . -6) (undo-tree-id52362 . -6) (undo-tree-id52363 . -6) (undo-tree-id52364 . -6) (undo-tree-id52365 . -6) (undo-tree-id52366 . -6) (undo-tree-id52367 . -6) (undo-tree-id52368 . -6) (undo-tree-id52369 . -6) (undo-tree-id52370 . -6) (undo-tree-id52371 . -6) (undo-tree-id52372 . -6) (undo-tree-id52373 . -6) (undo-tree-id52374 . -6) (undo-tree-id52375 . -6) (undo-tree-id52376 . -6) (undo-tree-id52377 . -6) (undo-tree-id52378 . -6) (undo-tree-id52379 . -6) (undo-tree-id52380 . -6) (undo-tree-id52381 . -6) (undo-tree-id52382 . -6) (undo-tree-id52383 . -6) (undo-tree-id52384 . -6) (undo-tree-id52385 . -6) (undo-tree-id52386 . -6) (undo-tree-id52387 . -6) (undo-tree-id52388 . -6) (undo-tree-id52389 . -6) (undo-tree-id52390 . -6) (undo-tree-id52391 . -6) (undo-tree-id52392 . -6) (undo-tree-id52393 . -6) (undo-tree-id52394 . -6) (undo-tree-id52395 . -6) (#("d" 0 1 (fontified nil)) . 8714) (undo-tree-id52396 . -1) (undo-tree-id52397 . -1) (8712 . 8715) (#("ma" 0 1 (fontified nil) 1 2 (fontified nil)) . 8712) (undo-tree-id52398 . -2) (undo-tree-id52399 . -2) (#("p" 0 1 (fontified nil)) . 8714) (undo-tree-id52400 . -1) (undo-tree-id52401 . -1) (8712 . 8715) (#("f" 0 1 (fontified nil)) . 8712) (undo-tree-id52402 . -1) (undo-tree-id52403 . -1) (undo-tree-id52404 . -1) (#("or" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-keyword-face)) . 8713) (undo-tree-id52405 . -1) (undo-tree-id52406 . -2) (undo-tree-id52407 . -2) (8712 . 8715) (#("for_lidar_map" 0 13 (fontified nil)) . 8712) (8712 . 8725) (#("fo" 0 2 (fontified nil)) . 8712) (8712 . 8714) (#("for_lidar_map" 0 13 (fontified nil)) . 8712) (undo-tree-id52408 . -13) (undo-tree-id52409 . -13) (undo-tree-id52410 . -13) (undo-tree-id52411 . -13) (undo-tree-id52412 . -13) (undo-tree-id52413 . -13) (undo-tree-id52414 . -13) (undo-tree-id52415 . -13) (undo-tree-id52416 . -13) (undo-tree-id52417 . -13) (undo-tree-id52418 . -13) (undo-tree-id52419 . -13) (undo-tree-id52420 . -13) (undo-tree-id52421 . -13) (undo-tree-id52422 . -13) (undo-tree-id52423 . -13) (undo-tree-id52424 . -13) (undo-tree-id52425 . -13) (undo-tree-id52426 . -13) (undo-tree-id52427 . -13) (undo-tree-id52428 . -13) (undo-tree-id52429 . -13) (undo-tree-id52430 . -13) (undo-tree-id52431 . -13) (undo-tree-id52432 . -13) (undo-tree-id52433 . -13) (undo-tree-id52434 . -13) (undo-tree-id52435 . -13) (undo-tree-id52436 . -13) (undo-tree-id52437 . -13) (undo-tree-id52438 . -13) (undo-tree-id52439 . -13) (undo-tree-id52440 . -13) (undo-tree-id52441 . -13) (undo-tree-id52442 . -13) (undo-tree-id52443 . -13) (undo-tree-id52444 . -13) (undo-tree-id52445 . -13) (undo-tree-id52446 . -13) (undo-tree-id52447 . -13) (undo-tree-id52448 . -13) (undo-tree-id52449 . -13) (undo-tree-id52450 . -13) (undo-tree-id52451 . -13) (undo-tree-id52452 . -13) (undo-tree-id52453 . -13) (undo-tree-id52454 . -13) (undo-tree-id52455 . -13) (undo-tree-id52456 . -13) (undo-tree-id52457 . -13) (undo-tree-id52458 . -13) (undo-tree-id52459 . -13) (undo-tree-id52460 . -13) (undo-tree-id52461 . -13) (undo-tree-id52462 . -13) (undo-tree-id52463 . -13) (undo-tree-id52464 . -13) (undo-tree-id52465 . -13) (undo-tree-id52466 . -13) (undo-tree-id52467 . -13) (undo-tree-id52468 . -13) (undo-tree-id52469 . -13) (undo-tree-id52470 . -13) (undo-tree-id52471 . -13) (undo-tree-id52472 . -13) (undo-tree-id52473 . -13) (undo-tree-id52474 . -13) (undo-tree-id52475 . -13) (undo-tree-id52476 . -13) (undo-tree-id52477 . -13) (undo-tree-id52478 . -13) (undo-tree-id52479 . -13) (undo-tree-id52480 . -13) (undo-tree-id52481 . -13) (undo-tree-id52482 . -13) (undo-tree-id52483 . -13) (undo-tree-id52484 . -13) (undo-tree-id52485 . -13) (undo-tree-id52486 . -13) (undo-tree-id52487 . -13) (undo-tree-id52488 . -13) (undo-tree-id52489 . -13) (undo-tree-id52490 . -13) (undo-tree-id52491 . -13) (undo-tree-id52492 . -13) (undo-tree-id52493 . -13) (undo-tree-id52494 . -13) (undo-tree-id52495 . -13) (undo-tree-id52496 . -13) (undo-tree-id52497 . -13) (undo-tree-id52498 . -13) (undo-tree-id52499 . -13) (undo-tree-id52500 . -13) (undo-tree-id52501 . -13) (undo-tree-id52502 . -13) (undo-tree-id52503 . -13) (undo-tree-id52504 . -13) (undo-tree-id52505 . -13) (undo-tree-id52506 . -13) (undo-tree-id52507 . -13) (undo-tree-id52508 . -13) (undo-tree-id52509 . -13) (undo-tree-id52510 . -13) (undo-tree-id52511 . -13) (undo-tree-id52512 . -13) (undo-tree-id52513 . -13) (undo-tree-id52514 . -13) (undo-tree-id52515 . -13) (undo-tree-id52516 . -13) (undo-tree-id52517 . -13) (undo-tree-id52518 . -13) (undo-tree-id52519 . -13) (undo-tree-id52520 . -13) (undo-tree-id52521 . -13) (undo-tree-id52522 . -13) (undo-tree-id52523 . -13) (undo-tree-id52524 . -13) (undo-tree-id52525 . -13) (undo-tree-id52526 . -13) (undo-tree-id52527 . -13) (undo-tree-id52528 . -13) (undo-tree-id52529 . -13) (undo-tree-id52530 . -13) (undo-tree-id52531 . -13) (undo-tree-id52532 . -13) (#("." 0 1 (fontified nil)) . 8725) (undo-tree-id52533 . -1) (undo-tree-id52534 . -1) (undo-tree-id52535 . -1) (undo-tree-id52536 . -1) (undo-tree-id52537 . -1) (undo-tree-id52538 . -1) (undo-tree-id52539 . -1) (undo-tree-id52540 . -1) (undo-tree-id52541 . -1) (undo-tree-id52542 . -1) (undo-tree-id52543 . -1) (undo-tree-id52544 . -1) (undo-tree-id52545 . -1) (undo-tree-id52546 . -1) (undo-tree-id52547 . -1) (undo-tree-id52548 . -1) (undo-tree-id52549 . -1) (undo-tree-id52550 . -1) (undo-tree-id52551 . -1) (undo-tree-id52552 . -1) (undo-tree-id52553 . -1) (undo-tree-id52554 . -1) (undo-tree-id52555 . -1) (undo-tree-id52556 . -1) (undo-tree-id52557 . -1) (undo-tree-id52558 . -1) (undo-tree-id52559 . -1) (undo-tree-id52560 . -1) (undo-tree-id52561 . -1) (undo-tree-id52562 . -1) (undo-tree-id52563 . -1) (undo-tree-id52564 . -1) (undo-tree-id52565 . -1) (undo-tree-id52566 . -1) (undo-tree-id52567 . -1) (undo-tree-id52568 . -1) (undo-tree-id52569 . -1) (undo-tree-id52570 . -1) (undo-tree-id52571 . -1) (undo-tree-id52572 . -1) (undo-tree-id52573 . -1) (undo-tree-id52574 . -1) (undo-tree-id52575 . -1) (undo-tree-id52576 . -1) (undo-tree-id52577 . -1) (undo-tree-id52578 . -1) (undo-tree-id52579 . -1) (undo-tree-id52580 . -1) (undo-tree-id52581 . -1) (undo-tree-id52582 . -1) (undo-tree-id52583 . -1) (undo-tree-id52584 . -1) (undo-tree-id52585 . -1) (undo-tree-id52586 . -1) (undo-tree-id52587 . -1) (undo-tree-id52588 . -1) (undo-tree-id52589 . -1) (undo-tree-id52590 . -1) (undo-tree-id52591 . -1) (undo-tree-id52592 . -1) (undo-tree-id52593 . -1) (undo-tree-id52594 . -1) (undo-tree-id52595 . -1) (undo-tree-id52596 . -1) (undo-tree-id52597 . -1) (undo-tree-id52598 . -1) (undo-tree-id52599 . -1) (undo-tree-id52600 . -1) (undo-tree-id52601 . -1) (undo-tree-id52602 . -1) (undo-tree-id52603 . -1) (undo-tree-id52604 . -1) (undo-tree-id52605 . -1) (undo-tree-id52606 . -1) (undo-tree-id52607 . -1) (undo-tree-id52608 . -1) (undo-tree-id52609 . -1) (undo-tree-id52610 . -1) (undo-tree-id52611 . -1) (undo-tree-id52612 . -1) (undo-tree-id52613 . -1) (undo-tree-id52614 . -1) (undo-tree-id52615 . -1) (undo-tree-id52616 . -1) (undo-tree-id52617 . -1) (undo-tree-id52618 . -1) (undo-tree-id52619 . -1) (undo-tree-id52620 . -1) (undo-tree-id52621 . -1) (undo-tree-id52622 . -1) (undo-tree-id52623 . -1) (undo-tree-id52624 . -1) (undo-tree-id52625 . -1) (undo-tree-id52626 . -1) (undo-tree-id52627 . -1) (undo-tree-id52628 . -1) (undo-tree-id52629 . -1) (undo-tree-id52630 . -1) (undo-tree-id52631 . -1) (undo-tree-id52632 . -1) (undo-tree-id52633 . -1) (undo-tree-id52634 . -1) (undo-tree-id52635 . -1) (undo-tree-id52636 . -1) (undo-tree-id52637 . -1) (undo-tree-id52638 . -1) (undo-tree-id52639 . -1) (undo-tree-id52640 . -1) (undo-tree-id52641 . -1) (undo-tree-id52642 . -1) (undo-tree-id52643 . -1) (undo-tree-id52644 . -1) (undo-tree-id52645 . -1) (undo-tree-id52646 . -1) (undo-tree-id52647 . -1) (undo-tree-id52648 . -1) (undo-tree-id52649 . -1) (undo-tree-id52650 . -1) (undo-tree-id52651 . -1) (undo-tree-id52652 . -1) (undo-tree-id52653 . -1) (undo-tree-id52654 . -1) (undo-tree-id52655 . -1) (undo-tree-id52656 . -1) (undo-tree-id52657 . -1) (#("cl" 0 2 (fontified nil)) . 8726) (undo-tree-id52658 . -1) (undo-tree-id52659 . -1) (undo-tree-id52660 . -1) (undo-tree-id52661 . -1) (undo-tree-id52662 . -1) (undo-tree-id52663 . -1) (undo-tree-id52664 . -1) (undo-tree-id52665 . -1) (undo-tree-id52666 . -1) (undo-tree-id52667 . -1) (undo-tree-id52668 . -1) (undo-tree-id52669 . -1) (undo-tree-id52670 . -2) (undo-tree-id52671 . -2) (undo-tree-id52672 . -2) (undo-tree-id52673 . -2) (undo-tree-id52674 . -2) (undo-tree-id52675 . -2) (undo-tree-id52676 . -2) (undo-tree-id52677 . -2) (undo-tree-id52678 . -2) (undo-tree-id52679 . -2) (undo-tree-id52680 . -2) (undo-tree-id52681 . -2) (undo-tree-id52682 . -2) (undo-tree-id52683 . -2) (undo-tree-id52684 . -2) (undo-tree-id52685 . -2) (undo-tree-id52686 . -2) (undo-tree-id52687 . -2) (undo-tree-id52688 . -2) (undo-tree-id52689 . -2) (undo-tree-id52690 . -2) (undo-tree-id52691 . -2) (undo-tree-id52692 . -2) (undo-tree-id52693 . -2) (undo-tree-id52694 . -2) (undo-tree-id52695 . -2) (undo-tree-id52696 . -2) (undo-tree-id52697 . -2) (undo-tree-id52698 . -2) (undo-tree-id52699 . -2) (undo-tree-id52700 . -2) (undo-tree-id52701 . -2) (8726 . 8728) (#("clone() (as Clone)" 0 18 (fontified nil)) . 8726) (8726 . 8744) (#("cl" 0 2 (fontified nil)) . 8726) (8726 . 8728) (#("clone()$0" 0 9 (fontified nil)) . 8726) (8726 . 8735) (#("clone()" 0 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-2-face)) 6 7 (fontified nil face (rainbow-delimiters-depth-2-face))) . 8726) (undo-tree-id52702 . -7) (undo-tree-id52703 . -7) (undo-tree-id52704 . -7) (undo-tree-id52705 . -7) (undo-tree-id52706 . -7) (undo-tree-id52707 . -7) (undo-tree-id52708 . -7) (undo-tree-id52709 . -7) (undo-tree-id52710 . -7) (undo-tree-id52711 . -7) (undo-tree-id52712 . -7) (undo-tree-id52713 . -7) (undo-tree-id52714 . -7) (undo-tree-id52715 . -7) (undo-tree-id52716 . -7) (undo-tree-id52717 . -7) (undo-tree-id52718 . -7) (undo-tree-id52719 . -7) (undo-tree-id52720 . -7) (undo-tree-id52721 . -7) (undo-tree-id52722 . -7) (undo-tree-id52723 . -7) (undo-tree-id52724 . -7) (undo-tree-id52725 . -7) (undo-tree-id52726 . -7) (undo-tree-id52727 . -7) (undo-tree-id52728 . -7) (undo-tree-id52729 . -7) (undo-tree-id52730 . -7) (undo-tree-id52731 . -7) (undo-tree-id52732 . -7) (undo-tree-id52733 . -7) (undo-tree-id52734 . -7) (undo-tree-id52735 . -7) (undo-tree-id52736 . -7) (undo-tree-id52737 . -7) (undo-tree-id52738 . -7) (undo-tree-id52739 . -7) (undo-tree-id52740 . -7) (undo-tree-id52741 . -7) (undo-tree-id52742 . -7) (undo-tree-id52743 . -7) (undo-tree-id52744 . -7) (undo-tree-id52745 . -7) (undo-tree-id52746 . -7) (undo-tree-id52747 . -7) (undo-tree-id52748 . -7) (undo-tree-id52749 . -7) (undo-tree-id52750 . -7) (undo-tree-id52751 . -7) (undo-tree-id52752 . -7) (undo-tree-id52753 . -7) (undo-tree-id52754 . -7) (undo-tree-id52755 . -7) (undo-tree-id52756 . -7) (undo-tree-id52757 . -7) (undo-tree-id52758 . -7) (undo-tree-id52759 . -7) (undo-tree-id52760 . -7) (undo-tree-id52761 . -7) (undo-tree-id52762 . -7) (undo-tree-id52763 . -7) (undo-tree-id52764 . -7) (undo-tree-id52765 . -7) (undo-tree-id52766 . -7) (undo-tree-id52767 . -7) (undo-tree-id52768 . -7) (undo-tree-id52769 . -7) (undo-tree-id52770 . -7) (undo-tree-id52771 . -7) (undo-tree-id52772 . -7) (undo-tree-id52773 . -7) (undo-tree-id52774 . -7) (undo-tree-id52775 . -7) (undo-tree-id52776 . -7) (undo-tree-id52777 . -7) (undo-tree-id52778 . -7) (undo-tree-id52779 . -7) (undo-tree-id52780 . -7) (undo-tree-id52781 . -7) (undo-tree-id52782 . -7) (undo-tree-id52783 . -7) (undo-tree-id52784 . -7) (#(";" 0 1 (fontified t)) . 8733) (undo-tree-id52785 . -1) (t 26158 595 408120 892000)) (26158 595 255212 524000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8777) (8735 . 8778) 8698) nil (26158 608 776771 600000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil)) . -8819) (8777 . 8820) 8740) nil (26158 608 776767 613000) 0 nil])
([nil nil ((#("whatever " 0 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t)) . 8744) (undo-tree-id52800 . -8) (undo-tree-id52801 . -8) (undo-tree-id52802 . -9)) nil (26158 608 776763 695000) 0 nil])
([nil nil ((8744 . 8753)) nil (26158 608 776754 797000) 0 nil])
([nil nil ((#("whatever " 0 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t)) . 8786) (undo-tree-id52789 . -8) (undo-tree-id52790 . -8) (undo-tree-id52791 . -8) (undo-tree-id52792 . -8) (undo-tree-id52793 . -8) (undo-tree-id52794 . -8) (undo-tree-id52795 . -8) (undo-tree-id52796 . -8) (undo-tree-id52797 . -8) (undo-tree-id52798 . -8) (undo-tree-id52799 . -9)) nil (26158 608 776749 863000) 0 nil])
([nil nil ((8786 . 8794) (#("w" 0 1 (fontified t)) . -8786) (undo-tree-id52786 . -1) (#("h" 0 1 (fontified t)) . -8787) (undo-tree-id52787 . -1) (#("i" 0 1 (fontified t)) . -8788) (undo-tree-id52788 . -1) 8789 (8786 . 8789)) nil (26158 608 776714 909000) 0 nil])
([nil nil ((8797 . 8798) (8796 . 8797) (8795 . 8796) (8794 . 8795) (8751 . 8752) (8750 . 8751) (8749 . 8750) (8748 . 8749) (8702 . 8706) (t 26158 608 928459 318000)) nil (26158 617 174112 950000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -8840) (undo-tree-id52898 . -1) (undo-tree-id52899 . -1) (#("h" 0 1 (fontified t)) . -8841) (undo-tree-id52900 . -1) (undo-tree-id52901 . -1) (#("a" 0 1 (fontified t)) . -8842) (undo-tree-id52902 . -1) (undo-tree-id52903 . -1) 8843 (8840 . 8843) (8836 . 8840) (t 26158 617 292673 218000)) nil (26158 665 992039 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8959 . 8960) (nil fontified nil 8845 . 8960) (8845 . 8960) 8844) nil (26158 665 992025 67000) 0 nil])
([nil nil ((8890 . 8891)) nil (26158 665 992021 924000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8845) 8850) nil (26158 665 992019 610000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 8890) (undo-tree-id52896 . -2) (undo-tree-id52897 . -3)) nil (26158 665 992016 655000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8890) (undo-tree-id52895 . -1)) nil (26158 665 992010 737000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . 8890) (undo-tree-id52893 . -3) (undo-tree-id52894 . -4)) nil (26158 665 992004 721000) 0 nil])
([nil nil ((8890 . 8898) (#("wha" 0 3 (fontified nil)) . 8890) (8890 . 8893) (#("whatever" 0 8 (fontified nil)) . -8890) (8890 . 8898) (#("wha" 0 3 (fontified t)) . -8890) (undo-tree-id52803 . -3) (undo-tree-id52804 . -3) (undo-tree-id52805 . -1) (undo-tree-id52806 . -1) (undo-tree-id52807 . -1) (undo-tree-id52808 . -1) (undo-tree-id52809 . -1) (undo-tree-id52810 . -1) (undo-tree-id52811 . -1) (undo-tree-id52812 . -1) (undo-tree-id52813 . -1) (undo-tree-id52814 . -1) (undo-tree-id52815 . -1) (undo-tree-id52816 . -1) (undo-tree-id52817 . -1) (undo-tree-id52818 . -1) (undo-tree-id52819 . -1) (undo-tree-id52820 . -1) (undo-tree-id52821 . -1) (undo-tree-id52822 . -1) (undo-tree-id52823 . -1) (undo-tree-id52824 . -1) (undo-tree-id52825 . -1) (undo-tree-id52826 . -1) (undo-tree-id52827 . -1) (undo-tree-id52828 . -1) (undo-tree-id52829 . -1) (undo-tree-id52830 . -1) (undo-tree-id52831 . -1) (undo-tree-id52832 . -1) (undo-tree-id52833 . -1) (undo-tree-id52834 . -1) (undo-tree-id52835 . -1) (undo-tree-id52836 . -1) (undo-tree-id52837 . -1) (undo-tree-id52838 . -1) (undo-tree-id52839 . -1) (undo-tree-id52840 . -1) (undo-tree-id52841 . -1) (undo-tree-id52842 . -2) (undo-tree-id52843 . -2) (undo-tree-id52844 . -2) (undo-tree-id52845 . -2) (undo-tree-id52846 . -2) (undo-tree-id52847 . -2) (undo-tree-id52848 . -2) (undo-tree-id52849 . -2) (undo-tree-id52850 . -2) (undo-tree-id52851 . -2) (undo-tree-id52852 . -2) (undo-tree-id52853 . -2) (undo-tree-id52854 . -2) (undo-tree-id52855 . -2) (undo-tree-id52856 . -2) (undo-tree-id52857 . -2) (undo-tree-id52858 . -2) (undo-tree-id52859 . -2) (undo-tree-id52860 . -2) (undo-tree-id52861 . -2) (undo-tree-id52862 . -3) (undo-tree-id52863 . -3) (undo-tree-id52864 . -3) (undo-tree-id52865 . -3) (undo-tree-id52866 . -3) (undo-tree-id52867 . -3) (undo-tree-id52868 . -3) (undo-tree-id52869 . -3) (undo-tree-id52870 . -3) (undo-tree-id52871 . -3) (undo-tree-id52872 . -3) (undo-tree-id52873 . -3) (undo-tree-id52874 . -3) (undo-tree-id52875 . -3) (undo-tree-id52876 . -3) (undo-tree-id52877 . -3) (undo-tree-id52878 . -3) (undo-tree-id52879 . -3) (undo-tree-id52880 . -3) (undo-tree-id52881 . -3) (undo-tree-id52882 . -3) (undo-tree-id52883 . -3) (undo-tree-id52884 . -3) (undo-tree-id52885 . -3) (undo-tree-id52886 . -3) (undo-tree-id52887 . -3) (undo-tree-id52888 . -3) (undo-tree-id52889 . -3) (undo-tree-id52890 . -3) (undo-tree-id52891 . -3) (undo-tree-id52892 . -3) 8893 (8892 . 8893) (8890 . 8892)) nil (26158 665 991981 494000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8957) (undo-tree-id52904 . -4) 8961 (8957 . 8961) (#("    " 0 4 (fontified nil)) . 8956) (undo-tree-id52905 . -4) (8955 . 8961) (t 26158 666 113984 776000)) nil (26158 686 760129 178000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8966 . 8967) (#("
" 0 1 (fontified nil)) . -9027) (8962 . 9028) 8958) nil (26158 686 760103 96000) 0 nil])
([nil nil ((9011 . 9012)) nil (26158 686 760091 107000) 0 nil])
([nil nil ((9055 . 9061) (9034 . 9055) (9030 . 9034) (#("    " 0 4 (fontified nil)) . 9029) (undo-tree-id52910 . -4) (9028 . 9034) (t 26158 686 902572 799000)) nil (26158 707 470489 248000) 0 nil])
([nil nil ((8681 . 8683) (#("1" 0 1 (fontified t)) . -8681) (undo-tree-id52906 . -1) (undo-tree-id52907 . -1) (#("5" 0 1 (fontified t)) . -8682) (undo-tree-id52908 . -1) (undo-tree-id52909 . -1) 8683) nil (26158 707 470474 326000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9030) (undo-tree-id52913 . -4) 9034 (9030 . 9034) (#("    " 0 4 (fontified nil)) . 9029) (undo-tree-id52914 . -4) (9028 . 9034) (t 26158 707 603173 903000)) nil (26158 769 500201 243000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9034 . 9035) (#("
" 0 1 (fontified nil)) . -9145) (9030 . 9146)) nil (26158 769 500190 103000) 0 nil])
([nil nil ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 9035) (undo-tree-id52911 . -3) (undo-tree-id52912 . -4)) nil (26158 769 500179 672000) 0 nil])
([nil nil ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 9035) (undo-tree-id52915 . -3) (undo-tree-id52916 . -1) (undo-tree-id52917 . -3) (undo-tree-id52918 . -3) (undo-tree-id52919 . -4) (t 26158 769 641056 800000)) nil (26158 782 599278 691000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . 7503) (undo-tree-id52958 . -1) (undo-tree-id52959 . -1) (undo-tree-id52960 . -1) (undo-tree-id52961 . -1) (undo-tree-id52962 . -1) (undo-tree-id52963 . -1) (undo-tree-id52964 . -1) (undo-tree-id52965 . -1) (undo-tree-id52966 . -1) (undo-tree-id52967 . -1) (undo-tree-id52968 . -1) (undo-tree-id52969 . -1) (undo-tree-id52970 . -1) (undo-tree-id52971 . -1) (undo-tree-id52972 . -1) (undo-tree-id52973 . -1) (undo-tree-id52974 . -1) (undo-tree-id52975 . -1) (undo-tree-id52976 . -1) (undo-tree-id52977 . -1) (undo-tree-id52978 . -1) (undo-tree-id52979 . -1) (undo-tree-id52980 . -1) (undo-tree-id52981 . -1) (undo-tree-id52982 . -1) (undo-tree-id52983 . -1) (undo-tree-id52984 . -1) (undo-tree-id52985 . -1) (undo-tree-id52986 . -1) (undo-tree-id52987 . -1) (undo-tree-id52988 . -1) (undo-tree-id52989 . -1) (undo-tree-id52990 . -1) (undo-tree-id52991 . -1) (undo-tree-id52992 . -1) (undo-tree-id52993 . -1) (undo-tree-id52994 . -1) (t 26158 771 393111 564000)) nil (26158 784 324979 532000) 0 nil] [nil nil ((#("()	" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 7501) (undo-tree-id52920 . -2) (undo-tree-id52921 . -3) (undo-tree-id52922 . -3) (undo-tree-id52923 . -3) (undo-tree-id52924 . -3) (undo-tree-id52925 . -3) (undo-tree-id52926 . -3) (undo-tree-id52927 . -3) (undo-tree-id52928 . -3) (undo-tree-id52929 . -3) (undo-tree-id52930 . -3) (undo-tree-id52931 . -3) (undo-tree-id52932 . -3) (undo-tree-id52933 . -3) (undo-tree-id52934 . -3) (undo-tree-id52935 . -3) (undo-tree-id52936 . -3) (undo-tree-id52937 . -3) (undo-tree-id52938 . -3) (undo-tree-id52939 . -3) (undo-tree-id52940 . -3) (undo-tree-id52941 . -3) (undo-tree-id52942 . -3) (undo-tree-id52943 . -3) (undo-tree-id52944 . -3) (undo-tree-id52945 . -3) (undo-tree-id52946 . -3) (undo-tree-id52947 . -3) (undo-tree-id52948 . -3) (undo-tree-id52949 . -3) (undo-tree-id52950 . -3) (undo-tree-id52951 . -3) (undo-tree-id52952 . -3) (undo-tree-id52953 . -3) (undo-tree-id52954 . -3) (undo-tree-id52955 . -3) (undo-tree-id52956 . -3) (undo-tree-id52957 . -3) (t 26158 771 393111 564000)) ((7501 . 7504)) (26158 782 597539 813000) 0 nil])
([nil nil ((#("    let mut new_vector: Vec<Particle> = Vec::new();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 22 (fontified t face font-lock-variable-name-face) 22 24 (fontified t) 24 27 (fontified t face font-lock-type-face) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 36 (fontified t face font-lock-type-face) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 40 (fontified t) 40 43 (fontified t face font-lock-type-face) 43 45 (fontified t) 45 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 51 (fontified t) 51 52 (fontified t)) . 7453) (undo-tree-id52995 . -51) (undo-tree-id52996 . -50) (undo-tree-id52997 . -50) (undo-tree-id52998 . -50) (undo-tree-id52999 . -50) (undo-tree-id53000 . -50) (undo-tree-id53001 . -50) (undo-tree-id53002 . -50) (undo-tree-id53003 . -50) (undo-tree-id53004 . -50) (undo-tree-id53005 . -50) (undo-tree-id53006 . -50) (undo-tree-id53007 . -50) (undo-tree-id53008 . -50) (undo-tree-id53009 . -50) (undo-tree-id53010 . -50) (undo-tree-id53011 . -50) (undo-tree-id53012 . -50) (undo-tree-id53013 . -50) (undo-tree-id53014 . -50) (undo-tree-id53015 . -50) (undo-tree-id53016 . -50) (undo-tree-id53017 . -50) (undo-tree-id53018 . -50) (undo-tree-id53019 . -50) (undo-tree-id53020 . -50) (undo-tree-id53021 . -50) (undo-tree-id53022 . -50) (undo-tree-id53023 . -50) (undo-tree-id53024 . -50) (undo-tree-id53025 . -50) (undo-tree-id53026 . -50) (undo-tree-id53027 . -50) (undo-tree-id53028 . -50) (undo-tree-id53029 . -50) (undo-tree-id53030 . -50) (undo-tree-id53031 . -50) (undo-tree-id53032 . -50) (undo-tree-id53033 . -50) (undo-tree-id53034 . -50) (undo-tree-id53035 . -50) (undo-tree-id53036 . -50) (undo-tree-id53037 . -50) (undo-tree-id53038 . -50) (undo-tree-id53039 . -50) (undo-tree-id53040 . -50) (undo-tree-id53041 . -50) (undo-tree-id53042 . -50) (undo-tree-id53043 . -50) (undo-tree-id53044 . -50) (undo-tree-id53045 . -50) (undo-tree-id53046 . -50) (undo-tree-id53047 . -50) (undo-tree-id53048 . -50) (undo-tree-id53049 . -50) (undo-tree-id53050 . -50) (undo-tree-id53051 . -50) (undo-tree-id53052 . -50) (undo-tree-id53053 . -50) (undo-tree-id53054 . -50) (undo-tree-id53055 . -50) (undo-tree-id53056 . -50) (undo-tree-id53057 . -50) (undo-tree-id53058 . -50) (undo-tree-id53059 . -50) (undo-tree-id53060 . -50) (undo-tree-id53061 . -50) (undo-tree-id53062 . -50) (undo-tree-id53063 . -50) (undo-tree-id53064 . -50) (undo-tree-id53065 . -50) (undo-tree-id53066 . -50) (undo-tree-id53067 . -50) (undo-tree-id53068 . -50) (undo-tree-id53069 . -50) (undo-tree-id53070 . -50) (undo-tree-id53071 . -50) (undo-tree-id53072 . -50) (undo-tree-id53073 . -50) (undo-tree-id53074 . -50) (undo-tree-id53075 . -50) (undo-tree-id53076 . -50) (undo-tree-id53077 . -50) (undo-tree-id53078 . -12) (undo-tree-id53079 . -22) (undo-tree-id53080 . -12) (undo-tree-id53081 . -22) (undo-tree-id53082 . -8) (undo-tree-id53083 . -22) (undo-tree-id53084 . -8) (undo-tree-id53085 . -12) (undo-tree-id53086 . -50) (undo-tree-id53087 . -50) (undo-tree-id53088 . -50) (undo-tree-id53089 . -50) (undo-tree-id53090 . -50) (undo-tree-id53091 . -50) (undo-tree-id53092 . -50) (undo-tree-id53093 . -50) (undo-tree-id53094 . -50) (undo-tree-id53095 . -50) (undo-tree-id53096 . -50) (undo-tree-id53097 . -50) (undo-tree-id53098 . -50) (undo-tree-id53099 . -50) (undo-tree-id53100 . -50) (undo-tree-id53101 . -50) (undo-tree-id53102 . -50) (undo-tree-id53103 . -50) (undo-tree-id53104 . -50) (undo-tree-id53105 . -50) (undo-tree-id53106 . -50) (undo-tree-id53107 . -50) (undo-tree-id53108 . -50) (undo-tree-id53109 . -50) (undo-tree-id53110 . -50) (undo-tree-id53111 . -50) (undo-tree-id53112 . -50) (undo-tree-id53113 . -50) (undo-tree-id53114 . -50) (undo-tree-id53115 . -50) (undo-tree-id53116 . -50) (undo-tree-id53117 . -50) (undo-tree-id53118 . -50) (undo-tree-id53119 . -50) (undo-tree-id53120 . -50) (undo-tree-id53121 . -50) (undo-tree-id53122 . -50) (undo-tree-id53123 . -50) (undo-tree-id53124 . -50) (undo-tree-id53125 . -50) (undo-tree-id53126 . -50) (undo-tree-id53127 . -50) (undo-tree-id53128 . -50) (undo-tree-id53129 . -50) (undo-tree-id53130 . -50) (undo-tree-id53131 . -50) (undo-tree-id53132 . -52) 7503 (t 26158 784 441521 887000)) nil (26158 786 590514 382000) 0 nil])
nil
([nil nil ((#("    robotscan.to_pbm().write_as_binary(\"another.pbm\").unwrap();
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 14 (fontified t) 14 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 52 (fontified t face font-lock-string-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t) 54 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-2-face)) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 63 (fontified t) 63 64 (fontified t)) . 7516) (undo-tree-id53133 . -63) (t 26158 786 709593 645000)) nil (26158 807 795681 105000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -9085) (9021 . 9086)) nil (26158 807 795652 367000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9086) (undo-tree-id53134 . -4) (undo-tree-id53135 . -4) (undo-tree-id53136 . -4) (undo-tree-id53137 . -4) (undo-tree-id53138 . -4) (undo-tree-id53139 . -4) (undo-tree-id53140 . -4) (undo-tree-id53141 . -4) (undo-tree-id53142 . -4) (undo-tree-id53143 . -4) (undo-tree-id53144 . -4) (undo-tree-id53145 . -4) (undo-tree-id53146 . -4) 9090 (9085 . 9090) (t 26158 807 938271 265000)) nil (26158 811 264005 70000) 0 nil])
([nil nil ((9022 . 9026) (#("    " 0 4 (fontified nil)) . 9021) (undo-tree-id53311 . -4) (undo-tree-id53312 . -4) (undo-tree-id53313 . -4) (undo-tree-id53314 . -4) (undo-tree-id53315 . -4) (undo-tree-id53316 . -4) (undo-tree-id53317 . -4) (undo-tree-id53318 . -4) (undo-tree-id53319 . -4) (undo-tree-id53320 . -4) (undo-tree-id53321 . -4) (undo-tree-id53322 . -4) (9025 . 9026) (9021 . 9025) (t 26158 811 406382 959000)) nil (26158 820 224726 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 9036 9055 #s(yas--snippet nil (#s(yas--field 1 9053 9054 nil nil nil t #s(yas--exit 9055 nil))) #s(yas--exit 9055 nil) 252 nil #s(yas--field 1 9053 9054 nil nil nil t #s(yas--exit 9055 nil)) nil nil)) (#("m" 0 1 (fontified nil)) . 9054) (undo-tree-id53147 . -1) (9053 . 9054) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9053 9054 nil nil nil t #s(yas--exit 9055 nil))) #s(yas--exit 9055 nil) 252 nil #s(yas--field 1 9053 9054 nil nil nil t #s(yas--exit 9055 nil)) nil nil)) (9036 . 9055) (#("separate_and_set(${1:m})$0" 0 26 (fontified nil)) . 9036) (9036 . 9062) (#("s" 0 1 (fontified nil)) . 9036) (9036 . 9037) (#("separate_and_set(…)" 0 19 (fontified nil)) . -9036) (9036 . 9055) (#("s" 0 1 (fontified t)) . -9036) (undo-tree-id53148 . -1) (undo-tree-id53149 . -1) (undo-tree-id53150 . -1) (undo-tree-id53151 . -1) (undo-tree-id53152 . -1) (undo-tree-id53153 . -1) (undo-tree-id53154 . -1) (undo-tree-id53155 . -1) (undo-tree-id53156 . -1) (undo-tree-id53157 . -1) (undo-tree-id53158 . -1) (undo-tree-id53159 . -1) (undo-tree-id53160 . -1) (undo-tree-id53161 . -1) (undo-tree-id53162 . -1) (undo-tree-id53163 . -1) (undo-tree-id53164 . -1) (undo-tree-id53165 . -1) (undo-tree-id53166 . -1) (undo-tree-id53167 . -1) (undo-tree-id53168 . -1) (undo-tree-id53169 . -1) (undo-tree-id53170 . -1) (undo-tree-id53171 . -1) (undo-tree-id53172 . -1) (undo-tree-id53173 . -1) (undo-tree-id53174 . -1) (undo-tree-id53175 . -1) (undo-tree-id53176 . -1) (undo-tree-id53177 . -1) (undo-tree-id53178 . -1) (undo-tree-id53179 . -1) (undo-tree-id53180 . -1) (undo-tree-id53181 . -1) (undo-tree-id53182 . -1) (undo-tree-id53183 . -1) (undo-tree-id53184 . -1) (undo-tree-id53185 . -1) (undo-tree-id53186 . -1) (undo-tree-id53187 . -1) (undo-tree-id53188 . -1) (undo-tree-id53189 . -1) (undo-tree-id53190 . -1) (undo-tree-id53191 . -1) (undo-tree-id53192 . -1) (undo-tree-id53193 . -1) (undo-tree-id53194 . -1) (undo-tree-id53195 . -1) (undo-tree-id53196 . -1) (undo-tree-id53197 . -1) (undo-tree-id53198 . -1) (undo-tree-id53199 . -1) (undo-tree-id53200 . -1) (undo-tree-id53201 . -1) (undo-tree-id53202 . -1) (undo-tree-id53203 . -1) (undo-tree-id53204 . -1) (undo-tree-id53205 . -1) (undo-tree-id53206 . -1) (undo-tree-id53207 . -1) (undo-tree-id53208 . -1) (undo-tree-id53209 . -1) (undo-tree-id53210 . -1) (undo-tree-id53211 . -1) (undo-tree-id53212 . -1) (undo-tree-id53213 . -1) (undo-tree-id53214 . -1) 9037 (9036 . 9037) (9035 . 9036) (9026 . 9035) (#("ro" 0 2 (fontified nil)) . 9026) (9026 . 9028) (#("robotscan" 0 9 (fontified nil)) . -9026) (9026 . 9035) (#("ro" 0 2 (fontified t)) . -9026) (undo-tree-id53215 . -2) (undo-tree-id53216 . -2) (undo-tree-id53217 . -2) (undo-tree-id53218 . -2) (undo-tree-id53219 . -2) (undo-tree-id53220 . -2) (undo-tree-id53221 . -2) (undo-tree-id53222 . -2) (undo-tree-id53223 . -2) (undo-tree-id53224 . -2) (undo-tree-id53225 . -2) (undo-tree-id53226 . -2) (undo-tree-id53227 . -2) (undo-tree-id53228 . -2) (undo-tree-id53229 . -2) (undo-tree-id53230 . -2) (undo-tree-id53231 . -2) (undo-tree-id53232 . -2) (undo-tree-id53233 . -2) (undo-tree-id53234 . -2) (undo-tree-id53235 . -2) (undo-tree-id53236 . -2) (undo-tree-id53237 . -2) (undo-tree-id53238 . -2) (undo-tree-id53239 . -2) (undo-tree-id53240 . -2) (undo-tree-id53241 . -2) (undo-tree-id53242 . -2) (undo-tree-id53243 . -2) (undo-tree-id53244 . -2) (undo-tree-id53245 . -2) (undo-tree-id53246 . -2) (undo-tree-id53247 . -2) (undo-tree-id53248 . -2) (undo-tree-id53249 . -2) (undo-tree-id53250 . -2) (undo-tree-id53251 . -2) (undo-tree-id53252 . -2) (undo-tree-id53253 . -2) (undo-tree-id53254 . -2) (undo-tree-id53255 . -2) (undo-tree-id53256 . -2) (undo-tree-id53257 . -2) (undo-tree-id53258 . -2) (undo-tree-id53259 . -2) (undo-tree-id53260 . -2) (undo-tree-id53261 . -2) (undo-tree-id53262 . -2) (undo-tree-id53263 . -2) (undo-tree-id53264 . -2) (undo-tree-id53265 . -2) (undo-tree-id53266 . -2) (undo-tree-id53267 . -2) (undo-tree-id53268 . -2) (undo-tree-id53269 . -2) (undo-tree-id53270 . -2) (undo-tree-id53271 . -2) (undo-tree-id53272 . -2) (undo-tree-id53273 . -2) (undo-tree-id53274 . -2) (undo-tree-id53275 . -2) (undo-tree-id53276 . -2) (undo-tree-id53277 . -2) (undo-tree-id53278 . -2) (undo-tree-id53279 . -2) (undo-tree-id53280 . -2) (undo-tree-id53281 . -2) (undo-tree-id53282 . -2) (undo-tree-id53283 . -2) (undo-tree-id53284 . -2) (undo-tree-id53285 . -2) (undo-tree-id53286 . -2) (undo-tree-id53287 . -2) (undo-tree-id53288 . -2) (undo-tree-id53289 . -2) (undo-tree-id53290 . -2) (undo-tree-id53291 . -2) (undo-tree-id53292 . -2) (undo-tree-id53293 . -2) (undo-tree-id53294 . -2) (undo-tree-id53295 . -2) (undo-tree-id53296 . -2) (undo-tree-id53297 . -2) (undo-tree-id53298 . -2) (undo-tree-id53299 . -2) (undo-tree-id53300 . -2) (undo-tree-id53301 . -2) (undo-tree-id53302 . -2) (undo-tree-id53303 . -2) (undo-tree-id53304 . -2) (undo-tree-id53305 . -2) (undo-tree-id53306 . -2) (undo-tree-id53307 . -2) (undo-tree-id53308 . -2) (undo-tree-id53309 . -2) (undo-tree-id53310 . -2) 9028 (9026 . 9028)) nil (26158 820 224678 735000) 0 nil])
([nil nil ((9055 . 9056)) nil (26158 820 223811 739000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9057) (undo-tree-id53323 . -4) (undo-tree-id53324 . -4) (undo-tree-id53325 . -4) (undo-tree-id53326 . -4) (undo-tree-id53327 . -4) (undo-tree-id53328 . -4) (undo-tree-id53329 . -4) (undo-tree-id53330 . -4) (undo-tree-id53331 . -4) (undo-tree-id53332 . -4) (undo-tree-id53333 . -4) (undo-tree-id53334 . -4) (undo-tree-id53335 . -4) 9061 (9056 . 9061) (t 26158 820 370672 884000)) nil (26158 822 393291 647000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9157) (undo-tree-id53586 . -4) 9161 (9157 . 9161) (#("    " 0 4 (fontified nil)) . 9156) (undo-tree-id53587 . -4) (9156 . 9161) (#("    " 0 4 (fontified nil)) . 9155) (undo-tree-id53588 . -4) (9159 . 9160) (t 26158 822 514742 487000)) nil (26158 910 724855 549000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9497 . 9498) (nil fontified nil 9156 . 9498) (9156 . 9498)) nil (26158 910 724845 674000) 0 nil])
([nil nil ((9358 . 9359)) nil (26158 910 724843 135000) 0 nil])
([nil nil ((9497 . 9501)) nil (26158 910 724841 242000) 0 nil])
([nil nil ((9502 . 9506)) nil (26158 910 724839 463000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9693 . 9694) (nil fontified nil 9507 . 9694) (9507 . 9694)) nil (26158 910 724837 173000) 0 nil])
([nil nil ((#("another" 0 7 (fontified t)) . 9552) (undo-tree-id53585 . -6)) nil (26158 910 724834 43000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 9552)) nil (26158 910 724830 384000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 9552) (undo-tree-id53584 . -2)) nil (26158 910 724827 459000) 0 nil])
([nil nil ((9552 . 9560) (#("an" 0 2 (fontified nil)) . 9552) (9552 . 9554) (#("anywhere" 0 8 (fontified nil)) . -9552) (9552 . 9560) (#("an" 0 2 (fontified t)) . -9552) (undo-tree-id53437 . -2) (undo-tree-id53438 . -2) (undo-tree-id53439 . -1) (undo-tree-id53440 . -1) (undo-tree-id53441 . -1) (undo-tree-id53442 . -1) (undo-tree-id53443 . -1) (undo-tree-id53444 . -1) (undo-tree-id53445 . -1) (undo-tree-id53446 . -1) (undo-tree-id53447 . -1) (undo-tree-id53448 . -1) (undo-tree-id53449 . -1) (undo-tree-id53450 . -1) (undo-tree-id53451 . -1) (undo-tree-id53452 . -1) (undo-tree-id53453 . -1) (undo-tree-id53454 . -1) (undo-tree-id53455 . -1) (undo-tree-id53456 . -1) (undo-tree-id53457 . -1) (undo-tree-id53458 . -1) (undo-tree-id53459 . -1) (undo-tree-id53460 . -1) (undo-tree-id53461 . -1) (undo-tree-id53462 . -1) (undo-tree-id53463 . -1) (undo-tree-id53464 . -1) (undo-tree-id53465 . -1) (undo-tree-id53466 . -1) (undo-tree-id53467 . -1) (undo-tree-id53468 . -1) (undo-tree-id53469 . -1) (undo-tree-id53470 . -1) (undo-tree-id53471 . -1) (undo-tree-id53472 . -1) (undo-tree-id53473 . -1) (undo-tree-id53474 . -1) (undo-tree-id53475 . -1) (undo-tree-id53476 . -1) (undo-tree-id53477 . -1) (undo-tree-id53478 . -1) (undo-tree-id53479 . -1) (undo-tree-id53480 . -1) (undo-tree-id53481 . -1) (undo-tree-id53482 . -1) (undo-tree-id53483 . -1) (undo-tree-id53484 . -1) (undo-tree-id53485 . -1) (undo-tree-id53486 . -1) (undo-tree-id53487 . -1) (undo-tree-id53488 . -1) (undo-tree-id53489 . -1) (undo-tree-id53490 . -1) (undo-tree-id53491 . -1) (undo-tree-id53492 . -1) (undo-tree-id53493 . -1) (undo-tree-id53494 . -1) (undo-tree-id53495 . -1) (undo-tree-id53496 . -1) (undo-tree-id53497 . -1) (undo-tree-id53498 . -2) (undo-tree-id53499 . -2) (undo-tree-id53500 . -2) (undo-tree-id53501 . -2) (undo-tree-id53502 . -2) (undo-tree-id53503 . -2) (undo-tree-id53504 . -2) (undo-tree-id53505 . -2) (undo-tree-id53506 . -2) (undo-tree-id53507 . -2) (undo-tree-id53508 . -2) (undo-tree-id53509 . -2) (undo-tree-id53510 . -2) (undo-tree-id53511 . -2) (undo-tree-id53512 . -2) (undo-tree-id53513 . -2) (undo-tree-id53514 . -2) (undo-tree-id53515 . -2) (undo-tree-id53516 . -2) (undo-tree-id53517 . -2) (undo-tree-id53518 . -2) (undo-tree-id53519 . -2) (undo-tree-id53520 . -2) (undo-tree-id53521 . -2) (undo-tree-id53522 . -2) (undo-tree-id53523 . -2) (undo-tree-id53524 . -2) (undo-tree-id53525 . -2) (undo-tree-id53526 . -2) (undo-tree-id53527 . -2) (undo-tree-id53528 . -2) (undo-tree-id53529 . -2) (undo-tree-id53530 . -2) (undo-tree-id53531 . -2) (undo-tree-id53532 . -2) (undo-tree-id53533 . -2) (undo-tree-id53534 . -2) (undo-tree-id53535 . -2) (undo-tree-id53536 . -2) (undo-tree-id53537 . -2) (undo-tree-id53538 . -2) (undo-tree-id53539 . -2) (undo-tree-id53540 . -2) (undo-tree-id53541 . -2) (undo-tree-id53542 . -2) (undo-tree-id53543 . -2) (undo-tree-id53544 . -2) (undo-tree-id53545 . -2) (undo-tree-id53546 . -2) (undo-tree-id53547 . -2) (undo-tree-id53548 . -2) (undo-tree-id53549 . -2) (undo-tree-id53550 . -2) (undo-tree-id53551 . -2) (undo-tree-id53552 . -2) (undo-tree-id53553 . -2) (undo-tree-id53554 . -2) (undo-tree-id53555 . -2) (undo-tree-id53556 . -2) (undo-tree-id53557 . -2) (undo-tree-id53558 . -2) (undo-tree-id53559 . -2) (undo-tree-id53560 . -2) (undo-tree-id53561 . -2) (undo-tree-id53562 . -2) (undo-tree-id53563 . -2) (undo-tree-id53564 . -2) (undo-tree-id53565 . -2) (undo-tree-id53566 . -2) (undo-tree-id53567 . -2) (undo-tree-id53568 . -2) (undo-tree-id53569 . -2) (undo-tree-id53570 . -2) (undo-tree-id53571 . -2) (undo-tree-id53572 . -2) (undo-tree-id53573 . -2) (undo-tree-id53574 . -2) (undo-tree-id53575 . -2) (undo-tree-id53576 . -2) (undo-tree-id53577 . -2) (undo-tree-id53578 . -2) (undo-tree-id53579 . -2) (undo-tree-id53580 . -2) (undo-tree-id53581 . -2) (undo-tree-id53582 . -2) (undo-tree-id53583 . -2) 9554 (9553 . 9554) (9552 . 9553)) nil (26158 910 724808 578000) 0 nil])
([nil nil ((#("another" 0 7 (fontified t)) . 9620) (undo-tree-id53435 . -6) (undo-tree-id53436 . -7)) nil (26158 910 724187 282000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 9620) (undo-tree-id53434 . -1)) nil (26158 910 724181 210000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 9620) (undo-tree-id53432 . -2) (undo-tree-id53433 . -3)) nil (26158 910 724175 84000) 0 nil])
([nil nil ((9620 . 9628) (#("an" 0 2 (fontified nil)) . 9620) (9620 . 9622) (#("anywhere" 0 8 (fontified nil)) . -9620) (9620 . 9628) (#("an" 0 2 (fontified t)) . -9620) (undo-tree-id53336 . -2) (undo-tree-id53337 . -2) (undo-tree-id53338 . -2) (undo-tree-id53339 . -2) (undo-tree-id53340 . -2) (undo-tree-id53341 . -2) (undo-tree-id53342 . -2) (undo-tree-id53343 . -2) (undo-tree-id53344 . -2) (undo-tree-id53345 . -2) (undo-tree-id53346 . -2) (undo-tree-id53347 . -2) (undo-tree-id53348 . -2) (undo-tree-id53349 . -2) (undo-tree-id53350 . -2) (undo-tree-id53351 . -2) (undo-tree-id53352 . -2) (undo-tree-id53353 . -2) (undo-tree-id53354 . -2) (undo-tree-id53355 . -2) (undo-tree-id53356 . -2) (undo-tree-id53357 . -2) (undo-tree-id53358 . -2) (undo-tree-id53359 . -2) (undo-tree-id53360 . -2) (undo-tree-id53361 . -2) (undo-tree-id53362 . -2) (undo-tree-id53363 . -2) (undo-tree-id53364 . -2) (undo-tree-id53365 . -2) (undo-tree-id53366 . -2) (undo-tree-id53367 . -2) (undo-tree-id53368 . -2) (undo-tree-id53369 . -2) (undo-tree-id53370 . -2) (undo-tree-id53371 . -2) (undo-tree-id53372 . -2) (undo-tree-id53373 . -2) (undo-tree-id53374 . -2) (undo-tree-id53375 . -2) (undo-tree-id53376 . -2) (undo-tree-id53377 . -2) (undo-tree-id53378 . -2) (undo-tree-id53379 . -2) (undo-tree-id53380 . -2) (undo-tree-id53381 . -2) (undo-tree-id53382 . -2) (undo-tree-id53383 . -2) (undo-tree-id53384 . -2) (undo-tree-id53385 . -2) (undo-tree-id53386 . -2) (undo-tree-id53387 . -2) (undo-tree-id53388 . -2) (undo-tree-id53389 . -2) (undo-tree-id53390 . -2) (undo-tree-id53391 . -2) (undo-tree-id53392 . -2) (undo-tree-id53393 . -2) (undo-tree-id53394 . -2) (undo-tree-id53395 . -2) (undo-tree-id53396 . -2) (undo-tree-id53397 . -2) (undo-tree-id53398 . -2) (undo-tree-id53399 . -2) (undo-tree-id53400 . -2) (undo-tree-id53401 . -2) (undo-tree-id53402 . -2) (undo-tree-id53403 . -2) (undo-tree-id53404 . -2) (undo-tree-id53405 . -2) (undo-tree-id53406 . -2) (undo-tree-id53407 . -2) (undo-tree-id53408 . -2) (undo-tree-id53409 . -2) (undo-tree-id53410 . -2) (undo-tree-id53411 . -2) (undo-tree-id53412 . -2) (undo-tree-id53413 . -2) (undo-tree-id53414 . -2) (undo-tree-id53415 . -2) (undo-tree-id53416 . -2) (undo-tree-id53417 . -2) (undo-tree-id53418 . -2) (undo-tree-id53419 . -2) (undo-tree-id53420 . -2) (undo-tree-id53421 . -2) (undo-tree-id53422 . -2) (undo-tree-id53423 . -2) (undo-tree-id53424 . -2) (undo-tree-id53425 . -2) (undo-tree-id53426 . -2) (undo-tree-id53427 . -2) (undo-tree-id53428 . -2) (undo-tree-id53429 . -2) (undo-tree-id53430 . -2) (undo-tree-id53431 . -2) 9622 (9620 . 9622)) nil (26158 910 724136 591000) 0 nil])
([nil nil ((#("another" 0 7 (fontified t face font-lock-string-face)) . 9655) (undo-tree-id53592 . -6) (undo-tree-id53593 . -7) (t 26158 910 869687 103000)) nil (26158 1008 152477 245000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 9655) (undo-tree-id53591 . -1)) nil (26158 1008 152469 977000) 0 nil])
([nil nil ((#("datalol" 0 7 (fontified t face font-lock-string-face)) . 9655) (undo-tree-id53589 . -6) (undo-tree-id53590 . -7)) nil (26158 1008 152463 440000) 0 nil])
([nil nil ((9655 . 9663)) nil (26158 1008 152438 672000) 0 nil])
([nil nil ((9663 . 9671)) nil (26158 1008 152426 607000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -8294) (undo-tree-id54052 . -4) 8298 (8294 . 8298) (#("    " 0 4 (fontified nil)) . 8293) (undo-tree-id54053 . -4) (undo-tree-id54054 . -4) (8293 . 8298) (#("    " 0 4 (fontified nil)) . 8292) (8292 . 8296) (8292 . 8293) (t 26158 1008 297070 432000)) nil (26158 1034 416221 105000) 0 nil])
([nil nil ((apply yas--snippet-revive 8297 8307 #s(yas--snippet nil nil #s(yas--exit 8306 nil) 253 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8306 nil) 253 nil nil nil nil)) (8297 . 8307) (#("println!($0)" 0 12 (fontified nil)) . 8297) (8297 . 8309) (#("pr" 0 2 (fontified nil)) . 8297) (8297 . 8299) (#("println!(…)" 0 11 (fontified nil)) . -8297) (8297 . 8308) (#("pr" 0 2 (fontified t)) . -8297) (undo-tree-id53926 . -2) (undo-tree-id53927 . -2) (undo-tree-id53928 . -2) (undo-tree-id53929 . -1) (undo-tree-id53930 . -1) (undo-tree-id53931 . -1) (undo-tree-id53932 . -1) (undo-tree-id53933 . -1) (undo-tree-id53934 . -1) (undo-tree-id53935 . -1) (undo-tree-id53936 . -1) (undo-tree-id53937 . -1) (undo-tree-id53938 . -1) (undo-tree-id53939 . -1) (undo-tree-id53940 . -1) (undo-tree-id53941 . -1) (undo-tree-id53942 . -1) (undo-tree-id53943 . -1) (undo-tree-id53944 . -1) (undo-tree-id53945 . -1) (undo-tree-id53946 . -1) (undo-tree-id53947 . -1) (undo-tree-id53948 . -1) (undo-tree-id53949 . -1) (undo-tree-id53950 . -1) (undo-tree-id53951 . -1) (undo-tree-id53952 . -1) (undo-tree-id53953 . -1) (undo-tree-id53954 . -1) (undo-tree-id53955 . -1) (undo-tree-id53956 . -1) (undo-tree-id53957 . -1) (undo-tree-id53958 . -1) (undo-tree-id53959 . -1) (undo-tree-id53960 . -1) (undo-tree-id53961 . -1) (undo-tree-id53962 . -1) (undo-tree-id53963 . -1) (undo-tree-id53964 . -1) (undo-tree-id53965 . -1) (undo-tree-id53966 . -1) (undo-tree-id53967 . -1) (undo-tree-id53968 . -1) (undo-tree-id53969 . -1) (undo-tree-id53970 . -1) (undo-tree-id53971 . -1) (undo-tree-id53972 . -1) (undo-tree-id53973 . -1) (undo-tree-id53974 . -1) (undo-tree-id53975 . -1) (undo-tree-id53976 . -1) (undo-tree-id53977 . -2) (undo-tree-id53978 . -2) (undo-tree-id53979 . -2) (undo-tree-id53980 . -2) (undo-tree-id53981 . -2) (undo-tree-id53982 . -2) (undo-tree-id53983 . -2) (undo-tree-id53984 . -2) (undo-tree-id53985 . -2) (undo-tree-id53986 . -2) (undo-tree-id53987 . -2) (undo-tree-id53988 . -2) (undo-tree-id53989 . -2) (undo-tree-id53990 . -2) (undo-tree-id53991 . -2) (undo-tree-id53992 . -2) (undo-tree-id53993 . -2) (undo-tree-id53994 . -2) (undo-tree-id53995 . -2) (undo-tree-id53996 . -2) (undo-tree-id53997 . -2) (undo-tree-id53998 . -2) (undo-tree-id53999 . -2) (undo-tree-id54000 . -2) (undo-tree-id54001 . -2) (undo-tree-id54002 . -2) (undo-tree-id54003 . -2) (undo-tree-id54004 . -2) (undo-tree-id54005 . -2) (undo-tree-id54006 . -2) (undo-tree-id54007 . -2) (undo-tree-id54008 . -2) (undo-tree-id54009 . -2) (undo-tree-id54010 . -2) (undo-tree-id54011 . -2) (undo-tree-id54012 . -2) (undo-tree-id54013 . -2) (undo-tree-id54014 . -2) (undo-tree-id54015 . -2) (undo-tree-id54016 . -2) (undo-tree-id54017 . -2) (undo-tree-id54018 . -2) (undo-tree-id54019 . -2) (undo-tree-id54020 . -2) (undo-tree-id54021 . -2) (undo-tree-id54022 . -2) (undo-tree-id54023 . -2) (undo-tree-id54024 . -2) (undo-tree-id54025 . -2) (undo-tree-id54026 . -2) (undo-tree-id54027 . -2) (undo-tree-id54028 . -2) (undo-tree-id54029 . -2) (undo-tree-id54030 . -2) (undo-tree-id54031 . -2) (undo-tree-id54032 . -2) (undo-tree-id54033 . -2) (undo-tree-id54034 . -2) (undo-tree-id54035 . -2) (undo-tree-id54036 . -2) (undo-tree-id54037 . -2) (undo-tree-id54038 . -2) (undo-tree-id54039 . -2) (undo-tree-id54040 . -2) (undo-tree-id54041 . -2) (undo-tree-id54042 . -2) (undo-tree-id54043 . -2) (undo-tree-id54044 . -2) (undo-tree-id54045 . -2) (undo-tree-id54046 . -2) (undo-tree-id54047 . -2) (undo-tree-id54048 . -2) (undo-tree-id54049 . -2) (undo-tree-id54050 . -2) (undo-tree-id54051 . -2) 8299 (8297 . 8299) (8293 . 8297)) nil (26158 1034 416196 600000) 0 nil])
([nil nil ((#("    println!()
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 15 (fontified t)) . 8293) (undo-tree-id53685 . -14) (undo-tree-id53686 . 2) (undo-tree-id53687 . -4) (undo-tree-id53688 . -13) (undo-tree-id53689 . -12) (undo-tree-id53690 . 1) (undo-tree-id53691 . -15) (undo-tree-id53692 . -15) (undo-tree-id53693 . -15) (undo-tree-id53694 . -15) (undo-tree-id53695 . -15) (undo-tree-id53696 . -15) (undo-tree-id53697 . -15) (undo-tree-id53698 . -15) (undo-tree-id53699 . -15) (undo-tree-id53700 . -15) (undo-tree-id53701 . -15) (undo-tree-id53702 . -4) (undo-tree-id53703 . -4) (undo-tree-id53704 . -4) (undo-tree-id53705 . -4) (undo-tree-id53706 . -4) (undo-tree-id53707 . -4) (undo-tree-id53708 . -4) (undo-tree-id53709 . -4) (undo-tree-id53710 . -4) (undo-tree-id53711 . -4) (undo-tree-id53712 . -4) (undo-tree-id53713 . -4) (undo-tree-id53714 . -4) (undo-tree-id53715 . -4) (undo-tree-id53716 . -4) (undo-tree-id53717 . -4) (undo-tree-id53718 . -4) (undo-tree-id53719 . -4) (undo-tree-id53720 . -4) (undo-tree-id53721 . -4) (undo-tree-id53722 . -4) (undo-tree-id53723 . -4) (undo-tree-id53724 . -4) (undo-tree-id53725 . -4) (undo-tree-id53726 . -4) (undo-tree-id53727 . -4) (undo-tree-id53728 . -4) (undo-tree-id53729 . -4) (undo-tree-id53730 . -4) (undo-tree-id53731 . -4) (undo-tree-id53732 . -4) (undo-tree-id53733 . -4) (undo-tree-id53734 . -4) (undo-tree-id53735 . -4) (undo-tree-id53736 . -4) (undo-tree-id53737 . -4) (undo-tree-id53738 . -4) (undo-tree-id53739 . -4) (undo-tree-id53740 . -4) (undo-tree-id53741 . -4) (undo-tree-id53742 . -4) (undo-tree-id53743 . -4) (undo-tree-id53744 . -4) (undo-tree-id53745 . -4) (undo-tree-id53746 . -4) (undo-tree-id53747 . -4) (undo-tree-id53748 . -4) (undo-tree-id53749 . -4) (undo-tree-id53750 . -4) (undo-tree-id53751 . -4) (undo-tree-id53752 . -4) (undo-tree-id53753 . -4) (undo-tree-id53754 . -4) (undo-tree-id53755 . -4) (undo-tree-id53756 . -4) (undo-tree-id53757 . -4) (undo-tree-id53758 . -4) (undo-tree-id53759 . -4) (undo-tree-id53760 . -4) (undo-tree-id53761 . -4) (undo-tree-id53762 . -4) (undo-tree-id53763 . -4) (undo-tree-id53764 . -4) (undo-tree-id53765 . -4) (undo-tree-id53766 . -4) (undo-tree-id53767 . -4) (undo-tree-id53768 . -4) (undo-tree-id53769 . -4) (undo-tree-id53770 . -4) (undo-tree-id53771 . -4) (undo-tree-id53772 . -4) (undo-tree-id53773 . -4) (undo-tree-id53774 . -4) (undo-tree-id53775 . -4) (undo-tree-id53776 . -4) (undo-tree-id53777 . -4) (undo-tree-id53778 . -4) (undo-tree-id53779 . -4) (undo-tree-id53780 . -4) (undo-tree-id53781 . -4) (undo-tree-id53782 . -4) (undo-tree-id53783 . -4) (undo-tree-id53784 . -4) (undo-tree-id53785 . -4) (undo-tree-id53786 . -4) (undo-tree-id53787 . -4) (undo-tree-id53788 . -4) (undo-tree-id53789 . -4) (undo-tree-id53790 . -4) (undo-tree-id53791 . -4) (undo-tree-id53792 . -4) (undo-tree-id53793 . -4) (undo-tree-id53794 . -4) (undo-tree-id53795 . -4) (undo-tree-id53796 . -4) (undo-tree-id53797 . -4) (undo-tree-id53798 . -4) (undo-tree-id53799 . -4) (undo-tree-id53800 . -4) (undo-tree-id53801 . -4) (undo-tree-id53802 . -4) (undo-tree-id53803 . -4) (undo-tree-id53804 . -4) (undo-tree-id53805 . -4) (undo-tree-id53806 . -4) (undo-tree-id53807 . -4) (undo-tree-id53808 . -4) (undo-tree-id53809 . -4) (undo-tree-id53810 . -4) (undo-tree-id53811 . -4) (undo-tree-id53812 . -4) (undo-tree-id53813 . -4) (undo-tree-id53814 . -4) (undo-tree-id53815 . -4) (undo-tree-id53816 . -4) (undo-tree-id53817 . -4) (undo-tree-id53818 . -4) (undo-tree-id53819 . -4) (undo-tree-id53820 . -4) (undo-tree-id53821 . -4) (undo-tree-id53822 . -4) (undo-tree-id53823 . -4) (undo-tree-id53824 . -4) (undo-tree-id53825 . -4) (undo-tree-id53826 . -4) (undo-tree-id53827 . -4) (undo-tree-id53828 . -4) (undo-tree-id53829 . -4) (undo-tree-id53830 . -4) (undo-tree-id53831 . -4) (undo-tree-id53832 . -4) (undo-tree-id53833 . -13) (undo-tree-id53834 . -13) (undo-tree-id53835 . -13) (undo-tree-id53836 . -13) (undo-tree-id53837 . -13) (undo-tree-id53838 . -13) (undo-tree-id53839 . -13) (undo-tree-id53840 . -13) (undo-tree-id53841 . -13) (undo-tree-id53842 . -13) (undo-tree-id53843 . -13) (undo-tree-id53844 . -13) (undo-tree-id53845 . -13) (undo-tree-id53846 . -13) (undo-tree-id53847 . -13) (undo-tree-id53848 . -13) (undo-tree-id53849 . -13) (undo-tree-id53850 . -13) (undo-tree-id53851 . -13) (undo-tree-id53852 . -13) (undo-tree-id53853 . -13) (undo-tree-id53854 . -13) (undo-tree-id53855 . -14) (undo-tree-id53856 . -15) (undo-tree-id53857 . -13) (undo-tree-id53858 . -13) (undo-tree-id53859 . -13) (undo-tree-id53860 . -13) (undo-tree-id53861 . -13) (undo-tree-id53862 . -13) (undo-tree-id53863 . -13) (undo-tree-id53864 . -13) (undo-tree-id53865 . -13) (undo-tree-id53866 . -13) (undo-tree-id53867 . -13) (undo-tree-id53868 . -13) (undo-tree-id53869 . -13) (undo-tree-id53870 . -13) (undo-tree-id53871 . -13) (undo-tree-id53872 . -13) (undo-tree-id53873 . -13) (undo-tree-id53874 . -13) (undo-tree-id53875 . -13) (undo-tree-id53876 . -13) (undo-tree-id53877 . -13) (undo-tree-id53878 . -13) (undo-tree-id53879 . -13) (undo-tree-id53880 . -13) (undo-tree-id53881 . -13) (undo-tree-id53882 . -13) (undo-tree-id53883 . -13) (undo-tree-id53884 . -13) (undo-tree-id53885 . -13) (undo-tree-id53886 . -13) (undo-tree-id53887 . -13) (undo-tree-id53888 . -13) (undo-tree-id53889 . -13) (undo-tree-id53890 . -13) (undo-tree-id53891 . -13) (undo-tree-id53892 . -13) (undo-tree-id53893 . -13) (undo-tree-id53894 . -13) (undo-tree-id53895 . -13) (undo-tree-id53896 . -13) (undo-tree-id53897 . -13) (undo-tree-id53898 . -13) (undo-tree-id53899 . -13) (undo-tree-id53900 . -13) (undo-tree-id53901 . -13) (undo-tree-id53902 . -12) (undo-tree-id53903 . -12) (undo-tree-id53904 . -12) (undo-tree-id53905 . -12) (undo-tree-id53906 . -12) (undo-tree-id53907 . -12) (undo-tree-id53908 . -12) (undo-tree-id53909 . -12) (undo-tree-id53910 . -12) (undo-tree-id53911 . -12) (undo-tree-id53912 . -12) (undo-tree-id53913 . -12) (undo-tree-id53914 . -12) (undo-tree-id53915 . -12) (undo-tree-id53916 . -12) (undo-tree-id53917 . -12) (undo-tree-id53918 . -12) (undo-tree-id53919 . -12) (undo-tree-id53920 . -12) (undo-tree-id53921 . -12) (undo-tree-id53922 . -12) (undo-tree-id53923 . -12) (undo-tree-id53924 . -12) (undo-tree-id53925 . -15) 8305) nil (26158 1034 415931 992000) 0 nil])
([nil nil ((8302 . 8305) (apply yas--snippet-revive 8297 8303 #s(yas--snippet nil nil #s(yas--exit 8302 nil) 254 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8302 nil) 254 nil nil nil nil)) (8297 . 8303) (#("dbg!($0)" 0 8 (fontified nil)) . 8297) (8297 . 8305) (#("d" 0 1 (fontified nil)) . 8297) (8297 . 8298) (#("dbg!(…)" 0 7 (fontified nil)) . -8297) (8297 . 8304) (#("d" 0 1 (fontified t)) . -8297) (undo-tree-id53594 . -1) (undo-tree-id53595 . -1) (undo-tree-id53596 . -1) (undo-tree-id53597 . -1) (undo-tree-id53598 . -1) (undo-tree-id53599 . -1) (undo-tree-id53600 . -1) (undo-tree-id53601 . -1) (undo-tree-id53602 . -1) (undo-tree-id53603 . -1) (undo-tree-id53604 . -1) (undo-tree-id53605 . -1) (undo-tree-id53606 . -1) (undo-tree-id53607 . -1) (undo-tree-id53608 . -1) (undo-tree-id53609 . -1) (undo-tree-id53610 . -1) (undo-tree-id53611 . -1) (undo-tree-id53612 . -1) (undo-tree-id53613 . -1) (undo-tree-id53614 . -1) (undo-tree-id53615 . -1) (undo-tree-id53616 . -1) (undo-tree-id53617 . -1) (undo-tree-id53618 . -1) (undo-tree-id53619 . -1) (undo-tree-id53620 . -1) (undo-tree-id53621 . -1) (undo-tree-id53622 . -1) (undo-tree-id53623 . -1) (undo-tree-id53624 . -1) (undo-tree-id53625 . -1) (undo-tree-id53626 . -1) (undo-tree-id53627 . -1) (undo-tree-id53628 . -1) (undo-tree-id53629 . -1) (undo-tree-id53630 . -1) (undo-tree-id53631 . -1) (undo-tree-id53632 . -1) (undo-tree-id53633 . -1) (undo-tree-id53634 . -1) (undo-tree-id53635 . -1) (undo-tree-id53636 . -1) (undo-tree-id53637 . -1) (undo-tree-id53638 . -1) (undo-tree-id53639 . -1) (undo-tree-id53640 . -1) (undo-tree-id53641 . -1) (undo-tree-id53642 . -1) (undo-tree-id53643 . -1) (undo-tree-id53644 . -1) (undo-tree-id53645 . -1) (undo-tree-id53646 . -1) (undo-tree-id53647 . -1) (undo-tree-id53648 . -1) (undo-tree-id53649 . -1) (undo-tree-id53650 . -1) (undo-tree-id53651 . -1) (undo-tree-id53652 . -1) (undo-tree-id53653 . -1) (undo-tree-id53654 . -1) (undo-tree-id53655 . -1) (undo-tree-id53656 . -1) (undo-tree-id53657 . -1) (undo-tree-id53658 . -1) (undo-tree-id53659 . -1) (undo-tree-id53660 . -1) (undo-tree-id53661 . -1) (undo-tree-id53662 . -1) (undo-tree-id53663 . -1) (undo-tree-id53664 . -1) (undo-tree-id53665 . -1) (undo-tree-id53666 . -1) (undo-tree-id53667 . -1) (undo-tree-id53668 . -1) (undo-tree-id53669 . -1) (undo-tree-id53670 . -1) (undo-tree-id53671 . -1) (undo-tree-id53672 . -1) (undo-tree-id53673 . -1) (undo-tree-id53674 . -1) (undo-tree-id53675 . -1) (undo-tree-id53676 . -1) (undo-tree-id53677 . -1) (undo-tree-id53678 . -1) (undo-tree-id53679 . -1) (undo-tree-id53680 . -1) (undo-tree-id53681 . -1) (undo-tree-id53682 . -1) (undo-tree-id53683 . -1) (undo-tree-id53684 . -1) 8298 (8297 . 8298) (8293 . 8297)) nil (26158 1034 415112 807000) 0 nil])
([nil nil ((8306 . 8307)) nil (26158 1034 414903 199000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8308) (undo-tree-id54055 . -4) (undo-tree-id54056 . -4) (undo-tree-id54057 . -4) (undo-tree-id54058 . -4) (undo-tree-id54059 . -4) (undo-tree-id54060 . -4) (undo-tree-id54061 . -4) (undo-tree-id54062 . -4) (undo-tree-id54063 . -4) (undo-tree-id54064 . -4) (undo-tree-id54065 . -4) (undo-tree-id54066 . -4) (undo-tree-id54067 . -4) 8312 (8307 . 8312) (t 26158 1034 570001 275000)) nil (26158 1036 255958 166000) 0 nil])
([nil nil ((apply yas--snippet-revive 8615 8620 #s(yas--snippet nil nil #s(yas--exit 8620 nil) 256 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8620 nil) 256 nil nil nil nil)) (8615 . 8620) (#("len()$0" 0 7 (fontified nil)) . 8615) (8615 . 8622) (#("le" 0 2 (fontified nil)) . 8615) (8615 . 8617) (#("len()" 0 5 (fontified nil)) . -8615) (8615 . 8620) (#("le" 0 2 (fontified t)) . -8615) (undo-tree-id54068 . -2) (undo-tree-id54069 . -2) (undo-tree-id54070 . -1) (undo-tree-id54071 . -1) (undo-tree-id54072 . -1) (undo-tree-id54073 . -1) (undo-tree-id54074 . -1) (undo-tree-id54075 . -1) (undo-tree-id54076 . -1) (undo-tree-id54077 . -1) (undo-tree-id54078 . -1) (undo-tree-id54079 . -2) (undo-tree-id54080 . -2) (undo-tree-id54081 . -2) (undo-tree-id54082 . -2) (undo-tree-id54083 . -2) (undo-tree-id54084 . -2) (undo-tree-id54085 . -2) (undo-tree-id54086 . -2) (undo-tree-id54087 . -2) (undo-tree-id54088 . -2) (undo-tree-id54089 . -2) (undo-tree-id54090 . -2) (undo-tree-id54091 . -2) (undo-tree-id54092 . -2) (undo-tree-id54093 . -2) (undo-tree-id54094 . -2) (undo-tree-id54095 . -2) (undo-tree-id54096 . -2) (undo-tree-id54097 . -2) (undo-tree-id54098 . -2) (undo-tree-id54099 . -2) (undo-tree-id54100 . -2) (undo-tree-id54101 . -2) (undo-tree-id54102 . -2) (undo-tree-id54103 . -2) (undo-tree-id54104 . -2) (undo-tree-id54105 . -2) (undo-tree-id54106 . -2) (undo-tree-id54107 . -2) (undo-tree-id54108 . -2) (undo-tree-id54109 . -2) (undo-tree-id54110 . -2) (undo-tree-id54111 . -2) (undo-tree-id54112 . -2) (undo-tree-id54113 . -2) (undo-tree-id54114 . -2) (undo-tree-id54115 . -2) (undo-tree-id54116 . -2) (undo-tree-id54117 . -2) (undo-tree-id54118 . -2) (undo-tree-id54119 . -2) (undo-tree-id54120 . -2) (undo-tree-id54121 . -2) (undo-tree-id54122 . -2) (undo-tree-id54123 . -2) (undo-tree-id54124 . -2) (undo-tree-id54125 . -2) (undo-tree-id54126 . -2) (undo-tree-id54127 . -2) (undo-tree-id54128 . -2) (undo-tree-id54129 . -2) (undo-tree-id54130 . -2) (undo-tree-id54131 . -2) (undo-tree-id54132 . -2) (undo-tree-id54133 . -2) (undo-tree-id54134 . -2) (undo-tree-id54135 . -2) (undo-tree-id54136 . -2) (undo-tree-id54137 . -2) (undo-tree-id54138 . -2) (undo-tree-id54139 . -2) (undo-tree-id54140 . -2) (undo-tree-id54141 . -2) (undo-tree-id54142 . -2) (undo-tree-id54143 . -2) (undo-tree-id54144 . -2) (undo-tree-id54145 . -2) (undo-tree-id54146 . -2) (undo-tree-id54147 . -2) (undo-tree-id54148 . -2) (undo-tree-id54149 . -2) (undo-tree-id54150 . -2) (undo-tree-id54151 . -2) (undo-tree-id54152 . -2) (undo-tree-id54153 . -2) (undo-tree-id54154 . -2) (undo-tree-id54155 . -2) (undo-tree-id54156 . -2) (undo-tree-id54157 . -2) (undo-tree-id54158 . -2) (undo-tree-id54159 . -2) (undo-tree-id54160 . -2) (undo-tree-id54161 . -2) (undo-tree-id54162 . -2) (undo-tree-id54163 . -2) (undo-tree-id54164 . -2) (undo-tree-id54165 . -2) (undo-tree-id54166 . -2) 8617 (8614 . 8617) (8601 . 8614) (#("par" 0 3 (fontified nil)) . 8601) (8601 . 8604) (#("particle_list" 0 13 (fontified nil)) . -8601) (8601 . 8614) (#("par" 0 3 (fontified t)) . -8601) (undo-tree-id54167 . -3) (undo-tree-id54168 . -3) 8604 (8601 . 8604) (apply yas--snippet-revive 8596 8602 #s(yas--snippet nil nil #s(yas--exit 8601 nil) 255 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8601 nil) 255 nil nil nil nil)) (8596 . 8602) (#("dbg!($0)" 0 8 (fontified nil)) . 8596) (8596 . 8604) (#("dbg" 0 3 (fontified nil)) . 8596) (8596 . 8599) (#("dbg!(…)" 0 7 (fontified nil)) . -8596) (8596 . 8603) (#("dbg" 0 3 (fontified t)) . -8596) (undo-tree-id54169 . -2) (undo-tree-id54170 . -3) (undo-tree-id54171 . -3) 8599 (8596 . 8599) (8592 . 8596) (#("    " 0 4 (fontified nil)) . 8591) (undo-tree-id54172 . -4) (8590 . 8596) (t 26158 1036 374065 436000)) nil (26158 1070 101141 996000) 0 nil])
([nil nil ((8621 . 8622)) nil (26158 1070 100912 343000) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . 8898) (undo-tree-id54176 . -2) (undo-tree-id54177 . -3) (t 26158 1070 219274 456000)) nil (26158 1103 186177 639000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8898) (undo-tree-id54175 . -1)) nil (26158 1103 186170 687000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . 8898) (undo-tree-id54173 . -3) (undo-tree-id54174 . -4)) nil (26158 1103 186163 816000) 0 nil])
([nil nil ((8898 . 8906)) nil (26158 1103 186134 28000) 0 nil])
([nil nil ((#("particles2" 0 10 (fontified t face font-lock-string-face)) . 8933) (undo-tree-id54236 . -9) (undo-tree-id54237 . -10) (t 26158 1103 332466 319000)) nil (26158 1111 96648 805000) 0 nil])
([nil nil ((8941 . 8951) (#(")" 0 1 (fontified t face font-lock-string-face)) . -8941) (undo-tree-id54178 . -1) (undo-tree-id54179 . -1) (undo-tree-id54180 . -1) (undo-tree-id54181 . -1) (undo-tree-id54182 . -1) (undo-tree-id54183 . -1) (undo-tree-id54184 . -1) (undo-tree-id54185 . -1) (undo-tree-id54186 . -1) (undo-tree-id54187 . -1) (undo-tree-id54188 . -1) (undo-tree-id54189 . -1) (undo-tree-id54190 . -1) (undo-tree-id54191 . -1) (undo-tree-id54192 . -1) (undo-tree-id54193 . -1) (undo-tree-id54194 . -1) (undo-tree-id54195 . -1) (undo-tree-id54196 . -1) (undo-tree-id54197 . -1) (undo-tree-id54198 . -1) (undo-tree-id54199 . -1) (undo-tree-id54200 . -1) (undo-tree-id54201 . -1) (undo-tree-id54202 . -1) (undo-tree-id54203 . -1) (undo-tree-id54204 . -1) (undo-tree-id54205 . -1) (undo-tree-id54206 . -1) (undo-tree-id54207 . -1) (undo-tree-id54208 . -1) (undo-tree-id54209 . -1) (undo-tree-id54210 . -1) (undo-tree-id54211 . -1) (undo-tree-id54212 . -1) (undo-tree-id54213 . -1) (undo-tree-id54214 . -1) (undo-tree-id54215 . -1) (undo-tree-id54216 . -1) (undo-tree-id54217 . -1) (undo-tree-id54218 . -1) (undo-tree-id54219 . -1) (undo-tree-id54220 . -1) (undo-tree-id54221 . -1) (undo-tree-id54222 . -1) (undo-tree-id54223 . -1) (undo-tree-id54224 . -1) (undo-tree-id54225 . -1) (undo-tree-id54226 . -1) (undo-tree-id54227 . -1) (undo-tree-id54228 . -1) (undo-tree-id54229 . -1) (undo-tree-id54230 . -1) (undo-tree-id54231 . -1) (undo-tree-id54232 . -1) (undo-tree-id54233 . -1) (undo-tree-id54234 . -1) (undo-tree-id54235 . -1) 8942 (8941 . 8942) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -8941) (8933 . 8942)) nil (26158 1111 96629 728000) 0 nil])
([nil nil ((9245 . 9246) (#("rad" 0 3 (fontified nil)) . 9245) (undo-tree-id54338 . -3) (9244 . 9245) (9241 . 9242) (#("y" 0 1 (fontified t)) . -9241) (undo-tree-id54339 . -1) (undo-tree-id54340 . -1) (undo-tree-id54341 . -1) (undo-tree-id54342 . -1) 9242 (9241 . 9242) (9240 . 9241) (9228 . 9240) (#("re" 0 2 (fontified nil)) . 9228) (undo-tree-id54343 . -2) (9228 . 9230) (#("realparticle" 0 12 (fontified nil)) . -9228) (undo-tree-id54344 . -12) (9228 . 9240) (#("rea" 0 3 (fontified t)) . -9228) (undo-tree-id54345 . -3) (undo-tree-id54346 . -3) (undo-tree-id54347 . -3) 9231 (9229 . 9231) (#("y" 0 1 (fontified nil)) . 9229) (undo-tree-id54348 . -1) (9228 . 9229) (9225 . 9226) (#("x" 0 1 (fontified nil)) . 9225) (undo-tree-id54349 . -1) (9225 . 9226) (#("x" 0 1 (fontified t)) . -9225) (undo-tree-id54350 . -1) (undo-tree-id54351 . -1) (undo-tree-id54352 . -1) (undo-tree-id54353 . -1) 9226 (9225 . 9226) (9224 . 9225) (9212 . 9224) (#("re" 0 2 (fontified nil)) . 9212) (undo-tree-id54354 . -2) (9212 . 9214) (#("realparticle" 0 12 (fontified nil)) . -9212) (undo-tree-id54355 . -12) (9212 . 9224) (#("re" 0 2 (fontified t)) . -9212) (undo-tree-id54356 . -2) (undo-tree-id54357 . -2) (undo-tree-id54358 . -2) 9214 (9213 . 9214) (#("x" 0 1 (fontified nil)) . 9213) (undo-tree-id54359 . -1) (9212 . 9213) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9212 9226 nil nil nil t #s(yas--field 2 9228 9242 nil nil nil t #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil)))) #s(yas--field 2 9228 9242 nil nil nil t #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil))) #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil))) #s(yas--exit 9247 nil) 257 nil #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil)) nil nil)) (9191 . 9222) (#("make_black_rectangle(${1:x}, ${2:y}, ${3:rad})$0" 0 48 (fontified nil)) . 9191) (9191 . 9239) (#("ma" 0 2 (fontified nil)) . 9191) (9191 . 9193) (#("make_black_rectangle(…)" 0 23 (fontified nil)) . -9191) (9191 . 9214) (#("ma" 0 2 (fontified t)) . -9191) (undo-tree-id54360 . -1) (undo-tree-id54361 . -2) (undo-tree-id54362 . -2) 9193 (9191 . 9193) (9190 . 9191) (9183 . 9190) (#("sh" 0 2 (fontified nil)) . 9183) (9183 . 9185) (#("shitlol" 0 7 (fontified nil)) . -9183) (9183 . 9190) (#("sh" 0 2 (fontified t)) . -9183) (undo-tree-id54363 . -2) (undo-tree-id54364 . -2) 9185 (9183 . 9185) (#("w" 0 1 (fontified t)) . -9183) (undo-tree-id54365 . -1) (undo-tree-id54366 . -1) (#("h" 0 1 (fontified t)) . -9184) (undo-tree-id54367 . -1) (undo-tree-id54368 . -1) 9185 (9183 . 9185) (9179 . 9183) (#("    " 0 4 (fontified nil)) . 9178) (undo-tree-id54369 . -4) (9177 . 9183) (t 26158 1111 240752 159000)) nil (26158 1281 776976 588000) 0 nil])
([nil nil ((9247 . 9248) (apply yas--snippet-revive 9191 9247 #s(yas--snippet nil (#s(yas--field 1 9212 9226 nil nil nil t #s(yas--field 2 9228 9242 nil nil nil t #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil)))) #s(yas--field 2 9228 9242 nil nil nil t #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil))) #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil))) #s(yas--exit 9247 nil) 257 nil #s(yas--field 3 9244 9246 nil nil nil t #s(yas--exit 9247 nil)) nil nil))) nil (26158 1281 776895 269000) 0 nil])
([nil nil ((9270 . 9271) (apply yas--snippet-revive 9262 9270 #s(yas--snippet nil nil #s(yas--exit 9270 nil) 258 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9270 nil) 258 nil nil nil nil)) (9262 . 9270) (#("to_pbm()$0" 0 10 (fontified nil)) . 9262) (9262 . 9272) (#("to" 0 2 (fontified nil)) . 9262) (9262 . 9264) (#("to_pbm()" 0 8 (fontified nil)) . -9262) (9262 . 9270) (#("to" 0 2 (fontified t)) . -9262) (undo-tree-id54267 . -2) (undo-tree-id54268 . -2) (undo-tree-id54269 . -2) (undo-tree-id54270 . -2) (undo-tree-id54271 . -2) (undo-tree-id54272 . -2) (undo-tree-id54273 . -2) (undo-tree-id54274 . -2) (undo-tree-id54275 . -2) (undo-tree-id54276 . -2) (undo-tree-id54277 . -2) (undo-tree-id54278 . -2) (undo-tree-id54279 . -2) (undo-tree-id54280 . -2) (undo-tree-id54281 . -2) (undo-tree-id54282 . -2) (undo-tree-id54283 . -2) (undo-tree-id54284 . -2) (undo-tree-id54285 . -2) (undo-tree-id54286 . -2) (undo-tree-id54287 . -2) (undo-tree-id54288 . -2) (undo-tree-id54289 . -2) (undo-tree-id54290 . -2) (undo-tree-id54291 . -2) (undo-tree-id54292 . -2) (undo-tree-id54293 . -2) (undo-tree-id54294 . -2) (undo-tree-id54295 . -2) (undo-tree-id54296 . -2) (undo-tree-id54297 . -2) (undo-tree-id54298 . -2) (undo-tree-id54299 . -2) (undo-tree-id54300 . -2) (undo-tree-id54301 . -2) (undo-tree-id54302 . -2) (undo-tree-id54303 . -2) (undo-tree-id54304 . -2) (undo-tree-id54305 . -2) (undo-tree-id54306 . -2) (undo-tree-id54307 . -2) (undo-tree-id54308 . -2) (undo-tree-id54309 . -2) (undo-tree-id54310 . -2) (undo-tree-id54311 . -2) (undo-tree-id54312 . -2) (undo-tree-id54313 . -2) (undo-tree-id54314 . -2) (undo-tree-id54315 . -2) (undo-tree-id54316 . -2) (undo-tree-id54317 . -2) (undo-tree-id54318 . -2) (undo-tree-id54319 . -2) (undo-tree-id54320 . -2) (undo-tree-id54321 . -2) (undo-tree-id54322 . -2) (undo-tree-id54323 . -2) (undo-tree-id54324 . -2) (undo-tree-id54325 . -2) (undo-tree-id54326 . -2) 9264 (9262 . 9264) (#("m" 0 1 (fontified t)) . -9262) (undo-tree-id54327 . -1) (undo-tree-id54328 . -1) (undo-tree-id54329 . -1) (undo-tree-id54330 . -1) 9263 (#("a" 0 1 (fontified t)) . -9263) (undo-tree-id54331 . -1) (undo-tree-id54332 . -1) (undo-tree-id54333 . -1) 9264 (9262 . 9264) (9261 . 9262) (9254 . 9261) (#("sh" 0 2 (fontified nil)) . 9254) (9254 . 9256) (#("shitlol" 0 7 (fontified nil)) . -9254) (9254 . 9261) (#("sh" 0 2 (fontified t)) . -9254) (undo-tree-id54334 . -2) (undo-tree-id54335 . -2) (undo-tree-id54336 . -2) 9256 (9254 . 9256) (9250 . 9254) (#("    " 0 4 (fontified nil)) . 9249) (undo-tree-id54337 . -4) (9248 . 9254)) nil (26158 1281 776880 506000) 0 nil])
([nil nil ((9266 . 9267) (#("f" 0 1 (fontified t)) . 9266) (undo-tree-id54265 . -1) (9266 . 9267) (#("b" 0 1 (fontified t)) . 9266) (undo-tree-id54266 . -1)) nil (26158 1281 776737 359000) 0 nil])
([nil nil ((9299 . 9306) (#("i" 0 1 (fontified t face font-lock-string-face)) . -9299) (undo-tree-id54254 . -1) (undo-tree-id54255 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -9300) (undo-tree-id54256 . -1) (undo-tree-id54257 . -1) 9301 (9298 . 9301) (9294 . 9298) (#("o" 0 1 (fontified t face font-lock-string-face)) . -9294) (undo-tree-id54258 . -1) (undo-tree-id54259 . -1) 9295 (9288 . 9295) (9287 . 9289) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -9287) (undo-tree-id54260 . -1) (#("path" 0 4 (fontified nil)) . 9288) (undo-tree-id54261 . -4) (9287 . 9288) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9287 9307 nil nil nil t #s(yas--exit 9308 nil))) #s(yas--exit 9308 nil) 259 nil #s(yas--field 1 9287 9307 nil nil nil t #s(yas--exit 9308 nil)) nil nil)) (9271 . 9292) (#("write_as_binary(${1:path})$0" 0 28 (fontified nil)) . 9271) (9271 . 9299) (#("wr" 0 2 (fontified nil)) . 9271) (9271 . 9273) (#("write_as_binary(…)" 0 18 (fontified nil)) . -9271) (9271 . 9289) (#("wr" 0 2 (fontified t)) . -9271) (undo-tree-id54262 . -1) (undo-tree-id54263 . -2) (undo-tree-id54264 . -2) 9273 (9271 . 9273)) nil (26158 1281 776725 129000) 0 nil])
([nil nil ((apply yas--snippet-revive 9309 9317 #s(yas--snippet nil nil #s(yas--exit 9317 nil) 260 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9317 nil) 260 nil nil nil nil)) (9309 . 9317) (#("unwrap()$0" 0 10 (fontified nil)) . 9309) (9309 . 9319) (#("un" 0 2 (fontified nil)) . 9309) (9309 . 9311) (#("unwrap()" 0 8 (fontified nil)) . -9309) (9309 . 9317) (#("un" 0 2 (fontified t)) . -9309) (undo-tree-id54250 . -2) (undo-tree-id54251 . -2) (undo-tree-id54252 . -2) (undo-tree-id54253 . -2) 9311 (9308 . 9311) (apply yas--snippet-revive 9271 9308 #s(yas--snippet nil (#s(yas--field 1 9287 9307 nil nil nil t #s(yas--exit 9308 nil))) #s(yas--exit 9308 nil) 259 nil #s(yas--field 1 9287 9307 nil nil nil t #s(yas--exit 9308 nil)) nil nil))) nil (26158 1281 776693 85000) 0 nil])
([nil nil ((9317 . 9318)) nil (26158 1281 776678 905000) 0 nil])
([nil nil ((9309 . 9310) (#("n" 0 1 (fontified t face font-lock-string-face)) . -9309) (undo-tree-id54238 . -1) (undo-tree-id54239 . -1) (undo-tree-id54240 . -1) (undo-tree-id54241 . -1) (undo-tree-id54242 . -1) (undo-tree-id54243 . -1) (undo-tree-id54244 . -1) (undo-tree-id54245 . -1) (undo-tree-id54246 . -1) (undo-tree-id54247 . -1) (undo-tree-id54248 . -1) (undo-tree-id54249 . -1) 9310 (9306 . 9310)) nil (26158 1281 776669 111000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -8580) (undo-tree-id54372 . -1) (undo-tree-id54373 . -1) (undo-tree-id54374 . -1) (undo-tree-id54375 . -1) (undo-tree-id54376 . -1) (undo-tree-id54377 . -1) (undo-tree-id54378 . -1) (undo-tree-id54379 . -1) (undo-tree-id54380 . -1) (undo-tree-id54381 . -1) (undo-tree-id54382 . -1) (undo-tree-id54383 . -1) (undo-tree-id54384 . -1) 8581 (t 26158 1281 927007 316000)) nil (26158 1361 102069 825000) 0 nil])
([nil nil ((8580 . 8582) (#("5" 0 1 (fontified t)) . -8580) (undo-tree-id54370 . 1) (undo-tree-id54371 . -1) 8581) nil (26158 1361 102035 993000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -9894) (undo-tree-id54390 . -1) (undo-tree-id54391 . -1) (undo-tree-id54392 . -1) (undo-tree-id54393 . -1) (undo-tree-id54394 . -1) (undo-tree-id54395 . -1) (undo-tree-id54396 . -1) (undo-tree-id54397 . -1) (undo-tree-id54398 . -1) (undo-tree-id54399 . -1) (undo-tree-id54400 . -1) (undo-tree-id54401 . -1) (undo-tree-id54402 . -1) (undo-tree-id54403 . -1) (undo-tree-id54404 . -1) (undo-tree-id54405 . -1) (undo-tree-id54406 . -1) (undo-tree-id54407 . -1) (undo-tree-id54408 . -1) (undo-tree-id54409 . -1) (undo-tree-id54410 . -1) (undo-tree-id54411 . -1) (undo-tree-id54412 . -1) (undo-tree-id54413 . -1) (undo-tree-id54414 . -1) (undo-tree-id54415 . -1) (undo-tree-id54416 . -1) (undo-tree-id54417 . -1) (undo-tree-id54418 . -1) (undo-tree-id54419 . -1) (undo-tree-id54420 . -1) (undo-tree-id54421 . -1) (undo-tree-id54422 . -1) (undo-tree-id54423 . -1) (undo-tree-id54424 . -1) (undo-tree-id54425 . -1) (undo-tree-id54426 . -1) (undo-tree-id54427 . -1) (undo-tree-id54428 . -1) (undo-tree-id54429 . -1) (undo-tree-id54430 . -1) (undo-tree-id54431 . -1) (undo-tree-id54432 . -1) (undo-tree-id54433 . -1) (undo-tree-id54434 . -1) (undo-tree-id54435 . -1) (undo-tree-id54436 . -1) (undo-tree-id54437 . -1) (undo-tree-id54438 . -1) (undo-tree-id54439 . -1) (undo-tree-id54440 . -1) (undo-tree-id54441 . -1) (undo-tree-id54442 . -1) (undo-tree-id54443 . -1) (undo-tree-id54444 . -1) (undo-tree-id54445 . -1) (#("g" 0 1 (fontified t)) . -9895) (undo-tree-id54446 . -1) (undo-tree-id54447 . -1) (undo-tree-id54448 . -1) (undo-tree-id54449 . -1) (undo-tree-id54450 . -1) (undo-tree-id54451 . -1) (undo-tree-id54452 . -1) (undo-tree-id54453 . -1) (undo-tree-id54454 . -1) (undo-tree-id54455 . -1) (undo-tree-id54456 . -1) (undo-tree-id54457 . -1) (undo-tree-id54458 . -1) (undo-tree-id54459 . -1) (undo-tree-id54460 . -1) (#("m" 0 1 (fontified t)) . -9896) (undo-tree-id54461 . -1) (undo-tree-id54462 . -1) 9897 (9894 . 9897) (#("p" 0 1 (fontified t)) . -9894) (undo-tree-id54463 . -1) (undo-tree-id54464 . -1) (undo-tree-id54465 . -1) (#("g" 0 1 (fontified t)) . -9895) (undo-tree-id54466 . -1) (undo-tree-id54467 . -1) (undo-tree-id54468 . -1) 9896 (9894 . 9896) (#("g" 0 1 (fontified t)) . -9894) (undo-tree-id54469 . -1) (undo-tree-id54470 . -1) 9895 (9894 . 9895) (9890 . 9894) (t 26158 1361 249954 546000)) nil (26158 1452 128252 746000) 0 nil])
([nil nil ((9911 . 9915) (9898 . 9911) (#("pa" 0 2 (fontified nil)) . 9898) (9898 . 9900) (#("particle_list" 0 13 (fontified nil)) . -9898) (9898 . 9911) (#("pa" 0 2 (fontified t)) . -9898) (undo-tree-id54385 . -2) (undo-tree-id54386 . -2) 9900 (9898 . 9900) (apply yas--snippet-revive 9893 9899 #s(yas--snippet nil nil #s(yas--exit 9898 nil) 261 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9898 nil) 261 nil nil nil nil)) (9893 . 9899) (#("dbg!($0)" 0 8 (fontified nil)) . 9893) (9893 . 9901) (#("db" 0 2 (fontified nil)) . 9893) (9893 . 9895) (#("dbg!(…)" 0 7 (fontified nil)) . -9893) (9893 . 9900) (#("db" 0 2 (fontified t)) . -9893) (undo-tree-id54387 . -2) (undo-tree-id54388 . -2) (undo-tree-id54389 . -2) 9895 (9893 . 9895)) nil (26158 1452 127798 278000) 0 nil])
([nil nil ((9915 . 9917)) nil (26158 1452 127761 890000) 0 nil])
([nil nil ((9919 . 9920)) nil (26158 1452 127751 288000) 0 nil])
([nil nil ((9922 . 9926) (#("    " 0 4 (fontified nil)) . 9921) (undo-tree-id54567 . -4) (9925 . 9926) (9921 . 9925) (t 26158 1452 253355 713000)) nil (26158 1602 33371 225000) 0 nil])
([nil nil ((9923 . 9927) (#("    " 0 4 (fontified nil)) . 9922) (undo-tree-id54509 . -4) (undo-tree-id54510 . -4) (undo-tree-id54511 . -4) (undo-tree-id54512 . -4) (undo-tree-id54513 . -4) (undo-tree-id54514 . -4) (undo-tree-id54515 . -4) (undo-tree-id54516 . -4) (undo-tree-id54517 . -4) (undo-tree-id54518 . -4) (undo-tree-id54519 . -4) (undo-tree-id54520 . -4) (undo-tree-id54521 . -4) (9922 . 9927) (#("    " 0 4 (fontified nil)) . 9921) (undo-tree-id54522 . -4) (undo-tree-id54523 . -4) (undo-tree-id54524 . -4) (undo-tree-id54525 . -4) (undo-tree-id54526 . -4) (undo-tree-id54527 . -4) (undo-tree-id54528 . -4) (undo-tree-id54529 . -4) (undo-tree-id54530 . -4) (undo-tree-id54531 . -4) (undo-tree-id54532 . -4) (undo-tree-id54533 . -4) (undo-tree-id54534 . -4) (undo-tree-id54535 . -4) (undo-tree-id54536 . -4) (undo-tree-id54537 . -4) (undo-tree-id54538 . -4) (undo-tree-id54539 . -4) (undo-tree-id54540 . -4) (undo-tree-id54541 . -4) (undo-tree-id54542 . -4) (undo-tree-id54543 . -4) (undo-tree-id54544 . -4) (undo-tree-id54545 . -4) (undo-tree-id54546 . -4) (undo-tree-id54547 . -4) (undo-tree-id54548 . -4) (undo-tree-id54549 . -4) (undo-tree-id54550 . -4) (undo-tree-id54551 . -4) (undo-tree-id54552 . -4) (undo-tree-id54553 . -4) (undo-tree-id54554 . -4) (undo-tree-id54555 . -4) (undo-tree-id54556 . -4) (undo-tree-id54557 . -4) (undo-tree-id54558 . -4) (undo-tree-id54559 . -4) (undo-tree-id54560 . -4) (undo-tree-id54561 . -4) (undo-tree-id54562 . -4) (undo-tree-id54563 . -4) (undo-tree-id54564 . -4) (undo-tree-id54565 . -4) (undo-tree-id54566 . -4) (9925 . 9926) (9921 . 9925)) nil (26158 1602 33359 56000) 0 nil])
([nil nil ((9893 . 9894)) nil (26158 1602 33244 582000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -10029) (undo-tree-id54471 . -1) (undo-tree-id54472 . -1) (undo-tree-id54473 . -1) (undo-tree-id54474 . -1) (undo-tree-id54475 . -1) (undo-tree-id54476 . -1) (undo-tree-id54477 . -1) (undo-tree-id54478 . -1) (undo-tree-id54479 . -1) (undo-tree-id54480 . -1) (undo-tree-id54481 . -1) (undo-tree-id54482 . -1) 10030 (10011 . 10030) (10010 . 10011) (10008 . 10010) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -10008) (undo-tree-id54483 . -1) (undo-tree-id54484 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -10009) (undo-tree-id54485 . -1) (undo-tree-id54486 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -10010) (undo-tree-id54487 . -1) (undo-tree-id54488 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -10011) (undo-tree-id54489 . -1) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -10012) (undo-tree-id54490 . -1) 10013 (10001 . 10013) (10000 . 10001) (9998 . 10000) (#("w" 0 1 (fontified t face font-lock-comment-face)) . -9998) (undo-tree-id54491 . -1) (undo-tree-id54492 . -1) 9999 (#("r" 0 1 (fontified t face font-lock-comment-face)) . -9999) (undo-tree-id54493 . -1) (undo-tree-id54494 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -10000) (undo-tree-id54495 . -1) (undo-tree-id54496 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -10001) (undo-tree-id54497 . -1) (undo-tree-id54498 . -1) 10002 (9992 . 10002) (9991 . 9992) (9984 . 9991) (9963 . 9984) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -9963) (undo-tree-id54499 . -1) (undo-tree-id54500 . -1) (undo-tree-id54501 . -1) 9964 (9947 . 9964) (9936 . 9947) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -9936) (undo-tree-id54502 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -9937) (undo-tree-id54503 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -9938) (undo-tree-id54504 . -1) 9939 (9927 . 9939) (#("." 0 1 (fontified t)) . -9927) (undo-tree-id54505 . -1) (undo-tree-id54506 . -1) (#("." 0 1 (fontified t)) . -9928) (undo-tree-id54507 . -1) (undo-tree-id54508 . -1) 9929 (9927 . 9929) (9923 . 9927)) nil (26158 1602 33221 34000) 0 nil])
([nil nil ((10050 . 10054) (10029 . 10050) (t 26158 1602 182526 85000)) nil (26158 1609 833562 159000) 0 nil])
([nil nil ((#("struct Coordinate {
    x: f64,
    y: f64,
}

struct Robot<'a> {
    positionx: usize,
    positiony: usize,
    orientation: f64, // angle in radians
    lidar_radius: f64,
    environment: &'a Map,
}

" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 17 (fontified t face font-lock-type-face) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t) 20 24 (fontified t) 24 25 (fontified t face font-lock-variable-name-face) 25 27 (fontified t) 27 30 (fontified t face font-lock-type-face) 30 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 42 (fontified t face font-lock-type-face) 42 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-1-face)) 45 46 (fontified t) 46 47 (fontified t) 47 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 59 (fontified t face font-lock-type-face) 59 60 (fontified t face (rainbow-delimiters-depth-1-face)) 60 61 (fontified t) 61 62 (fontified t face font-lock-variable-name-face) 62 63 (fontified t face (rainbow-delimiters-depth-1-face)) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-1-face)) 65 66 (fontified t) 66 70 (fontified t) 70 79 (fontified t face font-lock-variable-name-face) 79 81 (fontified t) 81 86 (fontified t face font-lock-type-face) 86 88 (fontified t) 88 92 (fontified t) 92 101 (fontified t face font-lock-variable-name-face) 101 103 (fontified t) 103 108 (fontified t face font-lock-type-face) 108 109 (fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 125 (fontified t face font-lock-variable-name-face) 125 127 (fontified t) 127 130 (fontified t face font-lock-type-face) 130 132 (fontified t) 132 135 (fontified t face font-lock-comment-delimiter-face) 135 152 (fontified t face font-lock-comment-face) 152 156 (fontified t) 156 168 (fontified t face font-lock-variable-name-face) 168 170 (fontified t) 170 173 (fontified t face font-lock-type-face) 173 179 (fontified t) 179 190 (fontified t face font-lock-variable-name-face) 190 192 (fontified t) 192 193 (fontified t face rust-ampersand-face) 193 194 (fontified t) 194 195 (fontified t face font-lock-variable-name-face) 195 196 (fontified t) 196 199 (fontified t face font-lock-type-face) 199 201 (fontified t) 201 202 (fontified t face (rainbow-delimiters-depth-1-face)) 202 204 (fontified t)) . 138) (undo-tree-id54568 . -203) (undo-tree-id54569 . -203) (undo-tree-id54570 . -203) (undo-tree-id54571 . -114) (undo-tree-id54572 . -7) (undo-tree-id54573 . -17) (undo-tree-id54574 . -54) (undo-tree-id54575 . -59) (undo-tree-id54576 . 185) (undo-tree-id54577 . 139) (undo-tree-id54578 . -88) (undo-tree-id54579 . -88) (undo-tree-id54580 . -88) (undo-tree-id54581 . -88) (undo-tree-id54582 . -88) (undo-tree-id54583 . -88) (undo-tree-id54584 . -88) (undo-tree-id54585 . -88) (undo-tree-id54586 . -88) (undo-tree-id54587 . -44) (undo-tree-id54588 . -44) (undo-tree-id54589 . -44) (undo-tree-id54590 . -44) (undo-tree-id54591 . -44) (undo-tree-id54592 . -44) (undo-tree-id54593 . -44) (undo-tree-id54594 . -44) (undo-tree-id54595 . -44) (undo-tree-id54596 . -32) (undo-tree-id54597 . -32) (undo-tree-id54598 . -32) (undo-tree-id54599 . -32) (undo-tree-id54600 . -32) (undo-tree-id54601 . -32) (undo-tree-id54602 . -32) (undo-tree-id54603 . -32) (undo-tree-id54604 . -32) (undo-tree-id54605 . -20) (undo-tree-id54606 . -20) (undo-tree-id54607 . -20) (undo-tree-id54608 . -20) (undo-tree-id54609 . -20) (undo-tree-id54610 . -20) (undo-tree-id54611 . -20) (undo-tree-id54612 . -20) (undo-tree-id54613 . -20) (undo-tree-id54614 . -203) (undo-tree-id54615 . -20) (undo-tree-id54616 . -20) (undo-tree-id54617 . -20) (undo-tree-id54618 . -20) (undo-tree-id54619 . -20) (undo-tree-id54620 . -20) (undo-tree-id54621 . -20) (undo-tree-id54622 . -20) (undo-tree-id54623 . -20) (undo-tree-id54624 . -20) (undo-tree-id54625 . -204) (undo-tree-id54626 . -203) (undo-tree-id54627 . -20) (undo-tree-id54628 . -20) (undo-tree-id54629 . -20) (undo-tree-id54630 . -20) (undo-tree-id54631 . -20) (undo-tree-id54632 . -20) (undo-tree-id54633 . -20) (undo-tree-id54634 . -20) (undo-tree-id54635 . -20) (undo-tree-id54636 . -20) (undo-tree-id54637 . -20) (undo-tree-id54638 . -20) (undo-tree-id54639 . -20) (undo-tree-id54640 . -20) (undo-tree-id54641 . -20) (undo-tree-id54642 . -20) (undo-tree-id54643 . -20) (undo-tree-id54644 . -20) (undo-tree-id54645 . -20) (undo-tree-id54646 . -20) (undo-tree-id54647 . -20) (undo-tree-id54648 . -20) (undo-tree-id54649 . -20) (undo-tree-id54650 . -20) (undo-tree-id54651 . -20) (undo-tree-id54652 . -20) (undo-tree-id54653 . -20) (undo-tree-id54654 . -20) (undo-tree-id54655 . -20) (undo-tree-id54656 . -20) (undo-tree-id54657 . -20) (undo-tree-id54658 . -32) (undo-tree-id54659 . -32) (undo-tree-id54660 . -32) (undo-tree-id54661 . -32) (undo-tree-id54662 . -32) (undo-tree-id54663 . -32) (undo-tree-id54664 . -32) (undo-tree-id54665 . -32) (undo-tree-id54666 . -32) (undo-tree-id54667 . -44) (undo-tree-id54668 . -44) (undo-tree-id54669 . -44) (undo-tree-id54670 . -44) (undo-tree-id54671 . -44) (undo-tree-id54672 . -44) (undo-tree-id54673 . -44) (undo-tree-id54674 . -44) (undo-tree-id54675 . -44) (undo-tree-id54676 . -46) (undo-tree-id54677 . -46) (undo-tree-id54678 . -46) (undo-tree-id54679 . -46) (undo-tree-id54680 . -46) (undo-tree-id54681 . -46) (undo-tree-id54682 . -46) (undo-tree-id54683 . -46) (undo-tree-id54684 . -46) (undo-tree-id54685 . -47) (undo-tree-id54686 . -47) (undo-tree-id54687 . -47) (undo-tree-id54688 . -47) (undo-tree-id54689 . -47) (undo-tree-id54690 . -47) (undo-tree-id54691 . -47) (undo-tree-id54692 . -47) (undo-tree-id54693 . -47) (undo-tree-id54694 . -66) (undo-tree-id54695 . -66) (undo-tree-id54696 . -66) (undo-tree-id54697 . -66) (undo-tree-id54698 . -66) (undo-tree-id54699 . -66) (undo-tree-id54700 . -66) (undo-tree-id54701 . -66) (undo-tree-id54702 . -66) (undo-tree-id54703 . -88) (undo-tree-id54704 . -88) (undo-tree-id54705 . -88) (undo-tree-id54706 . -88) (undo-tree-id54707 . -88) (undo-tree-id54708 . -88) (undo-tree-id54709 . -88) (undo-tree-id54710 . -88) (undo-tree-id54711 . -88) (undo-tree-id54712 . -110) (undo-tree-id54713 . -110) (undo-tree-id54714 . -110) (undo-tree-id54715 . -110) (undo-tree-id54716 . -110) (undo-tree-id54717 . -110) (undo-tree-id54718 . -110) (undo-tree-id54719 . -110) (undo-tree-id54720 . -110) (undo-tree-id54721 . -152) (undo-tree-id54722 . -152) (undo-tree-id54723 . -152) (undo-tree-id54724 . -152) (undo-tree-id54725 . -152) (undo-tree-id54726 . -152) (undo-tree-id54727 . -152) (undo-tree-id54728 . -152) (undo-tree-id54729 . -152) (undo-tree-id54730 . -175) (undo-tree-id54731 . -175) (undo-tree-id54732 . -175) (undo-tree-id54733 . -175) (undo-tree-id54734 . -175) (undo-tree-id54735 . -175) (undo-tree-id54736 . -175) (undo-tree-id54737 . -175) (undo-tree-id54738 . -175) (undo-tree-id54739 . -201) (undo-tree-id54740 . -201) (undo-tree-id54741 . -201) (undo-tree-id54742 . -201) (undo-tree-id54743 . -201) (undo-tree-id54744 . -201) (undo-tree-id54745 . -201) (undo-tree-id54746 . -201) (undo-tree-id54747 . -201) (undo-tree-id54748 . -203) (undo-tree-id54749 . -203) (undo-tree-id54750 . -203) (undo-tree-id54751 . -203) (undo-tree-id54752 . -203) (undo-tree-id54753 . -203) (undo-tree-id54754 . -203) (undo-tree-id54755 . -203) (undo-tree-id54756 . -203) (undo-tree-id54757 . -203) (undo-tree-id54758 . -203) (undo-tree-id54759 . -204) 341 (t 26158 1609 982586 439000)) nil (26158 1626 553113 608000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 474) (undo-tree-id54765 . -1) (undo-tree-id54766 . -1) (undo-tree-id54767 . -1) (undo-tree-id54768 . -1) (undo-tree-id54769 . -1) (undo-tree-id54770 . -1) (undo-tree-id54771 . -1) (undo-tree-id54772 . -1) (undo-tree-id54773 . -1) (undo-tree-id54774 . -1) (undo-tree-id54775 . -1) (undo-tree-id54776 . -1) (undo-tree-id54777 . -1) (t 26158 1626 674725 855000)) nil (26158 1638 95825 907000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 528) (undo-tree-id54760 . -1) (undo-tree-id54761 . -1) (undo-tree-id54762 . -1) (undo-tree-id54763 . -1) (undo-tree-id54764 . -1)) nil (26158 1638 95789 845000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 9035) (undo-tree-id54973 . -1) (undo-tree-id54974 . -1) (undo-tree-id54975 . -1) (undo-tree-id54976 . -1) (undo-tree-id54977 . -1) (undo-tree-id54978 . -1) (undo-tree-id54979 . -1) (undo-tree-id54980 . -1) (undo-tree-id54981 . -1) (undo-tree-id54982 . -1) (undo-tree-id54983 . -1) (undo-tree-id54984 . -1) (undo-tree-id54985 . -1) (undo-tree-id54986 . -1) (undo-tree-id54987 . -1) (undo-tree-id54988 . -1) (undo-tree-id54989 . -1) (undo-tree-id54990 . -1) (undo-tree-id54991 . -1) (undo-tree-id54992 . -1) (undo-tree-id54993 . -1) (undo-tree-id54994 . -1) (undo-tree-id54995 . -1) (undo-tree-id54996 . -1) (undo-tree-id54997 . -1) (undo-tree-id54998 . -1) (undo-tree-id54999 . -1) (undo-tree-id55000 . -1) (undo-tree-id55001 . -1) (undo-tree-id55002 . -1) (undo-tree-id55003 . -1) (undo-tree-id55004 . -1) (undo-tree-id55005 . -1) (undo-tree-id55006 . -1) (undo-tree-id55007 . -1) (t 26158 1638 222830 281000)) nil (26158 1678 229240 563000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 9035) (undo-tree-id54962 . -1) (undo-tree-id54963 . -1) (undo-tree-id54964 . -1) (undo-tree-id54965 . -1) (undo-tree-id54966 . -1) (undo-tree-id54967 . -1) (undo-tree-id54968 . -1) (undo-tree-id54969 . -1) (undo-tree-id54970 . -1) (undo-tree-id54971 . -1) (undo-tree-id54972 . -1)) nil (26158 1678 228871 601000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 9035) (undo-tree-id54960 . -1) (undo-tree-id54961 . -1)) nil (26158 1678 228849 820000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 9035) (undo-tree-id54958 . -1) (undo-tree-id54959 . -1)) nil (26158 1678 228844 164000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 9035) (undo-tree-id54956 . -1) (undo-tree-id54957 . -1)) nil (26158 1678 228838 779000) 0 nil])
([nil nil ((9035 . 9036)) nil (26158 1678 228833 578000) 0 nil])
([nil nil ((#("black" 0 5 (fontified t)) . 8990) (undo-tree-id54954 . -4) (undo-tree-id54955 . -5)) nil (26158 1678 228831 432000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8990) (undo-tree-id54953 . -1)) nil (26158 1678 228825 190000) 0 nil])
([nil nil ((#("rectangle" 0 9 (fontified t)) . 8990) (undo-tree-id54951 . -8) (undo-tree-id54952 . -9)) nil (26158 1678 228819 180000) 0 nil])
([nil current ((8985 . 8995) (#("make_r" 0 6 (fontified nil)) . 8985) (8985 . 8991) (#("make_robot" 0 10 (fontified nil)) . -8985) (8985 . 8995) (#("make_r" 0 6 (fontified t)) . -8985) (undo-tree-id54778 . -5) (undo-tree-id54779 . -5) (undo-tree-id54780 . -6) (undo-tree-id54781 . -6) (undo-tree-id54782 . -5) (undo-tree-id54783 . -5) (undo-tree-id54784 . -5) (undo-tree-id54785 . -5) (undo-tree-id54786 . -5) (undo-tree-id54787 . -5) (undo-tree-id54788 . -5) (undo-tree-id54789 . -5) (undo-tree-id54790 . -5) (undo-tree-id54791 . -5) (undo-tree-id54792 . -5) (undo-tree-id54793 . -5) (undo-tree-id54794 . -5) (undo-tree-id54795 . -5) (undo-tree-id54796 . -5) (undo-tree-id54797 . -5) (undo-tree-id54798 . -5) (undo-tree-id54799 . -5) (undo-tree-id54800 . -5) (undo-tree-id54801 . -5) (undo-tree-id54802 . -5) (undo-tree-id54803 . -5) (undo-tree-id54804 . -5) (undo-tree-id54805 . -5) (undo-tree-id54806 . -5) (undo-tree-id54807 . -5) (undo-tree-id54808 . -5) (undo-tree-id54809 . -5) (undo-tree-id54810 . -5) (undo-tree-id54811 . -5) (undo-tree-id54812 . -5) (undo-tree-id54813 . -5) (undo-tree-id54814 . -5) (undo-tree-id54815 . -5) (undo-tree-id54816 . -5) (undo-tree-id54817 . -5) (undo-tree-id54818 . -5) (undo-tree-id54819 . -5) (undo-tree-id54820 . -5) (undo-tree-id54821 . -5) (undo-tree-id54822 . -5) (undo-tree-id54823 . -5) (undo-tree-id54824 . -5) (undo-tree-id54825 . -5) (undo-tree-id54826 . -5) (undo-tree-id54827 . -5) (undo-tree-id54828 . -5) (undo-tree-id54829 . -5) (undo-tree-id54830 . -5) (undo-tree-id54831 . -5) (undo-tree-id54832 . -5) (undo-tree-id54833 . -5) (undo-tree-id54834 . -5) (undo-tree-id54835 . -5) (undo-tree-id54836 . -5) (undo-tree-id54837 . -5) (undo-tree-id54838 . -5) (undo-tree-id54839 . -5) (undo-tree-id54840 . -5) (undo-tree-id54841 . -5) (undo-tree-id54842 . -5) (undo-tree-id54843 . -5) (undo-tree-id54844 . -5) (undo-tree-id54845 . -5) (undo-tree-id54846 . -5) (undo-tree-id54847 . -5) (undo-tree-id54848 . -5) (undo-tree-id54849 . -5) (undo-tree-id54850 . -5) (undo-tree-id54851 . -5) (undo-tree-id54852 . -5) (undo-tree-id54853 . -5) (undo-tree-id54854 . -5) (undo-tree-id54855 . -5) (undo-tree-id54856 . -5) (undo-tree-id54857 . -5) (undo-tree-id54858 . -5) (undo-tree-id54859 . -5) (undo-tree-id54860 . -5) (undo-tree-id54861 . -5) (undo-tree-id54862 . -5) (undo-tree-id54863 . -5) (undo-tree-id54864 . -5) (undo-tree-id54865 . -5) (undo-tree-id54866 . -5) (undo-tree-id54867 . -5) (undo-tree-id54868 . -5) (undo-tree-id54869 . -5) (undo-tree-id54870 . -6) (undo-tree-id54871 . -6) (undo-tree-id54872 . -6) (undo-tree-id54873 . -6) (undo-tree-id54874 . -6) (undo-tree-id54875 . -6) (undo-tree-id54876 . -6) (undo-tree-id54877 . -6) (undo-tree-id54878 . -6) (undo-tree-id54879 . -6) (undo-tree-id54880 . -6) (undo-tree-id54881 . -6) (undo-tree-id54882 . -6) (undo-tree-id54883 . -6) (undo-tree-id54884 . -6) (undo-tree-id54885 . -6) (undo-tree-id54886 . -6) (undo-tree-id54887 . -6) (undo-tree-id54888 . -6) (undo-tree-id54889 . -6) (undo-tree-id54890 . -6) (undo-tree-id54891 . -6) (undo-tree-id54892 . -6) (undo-tree-id54893 . -6) (undo-tree-id54894 . -6) (undo-tree-id54895 . -6) (undo-tree-id54896 . -6) (undo-tree-id54897 . -6) (undo-tree-id54898 . -6) (undo-tree-id54899 . -6) (undo-tree-id54900 . -6) (undo-tree-id54901 . -6) (undo-tree-id54902 . -6) (undo-tree-id54903 . -6) (undo-tree-id54904 . -6) (undo-tree-id54905 . -6) (undo-tree-id54906 . -6) (undo-tree-id54907 . -6) (undo-tree-id54908 . -6) (undo-tree-id54909 . -6) (undo-tree-id54910 . -6) (undo-tree-id54911 . -6) (undo-tree-id54912 . -6) (undo-tree-id54913 . -6) (undo-tree-id54914 . -6) (undo-tree-id54915 . -6) (undo-tree-id54916 . -6) (undo-tree-id54917 . -6) (undo-tree-id54918 . -6) (undo-tree-id54919 . -6) (undo-tree-id54920 . -6) (undo-tree-id54921 . -6) (undo-tree-id54922 . -6) (undo-tree-id54923 . -6) (undo-tree-id54924 . -6) (undo-tree-id54925 . -6) (undo-tree-id54926 . -6) (undo-tree-id54927 . -6) (undo-tree-id54928 . -6) (undo-tree-id54929 . -6) (undo-tree-id54930 . -6) (undo-tree-id54931 . -6) (undo-tree-id54932 . -6) (undo-tree-id54933 . -6) (undo-tree-id54934 . -6) (undo-tree-id54935 . -6) (undo-tree-id54936 . -6) (undo-tree-id54937 . -6) (undo-tree-id54938 . -6) (undo-tree-id54939 . -6) (undo-tree-id54940 . -6) (undo-tree-id54941 . -6) (undo-tree-id54942 . -6) (undo-tree-id54943 . -6) (undo-tree-id54944 . -6) (undo-tree-id54945 . -6) (undo-tree-id54946 . -6) (undo-tree-id54947 . -6) (undo-tree-id54948 . -6) (undo-tree-id54949 . -6) (undo-tree-id54950 . -6) 8991 (8990 . 8991)) nil (26158 1678 228787 15000) 0 nil])
nil
